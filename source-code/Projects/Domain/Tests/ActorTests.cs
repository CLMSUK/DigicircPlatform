// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.BoTesting.Tests.Common;
using DigicircMatchmaking.DAL;

namespace DigicircMatchmaking.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for ActorTest and is intended
    ///to contain all ActorTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("Actor Repository Tests")]
    [Category("Actor Repository Tests")]
    internal class ActorTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `Actor`")]
        [Order(0)]
        public void Actor_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _actors_address_company = new DigicircMatchmaking.BO.Address
            {
                Latitude = 222.222d,
                Longitude = 222.222d,
                StreetName = "Address_StreetName",
                Number = "Address_Number",
                Town = "Address_Town",
                Zip = "Address_Zip",
                Alias = "Address_Alias",
            };
            var _actors_addedby_company = new DigicircMatchmaking.BO.DigicircUser
            {
                FirstName = "DigicircUser_FirstName",
                LastName = "DigicircUser_LastName",
                SubscribeToNewsLetter = true,
                UserName = "c0bd6faf-1cda-4e7e-95eb-a539d25296a1DigicircUser_UserName",
                PasswordHash = "DigicircUser_PasswordHash",
                SecurityStamp = "DigicircUser_SecurityStamp",
                EmailConfirmed = true,
                LockoutEnabled = true,
                PhoneNumberConfirmed = true,
                TwoFactorEnabled = true,
                AccessFailedCount = 9128,
                Name = "DigicircUser_Name",
                Email = "DigicircUser_Email",
                PhoneNumber = "DigicircUser_PhoneNumber",
                LockoutEndDate = now,
            };
            var _actors_circulareconomyrequirements_actor = new DigicircMatchmaking.BO.CircularEconomyReport
            {
                ExperienceInCircularEconomy = true,
                SpecifyExperienceInCircularEconomy = "CircularEconomyReport_SpecifyExperienceInCircularEconomy",
                DigitalProviredNeeded = true,
                ThematicExpertiseNeeded = true,
            };
            var _actors_circulareconomyproviderreport_actor = new DigicircMatchmaking.BO.CircularEconomyProviderReport
            {
                AvailableTestingFacilities = true,
            };
            var _actors_actorlogo_actor = new DigicircMatchmaking.BO.FileData
            {
                FileName = "FileData_FileName",
                FolderPath = "FileData_FolderPath",
                MaxFileSize = 2601,
                AllowedExtensions = "FileData_AllowedExtensions",
                Blob = (new System.Text.ASCIIEncoding()).GetBytes("TestValue_Blob"),
                UploadedBy = "FileData_UploadedBy",
                UploadDateTime = now,
                Description = "FileData_Description",
            };
            var _actors_cluster_actors = new DigicircMatchmaking.BO.Actor
            {
                Name = "Actor_Name",
                Description = "Actor_Description",
                Url = "Actor_Url",
                Email = "Actor_Email",
                SpecifiedEnityType = "Actor_SpecifiedEnityType",
                MemberOfCluster = true,
                ClusterName = "Actor_ClusterName",
                Keywords = "Actor_Keywords",
                HasSites = true,
            };
            var _actors_actors_cluster = new DigicircMatchmaking.BO.Actor
            {
                Name = "Actor_Name",
                Description = "Actor_Description",
                Url = "Actor_Url",
                Email = "Actor_Email",
                SpecifiedEnityType = "Actor_SpecifiedEnityType",
                MemberOfCluster = true,
                ClusterName = "Actor_ClusterName",
                Keywords = "Actor_Keywords",
                HasSites = true,
            };
            var _actors_actors_cluster2 = new DigicircMatchmaking.BO.Actor
            {
                Name = "Actor_Name",
                Description = "Actor_Description",
                Url = "Actor_Url",
                Email = "Actor_Email",
                SpecifiedEnityType = "Actor_SpecifiedEnityType",
                MemberOfCluster = true,
                ClusterName = "Actor_ClusterName",
                Keywords = "Actor_Keywords",
                HasSites = true,
            };
            var _actors_administrators_actorscanmanage = new DigicircMatchmaking.BO.DigicircUser
            {
                FirstName = "DigicircUser_FirstName",
                LastName = "DigicircUser_LastName",
                SubscribeToNewsLetter = true,
                UserName = "6a237abe-3168-4d8f-9cc5-2f741d335ff4DigicircUser_UserName",
                PasswordHash = "DigicircUser_PasswordHash",
                SecurityStamp = "DigicircUser_SecurityStamp",
                EmailConfirmed = true,
                LockoutEnabled = true,
                PhoneNumberConfirmed = true,
                TwoFactorEnabled = true,
                AccessFailedCount = 407,
                Name = "DigicircUser_Name",
                Email = "DigicircUser_Email",
                PhoneNumber = "DigicircUser_PhoneNumber",
                LockoutEndDate = now,
            };
            var _actors_administrators_actorscanmanage2 = new DigicircMatchmaking.BO.DigicircUser
            {
                FirstName = "DigicircUser_FirstName",
                LastName = "DigicircUser_LastName",
                SubscribeToNewsLetter = true,
                UserName = "2d53c927-4bce-45c8-a7ff-563ae5d01862DigicircUser_UserName",
                PasswordHash = "DigicircUser_PasswordHash",
                SecurityStamp = "DigicircUser_SecurityStamp",
                EmailConfirmed = true,
                LockoutEnabled = true,
                PhoneNumberConfirmed = true,
                TwoFactorEnabled = true,
                AccessFailedCount = 3253,
                Name = "DigicircUser_Name",
                Email = "DigicircUser_Email",
                PhoneNumber = "DigicircUser_PhoneNumber",
                LockoutEndDate = now,
            };
            var _actors_sites_actor = new DigicircMatchmaking.BO.Address
            {
                Latitude = 222.222d,
                Longitude = 222.222d,
                StreetName = "Address_StreetName",
                Number = "Address_Number",
                Town = "Address_Town",
                Zip = "Address_Zip",
                Alias = "Address_Alias",
            };
            var _actors_sites_actor2 = new DigicircMatchmaking.BO.Address
            {
                Latitude = 222.222d,
                Longitude = 222.222d,
                StreetName = "Address_StreetName",
                Number = "Address_Number",
                Town = "Address_Town",
                Zip = "Address_Zip",
                Alias = "Address_Alias",
            };
            var _valuelist_entitytype_actor = new DigicircMatchmaking.BO.EntityType
            {
                IsProvider = true,
                IsCluster = true,
                Code = "EntityType_Code",
                Value = "EntityType_Value",
            };
            var _valuelist_sectortypes_actor = new DigicircMatchmaking.BO.SectorType
            {
                Code = "SectorType_Code",
                Value = "SectorType_Value",
            };
            var _valuelist_sectortypes_actor2 = new DigicircMatchmaking.BO.SectorType
            {
                Code = "SectorType_Code",
                Value = "SectorType_Value",
            };
            new PersistenceSpecification<DigicircMatchmaking.BO.Actor>(Session)
            .CheckProperty(p => p.Name, "Actor_Name")
            .CheckProperty(p => p.Description, "Actor_Description")
            .CheckProperty(p => p.Url, "Actor_Url")
            .CheckProperty(p => p.Email, "Actor_Email")
            .CheckProperty(p => p.SpecifiedEnityType, "Actor_SpecifiedEnityType")
            .CheckProperty(p => p.MemberOfCluster, true)
            .CheckProperty(p => p.ClusterName, "Actor_ClusterName")
            .CheckProperty(p => p.Keywords, "Actor_Keywords")
            .CheckProperty(p => p.HasSites, true)
            .CheckReference(p => p.Address, _actors_address_company)
            .CheckReference(p => p.AddedBy, _actors_addedby_company)
            .CheckReference(p => p.CircularEconomyRequirements, _actors_circulareconomyrequirements_actor)
            .CheckReference(p => p.CircularEconomyProviderReport, _actors_circulareconomyproviderreport_actor)
            .CheckReference(p => p.ActorLogo, _actors_actorlogo_actor)
            .CheckReference(p => p.Cluster, _actors_cluster_actors)
            .CheckBag(p => p.Actors, (new List<DigicircMatchmaking.BO.Actor>
            {
                _actors_actors_cluster,
                _actors_actors_cluster2
            }))
            .CheckBag(p => p.Administrators, (new List<DigicircMatchmaking.BO.DigicircUser>
            {
                _actors_administrators_actorscanmanage,
                _actors_administrators_actorscanmanage2
            }))
            .CheckBag(p => p.Sites, (new List<DigicircMatchmaking.BO.Address>
            {
                _actors_sites_actor,
                _actors_sites_actor2
            }))
            .CheckReference(p => p.EntityType, _valuelist_entitytype_actor)
            .CheckBag(p => p.SectorTypes, (new List<DigicircMatchmaking.BO.SectorType>
            {
                _valuelist_sectortypes_actor,
                _valuelist_sectortypes_actor2
            }))
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `Actor`")]
        [Order(1)]
        public void Actor_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DigicircMatchmaking.BO.Actor> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DigicircMatchmaking.BO.Actor>(
                              a => true
                              && (a.Name != string.Empty && a.Name != null)
                              && (a.Description != string.Empty && a.Description != null)
                              && (a.Url != string.Empty && a.Url != null)
                              && (a.Email != string.Empty && a.Email != null)
                              && (a.SpecifiedEnityType != string.Empty && a.SpecifiedEnityType != null)
                              && !a.MemberOfCluster
                              && (a.ClusterName != string.Empty && a.ClusterName != null)
                              && (a.Keywords != string.Empty && a.Keywords != null)
                              && !a.HasSites
                              && a.Address != null
                              && a.AddedBy != null
                              && a.CircularEconomyRequirements != null
                              && a.CircularEconomyProviderReport != null
                              && a.ActorLogo != null
                              && a.Cluster != null
                              && a.Actors.Any()
                              && a.Administrators.Any()
                              && a.Sites.Any()
                              && a.EntityType != null
                              && a.SectorTypes.Any()
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}