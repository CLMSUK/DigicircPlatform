// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.BoTesting.Tests.Common;
using DigicircMatchmaking.DAL;

namespace DigicircMatchmaking.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for CircularEconomyReportTest and is intended
    ///to contain all CircularEconomyReportTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("CircularEconomyReport Repository Tests")]
    [Category("CircularEconomyReport Repository Tests")]
    internal class CircularEconomyReportTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `CircularEconomyReport`")]
        [Order(0)]
        public void CircularEconomyReport_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _actors_desiredthematicexpertises_circulareconomyinformation = new DigicircMatchmaking.BO.ThematicExpertise
            {
                Code = "ThematicExpertise_Code",
                Value = "ThematicExpertise_Value",
            };
            var _actors_desiredthematicexpertises_circulareconomyinformation2 = new DigicircMatchmaking.BO.ThematicExpertise
            {
                Code = "ThematicExpertise_Code",
                Value = "ThematicExpertise_Value",
            };
            var _actors_desiredsmesector_circulareconomyinformation = new DigicircMatchmaking.BO.SectorType
            {
                Code = "SectorType_Code",
                Value = "SectorType_Value",
            };
            var _actors_desiredgeographicalarea_circulareconomyinformation = new DigicircMatchmaking.BO.GeographicalArea
            {
            };
            var _actors_desiredgeographicalarea_circulareconomyinformation2 = new DigicircMatchmaking.BO.GeographicalArea
            {
            };
            var _actors_resources_circulareconomyreport = new DigicircMatchmaking.BO.Product
            {
                Quantity = 9798,
                ValidFrom = now,
                ValidTo = now,
                IsHazardous = true,
                IsDesired = true,
            };
            var _actors_resources_circulareconomyreport2 = new DigicircMatchmaking.BO.Product
            {
                Quantity = 1730,
                ValidFrom = now,
                ValidTo = now,
                IsHazardous = true,
                IsDesired = true,
            };
            var _actors_desiredresources_circulareconomyreport_1 = new DigicircMatchmaking.BO.Product
            {
                Quantity = 9000,
                ValidFrom = now,
                ValidTo = now,
                IsHazardous = true,
                IsDesired = true,
            };
            var _actors_desiredresources_circulareconomyreport_12 = new DigicircMatchmaking.BO.Product
            {
                Quantity = 8193,
                ValidFrom = now,
                ValidTo = now,
                IsHazardous = true,
                IsDesired = true,
            };
            new PersistenceSpecification<DigicircMatchmaking.BO.CircularEconomyReport>(Session)
            .CheckProperty(p => p.ExperienceInCircularEconomy, true)
            .CheckProperty(p => p.SpecifyExperienceInCircularEconomy, "CircularEconomyReport_SpecifyExperienceInCircularEconomy")
            .CheckProperty(p => p.DigitalProviredNeeded, true)
            .CheckProperty(p => p.ThematicExpertiseNeeded, true)
            .CheckBag(p => p.DesiredThematicExpertises, (new List<DigicircMatchmaking.BO.ThematicExpertise>
            {
                _actors_desiredthematicexpertises_circulareconomyinformation,
                _actors_desiredthematicexpertises_circulareconomyinformation2
            }))
            .CheckReference(p => p.DesiredSMESector, _actors_desiredsmesector_circulareconomyinformation)
            .CheckBag(p => p.DesiredGeographicalArea, (new List<DigicircMatchmaking.BO.GeographicalArea>
            {
                _actors_desiredgeographicalarea_circulareconomyinformation,
                _actors_desiredgeographicalarea_circulareconomyinformation2
            }))
            .CheckBag(p => p.Resources, (new List<DigicircMatchmaking.BO.Product>
            {
                _actors_resources_circulareconomyreport,
                _actors_resources_circulareconomyreport2
            }))
            .CheckBag(p => p.DesiredResources, (new List<DigicircMatchmaking.BO.Product>
            {
                _actors_desiredresources_circulareconomyreport_1,
                _actors_desiredresources_circulareconomyreport_12
            }))
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `CircularEconomyReport`")]
        [Order(1)]
        public void CircularEconomyReport_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DigicircMatchmaking.BO.CircularEconomyReport> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DigicircMatchmaking.BO.CircularEconomyReport>(
                              a => true
                              && !a.ExperienceInCircularEconomy
                              && (a.SpecifyExperienceInCircularEconomy != string.Empty && a.SpecifyExperienceInCircularEconomy != null)
                              && a.DigitalExpertise == DigicircMatchmaking.BO.DigitalExpertise.None
                              && !a.DigitalProviredNeeded
                              && !a.ThematicExpertiseNeeded
                              && a.DesiredThematicExpertises.Any()
                              && a.DesiredSMESector != null
                              && a.DesiredGeographicalArea.Any()
                              && a.Resources.Any()
                              && a.DesiredResources.Any()
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}