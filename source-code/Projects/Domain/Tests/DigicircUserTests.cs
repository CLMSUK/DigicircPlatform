// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.BoTesting.Tests.Common;
using DigicircMatchmaking.DAL;

namespace DigicircMatchmaking.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for DigicircUserTest and is intended
    ///to contain all DigicircUserTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("DigicircUser Repository Tests")]
    [Category("DigicircUser Repository Tests")]
    internal class DigicircUserTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `DigicircUser`")]
        [Order(0)]
        public void DigicircUser_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            new PersistenceSpecification<DigicircMatchmaking.BO.DigicircUser>(Session)
            .CheckProperty(p => p.FirstName, "DigicircUser_FirstName")
            .CheckProperty(p => p.LastName, "DigicircUser_LastName")
            .CheckProperty(p => p.SubscribeToNewsLetter, true)
            .CheckProperty(p => p.UserName, "6d8858d3-a75e-42af-b680-cced6bc50a3dDigicircUser_UserName")
            .CheckProperty(p => p.PasswordHash, "DigicircUser_PasswordHash")
            .CheckProperty(p => p.SecurityStamp, "DigicircUser_SecurityStamp")
            .CheckProperty(p => p.EmailConfirmed, true)
            .CheckProperty(p => p.LockoutEnabled, true)
            .CheckProperty(p => p.PhoneNumberConfirmed, true)
            .CheckProperty(p => p.TwoFactorEnabled, true)
            .CheckProperty(p => p.AccessFailedCount, 7446)
            .CheckProperty(p => p.Name, "DigicircUser_Name")
            .CheckProperty(p => p.Email, "DigicircUser_Email")
            .CheckProperty(p => p.PhoneNumber, "DigicircUser_PhoneNumber")
            .CheckProperty(p => p.LockoutEndDate, now)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `DigicircUser`")]
        [Order(1)]
        public void DigicircUser_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DigicircMatchmaking.BO.DigicircUser> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DigicircMatchmaking.BO.DigicircUser>(
                              a => true
                              && (a.FirstName != string.Empty && a.FirstName != null)
                              && (a.LastName != string.Empty && a.LastName != null)
                              && !a.SubscribeToNewsLetter
                              && (a.UserName != string.Empty && a.UserName != null)
                              && (a.PasswordHash != string.Empty && a.PasswordHash != null)
                              && (a.SecurityStamp != string.Empty && a.SecurityStamp != null)
                              && !a.EmailConfirmed
                              && !a.LockoutEnabled
                              && !a.PhoneNumberConfirmed
                              && !a.TwoFactorEnabled
                              && (a.AccessFailedCount + 123 > 0)
                              && (a.Name != string.Empty && a.Name != null)
                              && (a.Email != string.Empty && a.Email != null)
                              && (a.PhoneNumber != string.Empty && a.PhoneNumber != null)
                              && a.LockoutEndDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}