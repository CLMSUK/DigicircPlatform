// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.BoTesting.Tests.Common;
using DigicircMatchmaking.DAL;

namespace DigicircMatchmaking.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for MaterialTest and is intended
    ///to contain all MaterialTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("Material Repository Tests")]
    [Category("Material Repository Tests")]
    internal class MaterialTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `Material`")]
        [Order(0)]
        public void Material_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _materialsbase_convertedby_product = new DigicircMatchmaking.BO.Process
            {
                Name = "Process_Name",
                Notes = "Process_Notes",
                Ref = "Process_Ref",
                EnvironmentalEffects = "Process_EnvironmentalEffects",
                ShortEnvironmentalEffects = "Process_ShortEnvironmentalEffects",
            };
            var _materialsbase_convertedby_product2 = new DigicircMatchmaking.BO.Process
            {
                Name = "Process_Name",
                Notes = "Process_Notes",
                Ref = "Process_Ref",
                EnvironmentalEffects = "Process_EnvironmentalEffects",
                ShortEnvironmentalEffects = "Process_ShortEnvironmentalEffects",
            };
            var _materialsbase_convertby_source = new DigicircMatchmaking.BO.Process
            {
                Name = "Process_Name",
                Notes = "Process_Notes",
                Ref = "Process_Ref",
                EnvironmentalEffects = "Process_EnvironmentalEffects",
                ShortEnvironmentalEffects = "Process_ShortEnvironmentalEffects",
            };
            var _materialsbase_convertby_source2 = new DigicircMatchmaking.BO.Process
            {
                Name = "Process_Name",
                Notes = "Process_Notes",
                Ref = "Process_Ref",
                EnvironmentalEffects = "Process_EnvironmentalEffects",
                ShortEnvironmentalEffects = "Process_ShortEnvironmentalEffects",
            };
            var _materialsbase_requestedby_material = new DigicircMatchmaking.BO.DigicircUser
            {
                FirstName = "DigicircUser_FirstName",
                LastName = "DigicircUser_LastName",
                SubscribeToNewsLetter = true,
                UserName = "8420ba17-2cfb-469c-a507-29506699bffdDigicircUser_UserName",
                PasswordHash = "DigicircUser_PasswordHash",
                SecurityStamp = "DigicircUser_SecurityStamp",
                EmailConfirmed = true,
                LockoutEnabled = true,
                PhoneNumberConfirmed = true,
                TwoFactorEnabled = true,
                AccessFailedCount = 7368,
                Name = "DigicircUser_Name",
                Email = "DigicircUser_Email",
                PhoneNumber = "DigicircUser_PhoneNumber",
                LockoutEndDate = now,
            };
            var _materialsbase_type_material = new DigicircMatchmaking.BO.ProductType
            {
                Name = "ProductType_Name",
            };
            var _materialsbase_physicalform_material = new DigicircMatchmaking.BO.PhysicalForm
            {
                Code = "PhysicalForm_Code",
                Value = "PhysicalForm_Value",
            };
            var _materialsbase_unitofmeasurement_material = new DigicircMatchmaking.BO.UnitOfMeasurement
            {
                Code = "UnitOfMeasurement_Code",
                Value = "UnitOfMeasurement_Value",
            };
            new PersistenceSpecification<DigicircMatchmaking.BO.Material>(Session)
            .CheckProperty(p => p.Name, "Material_Name")
            .CheckProperty(p => p.Description, "Material_Description")
            .CheckProperty(p => p.HsSpecific, "Material_HsSpecific")
            .CheckProperty(p => p.PendingGraph, true)
            .CheckProperty(p => p.IsHazardous, true)
            .CheckBag(p => p.ConvertedBy, (new List<DigicircMatchmaking.BO.Process>
            {
                _materialsbase_convertedby_product,
                _materialsbase_convertedby_product2
            }))
            .CheckBag(p => p.ConvertBy, (new List<DigicircMatchmaking.BO.Process>
            {
                _materialsbase_convertby_source,
                _materialsbase_convertby_source2
            }))
            .CheckReference(p => p.RequestedBy, _materialsbase_requestedby_material)
            .CheckReference(p => p.Type, _materialsbase_type_material)
            .CheckReference(p => p.PhysicalForm, _materialsbase_physicalform_material)
            .CheckReference(p => p.UnitOfMeasurement, _materialsbase_unitofmeasurement_material)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `Material`")]
        [Order(1)]
        public void Material_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DigicircMatchmaking.BO.Material> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DigicircMatchmaking.BO.Material>(
                              a => true
                              && (a.Name != string.Empty && a.Name != null)
                              && (a.Description != string.Empty && a.Description != null)
                              && (a.HsSpecific != string.Empty && a.HsSpecific != null)
                              && !a.PendingGraph
                              && !a.IsHazardous
                              && a.ConvertedBy.Any()
                              && a.ConvertBy.Any()
                              && a.RequestedBy != null
                              && a.Type != null
                              && a.PhysicalForm != null
                              && a.UnitOfMeasurement != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}