// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.BoTesting.Tests.Common;
using DigicircMatchmaking.DAL;

namespace DigicircMatchmaking.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for CircularEconomyProviderReportTest and is intended
    ///to contain all CircularEconomyProviderReportTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("CircularEconomyProviderReport Repository Tests")]
    [Category("CircularEconomyProviderReport Repository Tests")]
    internal class CircularEconomyProviderReportTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `CircularEconomyProviderReport`")]
        [Order(0)]
        public void CircularEconomyProviderReport_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _actors_placeoperates_circulareconomyproviderreport = new DigicircMatchmaking.BO.GeographicalArea
            {
            };
            var _actors_placeoperates_circulareconomyproviderreport2 = new DigicircMatchmaking.BO.GeographicalArea
            {
            };
            var _actors_thematicexpertises_circulareconomyproviderreport = new DigicircMatchmaking.BO.ThematicExpertise
            {
                Code = "ThematicExpertise_Code",
                Value = "ThematicExpertise_Value",
            };
            var _actors_thematicexpertises_circulareconomyproviderreport2 = new DigicircMatchmaking.BO.ThematicExpertise
            {
                Code = "ThematicExpertise_Code",
                Value = "ThematicExpertise_Value",
            };
            var _actors_servicesprovided_circulareconomyproviderreport = new DigicircMatchmaking.BO.Services
            {
                Code = "Services_Code",
                Value = "Services_Value",
            };
            var _actors_servicesprovided_circulareconomyproviderreport2 = new DigicircMatchmaking.BO.Services
            {
                Code = "Services_Code",
                Value = "Services_Value",
            };
            var _actors_expertises_circulareconomyproviderreport = new DigicircMatchmaking.BO.Expertise
            {
                Code = "Expertise_Code",
                Value = "Expertise_Value",
            };
            var _actors_expertises_circulareconomyproviderreport2 = new DigicircMatchmaking.BO.Expertise
            {
                Code = "Expertise_Code",
                Value = "Expertise_Value",
            };
            new PersistenceSpecification<DigicircMatchmaking.BO.CircularEconomyProviderReport>(Session)
            .CheckProperty(p => p.AvailableTestingFacilities, true)
            .CheckBag(p => p.PlaceOperates, (new List<DigicircMatchmaking.BO.GeographicalArea>
            {
                _actors_placeoperates_circulareconomyproviderreport,
                _actors_placeoperates_circulareconomyproviderreport2
            }))
            .CheckBag(p => p.ThematicExpertises, (new List<DigicircMatchmaking.BO.ThematicExpertise>
            {
                _actors_thematicexpertises_circulareconomyproviderreport,
                _actors_thematicexpertises_circulareconomyproviderreport2
            }))
            .CheckBag(p => p.ServicesProvided, (new List<DigicircMatchmaking.BO.Services>
            {
                _actors_servicesprovided_circulareconomyproviderreport,
                _actors_servicesprovided_circulareconomyproviderreport2
            }))
            .CheckBag(p => p.Expertises, (new List<DigicircMatchmaking.BO.Expertise>
            {
                _actors_expertises_circulareconomyproviderreport,
                _actors_expertises_circulareconomyproviderreport2
            }))
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `CircularEconomyProviderReport`")]
        [Order(1)]
        public void CircularEconomyProviderReport_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DigicircMatchmaking.BO.CircularEconomyProviderReport> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DigicircMatchmaking.BO.CircularEconomyProviderReport>(
                              a => true
                              && !a.AvailableTestingFacilities
                              && a.PlaceOperates.Any()
                              && a.ThematicExpertises.Any()
                              && a.ServicesProvided.Any()
                              && a.Expertises.Any()
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}