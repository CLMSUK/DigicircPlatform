// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.BoTesting.Tests.Common;
using DigicircMatchmaking.DAL;

namespace DigicircMatchmaking.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for AddressTest and is intended
    ///to contain all AddressTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("Address Repository Tests")]
    [Category("Address Repository Tests")]
    internal class AddressTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `Address`")]
        [Order(0)]
        public void Address_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _geolocation_country_address = new DigicircMatchmaking.BO.Country
            {
                Name = "Country_Name",
                ShortName = "Co",
            };
            new PersistenceSpecification<DigicircMatchmaking.BO.Address>(Session)
            .CheckProperty(p => p.Latitude, 222.222d)
            .CheckProperty(p => p.Longitude, 222.222d)
            .CheckProperty(p => p.StreetName, "Address_StreetName")
            .CheckProperty(p => p.Number, "Address_Number")
            .CheckProperty(p => p.Town, "Address_Town")
            .CheckProperty(p => p.Zip, "Address_Zip")
            .CheckProperty(p => p.Alias, "Address_Alias")
            .CheckReference(p => p.Country, _geolocation_country_address)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `Address`")]
        [Order(1)]
        public void Address_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DigicircMatchmaking.BO.Address> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DigicircMatchmaking.BO.Address>(
                              a => true
                              && (a.Latitude + 123 > 0)
                              && (a.Longitude + 123 > 0)
                              && (a.StreetName != string.Empty && a.StreetName != null)
                              && (a.Number != string.Empty && a.Number != null)
                              && (a.Town != string.Empty && a.Town != null)
                              && (a.Zip != string.Empty && a.Zip != null)
                              && (a.Alias != string.Empty && a.Alias != null)
                              && a.Country != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}