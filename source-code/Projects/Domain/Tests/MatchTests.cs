// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.BoTesting.Tests.Common;
using DigicircMatchmaking.DAL;

namespace DigicircMatchmaking.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for MatchTest and is intended
    ///to contain all MatchTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("Match Repository Tests")]
    [Category("Match Repository Tests")]
    internal class MatchTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `Match`")]
        [Order(0)]
        public void Match_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _suggestions_actoroffer_match = new DigicircMatchmaking.BO.Actor
            {
                Name = "Actor_Name",
                Description = "Actor_Description",
                Url = "Actor_Url",
                Email = "Actor_Email",
                SpecifiedEnityType = "Actor_SpecifiedEnityType",
                MemberOfCluster = true,
                ClusterName = "Actor_ClusterName",
                Keywords = "Actor_Keywords",
                HasSites = true,
            };
            var _suggestions_actorrequest_match_1 = new DigicircMatchmaking.BO.Actor
            {
                Name = "Actor_Name",
                Description = "Actor_Description",
                Url = "Actor_Url",
                Email = "Actor_Email",
                SpecifiedEnityType = "Actor_SpecifiedEnityType",
                MemberOfCluster = true,
                ClusterName = "Actor_ClusterName",
                Keywords = "Actor_Keywords",
                HasSites = true,
            };
            var _suggestions_resource_match = new DigicircMatchmaking.BO.Material
            {
                Name = "Material_Name",
                Description = "Material_Description",
                HsSpecific = "Material_HsSpecific",
                PendingGraph = true,
                IsHazardous = true,
            };
            new PersistenceSpecification<DigicircMatchmaking.BO.Match>(Session)
            .CheckProperty(p => p.ValidFrom, now)
            .CheckProperty(p => p.ValidTo, now)
            .CheckProperty(p => p.QuantityLack, 7916)
            .CheckReference(p => p.ActorOffer, _suggestions_actoroffer_match)
            .CheckReference(p => p.ActorRequest, _suggestions_actorrequest_match_1)
            .CheckReference(p => p.Resource, _suggestions_resource_match)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `Match`")]
        [Order(1)]
        public void Match_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DigicircMatchmaking.BO.Match> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DigicircMatchmaking.BO.Match>(
                              a => true
                              && a.ValidFrom.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.ValidTo.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.QuantityLack + 123 > 0)
                              && a.ActorOffer != null
                              && a.ActorRequest != null
                              && a.Resource != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}