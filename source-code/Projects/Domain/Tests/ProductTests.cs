// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.BoTesting.Tests.Common;
using DigicircMatchmaking.DAL;

namespace DigicircMatchmaking.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for ProductTest and is intended
    ///to contain all ProductTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("Product Repository Tests")]
    [Category("Product Repository Tests")]
    internal class ProductTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `Product`")]
        [Order(0)]
        public void Product_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _product_resource_product = new DigicircMatchmaking.BO.Material
            {
                Name = "Material_Name",
                Description = "Material_Description",
                HsSpecific = "Material_HsSpecific",
                PendingGraph = true,
                IsHazardous = true,
            };
            var _product_type_product = new DigicircMatchmaking.BO.ProductType
            {
                Name = "ProductType_Name",
            };
            var _product_site_product = new DigicircMatchmaking.BO.Address
            {
                Latitude = 222.222d,
                Longitude = 222.222d,
                StreetName = "Address_StreetName",
                Number = "Address_Number",
                Town = "Address_Town",
                Zip = "Address_Zip",
                Alias = "Address_Alias",
            };
            var _product_unitofmeasurement_product = new DigicircMatchmaking.BO.UnitOfMeasurement
            {
                Code = "UnitOfMeasurement_Code",
                Value = "UnitOfMeasurement_Value",
            };
            var _product_physicalform_product = new DigicircMatchmaking.BO.PhysicalForm
            {
                Code = "PhysicalForm_Code",
                Value = "PhysicalForm_Value",
            };
            new PersistenceSpecification<DigicircMatchmaking.BO.Product>(Session)
            .CheckProperty(p => p.Quantity, 8040)
            .CheckProperty(p => p.ValidFrom, now)
            .CheckProperty(p => p.ValidTo, now)
            .CheckProperty(p => p.IsHazardous, true)
            .CheckProperty(p => p.IsDesired, true)
            .CheckReference(p => p.Resource, _product_resource_product)
            .CheckReference(p => p.Type, _product_type_product)
            .CheckReference(p => p.Site, _product_site_product)
            .CheckReference(p => p.UnitOfMeasurement, _product_unitofmeasurement_product)
            .CheckReference(p => p.PhysicalForm, _product_physicalform_product)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `Product`")]
        [Order(1)]
        public void Product_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DigicircMatchmaking.BO.Product> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DigicircMatchmaking.BO.Product>(
                              a => true
                              && (a.Quantity + 123 > 0)
                              && a.ValidFrom.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.ValidTo.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && !a.IsHazardous
                              && !a.IsDesired
                              && a.Resource != null
                              && a.Type != null
                              && a.Site != null
                              && a.UnitOfMeasurement != null
                              && a.PhysicalForm != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}