// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using NHibernate.Linq;

namespace DigicircMatchmaking.DAL.Queries
{
    public abstract class AbstractRepository<TItem>
    {
        //Taken from http://sessionfactory.blogspot.gr/2011/02/getting-row-count-with-future-linq.html
        protected static NHibernate.IFutureValue<TResult> ToFutureValue<TSource, TResult>(
            IQueryable<TSource> source,
            Expression<Func<IQueryable<TSource>, TResult>> selector)
        where TResult : struct
        {

            var provider = (NHibernate.Linq.DefaultQueryProvider)source.Provider;
            var method = ((MethodCallExpression)selector.Body).Method;
            var expression = Expression.Call(null, method, source.Expression);
            return provider.ExecuteFutureValue<TResult>(expression);
        }

        protected List<TItem> Get(Expression<Func<TItem, bool>> predicate,
                                  int startRowIndex = 0,
                                  int pageSize = -1,
                                  Dictionary<Expression<Func<TItem, object>>, bool> orderBy = null)
        {
            var query = zAppDev.DotNet.Framework.Data.MiniSessionManager.Instance.Session.Query<TItem>();
            if (predicate != null)
            {
                if (predicate.Body.NodeType == ExpressionType.Constant
                        && (((ConstantExpression)predicate.Body)).Value != null)
                {
                    bool val = (bool)(((ConstantExpression)predicate.Body)).Value;
                    if (val)
                    {
                        predicate = null;
                    }
                    else
                    {
                        return new List<TItem>();
                    }
                }
            }
            IOrderedQueryable<TItem> ordered = null;
            if (predicate == null)
            {
                ordered = (IOrderedQueryable<TItem>)query;
            }
            else
            {
                ordered = (IOrderedQueryable<TItem>)query.Where(predicate);
            }
            if (orderBy != null && orderBy.Keys.Count > 0)
            {
                var first = orderBy.First();
                ordered = first.Value
                          ? ordered.OrderBy(first.Key)
                          : ordered.OrderByDescending(first.Key);
                foreach (var pair in orderBy.Skip(1))
                {
                    ordered = pair.Value
                              ? ordered.ThenBy(pair.Key)
                              : ordered.ThenByDescending(pair.Key);
                }
            }
            var items = pageSize == -1
                        ? ordered.Skip(startRowIndex).ToList()
                        : ordered.Skip(startRowIndex).Take(pageSize).ToList();
            return items;
        }

        protected List<TItem> Get(Expression<Func<TItem, bool>> predicate,
                                  int startRowIndex,
                                  int pageSize,
                                  Dictionary<Expression<Func<TItem, object>>, bool>
                                  orderBy,
                                  out int totalRecords, out IQueryable<TItem> query)
        {
            query = zAppDev.DotNet.Framework.Data.MiniSessionManager.Instance.Session.Query<TItem>();
            if (predicate != null)
            {
                if (predicate.Body.NodeType == ExpressionType.Constant
                        && (((ConstantExpression)predicate.Body)).Value != null)
                {
                    bool val = (bool)(((ConstantExpression)predicate.Body)).Value;
                    if (val)
                        predicate = null;
                    else
                    {
                        totalRecords = 0;
                        return new List<TItem>();
                    }
                }
            }
            // After NH 3.3 this Futures will supposedly support Contains. Until then perform 2 queries
            NHibernate.IFutureValue<Int32> futureCount;
            if (predicate == null)
                futureCount = ToFutureValue(query, x => x.Count());
            else
                futureCount = ToFutureValue(query.Where(predicate), x => x.Count());
            var ordered = (IOrderedQueryable<TItem>)((predicate == null)
                          ?query
                          :query.Where(predicate));
            if (orderBy != null && orderBy.Keys.Count > 0)
            {
                var first = orderBy.First();
                ordered = first.Value
                          ? ordered.OrderBy(first.Key)
                          : ordered.OrderByDescending(first.Key);
                foreach (var pair in orderBy.Skip(1))
                {
                    ordered = pair.Value
                              ? ordered.ThenBy(pair.Key)
                              : ordered.ThenByDescending(pair.Key);
                }
            }
            // After NH 3.3 this Futures will supposedly support Contains. Until then perform 2 queries
            var paged = ordered.Skip(startRowIndex).Take(pageSize).ToFuture().ToList();
            totalRecords = futureCount.Value;
            /*var paged = ordered.Skip(startRowIndex).Take(pageSize).ToList();
            var countQuery = zAppDev.DotNet.Framework.Data.MiniSessionManager.Instance.Session.Query<TItem>();
            if (predicate != null)
                countQuery = countQuery.Where(predicate);
            totalRecords = countQuery.Count();*/
            return paged;
        }

        protected List<TItem> Get(Expression<Func<TItem, bool>> predicate,
                                  int startRowIndex,
                                  int pageSize,
                                  Dictionary<Expression<Func<TItem, object>>, bool>
                                  orderBy,
                                  out int totalRecords)
        {
            IQueryable<TItem> mainQuery;
            var items = Get(predicate, startRowIndex, pageSize, orderBy, out totalRecords, out mainQuery);
            return items;
        }

        public List<TItem> GetAll(Expression<Func<TItem, bool>> predicate)
        {
            if (predicate != null)
            {
                if (predicate.Body.NodeType == ExpressionType.Constant
                        && (((ConstantExpression)predicate.Body)).Value != null)
                {
                    bool val = (bool)(((ConstantExpression)predicate.Body)).Value;
                    if (val)
                    {
                        predicate = null;
                    }
                    else
                    {
                        return new List<TItem>();
                    }
                }
            }
            if (predicate == null)
            {
                return zAppDev.DotNet.Framework.Data.MiniSessionManager.Instance.Session.Query<TItem>().ToList();
            }
            return zAppDev.DotNet.Framework.Data.MiniSessionManager.Instance.Session.Query<TItem>().Where(predicate).ToList();
        }

        public IQueryable<TItem> GetAllAsQueryable()
        {
            return zAppDev.DotNet.Framework.Data.MiniSessionManager.Instance.Session.Query<TItem>();
        }
    }
}