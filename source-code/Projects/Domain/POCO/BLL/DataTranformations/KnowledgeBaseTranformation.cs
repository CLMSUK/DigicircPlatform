// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using System.Linq;
using System.Collections.Generic;
using log4net;
using System.Collections.ObjectModel;
using System.Data;

namespace DigicircMatchmaking.BO.KnowledgeBaseDataTransformation
{
    public class Transformer
    {

        #region Transformation 'MaterialCreateRequest_To_MaterialCreateRequest'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateRequest, DigicircMatchmaking.BO.MaterialCreateRequest> MaterialCreateRequest_To_MaterialCreateRequest_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateRequest, DigicircMatchmaking.BO.MaterialCreateRequest>();
        public DigicircMatchmaking.BO.MaterialCreateRequest MaterialCreateRequest_To_MaterialCreateRequest(DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateRequest interfacesKnowledgeBaseMaterialCreateRequestInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseMaterialCreateRequestInput == null) return default(DigicircMatchmaking.BO.MaterialCreateRequest);
            // If the same Transformation has already ran, get the stored Output and return
            if(MaterialCreateRequest_To_MaterialCreateRequest_Transformations.ContainsKey(interfacesKnowledgeBaseMaterialCreateRequestInput))
            {
                return MaterialCreateRequest_To_MaterialCreateRequest_Transformations[interfacesKnowledgeBaseMaterialCreateRequestInput];
            }
            // Instantiate target root
            var domainMaterialCreateRequestOutput = new DigicircMatchmaking.BO.MaterialCreateRequest();
            // MaterialCreateRequest.Statements to MaterialCreateRequest.Statements
            domainMaterialCreateRequestOutput.Statements = interfacesKnowledgeBaseMaterialCreateRequestInput?.Statements?.Select(MaterialCreateStatements_To_MaterialCreateStatements)?.ToList();
            MaterialCreateRequest_To_MaterialCreateRequest_Transformations.Add(interfacesKnowledgeBaseMaterialCreateRequestInput, domainMaterialCreateRequestOutput);
            return domainMaterialCreateRequestOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateRequest, DigicircMatchmaking.BO.MaterialCreateRequest> MaterialCreateRequest_To_MaterialCreateRequest_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateRequest, DigicircMatchmaking.BO.MaterialCreateRequest>();
        public DigicircMatchmaking.BO.MaterialCreateRequest MaterialCreateRequest_To_MaterialCreateRequest(DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateRequest interfacesKnowledgeBaseMaterialCreateRequestInput, DigicircMatchmaking.BO.MaterialCreateRequest domainMaterialCreateRequestInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseMaterialCreateRequestInput == null) return default(DigicircMatchmaking.BO.MaterialCreateRequest);
            if(domainMaterialCreateRequestInstance == null)
                return MaterialCreateRequest_To_MaterialCreateRequest (interfacesKnowledgeBaseMaterialCreateRequestInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(MaterialCreateRequest_To_MaterialCreateRequest_MappingTransformations.ContainsKey(interfacesKnowledgeBaseMaterialCreateRequestInput))
            {
                return MaterialCreateRequest_To_MaterialCreateRequest_MappingTransformations[interfacesKnowledgeBaseMaterialCreateRequestInput];
            }
            // Instantiate target root
            var domainMaterialCreateRequestOutput = domainMaterialCreateRequestInstance;
            // MaterialCreateRequest.Statements to MaterialCreateRequest.Statements
            var Statements_Statements_MappedInstanceListCount = domainMaterialCreateRequestOutput.Statements == null ? 0 : domainMaterialCreateRequestOutput.Statements.Count();
            var Statements_Statements_InputListCount = interfacesKnowledgeBaseMaterialCreateRequestInput.Statements == null ? 0 : interfacesKnowledgeBaseMaterialCreateRequestInput.Statements.Count();
            var Statements_Statements_TemporaryOutputList = new List<DigicircMatchmaking.BO.MaterialCreateStatements>();
            if(Statements_Statements_InputListCount > 0)
            {
                int Statements_Statements_Index = 0;
                foreach(var initialItem in interfacesKnowledgeBaseMaterialCreateRequestInput.Statements)
                {
                    if(Statements_Statements_Index <= Statements_Statements_MappedInstanceListCount -1 )
                    {
                        var instancedItem = domainMaterialCreateRequestOutput.Statements[Statements_Statements_Index];
                        var transformedItem = MaterialCreateStatements_To_MaterialCreateStatements(initialItem, instancedItem);
                        if(transformedItem != null) Statements_Statements_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Statements_Statements_Index++;
                }
                domainMaterialCreateRequestOutput.Statements = Statements_Statements_TemporaryOutputList;
            }
            MaterialCreateRequest_To_MaterialCreateRequest_MappingTransformations.Add(interfacesKnowledgeBaseMaterialCreateRequestInput, domainMaterialCreateRequestOutput);
            return domainMaterialCreateRequestOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.BO.MaterialCreateRequest, DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateRequest> MaterialCreateRequest_To_MaterialCreateRequestReversed_Transformations = new Dictionary<DigicircMatchmaking.BO.MaterialCreateRequest, DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateRequest>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateRequest MaterialCreateRequest_To_MaterialCreateRequestReversed(DigicircMatchmaking.BO.MaterialCreateRequest domainMaterialCreateRequestInput)
        {
            //Leave, if there is nothing to transform
            if(domainMaterialCreateRequestInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateRequest);
            // If the same Transformation has already ran, get the stored Output and return
            if(MaterialCreateRequest_To_MaterialCreateRequestReversed_Transformations.ContainsKey(domainMaterialCreateRequestInput))
            {
                return MaterialCreateRequest_To_MaterialCreateRequestReversed_Transformations[domainMaterialCreateRequestInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseMaterialCreateRequestOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateRequest();
            // MaterialCreateRequest.Statements to MaterialCreateRequest.Statements
            interfacesKnowledgeBaseMaterialCreateRequestOutput.Statements = domainMaterialCreateRequestInput?.Statements?.Select(MaterialCreateStatements_To_MaterialCreateStatementsReversed)?.ToArray();
            MaterialCreateRequest_To_MaterialCreateRequestReversed_Transformations.Add(domainMaterialCreateRequestInput, interfacesKnowledgeBaseMaterialCreateRequestOutput);
            return interfacesKnowledgeBaseMaterialCreateRequestOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.MaterialCreateRequest, DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateRequest> MaterialCreateRequest_To_MaterialCreateRequestReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.MaterialCreateRequest, DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateRequest>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateRequest MaterialCreateRequest_To_MaterialCreateRequestReversed(DigicircMatchmaking.BO.MaterialCreateRequest domainMaterialCreateRequestInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateRequest interfacesKnowledgeBaseMaterialCreateRequestInstance)
        {
            //Leave, if there is nothing to transform
            if(domainMaterialCreateRequestInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateRequest);
            if(interfacesKnowledgeBaseMaterialCreateRequestInstance == null)
                return MaterialCreateRequest_To_MaterialCreateRequestReversed (domainMaterialCreateRequestInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(MaterialCreateRequest_To_MaterialCreateRequestReversed_MappingTransformations.ContainsKey(domainMaterialCreateRequestInput))
            {
                return MaterialCreateRequest_To_MaterialCreateRequestReversed_MappingTransformations[domainMaterialCreateRequestInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseMaterialCreateRequestOutput = interfacesKnowledgeBaseMaterialCreateRequestInstance;
            // MaterialCreateRequest.Statements to MaterialCreateRequest.Statements
            var Statements_Statements_MappedInstanceListCount = interfacesKnowledgeBaseMaterialCreateRequestOutput.Statements == null ? 0 : interfacesKnowledgeBaseMaterialCreateRequestOutput.Statements.Count();
            var Statements_Statements_InputListCount = domainMaterialCreateRequestInput.Statements == null ? 0 : domainMaterialCreateRequestInput.Statements.Count();
            var Statements_Statements_TemporaryOutputList = new List<DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateStatements>();
            if(Statements_Statements_InputListCount > 0)
            {
                int Statements_Statements_Index = 0;
                foreach(var initialItem in domainMaterialCreateRequestInput.Statements)
                {
                    if(Statements_Statements_Index <= Statements_Statements_MappedInstanceListCount -1 )
                    {
                        var instancedItem = interfacesKnowledgeBaseMaterialCreateRequestOutput.Statements[Statements_Statements_Index];
                        var transformedItem = MaterialCreateStatements_To_MaterialCreateStatementsReversed(initialItem, instancedItem);
                        if(transformedItem != null) Statements_Statements_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Statements_Statements_Index++;
                }
                interfacesKnowledgeBaseMaterialCreateRequestOutput.Statements = Statements_Statements_TemporaryOutputList.ToArray();
            }
            MaterialCreateRequest_To_MaterialCreateRequestReversed_MappingTransformations.Add(domainMaterialCreateRequestInput, interfacesKnowledgeBaseMaterialCreateRequestOutput);
            return interfacesKnowledgeBaseMaterialCreateRequestOutput;
        }

        #endregion

        #region Transformation 'MaterialCreateStatements_To_MaterialCreateStatements'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateStatements, DigicircMatchmaking.BO.MaterialCreateStatements> MaterialCreateStatements_To_MaterialCreateStatements_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateStatements, DigicircMatchmaking.BO.MaterialCreateStatements>();
        public DigicircMatchmaking.BO.MaterialCreateStatements MaterialCreateStatements_To_MaterialCreateStatements(DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateStatements interfacesKnowledgeBaseMaterialCreateStatementsInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseMaterialCreateStatementsInput == null) return default(DigicircMatchmaking.BO.MaterialCreateStatements);
            // If the same Transformation has already ran, get the stored Output and return
            if(MaterialCreateStatements_To_MaterialCreateStatements_Transformations.ContainsKey(interfacesKnowledgeBaseMaterialCreateStatementsInput))
            {
                return MaterialCreateStatements_To_MaterialCreateStatements_Transformations[interfacesKnowledgeBaseMaterialCreateStatementsInput];
            }
            // Instantiate target root
            var domainMaterialCreateStatementsOutput = new DigicircMatchmaking.BO.MaterialCreateStatements();
            // MaterialCreateStatements.Statement to MaterialCreateStatements.Statement
            domainMaterialCreateStatementsOutput.Statement = interfacesKnowledgeBaseMaterialCreateStatementsInput?.Statement;
            // MaterialCreateStatements.Parameters to MaterialCreateStatements.Parameters
            domainMaterialCreateStatementsOutput.Parameters = MaterialCreateParameters_To_MaterialCreateParameters(interfacesKnowledgeBaseMaterialCreateStatementsInput?.Parameters);
            MaterialCreateStatements_To_MaterialCreateStatements_Transformations.Add(interfacesKnowledgeBaseMaterialCreateStatementsInput, domainMaterialCreateStatementsOutput);
            return domainMaterialCreateStatementsOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateStatements, DigicircMatchmaking.BO.MaterialCreateStatements> MaterialCreateStatements_To_MaterialCreateStatements_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateStatements, DigicircMatchmaking.BO.MaterialCreateStatements>();
        public DigicircMatchmaking.BO.MaterialCreateStatements MaterialCreateStatements_To_MaterialCreateStatements(DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateStatements interfacesKnowledgeBaseMaterialCreateStatementsInput, DigicircMatchmaking.BO.MaterialCreateStatements domainMaterialCreateStatementsInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseMaterialCreateStatementsInput == null) return default(DigicircMatchmaking.BO.MaterialCreateStatements);
            if(domainMaterialCreateStatementsInstance == null)
                return MaterialCreateStatements_To_MaterialCreateStatements (interfacesKnowledgeBaseMaterialCreateStatementsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(MaterialCreateStatements_To_MaterialCreateStatements_MappingTransformations.ContainsKey(interfacesKnowledgeBaseMaterialCreateStatementsInput))
            {
                return MaterialCreateStatements_To_MaterialCreateStatements_MappingTransformations[interfacesKnowledgeBaseMaterialCreateStatementsInput];
            }
            // Instantiate target root
            var domainMaterialCreateStatementsOutput = domainMaterialCreateStatementsInstance;
            // MaterialCreateStatements.Statement to MaterialCreateStatements.Statement
            domainMaterialCreateStatementsOutput.Statement = interfacesKnowledgeBaseMaterialCreateStatementsInput?.Statement;
            // MaterialCreateStatements.Parameters to MaterialCreateStatements.Parameters
            domainMaterialCreateStatementsOutput.Parameters = MaterialCreateParameters_To_MaterialCreateParameters(interfacesKnowledgeBaseMaterialCreateStatementsInput?.Parameters);
            MaterialCreateStatements_To_MaterialCreateStatements_MappingTransformations.Add(interfacesKnowledgeBaseMaterialCreateStatementsInput, domainMaterialCreateStatementsOutput);
            return domainMaterialCreateStatementsOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.BO.MaterialCreateStatements, DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateStatements> MaterialCreateStatements_To_MaterialCreateStatementsReversed_Transformations = new Dictionary<DigicircMatchmaking.BO.MaterialCreateStatements, DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateStatements>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateStatements MaterialCreateStatements_To_MaterialCreateStatementsReversed(DigicircMatchmaking.BO.MaterialCreateStatements domainMaterialCreateStatementsInput)
        {
            //Leave, if there is nothing to transform
            if(domainMaterialCreateStatementsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateStatements);
            // If the same Transformation has already ran, get the stored Output and return
            if(MaterialCreateStatements_To_MaterialCreateStatementsReversed_Transformations.ContainsKey(domainMaterialCreateStatementsInput))
            {
                return MaterialCreateStatements_To_MaterialCreateStatementsReversed_Transformations[domainMaterialCreateStatementsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseMaterialCreateStatementsOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateStatements();
            // MaterialCreateStatements.Statement to MaterialCreateStatements.Statement
            interfacesKnowledgeBaseMaterialCreateStatementsOutput.Statement = domainMaterialCreateStatementsInput?.Statement;
            // MaterialCreateStatements.Parameters to MaterialCreateStatements.Parameters
            interfacesKnowledgeBaseMaterialCreateStatementsOutput.Parameters = MaterialCreateParameters_To_MaterialCreateParametersReversed(domainMaterialCreateStatementsInput?.Parameters);
            MaterialCreateStatements_To_MaterialCreateStatementsReversed_Transformations.Add(domainMaterialCreateStatementsInput, interfacesKnowledgeBaseMaterialCreateStatementsOutput);
            return interfacesKnowledgeBaseMaterialCreateStatementsOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.MaterialCreateStatements, DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateStatements> MaterialCreateStatements_To_MaterialCreateStatementsReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.MaterialCreateStatements, DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateStatements>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateStatements MaterialCreateStatements_To_MaterialCreateStatementsReversed(DigicircMatchmaking.BO.MaterialCreateStatements domainMaterialCreateStatementsInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateStatements interfacesKnowledgeBaseMaterialCreateStatementsInstance)
        {
            //Leave, if there is nothing to transform
            if(domainMaterialCreateStatementsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateStatements);
            if(interfacesKnowledgeBaseMaterialCreateStatementsInstance == null)
                return MaterialCreateStatements_To_MaterialCreateStatementsReversed (domainMaterialCreateStatementsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(MaterialCreateStatements_To_MaterialCreateStatementsReversed_MappingTransformations.ContainsKey(domainMaterialCreateStatementsInput))
            {
                return MaterialCreateStatements_To_MaterialCreateStatementsReversed_MappingTransformations[domainMaterialCreateStatementsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseMaterialCreateStatementsOutput = interfacesKnowledgeBaseMaterialCreateStatementsInstance;
            // MaterialCreateStatements.Statement to MaterialCreateStatements.Statement
            interfacesKnowledgeBaseMaterialCreateStatementsOutput.Statement = domainMaterialCreateStatementsInput?.Statement;
            // MaterialCreateStatements.Parameters to MaterialCreateStatements.Parameters
            interfacesKnowledgeBaseMaterialCreateStatementsOutput.Parameters = MaterialCreateParameters_To_MaterialCreateParametersReversed(domainMaterialCreateStatementsInput?.Parameters);
            MaterialCreateStatements_To_MaterialCreateStatementsReversed_MappingTransformations.Add(domainMaterialCreateStatementsInput, interfacesKnowledgeBaseMaterialCreateStatementsOutput);
            return interfacesKnowledgeBaseMaterialCreateStatementsOutput;
        }

        #endregion

        #region Transformation 'MaterialCreateParameters_To_MaterialCreateParameters'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateParameters, DigicircMatchmaking.BO.MaterialCreateParameters> MaterialCreateParameters_To_MaterialCreateParameters_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateParameters, DigicircMatchmaking.BO.MaterialCreateParameters>();
        public DigicircMatchmaking.BO.MaterialCreateParameters MaterialCreateParameters_To_MaterialCreateParameters(DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateParameters interfacesKnowledgeBaseMaterialCreateParametersInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseMaterialCreateParametersInput == null) return default(DigicircMatchmaking.BO.MaterialCreateParameters);
            // If the same Transformation has already ran, get the stored Output and return
            if(MaterialCreateParameters_To_MaterialCreateParameters_Transformations.ContainsKey(interfacesKnowledgeBaseMaterialCreateParametersInput))
            {
                return MaterialCreateParameters_To_MaterialCreateParameters_Transformations[interfacesKnowledgeBaseMaterialCreateParametersInput];
            }
            // Instantiate target root
            var domainMaterialCreateParametersOutput = new DigicircMatchmaking.BO.MaterialCreateParameters();
            // MaterialCreateParameters.Props to MaterialCreateParameters.Props
            domainMaterialCreateParametersOutput.Props = MaterialCreateProps_To_MaterialCreateProps(interfacesKnowledgeBaseMaterialCreateParametersInput?.Props);
            MaterialCreateParameters_To_MaterialCreateParameters_Transformations.Add(interfacesKnowledgeBaseMaterialCreateParametersInput, domainMaterialCreateParametersOutput);
            return domainMaterialCreateParametersOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateParameters, DigicircMatchmaking.BO.MaterialCreateParameters> MaterialCreateParameters_To_MaterialCreateParameters_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateParameters, DigicircMatchmaking.BO.MaterialCreateParameters>();
        public DigicircMatchmaking.BO.MaterialCreateParameters MaterialCreateParameters_To_MaterialCreateParameters(DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateParameters interfacesKnowledgeBaseMaterialCreateParametersInput, DigicircMatchmaking.BO.MaterialCreateParameters domainMaterialCreateParametersInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseMaterialCreateParametersInput == null) return default(DigicircMatchmaking.BO.MaterialCreateParameters);
            if(domainMaterialCreateParametersInstance == null)
                return MaterialCreateParameters_To_MaterialCreateParameters (interfacesKnowledgeBaseMaterialCreateParametersInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(MaterialCreateParameters_To_MaterialCreateParameters_MappingTransformations.ContainsKey(interfacesKnowledgeBaseMaterialCreateParametersInput))
            {
                return MaterialCreateParameters_To_MaterialCreateParameters_MappingTransformations[interfacesKnowledgeBaseMaterialCreateParametersInput];
            }
            // Instantiate target root
            var domainMaterialCreateParametersOutput = domainMaterialCreateParametersInstance;
            // MaterialCreateParameters.Props to MaterialCreateParameters.Props
            domainMaterialCreateParametersOutput.Props = MaterialCreateProps_To_MaterialCreateProps(interfacesKnowledgeBaseMaterialCreateParametersInput?.Props);
            MaterialCreateParameters_To_MaterialCreateParameters_MappingTransformations.Add(interfacesKnowledgeBaseMaterialCreateParametersInput, domainMaterialCreateParametersOutput);
            return domainMaterialCreateParametersOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.BO.MaterialCreateParameters, DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateParameters> MaterialCreateParameters_To_MaterialCreateParametersReversed_Transformations = new Dictionary<DigicircMatchmaking.BO.MaterialCreateParameters, DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateParameters>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateParameters MaterialCreateParameters_To_MaterialCreateParametersReversed(DigicircMatchmaking.BO.MaterialCreateParameters domainMaterialCreateParametersInput)
        {
            //Leave, if there is nothing to transform
            if(domainMaterialCreateParametersInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateParameters);
            // If the same Transformation has already ran, get the stored Output and return
            if(MaterialCreateParameters_To_MaterialCreateParametersReversed_Transformations.ContainsKey(domainMaterialCreateParametersInput))
            {
                return MaterialCreateParameters_To_MaterialCreateParametersReversed_Transformations[domainMaterialCreateParametersInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseMaterialCreateParametersOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateParameters();
            // MaterialCreateParameters.Props to MaterialCreateParameters.Props
            interfacesKnowledgeBaseMaterialCreateParametersOutput.Props = MaterialCreateProps_To_MaterialCreatePropsReversed(domainMaterialCreateParametersInput?.Props);
            MaterialCreateParameters_To_MaterialCreateParametersReversed_Transformations.Add(domainMaterialCreateParametersInput, interfacesKnowledgeBaseMaterialCreateParametersOutput);
            return interfacesKnowledgeBaseMaterialCreateParametersOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.MaterialCreateParameters, DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateParameters> MaterialCreateParameters_To_MaterialCreateParametersReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.MaterialCreateParameters, DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateParameters>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateParameters MaterialCreateParameters_To_MaterialCreateParametersReversed(DigicircMatchmaking.BO.MaterialCreateParameters domainMaterialCreateParametersInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateParameters interfacesKnowledgeBaseMaterialCreateParametersInstance)
        {
            //Leave, if there is nothing to transform
            if(domainMaterialCreateParametersInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateParameters);
            if(interfacesKnowledgeBaseMaterialCreateParametersInstance == null)
                return MaterialCreateParameters_To_MaterialCreateParametersReversed (domainMaterialCreateParametersInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(MaterialCreateParameters_To_MaterialCreateParametersReversed_MappingTransformations.ContainsKey(domainMaterialCreateParametersInput))
            {
                return MaterialCreateParameters_To_MaterialCreateParametersReversed_MappingTransformations[domainMaterialCreateParametersInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseMaterialCreateParametersOutput = interfacesKnowledgeBaseMaterialCreateParametersInstance;
            // MaterialCreateParameters.Props to MaterialCreateParameters.Props
            interfacesKnowledgeBaseMaterialCreateParametersOutput.Props = MaterialCreateProps_To_MaterialCreatePropsReversed(domainMaterialCreateParametersInput?.Props);
            MaterialCreateParameters_To_MaterialCreateParametersReversed_MappingTransformations.Add(domainMaterialCreateParametersInput, interfacesKnowledgeBaseMaterialCreateParametersOutput);
            return interfacesKnowledgeBaseMaterialCreateParametersOutput;
        }

        #endregion

        #region Transformation 'MaterialCreateProps_To_MaterialCreateProps'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateProps, DigicircMatchmaking.BO.MaterialCreateProps> MaterialCreateProps_To_MaterialCreateProps_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateProps, DigicircMatchmaking.BO.MaterialCreateProps>();
        public DigicircMatchmaking.BO.MaterialCreateProps MaterialCreateProps_To_MaterialCreateProps(DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateProps interfacesKnowledgeBaseMaterialCreatePropsInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseMaterialCreatePropsInput == null) return default(DigicircMatchmaking.BO.MaterialCreateProps);
            // If the same Transformation has already ran, get the stored Output and return
            if(MaterialCreateProps_To_MaterialCreateProps_Transformations.ContainsKey(interfacesKnowledgeBaseMaterialCreatePropsInput))
            {
                return MaterialCreateProps_To_MaterialCreateProps_Transformations[interfacesKnowledgeBaseMaterialCreatePropsInput];
            }
            // Instantiate target root
            var domainMaterialCreatePropsOutput = new DigicircMatchmaking.BO.MaterialCreateProps();
            // MaterialCreateProps.Name to MaterialCreateProps.Name
            domainMaterialCreatePropsOutput.Name = interfacesKnowledgeBaseMaterialCreatePropsInput?.Name;
            // MaterialCreateProps.Decription to MaterialCreateProps.Decription
            domainMaterialCreatePropsOutput.Decription = interfacesKnowledgeBaseMaterialCreatePropsInput?.Decription;
            // MaterialCreateProps.HsSpecific to MaterialCreateProps.HsSpecific
            domainMaterialCreatePropsOutput.HsSpecific = interfacesKnowledgeBaseMaterialCreatePropsInput?.HsSpecific;
            // MaterialCreateProps.Id to MaterialCreateProps.Id
            domainMaterialCreatePropsOutput.Id = interfacesKnowledgeBaseMaterialCreatePropsInput?.Id;
            MaterialCreateProps_To_MaterialCreateProps_Transformations.Add(interfacesKnowledgeBaseMaterialCreatePropsInput, domainMaterialCreatePropsOutput);
            return domainMaterialCreatePropsOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateProps, DigicircMatchmaking.BO.MaterialCreateProps> MaterialCreateProps_To_MaterialCreateProps_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateProps, DigicircMatchmaking.BO.MaterialCreateProps>();
        public DigicircMatchmaking.BO.MaterialCreateProps MaterialCreateProps_To_MaterialCreateProps(DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateProps interfacesKnowledgeBaseMaterialCreatePropsInput, DigicircMatchmaking.BO.MaterialCreateProps domainMaterialCreatePropsInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseMaterialCreatePropsInput == null) return default(DigicircMatchmaking.BO.MaterialCreateProps);
            if(domainMaterialCreatePropsInstance == null)
                return MaterialCreateProps_To_MaterialCreateProps (interfacesKnowledgeBaseMaterialCreatePropsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(MaterialCreateProps_To_MaterialCreateProps_MappingTransformations.ContainsKey(interfacesKnowledgeBaseMaterialCreatePropsInput))
            {
                return MaterialCreateProps_To_MaterialCreateProps_MappingTransformations[interfacesKnowledgeBaseMaterialCreatePropsInput];
            }
            // Instantiate target root
            var domainMaterialCreatePropsOutput = domainMaterialCreatePropsInstance;
            // MaterialCreateProps.Name to MaterialCreateProps.Name
            domainMaterialCreatePropsOutput.Name = interfacesKnowledgeBaseMaterialCreatePropsInput?.Name;
            // MaterialCreateProps.Decription to MaterialCreateProps.Decription
            domainMaterialCreatePropsOutput.Decription = interfacesKnowledgeBaseMaterialCreatePropsInput?.Decription;
            // MaterialCreateProps.HsSpecific to MaterialCreateProps.HsSpecific
            domainMaterialCreatePropsOutput.HsSpecific = interfacesKnowledgeBaseMaterialCreatePropsInput?.HsSpecific;
            // MaterialCreateProps.Id to MaterialCreateProps.Id
            domainMaterialCreatePropsOutput.Id = interfacesKnowledgeBaseMaterialCreatePropsInput?.Id;
            MaterialCreateProps_To_MaterialCreateProps_MappingTransformations.Add(interfacesKnowledgeBaseMaterialCreatePropsInput, domainMaterialCreatePropsOutput);
            return domainMaterialCreatePropsOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.BO.MaterialCreateProps, DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateProps> MaterialCreateProps_To_MaterialCreatePropsReversed_Transformations = new Dictionary<DigicircMatchmaking.BO.MaterialCreateProps, DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateProps>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateProps MaterialCreateProps_To_MaterialCreatePropsReversed(DigicircMatchmaking.BO.MaterialCreateProps domainMaterialCreatePropsInput)
        {
            //Leave, if there is nothing to transform
            if(domainMaterialCreatePropsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateProps);
            // If the same Transformation has already ran, get the stored Output and return
            if(MaterialCreateProps_To_MaterialCreatePropsReversed_Transformations.ContainsKey(domainMaterialCreatePropsInput))
            {
                return MaterialCreateProps_To_MaterialCreatePropsReversed_Transformations[domainMaterialCreatePropsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseMaterialCreatePropsOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateProps();
            // MaterialCreateProps.Name to MaterialCreateProps.Name
            interfacesKnowledgeBaseMaterialCreatePropsOutput.Name = domainMaterialCreatePropsInput?.Name;
            // MaterialCreateProps.Decription to MaterialCreateProps.Decription
            interfacesKnowledgeBaseMaterialCreatePropsOutput.Decription = domainMaterialCreatePropsInput?.Decription;
            // MaterialCreateProps.HsSpecific to MaterialCreateProps.HsSpecific
            interfacesKnowledgeBaseMaterialCreatePropsOutput.HsSpecific = domainMaterialCreatePropsInput?.HsSpecific;
            // MaterialCreateProps.Id to MaterialCreateProps.Id
            interfacesKnowledgeBaseMaterialCreatePropsOutput.Id = domainMaterialCreatePropsInput?.Id;
            MaterialCreateProps_To_MaterialCreatePropsReversed_Transformations.Add(domainMaterialCreatePropsInput, interfacesKnowledgeBaseMaterialCreatePropsOutput);
            return interfacesKnowledgeBaseMaterialCreatePropsOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.MaterialCreateProps, DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateProps> MaterialCreateProps_To_MaterialCreatePropsReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.MaterialCreateProps, DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateProps>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateProps MaterialCreateProps_To_MaterialCreatePropsReversed(DigicircMatchmaking.BO.MaterialCreateProps domainMaterialCreatePropsInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateProps interfacesKnowledgeBaseMaterialCreatePropsInstance)
        {
            //Leave, if there is nothing to transform
            if(domainMaterialCreatePropsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.MaterialCreateProps);
            if(interfacesKnowledgeBaseMaterialCreatePropsInstance == null)
                return MaterialCreateProps_To_MaterialCreatePropsReversed (domainMaterialCreatePropsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(MaterialCreateProps_To_MaterialCreatePropsReversed_MappingTransformations.ContainsKey(domainMaterialCreatePropsInput))
            {
                return MaterialCreateProps_To_MaterialCreatePropsReversed_MappingTransformations[domainMaterialCreatePropsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseMaterialCreatePropsOutput = interfacesKnowledgeBaseMaterialCreatePropsInstance;
            // MaterialCreateProps.Name to MaterialCreateProps.Name
            interfacesKnowledgeBaseMaterialCreatePropsOutput.Name = domainMaterialCreatePropsInput?.Name;
            // MaterialCreateProps.Decription to MaterialCreateProps.Decription
            interfacesKnowledgeBaseMaterialCreatePropsOutput.Decription = domainMaterialCreatePropsInput?.Decription;
            // MaterialCreateProps.HsSpecific to MaterialCreateProps.HsSpecific
            interfacesKnowledgeBaseMaterialCreatePropsOutput.HsSpecific = domainMaterialCreatePropsInput?.HsSpecific;
            // MaterialCreateProps.Id to MaterialCreateProps.Id
            interfacesKnowledgeBaseMaterialCreatePropsOutput.Id = domainMaterialCreatePropsInput?.Id;
            MaterialCreateProps_To_MaterialCreatePropsReversed_MappingTransformations.Add(domainMaterialCreatePropsInput, interfacesKnowledgeBaseMaterialCreatePropsOutput);
            return interfacesKnowledgeBaseMaterialCreatePropsOutput;
        }

        #endregion

        #region Transformation 'KnowledgeBaseResult_To_KnowledgeBaseResult'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.KnowledgeBaseResult, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResult> KnowledgeBaseResult_To_KnowledgeBaseResult_Transformations = new Dictionary<DigicircMatchmaking.BO.KnowledgeBaseResult, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResult>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResult KnowledgeBaseResult_To_KnowledgeBaseResult(DigicircMatchmaking.BO.KnowledgeBaseResult domainKnowledgeBaseResultInput)
        {
            //Leave, if there is nothing to transform
            if(domainKnowledgeBaseResultInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResult);
            // If the same Transformation has already ran, get the stored Output and return
            if(KnowledgeBaseResult_To_KnowledgeBaseResult_Transformations.ContainsKey(domainKnowledgeBaseResultInput))
            {
                return KnowledgeBaseResult_To_KnowledgeBaseResult_Transformations[domainKnowledgeBaseResultInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseKnowledgeBaseResultOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResult();
            // KnowledgeBaseResult.Results to KnowledgeBaseResult.Results
            interfacesKnowledgeBaseKnowledgeBaseResultOutput.Results = domainKnowledgeBaseResultInput?.Results?.Select(KnowledgeBaseResults_To_KnowledgeBaseResults)?.ToArray();
            KnowledgeBaseResult_To_KnowledgeBaseResult_Transformations.Add(domainKnowledgeBaseResultInput, interfacesKnowledgeBaseKnowledgeBaseResultOutput);
            return interfacesKnowledgeBaseKnowledgeBaseResultOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.KnowledgeBaseResult, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResult> KnowledgeBaseResult_To_KnowledgeBaseResult_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.KnowledgeBaseResult, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResult>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResult KnowledgeBaseResult_To_KnowledgeBaseResult(DigicircMatchmaking.BO.KnowledgeBaseResult domainKnowledgeBaseResultInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResult interfacesKnowledgeBaseKnowledgeBaseResultInstance)
        {
            //Leave, if there is nothing to transform
            if(domainKnowledgeBaseResultInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResult);
            if(interfacesKnowledgeBaseKnowledgeBaseResultInstance == null)
                return KnowledgeBaseResult_To_KnowledgeBaseResult (domainKnowledgeBaseResultInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(KnowledgeBaseResult_To_KnowledgeBaseResult_MappingTransformations.ContainsKey(domainKnowledgeBaseResultInput))
            {
                return KnowledgeBaseResult_To_KnowledgeBaseResult_MappingTransformations[domainKnowledgeBaseResultInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseKnowledgeBaseResultOutput = interfacesKnowledgeBaseKnowledgeBaseResultInstance;
            // KnowledgeBaseResult.Results to KnowledgeBaseResult.Results
            var Results_Results_MappedInstanceListCount = interfacesKnowledgeBaseKnowledgeBaseResultOutput.Results == null ? 0 : interfacesKnowledgeBaseKnowledgeBaseResultOutput.Results.Count();
            var Results_Results_InputListCount = domainKnowledgeBaseResultInput.Results == null ? 0 : domainKnowledgeBaseResultInput.Results.Count();
            var Results_Results_TemporaryOutputList = new List<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResults>();
            if(Results_Results_InputListCount > 0)
            {
                int Results_Results_Index = 0;
                foreach(var initialItem in domainKnowledgeBaseResultInput.Results)
                {
                    if(Results_Results_Index <= Results_Results_MappedInstanceListCount -1 )
                    {
                        var instancedItem = interfacesKnowledgeBaseKnowledgeBaseResultOutput.Results[Results_Results_Index];
                        var transformedItem = KnowledgeBaseResults_To_KnowledgeBaseResults(initialItem, instancedItem);
                        if(transformedItem != null) Results_Results_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Results_Results_Index++;
                }
                interfacesKnowledgeBaseKnowledgeBaseResultOutput.Results = Results_Results_TemporaryOutputList.ToArray();
            }
            KnowledgeBaseResult_To_KnowledgeBaseResult_MappingTransformations.Add(domainKnowledgeBaseResultInput, interfacesKnowledgeBaseKnowledgeBaseResultOutput);
            return interfacesKnowledgeBaseKnowledgeBaseResultOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResult, DigicircMatchmaking.BO.KnowledgeBaseResult> KnowledgeBaseResult_To_KnowledgeBaseResultReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResult, DigicircMatchmaking.BO.KnowledgeBaseResult>();
        public DigicircMatchmaking.BO.KnowledgeBaseResult KnowledgeBaseResult_To_KnowledgeBaseResultReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResult interfacesKnowledgeBaseKnowledgeBaseResultInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseKnowledgeBaseResultInput == null) return default(DigicircMatchmaking.BO.KnowledgeBaseResult);
            // If the same Transformation has already ran, get the stored Output and return
            if(KnowledgeBaseResult_To_KnowledgeBaseResultReversed_Transformations.ContainsKey(interfacesKnowledgeBaseKnowledgeBaseResultInput))
            {
                return KnowledgeBaseResult_To_KnowledgeBaseResultReversed_Transformations[interfacesKnowledgeBaseKnowledgeBaseResultInput];
            }
            // Instantiate target root
            var domainKnowledgeBaseResultOutput = new DigicircMatchmaking.BO.KnowledgeBaseResult();
            // KnowledgeBaseResult.Results to KnowledgeBaseResult.Results
            domainKnowledgeBaseResultOutput.Results = interfacesKnowledgeBaseKnowledgeBaseResultInput?.Results?.Select(KnowledgeBaseResults_To_KnowledgeBaseResultsReversed)?.ToList();
            KnowledgeBaseResult_To_KnowledgeBaseResultReversed_Transformations.Add(interfacesKnowledgeBaseKnowledgeBaseResultInput, domainKnowledgeBaseResultOutput);
            return domainKnowledgeBaseResultOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResult, DigicircMatchmaking.BO.KnowledgeBaseResult> KnowledgeBaseResult_To_KnowledgeBaseResultReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResult, DigicircMatchmaking.BO.KnowledgeBaseResult>();
        public DigicircMatchmaking.BO.KnowledgeBaseResult KnowledgeBaseResult_To_KnowledgeBaseResultReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResult interfacesKnowledgeBaseKnowledgeBaseResultInput, DigicircMatchmaking.BO.KnowledgeBaseResult domainKnowledgeBaseResultInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseKnowledgeBaseResultInput == null) return default(DigicircMatchmaking.BO.KnowledgeBaseResult);
            if(domainKnowledgeBaseResultInstance == null)
                return KnowledgeBaseResult_To_KnowledgeBaseResultReversed (interfacesKnowledgeBaseKnowledgeBaseResultInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(KnowledgeBaseResult_To_KnowledgeBaseResultReversed_MappingTransformations.ContainsKey(interfacesKnowledgeBaseKnowledgeBaseResultInput))
            {
                return KnowledgeBaseResult_To_KnowledgeBaseResultReversed_MappingTransformations[interfacesKnowledgeBaseKnowledgeBaseResultInput];
            }
            // Instantiate target root
            var domainKnowledgeBaseResultOutput = domainKnowledgeBaseResultInstance;
            // KnowledgeBaseResult.Results to KnowledgeBaseResult.Results
            var Results_Results_MappedInstanceListCount = domainKnowledgeBaseResultOutput.Results == null ? 0 : domainKnowledgeBaseResultOutput.Results.Count();
            var Results_Results_InputListCount = interfacesKnowledgeBaseKnowledgeBaseResultInput.Results == null ? 0 : interfacesKnowledgeBaseKnowledgeBaseResultInput.Results.Count();
            var Results_Results_TemporaryOutputList = new List<DigicircMatchmaking.BO.KnowledgeBaseResults>();
            if(Results_Results_InputListCount > 0)
            {
                int Results_Results_Index = 0;
                foreach(var initialItem in interfacesKnowledgeBaseKnowledgeBaseResultInput.Results)
                {
                    if(Results_Results_Index <= Results_Results_MappedInstanceListCount -1 )
                    {
                        var instancedItem = domainKnowledgeBaseResultOutput.Results[Results_Results_Index];
                        var transformedItem = KnowledgeBaseResults_To_KnowledgeBaseResultsReversed(initialItem, instancedItem);
                        if(transformedItem != null) Results_Results_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Results_Results_Index++;
                }
                domainKnowledgeBaseResultOutput.Results = Results_Results_TemporaryOutputList;
            }
            KnowledgeBaseResult_To_KnowledgeBaseResultReversed_MappingTransformations.Add(interfacesKnowledgeBaseKnowledgeBaseResultInput, domainKnowledgeBaseResultOutput);
            return domainKnowledgeBaseResultOutput;
        }

        #endregion

        #region Transformation 'KnowledgeBaseResults_To_KnowledgeBaseResults'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.KnowledgeBaseResults, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResults> KnowledgeBaseResults_To_KnowledgeBaseResults_Transformations = new Dictionary<DigicircMatchmaking.BO.KnowledgeBaseResults, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResults>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResults KnowledgeBaseResults_To_KnowledgeBaseResults(DigicircMatchmaking.BO.KnowledgeBaseResults domainKnowledgeBaseResultsInput)
        {
            //Leave, if there is nothing to transform
            if(domainKnowledgeBaseResultsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResults);
            // If the same Transformation has already ran, get the stored Output and return
            if(KnowledgeBaseResults_To_KnowledgeBaseResults_Transformations.ContainsKey(domainKnowledgeBaseResultsInput))
            {
                return KnowledgeBaseResults_To_KnowledgeBaseResults_Transformations[domainKnowledgeBaseResultsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseKnowledgeBaseResultsOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResults();
            // KnowledgeBaseResults.Data to KnowledgeBaseResults.Data
            interfacesKnowledgeBaseKnowledgeBaseResultsOutput.Data = domainKnowledgeBaseResultsInput?.Data?.Select(KnowledgeBaseData_To_KnowledgeBaseData)?.ToArray();
            KnowledgeBaseResults_To_KnowledgeBaseResults_Transformations.Add(domainKnowledgeBaseResultsInput, interfacesKnowledgeBaseKnowledgeBaseResultsOutput);
            return interfacesKnowledgeBaseKnowledgeBaseResultsOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.KnowledgeBaseResults, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResults> KnowledgeBaseResults_To_KnowledgeBaseResults_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.KnowledgeBaseResults, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResults>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResults KnowledgeBaseResults_To_KnowledgeBaseResults(DigicircMatchmaking.BO.KnowledgeBaseResults domainKnowledgeBaseResultsInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResults interfacesKnowledgeBaseKnowledgeBaseResultsInstance)
        {
            //Leave, if there is nothing to transform
            if(domainKnowledgeBaseResultsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResults);
            if(interfacesKnowledgeBaseKnowledgeBaseResultsInstance == null)
                return KnowledgeBaseResults_To_KnowledgeBaseResults (domainKnowledgeBaseResultsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(KnowledgeBaseResults_To_KnowledgeBaseResults_MappingTransformations.ContainsKey(domainKnowledgeBaseResultsInput))
            {
                return KnowledgeBaseResults_To_KnowledgeBaseResults_MappingTransformations[domainKnowledgeBaseResultsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseKnowledgeBaseResultsOutput = interfacesKnowledgeBaseKnowledgeBaseResultsInstance;
            // KnowledgeBaseResults.Data to KnowledgeBaseResults.Data
            var Data_Data_MappedInstanceListCount = interfacesKnowledgeBaseKnowledgeBaseResultsOutput.Data == null ? 0 : interfacesKnowledgeBaseKnowledgeBaseResultsOutput.Data.Count();
            var Data_Data_InputListCount = domainKnowledgeBaseResultsInput.Data == null ? 0 : domainKnowledgeBaseResultsInput.Data.Count();
            var Data_Data_TemporaryOutputList = new List<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseData>();
            if(Data_Data_InputListCount > 0)
            {
                int Data_Data_Index = 0;
                foreach(var initialItem in domainKnowledgeBaseResultsInput.Data)
                {
                    if(Data_Data_Index <= Data_Data_MappedInstanceListCount -1 )
                    {
                        var instancedItem = interfacesKnowledgeBaseKnowledgeBaseResultsOutput.Data[Data_Data_Index];
                        var transformedItem = KnowledgeBaseData_To_KnowledgeBaseData(initialItem, instancedItem);
                        if(transformedItem != null) Data_Data_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Data_Data_Index++;
                }
                interfacesKnowledgeBaseKnowledgeBaseResultsOutput.Data = Data_Data_TemporaryOutputList.ToArray();
            }
            KnowledgeBaseResults_To_KnowledgeBaseResults_MappingTransformations.Add(domainKnowledgeBaseResultsInput, interfacesKnowledgeBaseKnowledgeBaseResultsOutput);
            return interfacesKnowledgeBaseKnowledgeBaseResultsOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResults, DigicircMatchmaking.BO.KnowledgeBaseResults> KnowledgeBaseResults_To_KnowledgeBaseResultsReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResults, DigicircMatchmaking.BO.KnowledgeBaseResults>();
        public DigicircMatchmaking.BO.KnowledgeBaseResults KnowledgeBaseResults_To_KnowledgeBaseResultsReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResults interfacesKnowledgeBaseKnowledgeBaseResultsInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseKnowledgeBaseResultsInput == null) return default(DigicircMatchmaking.BO.KnowledgeBaseResults);
            // If the same Transformation has already ran, get the stored Output and return
            if(KnowledgeBaseResults_To_KnowledgeBaseResultsReversed_Transformations.ContainsKey(interfacesKnowledgeBaseKnowledgeBaseResultsInput))
            {
                return KnowledgeBaseResults_To_KnowledgeBaseResultsReversed_Transformations[interfacesKnowledgeBaseKnowledgeBaseResultsInput];
            }
            // Instantiate target root
            var domainKnowledgeBaseResultsOutput = new DigicircMatchmaking.BO.KnowledgeBaseResults();
            // KnowledgeBaseResults.Data to KnowledgeBaseResults.Data
            domainKnowledgeBaseResultsOutput.Data = interfacesKnowledgeBaseKnowledgeBaseResultsInput?.Data?.Select(KnowledgeBaseData_To_KnowledgeBaseDataReversed)?.ToList();
            KnowledgeBaseResults_To_KnowledgeBaseResultsReversed_Transformations.Add(interfacesKnowledgeBaseKnowledgeBaseResultsInput, domainKnowledgeBaseResultsOutput);
            return domainKnowledgeBaseResultsOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResults, DigicircMatchmaking.BO.KnowledgeBaseResults> KnowledgeBaseResults_To_KnowledgeBaseResultsReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResults, DigicircMatchmaking.BO.KnowledgeBaseResults>();
        public DigicircMatchmaking.BO.KnowledgeBaseResults KnowledgeBaseResults_To_KnowledgeBaseResultsReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseResults interfacesKnowledgeBaseKnowledgeBaseResultsInput, DigicircMatchmaking.BO.KnowledgeBaseResults domainKnowledgeBaseResultsInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseKnowledgeBaseResultsInput == null) return default(DigicircMatchmaking.BO.KnowledgeBaseResults);
            if(domainKnowledgeBaseResultsInstance == null)
                return KnowledgeBaseResults_To_KnowledgeBaseResultsReversed (interfacesKnowledgeBaseKnowledgeBaseResultsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(KnowledgeBaseResults_To_KnowledgeBaseResultsReversed_MappingTransformations.ContainsKey(interfacesKnowledgeBaseKnowledgeBaseResultsInput))
            {
                return KnowledgeBaseResults_To_KnowledgeBaseResultsReversed_MappingTransformations[interfacesKnowledgeBaseKnowledgeBaseResultsInput];
            }
            // Instantiate target root
            var domainKnowledgeBaseResultsOutput = domainKnowledgeBaseResultsInstance;
            // KnowledgeBaseResults.Data to KnowledgeBaseResults.Data
            var Data_Data_MappedInstanceListCount = domainKnowledgeBaseResultsOutput.Data == null ? 0 : domainKnowledgeBaseResultsOutput.Data.Count();
            var Data_Data_InputListCount = interfacesKnowledgeBaseKnowledgeBaseResultsInput.Data == null ? 0 : interfacesKnowledgeBaseKnowledgeBaseResultsInput.Data.Count();
            var Data_Data_TemporaryOutputList = new List<DigicircMatchmaking.BO.KnowledgeBaseData>();
            if(Data_Data_InputListCount > 0)
            {
                int Data_Data_Index = 0;
                foreach(var initialItem in interfacesKnowledgeBaseKnowledgeBaseResultsInput.Data)
                {
                    if(Data_Data_Index <= Data_Data_MappedInstanceListCount -1 )
                    {
                        var instancedItem = domainKnowledgeBaseResultsOutput.Data[Data_Data_Index];
                        var transformedItem = KnowledgeBaseData_To_KnowledgeBaseDataReversed(initialItem, instancedItem);
                        if(transformedItem != null) Data_Data_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Data_Data_Index++;
                }
                domainKnowledgeBaseResultsOutput.Data = Data_Data_TemporaryOutputList;
            }
            KnowledgeBaseResults_To_KnowledgeBaseResultsReversed_MappingTransformations.Add(interfacesKnowledgeBaseKnowledgeBaseResultsInput, domainKnowledgeBaseResultsOutput);
            return domainKnowledgeBaseResultsOutput;
        }

        #endregion

        #region Transformation 'KnowledgeBaseData_To_KnowledgeBaseData'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.KnowledgeBaseData, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseData> KnowledgeBaseData_To_KnowledgeBaseData_Transformations = new Dictionary<DigicircMatchmaking.BO.KnowledgeBaseData, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseData>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseData KnowledgeBaseData_To_KnowledgeBaseData(DigicircMatchmaking.BO.KnowledgeBaseData domainKnowledgeBaseDataInput)
        {
            //Leave, if there is nothing to transform
            if(domainKnowledgeBaseDataInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseData);
            // If the same Transformation has already ran, get the stored Output and return
            if(KnowledgeBaseData_To_KnowledgeBaseData_Transformations.ContainsKey(domainKnowledgeBaseDataInput))
            {
                return KnowledgeBaseData_To_KnowledgeBaseData_Transformations[domainKnowledgeBaseDataInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseKnowledgeBaseDataOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseData();
            // KnowledgeBaseData.Row to KnowledgeBaseData.Row
            interfacesKnowledgeBaseKnowledgeBaseDataOutput.Row = domainKnowledgeBaseDataInput?.Row?.Select(KnowledgeBaseRow_To_KnowledgeBaseRow)?.ToArray();
            // KnowledgeBaseData.Meta to KnowledgeBaseData.Meta
            interfacesKnowledgeBaseKnowledgeBaseDataOutput.Meta = domainKnowledgeBaseDataInput?.Meta?.Select(KnowledgeBaseMeta_To_KnowledgeBaseMeta)?.ToArray();
            KnowledgeBaseData_To_KnowledgeBaseData_Transformations.Add(domainKnowledgeBaseDataInput, interfacesKnowledgeBaseKnowledgeBaseDataOutput);
            return interfacesKnowledgeBaseKnowledgeBaseDataOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.KnowledgeBaseData, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseData> KnowledgeBaseData_To_KnowledgeBaseData_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.KnowledgeBaseData, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseData>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseData KnowledgeBaseData_To_KnowledgeBaseData(DigicircMatchmaking.BO.KnowledgeBaseData domainKnowledgeBaseDataInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseData interfacesKnowledgeBaseKnowledgeBaseDataInstance)
        {
            //Leave, if there is nothing to transform
            if(domainKnowledgeBaseDataInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseData);
            if(interfacesKnowledgeBaseKnowledgeBaseDataInstance == null)
                return KnowledgeBaseData_To_KnowledgeBaseData (domainKnowledgeBaseDataInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(KnowledgeBaseData_To_KnowledgeBaseData_MappingTransformations.ContainsKey(domainKnowledgeBaseDataInput))
            {
                return KnowledgeBaseData_To_KnowledgeBaseData_MappingTransformations[domainKnowledgeBaseDataInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseKnowledgeBaseDataOutput = interfacesKnowledgeBaseKnowledgeBaseDataInstance;
            // KnowledgeBaseData.Row to KnowledgeBaseData.Row
            var Row_Row_MappedInstanceListCount = interfacesKnowledgeBaseKnowledgeBaseDataOutput.Row == null ? 0 : interfacesKnowledgeBaseKnowledgeBaseDataOutput.Row.Count();
            var Row_Row_InputListCount = domainKnowledgeBaseDataInput.Row == null ? 0 : domainKnowledgeBaseDataInput.Row.Count();
            var Row_Row_TemporaryOutputList = new List<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseRow>();
            if(Row_Row_InputListCount > 0)
            {
                int Row_Row_Index = 0;
                foreach(var initialItem in domainKnowledgeBaseDataInput.Row)
                {
                    if(Row_Row_Index <= Row_Row_MappedInstanceListCount -1 )
                    {
                        var instancedItem = interfacesKnowledgeBaseKnowledgeBaseDataOutput.Row[Row_Row_Index];
                        var transformedItem = KnowledgeBaseRow_To_KnowledgeBaseRow(initialItem, instancedItem);
                        if(transformedItem != null) Row_Row_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Row_Row_Index++;
                }
                interfacesKnowledgeBaseKnowledgeBaseDataOutput.Row = Row_Row_TemporaryOutputList.ToArray();
            }
            // KnowledgeBaseData.Meta to KnowledgeBaseData.Meta
            var Meta_Meta_MappedInstanceListCount = interfacesKnowledgeBaseKnowledgeBaseDataOutput.Meta == null ? 0 : interfacesKnowledgeBaseKnowledgeBaseDataOutput.Meta.Count();
            var Meta_Meta_InputListCount = domainKnowledgeBaseDataInput.Meta == null ? 0 : domainKnowledgeBaseDataInput.Meta.Count();
            var Meta_Meta_TemporaryOutputList = new List<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseMeta>();
            if(Meta_Meta_InputListCount > 0)
            {
                int Meta_Meta_Index = 0;
                foreach(var initialItem in domainKnowledgeBaseDataInput.Meta)
                {
                    if(Meta_Meta_Index <= Meta_Meta_MappedInstanceListCount -1 )
                    {
                        var instancedItem = interfacesKnowledgeBaseKnowledgeBaseDataOutput.Meta[Meta_Meta_Index];
                        var transformedItem = KnowledgeBaseMeta_To_KnowledgeBaseMeta(initialItem, instancedItem);
                        if(transformedItem != null) Meta_Meta_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Meta_Meta_Index++;
                }
                interfacesKnowledgeBaseKnowledgeBaseDataOutput.Meta = Meta_Meta_TemporaryOutputList.ToArray();
            }
            KnowledgeBaseData_To_KnowledgeBaseData_MappingTransformations.Add(domainKnowledgeBaseDataInput, interfacesKnowledgeBaseKnowledgeBaseDataOutput);
            return interfacesKnowledgeBaseKnowledgeBaseDataOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseData, DigicircMatchmaking.BO.KnowledgeBaseData> KnowledgeBaseData_To_KnowledgeBaseDataReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseData, DigicircMatchmaking.BO.KnowledgeBaseData>();
        public DigicircMatchmaking.BO.KnowledgeBaseData KnowledgeBaseData_To_KnowledgeBaseDataReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseData interfacesKnowledgeBaseKnowledgeBaseDataInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseKnowledgeBaseDataInput == null) return default(DigicircMatchmaking.BO.KnowledgeBaseData);
            // If the same Transformation has already ran, get the stored Output and return
            if(KnowledgeBaseData_To_KnowledgeBaseDataReversed_Transformations.ContainsKey(interfacesKnowledgeBaseKnowledgeBaseDataInput))
            {
                return KnowledgeBaseData_To_KnowledgeBaseDataReversed_Transformations[interfacesKnowledgeBaseKnowledgeBaseDataInput];
            }
            // Instantiate target root
            var domainKnowledgeBaseDataOutput = new DigicircMatchmaking.BO.KnowledgeBaseData();
            // KnowledgeBaseData.Row to KnowledgeBaseData.Row
            domainKnowledgeBaseDataOutput.Row = interfacesKnowledgeBaseKnowledgeBaseDataInput?.Row?.Select(KnowledgeBaseRow_To_KnowledgeBaseRowReversed)?.ToList();
            // KnowledgeBaseData.Meta to KnowledgeBaseData.Meta
            domainKnowledgeBaseDataOutput.Meta = interfacesKnowledgeBaseKnowledgeBaseDataInput?.Meta?.Select(KnowledgeBaseMeta_To_KnowledgeBaseMetaReversed)?.ToList();
            KnowledgeBaseData_To_KnowledgeBaseDataReversed_Transformations.Add(interfacesKnowledgeBaseKnowledgeBaseDataInput, domainKnowledgeBaseDataOutput);
            return domainKnowledgeBaseDataOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseData, DigicircMatchmaking.BO.KnowledgeBaseData> KnowledgeBaseData_To_KnowledgeBaseDataReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseData, DigicircMatchmaking.BO.KnowledgeBaseData>();
        public DigicircMatchmaking.BO.KnowledgeBaseData KnowledgeBaseData_To_KnowledgeBaseDataReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseData interfacesKnowledgeBaseKnowledgeBaseDataInput, DigicircMatchmaking.BO.KnowledgeBaseData domainKnowledgeBaseDataInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseKnowledgeBaseDataInput == null) return default(DigicircMatchmaking.BO.KnowledgeBaseData);
            if(domainKnowledgeBaseDataInstance == null)
                return KnowledgeBaseData_To_KnowledgeBaseDataReversed (interfacesKnowledgeBaseKnowledgeBaseDataInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(KnowledgeBaseData_To_KnowledgeBaseDataReversed_MappingTransformations.ContainsKey(interfacesKnowledgeBaseKnowledgeBaseDataInput))
            {
                return KnowledgeBaseData_To_KnowledgeBaseDataReversed_MappingTransformations[interfacesKnowledgeBaseKnowledgeBaseDataInput];
            }
            // Instantiate target root
            var domainKnowledgeBaseDataOutput = domainKnowledgeBaseDataInstance;
            // KnowledgeBaseData.Row to KnowledgeBaseData.Row
            var Row_Row_MappedInstanceListCount = domainKnowledgeBaseDataOutput.Row == null ? 0 : domainKnowledgeBaseDataOutput.Row.Count();
            var Row_Row_InputListCount = interfacesKnowledgeBaseKnowledgeBaseDataInput.Row == null ? 0 : interfacesKnowledgeBaseKnowledgeBaseDataInput.Row.Count();
            var Row_Row_TemporaryOutputList = new List<DigicircMatchmaking.BO.KnowledgeBaseRow>();
            if(Row_Row_InputListCount > 0)
            {
                int Row_Row_Index = 0;
                foreach(var initialItem in interfacesKnowledgeBaseKnowledgeBaseDataInput.Row)
                {
                    if(Row_Row_Index <= Row_Row_MappedInstanceListCount -1 )
                    {
                        var instancedItem = domainKnowledgeBaseDataOutput.Row[Row_Row_Index];
                        var transformedItem = KnowledgeBaseRow_To_KnowledgeBaseRowReversed(initialItem, instancedItem);
                        if(transformedItem != null) Row_Row_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Row_Row_Index++;
                }
                domainKnowledgeBaseDataOutput.Row = Row_Row_TemporaryOutputList;
            }
            // KnowledgeBaseData.Meta to KnowledgeBaseData.Meta
            var Meta_Meta_MappedInstanceListCount = domainKnowledgeBaseDataOutput.Meta == null ? 0 : domainKnowledgeBaseDataOutput.Meta.Count();
            var Meta_Meta_InputListCount = interfacesKnowledgeBaseKnowledgeBaseDataInput.Meta == null ? 0 : interfacesKnowledgeBaseKnowledgeBaseDataInput.Meta.Count();
            var Meta_Meta_TemporaryOutputList = new List<DigicircMatchmaking.BO.KnowledgeBaseMeta>();
            if(Meta_Meta_InputListCount > 0)
            {
                int Meta_Meta_Index = 0;
                foreach(var initialItem in interfacesKnowledgeBaseKnowledgeBaseDataInput.Meta)
                {
                    if(Meta_Meta_Index <= Meta_Meta_MappedInstanceListCount -1 )
                    {
                        var instancedItem = domainKnowledgeBaseDataOutput.Meta[Meta_Meta_Index];
                        var transformedItem = KnowledgeBaseMeta_To_KnowledgeBaseMetaReversed(initialItem, instancedItem);
                        if(transformedItem != null) Meta_Meta_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Meta_Meta_Index++;
                }
                domainKnowledgeBaseDataOutput.Meta = Meta_Meta_TemporaryOutputList;
            }
            KnowledgeBaseData_To_KnowledgeBaseDataReversed_MappingTransformations.Add(interfacesKnowledgeBaseKnowledgeBaseDataInput, domainKnowledgeBaseDataOutput);
            return domainKnowledgeBaseDataOutput;
        }

        #endregion

        #region Transformation 'KnowledgeBaseRow_To_KnowledgeBaseRow'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.KnowledgeBaseRow, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseRow> KnowledgeBaseRow_To_KnowledgeBaseRow_Transformations = new Dictionary<DigicircMatchmaking.BO.KnowledgeBaseRow, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseRow>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseRow KnowledgeBaseRow_To_KnowledgeBaseRow(DigicircMatchmaking.BO.KnowledgeBaseRow domainKnowledgeBaseRowInput)
        {
            //Leave, if there is nothing to transform
            if(domainKnowledgeBaseRowInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseRow);
            // If the same Transformation has already ran, get the stored Output and return
            if(KnowledgeBaseRow_To_KnowledgeBaseRow_Transformations.ContainsKey(domainKnowledgeBaseRowInput))
            {
                return KnowledgeBaseRow_To_KnowledgeBaseRow_Transformations[domainKnowledgeBaseRowInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseKnowledgeBaseRowOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseRow();
            // KnowledgeBaseRow.Decription to KnowledgeBaseRow.Decription
            interfacesKnowledgeBaseKnowledgeBaseRowOutput.Decription = domainKnowledgeBaseRowInput?.Decription;
            // KnowledgeBaseRow.Name to KnowledgeBaseRow.Name
            interfacesKnowledgeBaseKnowledgeBaseRowOutput.Name = domainKnowledgeBaseRowInput?.Name;
            KnowledgeBaseRow_To_KnowledgeBaseRow_Transformations.Add(domainKnowledgeBaseRowInput, interfacesKnowledgeBaseKnowledgeBaseRowOutput);
            return interfacesKnowledgeBaseKnowledgeBaseRowOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.KnowledgeBaseRow, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseRow> KnowledgeBaseRow_To_KnowledgeBaseRow_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.KnowledgeBaseRow, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseRow>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseRow KnowledgeBaseRow_To_KnowledgeBaseRow(DigicircMatchmaking.BO.KnowledgeBaseRow domainKnowledgeBaseRowInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseRow interfacesKnowledgeBaseKnowledgeBaseRowInstance)
        {
            //Leave, if there is nothing to transform
            if(domainKnowledgeBaseRowInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseRow);
            if(interfacesKnowledgeBaseKnowledgeBaseRowInstance == null)
                return KnowledgeBaseRow_To_KnowledgeBaseRow (domainKnowledgeBaseRowInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(KnowledgeBaseRow_To_KnowledgeBaseRow_MappingTransformations.ContainsKey(domainKnowledgeBaseRowInput))
            {
                return KnowledgeBaseRow_To_KnowledgeBaseRow_MappingTransformations[domainKnowledgeBaseRowInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseKnowledgeBaseRowOutput = interfacesKnowledgeBaseKnowledgeBaseRowInstance;
            // KnowledgeBaseRow.Decription to KnowledgeBaseRow.Decription
            interfacesKnowledgeBaseKnowledgeBaseRowOutput.Decription = domainKnowledgeBaseRowInput?.Decription;
            // KnowledgeBaseRow.Name to KnowledgeBaseRow.Name
            interfacesKnowledgeBaseKnowledgeBaseRowOutput.Name = domainKnowledgeBaseRowInput?.Name;
            KnowledgeBaseRow_To_KnowledgeBaseRow_MappingTransformations.Add(domainKnowledgeBaseRowInput, interfacesKnowledgeBaseKnowledgeBaseRowOutput);
            return interfacesKnowledgeBaseKnowledgeBaseRowOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseRow, DigicircMatchmaking.BO.KnowledgeBaseRow> KnowledgeBaseRow_To_KnowledgeBaseRowReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseRow, DigicircMatchmaking.BO.KnowledgeBaseRow>();
        public DigicircMatchmaking.BO.KnowledgeBaseRow KnowledgeBaseRow_To_KnowledgeBaseRowReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseRow interfacesKnowledgeBaseKnowledgeBaseRowInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseKnowledgeBaseRowInput == null) return default(DigicircMatchmaking.BO.KnowledgeBaseRow);
            // If the same Transformation has already ran, get the stored Output and return
            if(KnowledgeBaseRow_To_KnowledgeBaseRowReversed_Transformations.ContainsKey(interfacesKnowledgeBaseKnowledgeBaseRowInput))
            {
                return KnowledgeBaseRow_To_KnowledgeBaseRowReversed_Transformations[interfacesKnowledgeBaseKnowledgeBaseRowInput];
            }
            // Instantiate target root
            var domainKnowledgeBaseRowOutput = new DigicircMatchmaking.BO.KnowledgeBaseRow();
            // KnowledgeBaseRow.Decription to KnowledgeBaseRow.Decription
            domainKnowledgeBaseRowOutput.Decription = interfacesKnowledgeBaseKnowledgeBaseRowInput?.Decription;
            // KnowledgeBaseRow.Name to KnowledgeBaseRow.Name
            domainKnowledgeBaseRowOutput.Name = interfacesKnowledgeBaseKnowledgeBaseRowInput?.Name;
            KnowledgeBaseRow_To_KnowledgeBaseRowReversed_Transformations.Add(interfacesKnowledgeBaseKnowledgeBaseRowInput, domainKnowledgeBaseRowOutput);
            return domainKnowledgeBaseRowOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseRow, DigicircMatchmaking.BO.KnowledgeBaseRow> KnowledgeBaseRow_To_KnowledgeBaseRowReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseRow, DigicircMatchmaking.BO.KnowledgeBaseRow>();
        public DigicircMatchmaking.BO.KnowledgeBaseRow KnowledgeBaseRow_To_KnowledgeBaseRowReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseRow interfacesKnowledgeBaseKnowledgeBaseRowInput, DigicircMatchmaking.BO.KnowledgeBaseRow domainKnowledgeBaseRowInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseKnowledgeBaseRowInput == null) return default(DigicircMatchmaking.BO.KnowledgeBaseRow);
            if(domainKnowledgeBaseRowInstance == null)
                return KnowledgeBaseRow_To_KnowledgeBaseRowReversed (interfacesKnowledgeBaseKnowledgeBaseRowInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(KnowledgeBaseRow_To_KnowledgeBaseRowReversed_MappingTransformations.ContainsKey(interfacesKnowledgeBaseKnowledgeBaseRowInput))
            {
                return KnowledgeBaseRow_To_KnowledgeBaseRowReversed_MappingTransformations[interfacesKnowledgeBaseKnowledgeBaseRowInput];
            }
            // Instantiate target root
            var domainKnowledgeBaseRowOutput = domainKnowledgeBaseRowInstance;
            // KnowledgeBaseRow.Decription to KnowledgeBaseRow.Decription
            domainKnowledgeBaseRowOutput.Decription = interfacesKnowledgeBaseKnowledgeBaseRowInput?.Decription;
            // KnowledgeBaseRow.Name to KnowledgeBaseRow.Name
            domainKnowledgeBaseRowOutput.Name = interfacesKnowledgeBaseKnowledgeBaseRowInput?.Name;
            KnowledgeBaseRow_To_KnowledgeBaseRowReversed_MappingTransformations.Add(interfacesKnowledgeBaseKnowledgeBaseRowInput, domainKnowledgeBaseRowOutput);
            return domainKnowledgeBaseRowOutput;
        }

        #endregion

        #region Transformation 'KnowledgeBaseMeta_To_KnowledgeBaseMeta'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.KnowledgeBaseMeta, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseMeta> KnowledgeBaseMeta_To_KnowledgeBaseMeta_Transformations = new Dictionary<DigicircMatchmaking.BO.KnowledgeBaseMeta, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseMeta>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseMeta KnowledgeBaseMeta_To_KnowledgeBaseMeta(DigicircMatchmaking.BO.KnowledgeBaseMeta domainKnowledgeBaseMetaInput)
        {
            //Leave, if there is nothing to transform
            if(domainKnowledgeBaseMetaInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseMeta);
            // If the same Transformation has already ran, get the stored Output and return
            if(KnowledgeBaseMeta_To_KnowledgeBaseMeta_Transformations.ContainsKey(domainKnowledgeBaseMetaInput))
            {
                return KnowledgeBaseMeta_To_KnowledgeBaseMeta_Transformations[domainKnowledgeBaseMetaInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseKnowledgeBaseMetaOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseMeta();
            // KnowledgeBaseMeta.Id to KnowledgeBaseMeta.Id
            interfacesKnowledgeBaseKnowledgeBaseMetaOutput.Id = domainKnowledgeBaseMetaInput?.Id;
            // KnowledgeBaseMeta.Type to KnowledgeBaseMeta.Type
            interfacesKnowledgeBaseKnowledgeBaseMetaOutput.Type = domainKnowledgeBaseMetaInput?.Type;
            // KnowledgeBaseMeta.Deleted to KnowledgeBaseMeta.Deleted
            interfacesKnowledgeBaseKnowledgeBaseMetaOutput.Deleted = domainKnowledgeBaseMetaInput?.Deleted == true;
            KnowledgeBaseMeta_To_KnowledgeBaseMeta_Transformations.Add(domainKnowledgeBaseMetaInput, interfacesKnowledgeBaseKnowledgeBaseMetaOutput);
            return interfacesKnowledgeBaseKnowledgeBaseMetaOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.KnowledgeBaseMeta, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseMeta> KnowledgeBaseMeta_To_KnowledgeBaseMeta_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.KnowledgeBaseMeta, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseMeta>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseMeta KnowledgeBaseMeta_To_KnowledgeBaseMeta(DigicircMatchmaking.BO.KnowledgeBaseMeta domainKnowledgeBaseMetaInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseMeta interfacesKnowledgeBaseKnowledgeBaseMetaInstance)
        {
            //Leave, if there is nothing to transform
            if(domainKnowledgeBaseMetaInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseMeta);
            if(interfacesKnowledgeBaseKnowledgeBaseMetaInstance == null)
                return KnowledgeBaseMeta_To_KnowledgeBaseMeta (domainKnowledgeBaseMetaInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(KnowledgeBaseMeta_To_KnowledgeBaseMeta_MappingTransformations.ContainsKey(domainKnowledgeBaseMetaInput))
            {
                return KnowledgeBaseMeta_To_KnowledgeBaseMeta_MappingTransformations[domainKnowledgeBaseMetaInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseKnowledgeBaseMetaOutput = interfacesKnowledgeBaseKnowledgeBaseMetaInstance;
            // KnowledgeBaseMeta.Id to KnowledgeBaseMeta.Id
            interfacesKnowledgeBaseKnowledgeBaseMetaOutput.Id = domainKnowledgeBaseMetaInput?.Id;
            // KnowledgeBaseMeta.Type to KnowledgeBaseMeta.Type
            interfacesKnowledgeBaseKnowledgeBaseMetaOutput.Type = domainKnowledgeBaseMetaInput?.Type;
            // KnowledgeBaseMeta.Deleted to KnowledgeBaseMeta.Deleted
            interfacesKnowledgeBaseKnowledgeBaseMetaOutput.Deleted = domainKnowledgeBaseMetaInput?.Deleted == true;
            KnowledgeBaseMeta_To_KnowledgeBaseMeta_MappingTransformations.Add(domainKnowledgeBaseMetaInput, interfacesKnowledgeBaseKnowledgeBaseMetaOutput);
            return interfacesKnowledgeBaseKnowledgeBaseMetaOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseMeta, DigicircMatchmaking.BO.KnowledgeBaseMeta> KnowledgeBaseMeta_To_KnowledgeBaseMetaReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseMeta, DigicircMatchmaking.BO.KnowledgeBaseMeta>();
        public DigicircMatchmaking.BO.KnowledgeBaseMeta KnowledgeBaseMeta_To_KnowledgeBaseMetaReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseMeta interfacesKnowledgeBaseKnowledgeBaseMetaInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseKnowledgeBaseMetaInput == null) return default(DigicircMatchmaking.BO.KnowledgeBaseMeta);
            // If the same Transformation has already ran, get the stored Output and return
            if(KnowledgeBaseMeta_To_KnowledgeBaseMetaReversed_Transformations.ContainsKey(interfacesKnowledgeBaseKnowledgeBaseMetaInput))
            {
                return KnowledgeBaseMeta_To_KnowledgeBaseMetaReversed_Transformations[interfacesKnowledgeBaseKnowledgeBaseMetaInput];
            }
            // Instantiate target root
            var domainKnowledgeBaseMetaOutput = new DigicircMatchmaking.BO.KnowledgeBaseMeta();
            // KnowledgeBaseMeta.Id to KnowledgeBaseMeta.Id
            domainKnowledgeBaseMetaOutput.Id = interfacesKnowledgeBaseKnowledgeBaseMetaInput?.Id;
            // KnowledgeBaseMeta.Type to KnowledgeBaseMeta.Type
            domainKnowledgeBaseMetaOutput.Type = interfacesKnowledgeBaseKnowledgeBaseMetaInput?.Type;
            // KnowledgeBaseMeta.Deleted to KnowledgeBaseMeta.Deleted
            domainKnowledgeBaseMetaOutput.Deleted = interfacesKnowledgeBaseKnowledgeBaseMetaInput?.Deleted == true;
            KnowledgeBaseMeta_To_KnowledgeBaseMetaReversed_Transformations.Add(interfacesKnowledgeBaseKnowledgeBaseMetaInput, domainKnowledgeBaseMetaOutput);
            return domainKnowledgeBaseMetaOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseMeta, DigicircMatchmaking.BO.KnowledgeBaseMeta> KnowledgeBaseMeta_To_KnowledgeBaseMetaReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseMeta, DigicircMatchmaking.BO.KnowledgeBaseMeta>();
        public DigicircMatchmaking.BO.KnowledgeBaseMeta KnowledgeBaseMeta_To_KnowledgeBaseMetaReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.KnowledgeBaseMeta interfacesKnowledgeBaseKnowledgeBaseMetaInput, DigicircMatchmaking.BO.KnowledgeBaseMeta domainKnowledgeBaseMetaInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseKnowledgeBaseMetaInput == null) return default(DigicircMatchmaking.BO.KnowledgeBaseMeta);
            if(domainKnowledgeBaseMetaInstance == null)
                return KnowledgeBaseMeta_To_KnowledgeBaseMetaReversed (interfacesKnowledgeBaseKnowledgeBaseMetaInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(KnowledgeBaseMeta_To_KnowledgeBaseMetaReversed_MappingTransformations.ContainsKey(interfacesKnowledgeBaseKnowledgeBaseMetaInput))
            {
                return KnowledgeBaseMeta_To_KnowledgeBaseMetaReversed_MappingTransformations[interfacesKnowledgeBaseKnowledgeBaseMetaInput];
            }
            // Instantiate target root
            var domainKnowledgeBaseMetaOutput = domainKnowledgeBaseMetaInstance;
            // KnowledgeBaseMeta.Id to KnowledgeBaseMeta.Id
            domainKnowledgeBaseMetaOutput.Id = interfacesKnowledgeBaseKnowledgeBaseMetaInput?.Id;
            // KnowledgeBaseMeta.Type to KnowledgeBaseMeta.Type
            domainKnowledgeBaseMetaOutput.Type = interfacesKnowledgeBaseKnowledgeBaseMetaInput?.Type;
            // KnowledgeBaseMeta.Deleted to KnowledgeBaseMeta.Deleted
            domainKnowledgeBaseMetaOutput.Deleted = interfacesKnowledgeBaseKnowledgeBaseMetaInput?.Deleted == true;
            KnowledgeBaseMeta_To_KnowledgeBaseMetaReversed_MappingTransformations.Add(interfacesKnowledgeBaseKnowledgeBaseMetaInput, domainKnowledgeBaseMetaOutput);
            return domainKnowledgeBaseMetaOutput;
        }

        #endregion

        #region Transformation 'ProcessCreateRequest_To_ProcessCreateRequest'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.ProcessCreateRequest, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateRequest> ProcessCreateRequest_To_ProcessCreateRequest_Transformations = new Dictionary<DigicircMatchmaking.BO.ProcessCreateRequest, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateRequest>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateRequest ProcessCreateRequest_To_ProcessCreateRequest(DigicircMatchmaking.BO.ProcessCreateRequest domainProcessCreateRequestInput)
        {
            //Leave, if there is nothing to transform
            if(domainProcessCreateRequestInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateRequest);
            // If the same Transformation has already ran, get the stored Output and return
            if(ProcessCreateRequest_To_ProcessCreateRequest_Transformations.ContainsKey(domainProcessCreateRequestInput))
            {
                return ProcessCreateRequest_To_ProcessCreateRequest_Transformations[domainProcessCreateRequestInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseProcessCreateRequestOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateRequest();
            // ProcessCreateRequest.Statements to ProcessCreateRequest.Statements
            interfacesKnowledgeBaseProcessCreateRequestOutput.Statements = domainProcessCreateRequestInput?.Statements?.Select(ProcessCreateStatements_To_ProcessCreateStatements)?.ToArray();
            ProcessCreateRequest_To_ProcessCreateRequest_Transformations.Add(domainProcessCreateRequestInput, interfacesKnowledgeBaseProcessCreateRequestOutput);
            return interfacesKnowledgeBaseProcessCreateRequestOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.ProcessCreateRequest, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateRequest> ProcessCreateRequest_To_ProcessCreateRequest_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.ProcessCreateRequest, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateRequest>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateRequest ProcessCreateRequest_To_ProcessCreateRequest(DigicircMatchmaking.BO.ProcessCreateRequest domainProcessCreateRequestInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateRequest interfacesKnowledgeBaseProcessCreateRequestInstance)
        {
            //Leave, if there is nothing to transform
            if(domainProcessCreateRequestInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateRequest);
            if(interfacesKnowledgeBaseProcessCreateRequestInstance == null)
                return ProcessCreateRequest_To_ProcessCreateRequest (domainProcessCreateRequestInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ProcessCreateRequest_To_ProcessCreateRequest_MappingTransformations.ContainsKey(domainProcessCreateRequestInput))
            {
                return ProcessCreateRequest_To_ProcessCreateRequest_MappingTransformations[domainProcessCreateRequestInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseProcessCreateRequestOutput = interfacesKnowledgeBaseProcessCreateRequestInstance;
            // ProcessCreateRequest.Statements to ProcessCreateRequest.Statements
            var Statements_Statements_MappedInstanceListCount = interfacesKnowledgeBaseProcessCreateRequestOutput.Statements == null ? 0 : interfacesKnowledgeBaseProcessCreateRequestOutput.Statements.Count();
            var Statements_Statements_InputListCount = domainProcessCreateRequestInput.Statements == null ? 0 : domainProcessCreateRequestInput.Statements.Count();
            var Statements_Statements_TemporaryOutputList = new List<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateStatements>();
            if(Statements_Statements_InputListCount > 0)
            {
                int Statements_Statements_Index = 0;
                foreach(var initialItem in domainProcessCreateRequestInput.Statements)
                {
                    if(Statements_Statements_Index <= Statements_Statements_MappedInstanceListCount -1 )
                    {
                        var instancedItem = interfacesKnowledgeBaseProcessCreateRequestOutput.Statements[Statements_Statements_Index];
                        var transformedItem = ProcessCreateStatements_To_ProcessCreateStatements(initialItem, instancedItem);
                        if(transformedItem != null) Statements_Statements_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Statements_Statements_Index++;
                }
                interfacesKnowledgeBaseProcessCreateRequestOutput.Statements = Statements_Statements_TemporaryOutputList.ToArray();
            }
            ProcessCreateRequest_To_ProcessCreateRequest_MappingTransformations.Add(domainProcessCreateRequestInput, interfacesKnowledgeBaseProcessCreateRequestOutput);
            return interfacesKnowledgeBaseProcessCreateRequestOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateRequest, DigicircMatchmaking.BO.ProcessCreateRequest> ProcessCreateRequest_To_ProcessCreateRequestReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateRequest, DigicircMatchmaking.BO.ProcessCreateRequest>();
        public DigicircMatchmaking.BO.ProcessCreateRequest ProcessCreateRequest_To_ProcessCreateRequestReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateRequest interfacesKnowledgeBaseProcessCreateRequestInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseProcessCreateRequestInput == null) return default(DigicircMatchmaking.BO.ProcessCreateRequest);
            // If the same Transformation has already ran, get the stored Output and return
            if(ProcessCreateRequest_To_ProcessCreateRequestReversed_Transformations.ContainsKey(interfacesKnowledgeBaseProcessCreateRequestInput))
            {
                return ProcessCreateRequest_To_ProcessCreateRequestReversed_Transformations[interfacesKnowledgeBaseProcessCreateRequestInput];
            }
            // Instantiate target root
            var domainProcessCreateRequestOutput = new DigicircMatchmaking.BO.ProcessCreateRequest();
            // ProcessCreateRequest.Statements to ProcessCreateRequest.Statements
            domainProcessCreateRequestOutput.Statements = interfacesKnowledgeBaseProcessCreateRequestInput?.Statements?.Select(ProcessCreateStatements_To_ProcessCreateStatementsReversed)?.ToList();
            ProcessCreateRequest_To_ProcessCreateRequestReversed_Transformations.Add(interfacesKnowledgeBaseProcessCreateRequestInput, domainProcessCreateRequestOutput);
            return domainProcessCreateRequestOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateRequest, DigicircMatchmaking.BO.ProcessCreateRequest> ProcessCreateRequest_To_ProcessCreateRequestReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateRequest, DigicircMatchmaking.BO.ProcessCreateRequest>();
        public DigicircMatchmaking.BO.ProcessCreateRequest ProcessCreateRequest_To_ProcessCreateRequestReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateRequest interfacesKnowledgeBaseProcessCreateRequestInput, DigicircMatchmaking.BO.ProcessCreateRequest domainProcessCreateRequestInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseProcessCreateRequestInput == null) return default(DigicircMatchmaking.BO.ProcessCreateRequest);
            if(domainProcessCreateRequestInstance == null)
                return ProcessCreateRequest_To_ProcessCreateRequestReversed (interfacesKnowledgeBaseProcessCreateRequestInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ProcessCreateRequest_To_ProcessCreateRequestReversed_MappingTransformations.ContainsKey(interfacesKnowledgeBaseProcessCreateRequestInput))
            {
                return ProcessCreateRequest_To_ProcessCreateRequestReversed_MappingTransformations[interfacesKnowledgeBaseProcessCreateRequestInput];
            }
            // Instantiate target root
            var domainProcessCreateRequestOutput = domainProcessCreateRequestInstance;
            // ProcessCreateRequest.Statements to ProcessCreateRequest.Statements
            var Statements_Statements_MappedInstanceListCount = domainProcessCreateRequestOutput.Statements == null ? 0 : domainProcessCreateRequestOutput.Statements.Count();
            var Statements_Statements_InputListCount = interfacesKnowledgeBaseProcessCreateRequestInput.Statements == null ? 0 : interfacesKnowledgeBaseProcessCreateRequestInput.Statements.Count();
            var Statements_Statements_TemporaryOutputList = new List<DigicircMatchmaking.BO.ProcessCreateStatements>();
            if(Statements_Statements_InputListCount > 0)
            {
                int Statements_Statements_Index = 0;
                foreach(var initialItem in interfacesKnowledgeBaseProcessCreateRequestInput.Statements)
                {
                    if(Statements_Statements_Index <= Statements_Statements_MappedInstanceListCount -1 )
                    {
                        var instancedItem = domainProcessCreateRequestOutput.Statements[Statements_Statements_Index];
                        var transformedItem = ProcessCreateStatements_To_ProcessCreateStatementsReversed(initialItem, instancedItem);
                        if(transformedItem != null) Statements_Statements_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Statements_Statements_Index++;
                }
                domainProcessCreateRequestOutput.Statements = Statements_Statements_TemporaryOutputList;
            }
            ProcessCreateRequest_To_ProcessCreateRequestReversed_MappingTransformations.Add(interfacesKnowledgeBaseProcessCreateRequestInput, domainProcessCreateRequestOutput);
            return domainProcessCreateRequestOutput;
        }

        #endregion

        #region Transformation 'ProcessCreateStatements_To_ProcessCreateStatements'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.ProcessCreateStatements, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateStatements> ProcessCreateStatements_To_ProcessCreateStatements_Transformations = new Dictionary<DigicircMatchmaking.BO.ProcessCreateStatements, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateStatements>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateStatements ProcessCreateStatements_To_ProcessCreateStatements(DigicircMatchmaking.BO.ProcessCreateStatements domainProcessCreateStatementsInput)
        {
            //Leave, if there is nothing to transform
            if(domainProcessCreateStatementsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateStatements);
            // If the same Transformation has already ran, get the stored Output and return
            if(ProcessCreateStatements_To_ProcessCreateStatements_Transformations.ContainsKey(domainProcessCreateStatementsInput))
            {
                return ProcessCreateStatements_To_ProcessCreateStatements_Transformations[domainProcessCreateStatementsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseProcessCreateStatementsOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateStatements();
            // ProcessCreateStatements.Statement to ProcessCreateStatements.Statement
            interfacesKnowledgeBaseProcessCreateStatementsOutput.Statement = domainProcessCreateStatementsInput?.Statement;
            // ProcessCreateStatements.Parameters to ProcessCreateStatements.Parameters
            interfacesKnowledgeBaseProcessCreateStatementsOutput.Parameters = ProcessCreateParameters_To_ProcessCreateParameters(domainProcessCreateStatementsInput?.Parameters);
            ProcessCreateStatements_To_ProcessCreateStatements_Transformations.Add(domainProcessCreateStatementsInput, interfacesKnowledgeBaseProcessCreateStatementsOutput);
            return interfacesKnowledgeBaseProcessCreateStatementsOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.ProcessCreateStatements, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateStatements> ProcessCreateStatements_To_ProcessCreateStatements_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.ProcessCreateStatements, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateStatements>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateStatements ProcessCreateStatements_To_ProcessCreateStatements(DigicircMatchmaking.BO.ProcessCreateStatements domainProcessCreateStatementsInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateStatements interfacesKnowledgeBaseProcessCreateStatementsInstance)
        {
            //Leave, if there is nothing to transform
            if(domainProcessCreateStatementsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateStatements);
            if(interfacesKnowledgeBaseProcessCreateStatementsInstance == null)
                return ProcessCreateStatements_To_ProcessCreateStatements (domainProcessCreateStatementsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ProcessCreateStatements_To_ProcessCreateStatements_MappingTransformations.ContainsKey(domainProcessCreateStatementsInput))
            {
                return ProcessCreateStatements_To_ProcessCreateStatements_MappingTransformations[domainProcessCreateStatementsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseProcessCreateStatementsOutput = interfacesKnowledgeBaseProcessCreateStatementsInstance;
            // ProcessCreateStatements.Statement to ProcessCreateStatements.Statement
            interfacesKnowledgeBaseProcessCreateStatementsOutput.Statement = domainProcessCreateStatementsInput?.Statement;
            // ProcessCreateStatements.Parameters to ProcessCreateStatements.Parameters
            interfacesKnowledgeBaseProcessCreateStatementsOutput.Parameters = ProcessCreateParameters_To_ProcessCreateParameters(domainProcessCreateStatementsInput?.Parameters);
            ProcessCreateStatements_To_ProcessCreateStatements_MappingTransformations.Add(domainProcessCreateStatementsInput, interfacesKnowledgeBaseProcessCreateStatementsOutput);
            return interfacesKnowledgeBaseProcessCreateStatementsOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateStatements, DigicircMatchmaking.BO.ProcessCreateStatements> ProcessCreateStatements_To_ProcessCreateStatementsReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateStatements, DigicircMatchmaking.BO.ProcessCreateStatements>();
        public DigicircMatchmaking.BO.ProcessCreateStatements ProcessCreateStatements_To_ProcessCreateStatementsReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateStatements interfacesKnowledgeBaseProcessCreateStatementsInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseProcessCreateStatementsInput == null) return default(DigicircMatchmaking.BO.ProcessCreateStatements);
            // If the same Transformation has already ran, get the stored Output and return
            if(ProcessCreateStatements_To_ProcessCreateStatementsReversed_Transformations.ContainsKey(interfacesKnowledgeBaseProcessCreateStatementsInput))
            {
                return ProcessCreateStatements_To_ProcessCreateStatementsReversed_Transformations[interfacesKnowledgeBaseProcessCreateStatementsInput];
            }
            // Instantiate target root
            var domainProcessCreateStatementsOutput = new DigicircMatchmaking.BO.ProcessCreateStatements();
            // ProcessCreateStatements.Statement to ProcessCreateStatements.Statement
            domainProcessCreateStatementsOutput.Statement = interfacesKnowledgeBaseProcessCreateStatementsInput?.Statement;
            // ProcessCreateStatements.Parameters to ProcessCreateStatements.Parameters
            domainProcessCreateStatementsOutput.Parameters = ProcessCreateParameters_To_ProcessCreateParametersReversed(interfacesKnowledgeBaseProcessCreateStatementsInput?.Parameters);
            ProcessCreateStatements_To_ProcessCreateStatementsReversed_Transformations.Add(interfacesKnowledgeBaseProcessCreateStatementsInput, domainProcessCreateStatementsOutput);
            return domainProcessCreateStatementsOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateStatements, DigicircMatchmaking.BO.ProcessCreateStatements> ProcessCreateStatements_To_ProcessCreateStatementsReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateStatements, DigicircMatchmaking.BO.ProcessCreateStatements>();
        public DigicircMatchmaking.BO.ProcessCreateStatements ProcessCreateStatements_To_ProcessCreateStatementsReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateStatements interfacesKnowledgeBaseProcessCreateStatementsInput, DigicircMatchmaking.BO.ProcessCreateStatements domainProcessCreateStatementsInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseProcessCreateStatementsInput == null) return default(DigicircMatchmaking.BO.ProcessCreateStatements);
            if(domainProcessCreateStatementsInstance == null)
                return ProcessCreateStatements_To_ProcessCreateStatementsReversed (interfacesKnowledgeBaseProcessCreateStatementsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ProcessCreateStatements_To_ProcessCreateStatementsReversed_MappingTransformations.ContainsKey(interfacesKnowledgeBaseProcessCreateStatementsInput))
            {
                return ProcessCreateStatements_To_ProcessCreateStatementsReversed_MappingTransformations[interfacesKnowledgeBaseProcessCreateStatementsInput];
            }
            // Instantiate target root
            var domainProcessCreateStatementsOutput = domainProcessCreateStatementsInstance;
            // ProcessCreateStatements.Statement to ProcessCreateStatements.Statement
            domainProcessCreateStatementsOutput.Statement = interfacesKnowledgeBaseProcessCreateStatementsInput?.Statement;
            // ProcessCreateStatements.Parameters to ProcessCreateStatements.Parameters
            domainProcessCreateStatementsOutput.Parameters = ProcessCreateParameters_To_ProcessCreateParametersReversed(interfacesKnowledgeBaseProcessCreateStatementsInput?.Parameters);
            ProcessCreateStatements_To_ProcessCreateStatementsReversed_MappingTransformations.Add(interfacesKnowledgeBaseProcessCreateStatementsInput, domainProcessCreateStatementsOutput);
            return domainProcessCreateStatementsOutput;
        }

        #endregion

        #region Transformation 'ProcessCreateParameters_To_ProcessCreateParameters'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.ProcessCreateParameters, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateParameters> ProcessCreateParameters_To_ProcessCreateParameters_Transformations = new Dictionary<DigicircMatchmaking.BO.ProcessCreateParameters, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateParameters>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateParameters ProcessCreateParameters_To_ProcessCreateParameters(DigicircMatchmaking.BO.ProcessCreateParameters domainProcessCreateParametersInput)
        {
            //Leave, if there is nothing to transform
            if(domainProcessCreateParametersInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateParameters);
            // If the same Transformation has already ran, get the stored Output and return
            if(ProcessCreateParameters_To_ProcessCreateParameters_Transformations.ContainsKey(domainProcessCreateParametersInput))
            {
                return ProcessCreateParameters_To_ProcessCreateParameters_Transformations[domainProcessCreateParametersInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseProcessCreateParametersOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateParameters();
            // ProcessCreateParameters.Props to ProcessCreateParameters.Props
            interfacesKnowledgeBaseProcessCreateParametersOutput.Props = ProcessCreateProps_To_ProcessCreateProps(domainProcessCreateParametersInput?.Props);
            ProcessCreateParameters_To_ProcessCreateParameters_Transformations.Add(domainProcessCreateParametersInput, interfacesKnowledgeBaseProcessCreateParametersOutput);
            return interfacesKnowledgeBaseProcessCreateParametersOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.ProcessCreateParameters, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateParameters> ProcessCreateParameters_To_ProcessCreateParameters_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.ProcessCreateParameters, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateParameters>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateParameters ProcessCreateParameters_To_ProcessCreateParameters(DigicircMatchmaking.BO.ProcessCreateParameters domainProcessCreateParametersInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateParameters interfacesKnowledgeBaseProcessCreateParametersInstance)
        {
            //Leave, if there is nothing to transform
            if(domainProcessCreateParametersInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateParameters);
            if(interfacesKnowledgeBaseProcessCreateParametersInstance == null)
                return ProcessCreateParameters_To_ProcessCreateParameters (domainProcessCreateParametersInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ProcessCreateParameters_To_ProcessCreateParameters_MappingTransformations.ContainsKey(domainProcessCreateParametersInput))
            {
                return ProcessCreateParameters_To_ProcessCreateParameters_MappingTransformations[domainProcessCreateParametersInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseProcessCreateParametersOutput = interfacesKnowledgeBaseProcessCreateParametersInstance;
            // ProcessCreateParameters.Props to ProcessCreateParameters.Props
            interfacesKnowledgeBaseProcessCreateParametersOutput.Props = ProcessCreateProps_To_ProcessCreateProps(domainProcessCreateParametersInput?.Props);
            ProcessCreateParameters_To_ProcessCreateParameters_MappingTransformations.Add(domainProcessCreateParametersInput, interfacesKnowledgeBaseProcessCreateParametersOutput);
            return interfacesKnowledgeBaseProcessCreateParametersOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateParameters, DigicircMatchmaking.BO.ProcessCreateParameters> ProcessCreateParameters_To_ProcessCreateParametersReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateParameters, DigicircMatchmaking.BO.ProcessCreateParameters>();
        public DigicircMatchmaking.BO.ProcessCreateParameters ProcessCreateParameters_To_ProcessCreateParametersReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateParameters interfacesKnowledgeBaseProcessCreateParametersInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseProcessCreateParametersInput == null) return default(DigicircMatchmaking.BO.ProcessCreateParameters);
            // If the same Transformation has already ran, get the stored Output and return
            if(ProcessCreateParameters_To_ProcessCreateParametersReversed_Transformations.ContainsKey(interfacesKnowledgeBaseProcessCreateParametersInput))
            {
                return ProcessCreateParameters_To_ProcessCreateParametersReversed_Transformations[interfacesKnowledgeBaseProcessCreateParametersInput];
            }
            // Instantiate target root
            var domainProcessCreateParametersOutput = new DigicircMatchmaking.BO.ProcessCreateParameters();
            // ProcessCreateParameters.Props to ProcessCreateParameters.Props
            domainProcessCreateParametersOutput.Props = ProcessCreateProps_To_ProcessCreatePropsReversed(interfacesKnowledgeBaseProcessCreateParametersInput?.Props);
            ProcessCreateParameters_To_ProcessCreateParametersReversed_Transformations.Add(interfacesKnowledgeBaseProcessCreateParametersInput, domainProcessCreateParametersOutput);
            return domainProcessCreateParametersOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateParameters, DigicircMatchmaking.BO.ProcessCreateParameters> ProcessCreateParameters_To_ProcessCreateParametersReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateParameters, DigicircMatchmaking.BO.ProcessCreateParameters>();
        public DigicircMatchmaking.BO.ProcessCreateParameters ProcessCreateParameters_To_ProcessCreateParametersReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateParameters interfacesKnowledgeBaseProcessCreateParametersInput, DigicircMatchmaking.BO.ProcessCreateParameters domainProcessCreateParametersInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseProcessCreateParametersInput == null) return default(DigicircMatchmaking.BO.ProcessCreateParameters);
            if(domainProcessCreateParametersInstance == null)
                return ProcessCreateParameters_To_ProcessCreateParametersReversed (interfacesKnowledgeBaseProcessCreateParametersInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ProcessCreateParameters_To_ProcessCreateParametersReversed_MappingTransformations.ContainsKey(interfacesKnowledgeBaseProcessCreateParametersInput))
            {
                return ProcessCreateParameters_To_ProcessCreateParametersReversed_MappingTransformations[interfacesKnowledgeBaseProcessCreateParametersInput];
            }
            // Instantiate target root
            var domainProcessCreateParametersOutput = domainProcessCreateParametersInstance;
            // ProcessCreateParameters.Props to ProcessCreateParameters.Props
            domainProcessCreateParametersOutput.Props = ProcessCreateProps_To_ProcessCreatePropsReversed(interfacesKnowledgeBaseProcessCreateParametersInput?.Props);
            ProcessCreateParameters_To_ProcessCreateParametersReversed_MappingTransformations.Add(interfacesKnowledgeBaseProcessCreateParametersInput, domainProcessCreateParametersOutput);
            return domainProcessCreateParametersOutput;
        }

        #endregion

        #region Transformation 'ProcessCreateProps_To_ProcessCreateProps'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.ProcessCreateProps, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateProps> ProcessCreateProps_To_ProcessCreateProps_Transformations = new Dictionary<DigicircMatchmaking.BO.ProcessCreateProps, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateProps>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateProps ProcessCreateProps_To_ProcessCreateProps(DigicircMatchmaking.BO.ProcessCreateProps domainProcessCreatePropsInput)
        {
            //Leave, if there is nothing to transform
            if(domainProcessCreatePropsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateProps);
            // If the same Transformation has already ran, get the stored Output and return
            if(ProcessCreateProps_To_ProcessCreateProps_Transformations.ContainsKey(domainProcessCreatePropsInput))
            {
                return ProcessCreateProps_To_ProcessCreateProps_Transformations[domainProcessCreatePropsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseProcessCreatePropsOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateProps();
            // ProcessCreateProps.Id to ProcessCreateProps.Id
            interfacesKnowledgeBaseProcessCreatePropsOutput.Id = domainProcessCreatePropsInput?.Id;
            // ProcessCreateProps.Name to ProcessCreateProps.Name
            interfacesKnowledgeBaseProcessCreatePropsOutput.Name = domainProcessCreatePropsInput?.Name;
            // ProcessCreateProps.Notes to ProcessCreateProps.Notes
            interfacesKnowledgeBaseProcessCreatePropsOutput.Notes = domainProcessCreatePropsInput?.Notes;
            // ProcessCreateProps.Ref to ProcessCreateProps.Ref
            interfacesKnowledgeBaseProcessCreatePropsOutput.Ref = domainProcessCreatePropsInput?.Ref;
            // ProcessCreateProps.SourceId to ProcessCreateProps.SourceId
            interfacesKnowledgeBaseProcessCreatePropsOutput.SourceId = domainProcessCreatePropsInput?.SourceId;
            // ProcessCreateProps.ProductId to ProcessCreateProps.ProductId
            interfacesKnowledgeBaseProcessCreatePropsOutput.ProductId = domainProcessCreatePropsInput?.ProductId;
            ProcessCreateProps_To_ProcessCreateProps_Transformations.Add(domainProcessCreatePropsInput, interfacesKnowledgeBaseProcessCreatePropsOutput);
            return interfacesKnowledgeBaseProcessCreatePropsOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.ProcessCreateProps, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateProps> ProcessCreateProps_To_ProcessCreateProps_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.ProcessCreateProps, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateProps>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateProps ProcessCreateProps_To_ProcessCreateProps(DigicircMatchmaking.BO.ProcessCreateProps domainProcessCreatePropsInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateProps interfacesKnowledgeBaseProcessCreatePropsInstance)
        {
            //Leave, if there is nothing to transform
            if(domainProcessCreatePropsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateProps);
            if(interfacesKnowledgeBaseProcessCreatePropsInstance == null)
                return ProcessCreateProps_To_ProcessCreateProps (domainProcessCreatePropsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ProcessCreateProps_To_ProcessCreateProps_MappingTransformations.ContainsKey(domainProcessCreatePropsInput))
            {
                return ProcessCreateProps_To_ProcessCreateProps_MappingTransformations[domainProcessCreatePropsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseProcessCreatePropsOutput = interfacesKnowledgeBaseProcessCreatePropsInstance;
            // ProcessCreateProps.Id to ProcessCreateProps.Id
            interfacesKnowledgeBaseProcessCreatePropsOutput.Id = domainProcessCreatePropsInput?.Id;
            // ProcessCreateProps.Name to ProcessCreateProps.Name
            interfacesKnowledgeBaseProcessCreatePropsOutput.Name = domainProcessCreatePropsInput?.Name;
            // ProcessCreateProps.Notes to ProcessCreateProps.Notes
            interfacesKnowledgeBaseProcessCreatePropsOutput.Notes = domainProcessCreatePropsInput?.Notes;
            // ProcessCreateProps.Ref to ProcessCreateProps.Ref
            interfacesKnowledgeBaseProcessCreatePropsOutput.Ref = domainProcessCreatePropsInput?.Ref;
            // ProcessCreateProps.SourceId to ProcessCreateProps.SourceId
            interfacesKnowledgeBaseProcessCreatePropsOutput.SourceId = domainProcessCreatePropsInput?.SourceId;
            // ProcessCreateProps.ProductId to ProcessCreateProps.ProductId
            interfacesKnowledgeBaseProcessCreatePropsOutput.ProductId = domainProcessCreatePropsInput?.ProductId;
            ProcessCreateProps_To_ProcessCreateProps_MappingTransformations.Add(domainProcessCreatePropsInput, interfacesKnowledgeBaseProcessCreatePropsOutput);
            return interfacesKnowledgeBaseProcessCreatePropsOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateProps, DigicircMatchmaking.BO.ProcessCreateProps> ProcessCreateProps_To_ProcessCreatePropsReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateProps, DigicircMatchmaking.BO.ProcessCreateProps>();
        public DigicircMatchmaking.BO.ProcessCreateProps ProcessCreateProps_To_ProcessCreatePropsReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateProps interfacesKnowledgeBaseProcessCreatePropsInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseProcessCreatePropsInput == null) return default(DigicircMatchmaking.BO.ProcessCreateProps);
            // If the same Transformation has already ran, get the stored Output and return
            if(ProcessCreateProps_To_ProcessCreatePropsReversed_Transformations.ContainsKey(interfacesKnowledgeBaseProcessCreatePropsInput))
            {
                return ProcessCreateProps_To_ProcessCreatePropsReversed_Transformations[interfacesKnowledgeBaseProcessCreatePropsInput];
            }
            // Instantiate target root
            var domainProcessCreatePropsOutput = new DigicircMatchmaking.BO.ProcessCreateProps();
            // ProcessCreateProps.Id to ProcessCreateProps.Id
            domainProcessCreatePropsOutput.Id = interfacesKnowledgeBaseProcessCreatePropsInput?.Id;
            // ProcessCreateProps.Name to ProcessCreateProps.Name
            domainProcessCreatePropsOutput.Name = interfacesKnowledgeBaseProcessCreatePropsInput?.Name;
            // ProcessCreateProps.Notes to ProcessCreateProps.Notes
            domainProcessCreatePropsOutput.Notes = interfacesKnowledgeBaseProcessCreatePropsInput?.Notes;
            // ProcessCreateProps.Ref to ProcessCreateProps.Ref
            domainProcessCreatePropsOutput.Ref = interfacesKnowledgeBaseProcessCreatePropsInput?.Ref;
            // ProcessCreateProps.SourceId to ProcessCreateProps.SourceId
            domainProcessCreatePropsOutput.SourceId = interfacesKnowledgeBaseProcessCreatePropsInput?.SourceId;
            // ProcessCreateProps.ProductId to ProcessCreateProps.ProductId
            domainProcessCreatePropsOutput.ProductId = interfacesKnowledgeBaseProcessCreatePropsInput?.ProductId;
            ProcessCreateProps_To_ProcessCreatePropsReversed_Transformations.Add(interfacesKnowledgeBaseProcessCreatePropsInput, domainProcessCreatePropsOutput);
            return domainProcessCreatePropsOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateProps, DigicircMatchmaking.BO.ProcessCreateProps> ProcessCreateProps_To_ProcessCreatePropsReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateProps, DigicircMatchmaking.BO.ProcessCreateProps>();
        public DigicircMatchmaking.BO.ProcessCreateProps ProcessCreateProps_To_ProcessCreatePropsReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateProps interfacesKnowledgeBaseProcessCreatePropsInput, DigicircMatchmaking.BO.ProcessCreateProps domainProcessCreatePropsInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseProcessCreatePropsInput == null) return default(DigicircMatchmaking.BO.ProcessCreateProps);
            if(domainProcessCreatePropsInstance == null)
                return ProcessCreateProps_To_ProcessCreatePropsReversed (interfacesKnowledgeBaseProcessCreatePropsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ProcessCreateProps_To_ProcessCreatePropsReversed_MappingTransformations.ContainsKey(interfacesKnowledgeBaseProcessCreatePropsInput))
            {
                return ProcessCreateProps_To_ProcessCreatePropsReversed_MappingTransformations[interfacesKnowledgeBaseProcessCreatePropsInput];
            }
            // Instantiate target root
            var domainProcessCreatePropsOutput = domainProcessCreatePropsInstance;
            // ProcessCreateProps.Id to ProcessCreateProps.Id
            domainProcessCreatePropsOutput.Id = interfacesKnowledgeBaseProcessCreatePropsInput?.Id;
            // ProcessCreateProps.Name to ProcessCreateProps.Name
            domainProcessCreatePropsOutput.Name = interfacesKnowledgeBaseProcessCreatePropsInput?.Name;
            // ProcessCreateProps.Notes to ProcessCreateProps.Notes
            domainProcessCreatePropsOutput.Notes = interfacesKnowledgeBaseProcessCreatePropsInput?.Notes;
            // ProcessCreateProps.Ref to ProcessCreateProps.Ref
            domainProcessCreatePropsOutput.Ref = interfacesKnowledgeBaseProcessCreatePropsInput?.Ref;
            // ProcessCreateProps.SourceId to ProcessCreateProps.SourceId
            domainProcessCreatePropsOutput.SourceId = interfacesKnowledgeBaseProcessCreatePropsInput?.SourceId;
            // ProcessCreateProps.ProductId to ProcessCreateProps.ProductId
            domainProcessCreatePropsOutput.ProductId = interfacesKnowledgeBaseProcessCreatePropsInput?.ProductId;
            ProcessCreateProps_To_ProcessCreatePropsReversed_MappingTransformations.Add(interfacesKnowledgeBaseProcessCreatePropsInput, domainProcessCreatePropsOutput);
            return domainProcessCreatePropsOutput;
        }

        #endregion

        #region Transformation 'ActorCreateRequest_To_ActorCreateRequest'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.ActorCreateRequest, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateRequest> ActorCreateRequest_To_ActorCreateRequest_Transformations = new Dictionary<DigicircMatchmaking.BO.ActorCreateRequest, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateRequest>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateRequest ActorCreateRequest_To_ActorCreateRequest(DigicircMatchmaking.BO.ActorCreateRequest domainActorCreateRequestInput)
        {
            //Leave, if there is nothing to transform
            if(domainActorCreateRequestInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateRequest);
            // If the same Transformation has already ran, get the stored Output and return
            if(ActorCreateRequest_To_ActorCreateRequest_Transformations.ContainsKey(domainActorCreateRequestInput))
            {
                return ActorCreateRequest_To_ActorCreateRequest_Transformations[domainActorCreateRequestInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseActorCreateRequestOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateRequest();
            // ActorCreateRequest.Statements to ActorCreateRequest.statements
            interfacesKnowledgeBaseActorCreateRequestOutput.statements = domainActorCreateRequestInput?.Statements?.Select(ActorCreateStatements_To_ActorCreateStatements)?.ToArray();
            ActorCreateRequest_To_ActorCreateRequest_Transformations.Add(domainActorCreateRequestInput, interfacesKnowledgeBaseActorCreateRequestOutput);
            return interfacesKnowledgeBaseActorCreateRequestOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.ActorCreateRequest, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateRequest> ActorCreateRequest_To_ActorCreateRequest_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.ActorCreateRequest, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateRequest>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateRequest ActorCreateRequest_To_ActorCreateRequest(DigicircMatchmaking.BO.ActorCreateRequest domainActorCreateRequestInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateRequest interfacesKnowledgeBaseActorCreateRequestInstance)
        {
            //Leave, if there is nothing to transform
            if(domainActorCreateRequestInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateRequest);
            if(interfacesKnowledgeBaseActorCreateRequestInstance == null)
                return ActorCreateRequest_To_ActorCreateRequest (domainActorCreateRequestInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ActorCreateRequest_To_ActorCreateRequest_MappingTransformations.ContainsKey(domainActorCreateRequestInput))
            {
                return ActorCreateRequest_To_ActorCreateRequest_MappingTransformations[domainActorCreateRequestInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseActorCreateRequestOutput = interfacesKnowledgeBaseActorCreateRequestInstance;
            // ActorCreateRequest.Statements to ActorCreateRequest.statements
            var statements_Statements_MappedInstanceListCount = interfacesKnowledgeBaseActorCreateRequestOutput.statements == null ? 0 : interfacesKnowledgeBaseActorCreateRequestOutput.statements.Count();
            var statements_Statements_InputListCount = domainActorCreateRequestInput.Statements == null ? 0 : domainActorCreateRequestInput.Statements.Count();
            var statements_Statements_TemporaryOutputList = new List<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateStatements>();
            if(statements_Statements_InputListCount > 0)
            {
                int statements_Statements_Index = 0;
                foreach(var initialItem in domainActorCreateRequestInput.Statements)
                {
                    if(statements_Statements_Index <= statements_Statements_MappedInstanceListCount -1 )
                    {
                        var instancedItem = interfacesKnowledgeBaseActorCreateRequestOutput.statements[statements_Statements_Index];
                        var transformedItem = ActorCreateStatements_To_ActorCreateStatements(initialItem, instancedItem);
                        if(transformedItem != null) statements_Statements_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    statements_Statements_Index++;
                }
                interfacesKnowledgeBaseActorCreateRequestOutput.statements = statements_Statements_TemporaryOutputList.ToArray();
            }
            ActorCreateRequest_To_ActorCreateRequest_MappingTransformations.Add(domainActorCreateRequestInput, interfacesKnowledgeBaseActorCreateRequestOutput);
            return interfacesKnowledgeBaseActorCreateRequestOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateRequest, DigicircMatchmaking.BO.ActorCreateRequest> ActorCreateRequest_To_ActorCreateRequestReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateRequest, DigicircMatchmaking.BO.ActorCreateRequest>();
        public DigicircMatchmaking.BO.ActorCreateRequest ActorCreateRequest_To_ActorCreateRequestReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateRequest interfacesKnowledgeBaseActorCreateRequestInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseActorCreateRequestInput == null) return default(DigicircMatchmaking.BO.ActorCreateRequest);
            // If the same Transformation has already ran, get the stored Output and return
            if(ActorCreateRequest_To_ActorCreateRequestReversed_Transformations.ContainsKey(interfacesKnowledgeBaseActorCreateRequestInput))
            {
                return ActorCreateRequest_To_ActorCreateRequestReversed_Transformations[interfacesKnowledgeBaseActorCreateRequestInput];
            }
            // Instantiate target root
            var domainActorCreateRequestOutput = new DigicircMatchmaking.BO.ActorCreateRequest();
            // ActorCreateRequest.statements to ActorCreateRequest.Statements
            domainActorCreateRequestOutput.Statements = interfacesKnowledgeBaseActorCreateRequestInput?.statements?.Select(ActorCreateStatements_To_ActorCreateStatementsReversed)?.ToList();
            ActorCreateRequest_To_ActorCreateRequestReversed_Transformations.Add(interfacesKnowledgeBaseActorCreateRequestInput, domainActorCreateRequestOutput);
            return domainActorCreateRequestOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateRequest, DigicircMatchmaking.BO.ActorCreateRequest> ActorCreateRequest_To_ActorCreateRequestReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateRequest, DigicircMatchmaking.BO.ActorCreateRequest>();
        public DigicircMatchmaking.BO.ActorCreateRequest ActorCreateRequest_To_ActorCreateRequestReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateRequest interfacesKnowledgeBaseActorCreateRequestInput, DigicircMatchmaking.BO.ActorCreateRequest domainActorCreateRequestInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseActorCreateRequestInput == null) return default(DigicircMatchmaking.BO.ActorCreateRequest);
            if(domainActorCreateRequestInstance == null)
                return ActorCreateRequest_To_ActorCreateRequestReversed (interfacesKnowledgeBaseActorCreateRequestInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ActorCreateRequest_To_ActorCreateRequestReversed_MappingTransformations.ContainsKey(interfacesKnowledgeBaseActorCreateRequestInput))
            {
                return ActorCreateRequest_To_ActorCreateRequestReversed_MappingTransformations[interfacesKnowledgeBaseActorCreateRequestInput];
            }
            // Instantiate target root
            var domainActorCreateRequestOutput = domainActorCreateRequestInstance;
            // ActorCreateRequest.statements to ActorCreateRequest.Statements
            var Statements_statements_MappedInstanceListCount = domainActorCreateRequestOutput.Statements == null ? 0 : domainActorCreateRequestOutput.Statements.Count();
            var Statements_statements_InputListCount = interfacesKnowledgeBaseActorCreateRequestInput.statements == null ? 0 : interfacesKnowledgeBaseActorCreateRequestInput.statements.Count();
            var Statements_statements_TemporaryOutputList = new List<DigicircMatchmaking.BO.ActorCreateStatements>();
            if(Statements_statements_InputListCount > 0)
            {
                int Statements_statements_Index = 0;
                foreach(var initialItem in interfacesKnowledgeBaseActorCreateRequestInput.statements)
                {
                    if(Statements_statements_Index <= Statements_statements_MappedInstanceListCount -1 )
                    {
                        var instancedItem = domainActorCreateRequestOutput.Statements[Statements_statements_Index];
                        var transformedItem = ActorCreateStatements_To_ActorCreateStatementsReversed(initialItem, instancedItem);
                        if(transformedItem != null) Statements_statements_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Statements_statements_Index++;
                }
                domainActorCreateRequestOutput.Statements = Statements_statements_TemporaryOutputList;
            }
            ActorCreateRequest_To_ActorCreateRequestReversed_MappingTransformations.Add(interfacesKnowledgeBaseActorCreateRequestInput, domainActorCreateRequestOutput);
            return domainActorCreateRequestOutput;
        }

        #endregion

        #region Transformation 'ActorCreateStatements_To_ActorCreateStatements'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.ActorCreateStatements, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateStatements> ActorCreateStatements_To_ActorCreateStatements_Transformations = new Dictionary<DigicircMatchmaking.BO.ActorCreateStatements, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateStatements>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateStatements ActorCreateStatements_To_ActorCreateStatements(DigicircMatchmaking.BO.ActorCreateStatements domainActorCreateStatementsInput)
        {
            //Leave, if there is nothing to transform
            if(domainActorCreateStatementsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateStatements);
            // If the same Transformation has already ran, get the stored Output and return
            if(ActorCreateStatements_To_ActorCreateStatements_Transformations.ContainsKey(domainActorCreateStatementsInput))
            {
                return ActorCreateStatements_To_ActorCreateStatements_Transformations[domainActorCreateStatementsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseActorCreateStatementsOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateStatements();
            // ActorCreateStatements.Statement to ActorCreateStatements.statement
            interfacesKnowledgeBaseActorCreateStatementsOutput.statement = domainActorCreateStatementsInput?.Statement;
            // ActorCreateStatements.Parameters to ActorCreateStatements.parameters
            interfacesKnowledgeBaseActorCreateStatementsOutput.parameters = ActorCreateParameters_To_ActorCreateParameters(domainActorCreateStatementsInput?.Parameters);
            ActorCreateStatements_To_ActorCreateStatements_Transformations.Add(domainActorCreateStatementsInput, interfacesKnowledgeBaseActorCreateStatementsOutput);
            return interfacesKnowledgeBaseActorCreateStatementsOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.ActorCreateStatements, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateStatements> ActorCreateStatements_To_ActorCreateStatements_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.ActorCreateStatements, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateStatements>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateStatements ActorCreateStatements_To_ActorCreateStatements(DigicircMatchmaking.BO.ActorCreateStatements domainActorCreateStatementsInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateStatements interfacesKnowledgeBaseActorCreateStatementsInstance)
        {
            //Leave, if there is nothing to transform
            if(domainActorCreateStatementsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateStatements);
            if(interfacesKnowledgeBaseActorCreateStatementsInstance == null)
                return ActorCreateStatements_To_ActorCreateStatements (domainActorCreateStatementsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ActorCreateStatements_To_ActorCreateStatements_MappingTransformations.ContainsKey(domainActorCreateStatementsInput))
            {
                return ActorCreateStatements_To_ActorCreateStatements_MappingTransformations[domainActorCreateStatementsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseActorCreateStatementsOutput = interfacesKnowledgeBaseActorCreateStatementsInstance;
            // ActorCreateStatements.Statement to ActorCreateStatements.statement
            interfacesKnowledgeBaseActorCreateStatementsOutput.statement = domainActorCreateStatementsInput?.Statement;
            // ActorCreateStatements.Parameters to ActorCreateStatements.parameters
            interfacesKnowledgeBaseActorCreateStatementsOutput.parameters = ActorCreateParameters_To_ActorCreateParameters(domainActorCreateStatementsInput?.Parameters);
            ActorCreateStatements_To_ActorCreateStatements_MappingTransformations.Add(domainActorCreateStatementsInput, interfacesKnowledgeBaseActorCreateStatementsOutput);
            return interfacesKnowledgeBaseActorCreateStatementsOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateStatements, DigicircMatchmaking.BO.ActorCreateStatements> ActorCreateStatements_To_ActorCreateStatementsReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateStatements, DigicircMatchmaking.BO.ActorCreateStatements>();
        public DigicircMatchmaking.BO.ActorCreateStatements ActorCreateStatements_To_ActorCreateStatementsReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateStatements interfacesKnowledgeBaseActorCreateStatementsInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseActorCreateStatementsInput == null) return default(DigicircMatchmaking.BO.ActorCreateStatements);
            // If the same Transformation has already ran, get the stored Output and return
            if(ActorCreateStatements_To_ActorCreateStatementsReversed_Transformations.ContainsKey(interfacesKnowledgeBaseActorCreateStatementsInput))
            {
                return ActorCreateStatements_To_ActorCreateStatementsReversed_Transformations[interfacesKnowledgeBaseActorCreateStatementsInput];
            }
            // Instantiate target root
            var domainActorCreateStatementsOutput = new DigicircMatchmaking.BO.ActorCreateStatements();
            // ActorCreateStatements.statement to ActorCreateStatements.Statement
            domainActorCreateStatementsOutput.Statement = interfacesKnowledgeBaseActorCreateStatementsInput?.statement;
            // ActorCreateStatements.parameters to ActorCreateStatements.Parameters
            domainActorCreateStatementsOutput.Parameters = ActorCreateParameters_To_ActorCreateParametersReversed(interfacesKnowledgeBaseActorCreateStatementsInput?.parameters);
            ActorCreateStatements_To_ActorCreateStatementsReversed_Transformations.Add(interfacesKnowledgeBaseActorCreateStatementsInput, domainActorCreateStatementsOutput);
            return domainActorCreateStatementsOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateStatements, DigicircMatchmaking.BO.ActorCreateStatements> ActorCreateStatements_To_ActorCreateStatementsReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateStatements, DigicircMatchmaking.BO.ActorCreateStatements>();
        public DigicircMatchmaking.BO.ActorCreateStatements ActorCreateStatements_To_ActorCreateStatementsReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateStatements interfacesKnowledgeBaseActorCreateStatementsInput, DigicircMatchmaking.BO.ActorCreateStatements domainActorCreateStatementsInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseActorCreateStatementsInput == null) return default(DigicircMatchmaking.BO.ActorCreateStatements);
            if(domainActorCreateStatementsInstance == null)
                return ActorCreateStatements_To_ActorCreateStatementsReversed (interfacesKnowledgeBaseActorCreateStatementsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ActorCreateStatements_To_ActorCreateStatementsReversed_MappingTransformations.ContainsKey(interfacesKnowledgeBaseActorCreateStatementsInput))
            {
                return ActorCreateStatements_To_ActorCreateStatementsReversed_MappingTransformations[interfacesKnowledgeBaseActorCreateStatementsInput];
            }
            // Instantiate target root
            var domainActorCreateStatementsOutput = domainActorCreateStatementsInstance;
            // ActorCreateStatements.statement to ActorCreateStatements.Statement
            domainActorCreateStatementsOutput.Statement = interfacesKnowledgeBaseActorCreateStatementsInput?.statement;
            // ActorCreateStatements.parameters to ActorCreateStatements.Parameters
            domainActorCreateStatementsOutput.Parameters = ActorCreateParameters_To_ActorCreateParametersReversed(interfacesKnowledgeBaseActorCreateStatementsInput?.parameters);
            ActorCreateStatements_To_ActorCreateStatementsReversed_MappingTransformations.Add(interfacesKnowledgeBaseActorCreateStatementsInput, domainActorCreateStatementsOutput);
            return domainActorCreateStatementsOutput;
        }

        #endregion

        #region Transformation 'ActorCreateParameters_To_ActorCreateParameters'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.ActorCreateParameters, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateParameters> ActorCreateParameters_To_ActorCreateParameters_Transformations = new Dictionary<DigicircMatchmaking.BO.ActorCreateParameters, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateParameters>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateParameters ActorCreateParameters_To_ActorCreateParameters(DigicircMatchmaking.BO.ActorCreateParameters domainActorCreateParametersInput)
        {
            //Leave, if there is nothing to transform
            if(domainActorCreateParametersInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateParameters);
            // If the same Transformation has already ran, get the stored Output and return
            if(ActorCreateParameters_To_ActorCreateParameters_Transformations.ContainsKey(domainActorCreateParametersInput))
            {
                return ActorCreateParameters_To_ActorCreateParameters_Transformations[domainActorCreateParametersInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseActorCreateParametersOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateParameters();
            // ActorCreateParameters.Props to ActorCreateParameters.props
            interfacesKnowledgeBaseActorCreateParametersOutput.props = ActorCreateProps_To_ActorCreateProps(domainActorCreateParametersInput?.Props);
            ActorCreateParameters_To_ActorCreateParameters_Transformations.Add(domainActorCreateParametersInput, interfacesKnowledgeBaseActorCreateParametersOutput);
            return interfacesKnowledgeBaseActorCreateParametersOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.ActorCreateParameters, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateParameters> ActorCreateParameters_To_ActorCreateParameters_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.ActorCreateParameters, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateParameters>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateParameters ActorCreateParameters_To_ActorCreateParameters(DigicircMatchmaking.BO.ActorCreateParameters domainActorCreateParametersInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateParameters interfacesKnowledgeBaseActorCreateParametersInstance)
        {
            //Leave, if there is nothing to transform
            if(domainActorCreateParametersInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateParameters);
            if(interfacesKnowledgeBaseActorCreateParametersInstance == null)
                return ActorCreateParameters_To_ActorCreateParameters (domainActorCreateParametersInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ActorCreateParameters_To_ActorCreateParameters_MappingTransformations.ContainsKey(domainActorCreateParametersInput))
            {
                return ActorCreateParameters_To_ActorCreateParameters_MappingTransformations[domainActorCreateParametersInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseActorCreateParametersOutput = interfacesKnowledgeBaseActorCreateParametersInstance;
            // ActorCreateParameters.Props to ActorCreateParameters.props
            interfacesKnowledgeBaseActorCreateParametersOutput.props = ActorCreateProps_To_ActorCreateProps(domainActorCreateParametersInput?.Props);
            ActorCreateParameters_To_ActorCreateParameters_MappingTransformations.Add(domainActorCreateParametersInput, interfacesKnowledgeBaseActorCreateParametersOutput);
            return interfacesKnowledgeBaseActorCreateParametersOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateParameters, DigicircMatchmaking.BO.ActorCreateParameters> ActorCreateParameters_To_ActorCreateParametersReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateParameters, DigicircMatchmaking.BO.ActorCreateParameters>();
        public DigicircMatchmaking.BO.ActorCreateParameters ActorCreateParameters_To_ActorCreateParametersReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateParameters interfacesKnowledgeBaseActorCreateParametersInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseActorCreateParametersInput == null) return default(DigicircMatchmaking.BO.ActorCreateParameters);
            // If the same Transformation has already ran, get the stored Output and return
            if(ActorCreateParameters_To_ActorCreateParametersReversed_Transformations.ContainsKey(interfacesKnowledgeBaseActorCreateParametersInput))
            {
                return ActorCreateParameters_To_ActorCreateParametersReversed_Transformations[interfacesKnowledgeBaseActorCreateParametersInput];
            }
            // Instantiate target root
            var domainActorCreateParametersOutput = new DigicircMatchmaking.BO.ActorCreateParameters();
            // ActorCreateParameters.props to ActorCreateParameters.Props
            domainActorCreateParametersOutput.Props = ActorCreateProps_To_ActorCreatePropsReversed(interfacesKnowledgeBaseActorCreateParametersInput?.props);
            ActorCreateParameters_To_ActorCreateParametersReversed_Transformations.Add(interfacesKnowledgeBaseActorCreateParametersInput, domainActorCreateParametersOutput);
            return domainActorCreateParametersOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateParameters, DigicircMatchmaking.BO.ActorCreateParameters> ActorCreateParameters_To_ActorCreateParametersReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateParameters, DigicircMatchmaking.BO.ActorCreateParameters>();
        public DigicircMatchmaking.BO.ActorCreateParameters ActorCreateParameters_To_ActorCreateParametersReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateParameters interfacesKnowledgeBaseActorCreateParametersInput, DigicircMatchmaking.BO.ActorCreateParameters domainActorCreateParametersInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseActorCreateParametersInput == null) return default(DigicircMatchmaking.BO.ActorCreateParameters);
            if(domainActorCreateParametersInstance == null)
                return ActorCreateParameters_To_ActorCreateParametersReversed (interfacesKnowledgeBaseActorCreateParametersInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ActorCreateParameters_To_ActorCreateParametersReversed_MappingTransformations.ContainsKey(interfacesKnowledgeBaseActorCreateParametersInput))
            {
                return ActorCreateParameters_To_ActorCreateParametersReversed_MappingTransformations[interfacesKnowledgeBaseActorCreateParametersInput];
            }
            // Instantiate target root
            var domainActorCreateParametersOutput = domainActorCreateParametersInstance;
            // ActorCreateParameters.props to ActorCreateParameters.Props
            domainActorCreateParametersOutput.Props = ActorCreateProps_To_ActorCreatePropsReversed(interfacesKnowledgeBaseActorCreateParametersInput?.props);
            ActorCreateParameters_To_ActorCreateParametersReversed_MappingTransformations.Add(interfacesKnowledgeBaseActorCreateParametersInput, domainActorCreateParametersOutput);
            return domainActorCreateParametersOutput;
        }

        #endregion

        #region Transformation 'ActorCreateProps_To_ActorCreateProps'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.ActorCreateProps, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateProps> ActorCreateProps_To_ActorCreateProps_Transformations = new Dictionary<DigicircMatchmaking.BO.ActorCreateProps, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateProps>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateProps ActorCreateProps_To_ActorCreateProps(DigicircMatchmaking.BO.ActorCreateProps domainActorCreatePropsInput)
        {
            //Leave, if there is nothing to transform
            if(domainActorCreatePropsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateProps);
            // If the same Transformation has already ran, get the stored Output and return
            if(ActorCreateProps_To_ActorCreateProps_Transformations.ContainsKey(domainActorCreatePropsInput))
            {
                return ActorCreateProps_To_ActorCreateProps_Transformations[domainActorCreatePropsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseActorCreatePropsOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateProps();
            // ActorCreateProps.Id to ActorCreateProps.Id
            interfacesKnowledgeBaseActorCreatePropsOutput.Id = domainActorCreatePropsInput?.Id;
            // ActorCreateProps.Name to ActorCreateProps.Name
            interfacesKnowledgeBaseActorCreatePropsOutput.Name = domainActorCreatePropsInput?.Name;
            ActorCreateProps_To_ActorCreateProps_Transformations.Add(domainActorCreatePropsInput, interfacesKnowledgeBaseActorCreatePropsOutput);
            return interfacesKnowledgeBaseActorCreatePropsOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.ActorCreateProps, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateProps> ActorCreateProps_To_ActorCreateProps_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.ActorCreateProps, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateProps>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateProps ActorCreateProps_To_ActorCreateProps(DigicircMatchmaking.BO.ActorCreateProps domainActorCreatePropsInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateProps interfacesKnowledgeBaseActorCreatePropsInstance)
        {
            //Leave, if there is nothing to transform
            if(domainActorCreatePropsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateProps);
            if(interfacesKnowledgeBaseActorCreatePropsInstance == null)
                return ActorCreateProps_To_ActorCreateProps (domainActorCreatePropsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ActorCreateProps_To_ActorCreateProps_MappingTransformations.ContainsKey(domainActorCreatePropsInput))
            {
                return ActorCreateProps_To_ActorCreateProps_MappingTransformations[domainActorCreatePropsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseActorCreatePropsOutput = interfacesKnowledgeBaseActorCreatePropsInstance;
            // ActorCreateProps.Id to ActorCreateProps.Id
            interfacesKnowledgeBaseActorCreatePropsOutput.Id = domainActorCreatePropsInput?.Id;
            // ActorCreateProps.Name to ActorCreateProps.Name
            interfacesKnowledgeBaseActorCreatePropsOutput.Name = domainActorCreatePropsInput?.Name;
            ActorCreateProps_To_ActorCreateProps_MappingTransformations.Add(domainActorCreatePropsInput, interfacesKnowledgeBaseActorCreatePropsOutput);
            return interfacesKnowledgeBaseActorCreatePropsOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateProps, DigicircMatchmaking.BO.ActorCreateProps> ActorCreateProps_To_ActorCreatePropsReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateProps, DigicircMatchmaking.BO.ActorCreateProps>();
        public DigicircMatchmaking.BO.ActorCreateProps ActorCreateProps_To_ActorCreatePropsReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateProps interfacesKnowledgeBaseActorCreatePropsInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseActorCreatePropsInput == null) return default(DigicircMatchmaking.BO.ActorCreateProps);
            // If the same Transformation has already ran, get the stored Output and return
            if(ActorCreateProps_To_ActorCreatePropsReversed_Transformations.ContainsKey(interfacesKnowledgeBaseActorCreatePropsInput))
            {
                return ActorCreateProps_To_ActorCreatePropsReversed_Transformations[interfacesKnowledgeBaseActorCreatePropsInput];
            }
            // Instantiate target root
            var domainActorCreatePropsOutput = new DigicircMatchmaking.BO.ActorCreateProps();
            // ActorCreateProps.Id to ActorCreateProps.Id
            domainActorCreatePropsOutput.Id = interfacesKnowledgeBaseActorCreatePropsInput?.Id;
            // ActorCreateProps.Name to ActorCreateProps.Name
            domainActorCreatePropsOutput.Name = interfacesKnowledgeBaseActorCreatePropsInput?.Name;
            ActorCreateProps_To_ActorCreatePropsReversed_Transformations.Add(interfacesKnowledgeBaseActorCreatePropsInput, domainActorCreatePropsOutput);
            return domainActorCreatePropsOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateProps, DigicircMatchmaking.BO.ActorCreateProps> ActorCreateProps_To_ActorCreatePropsReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateProps, DigicircMatchmaking.BO.ActorCreateProps>();
        public DigicircMatchmaking.BO.ActorCreateProps ActorCreateProps_To_ActorCreatePropsReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateProps interfacesKnowledgeBaseActorCreatePropsInput, DigicircMatchmaking.BO.ActorCreateProps domainActorCreatePropsInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseActorCreatePropsInput == null) return default(DigicircMatchmaking.BO.ActorCreateProps);
            if(domainActorCreatePropsInstance == null)
                return ActorCreateProps_To_ActorCreatePropsReversed (interfacesKnowledgeBaseActorCreatePropsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ActorCreateProps_To_ActorCreatePropsReversed_MappingTransformations.ContainsKey(interfacesKnowledgeBaseActorCreatePropsInput))
            {
                return ActorCreateProps_To_ActorCreatePropsReversed_MappingTransformations[interfacesKnowledgeBaseActorCreatePropsInput];
            }
            // Instantiate target root
            var domainActorCreatePropsOutput = domainActorCreatePropsInstance;
            // ActorCreateProps.Id to ActorCreateProps.Id
            domainActorCreatePropsOutput.Id = interfacesKnowledgeBaseActorCreatePropsInput?.Id;
            // ActorCreateProps.Name to ActorCreateProps.Name
            domainActorCreatePropsOutput.Name = interfacesKnowledgeBaseActorCreatePropsInput?.Name;
            ActorCreateProps_To_ActorCreatePropsReversed_MappingTransformations.Add(interfacesKnowledgeBaseActorCreatePropsInput, domainActorCreatePropsOutput);
            return domainActorCreatePropsOutput;
        }

        #endregion

        #region Transformation 'ConnectActorMaterialRequest_To_ConnectActorMaterialRequest'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.ConnectActorMaterialRequest, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest> ConnectActorMaterialRequest_To_ConnectActorMaterialRequest_Transformations = new Dictionary<DigicircMatchmaking.BO.ConnectActorMaterialRequest, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest ConnectActorMaterialRequest_To_ConnectActorMaterialRequest(DigicircMatchmaking.BO.ConnectActorMaterialRequest domainConnectActorMaterialRequestInput)
        {
            //Leave, if there is nothing to transform
            if(domainConnectActorMaterialRequestInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest);
            // If the same Transformation has already ran, get the stored Output and return
            if(ConnectActorMaterialRequest_To_ConnectActorMaterialRequest_Transformations.ContainsKey(domainConnectActorMaterialRequestInput))
            {
                return ConnectActorMaterialRequest_To_ConnectActorMaterialRequest_Transformations[domainConnectActorMaterialRequestInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseConnectActorMaterialRequestOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest();
            // ConnectActorMaterialRequest.Statements to ConnectActorMaterialRequest.statements
            interfacesKnowledgeBaseConnectActorMaterialRequestOutput.statements = domainConnectActorMaterialRequestInput?.Statements?.Select(ConnectActorMaterialStatements_To_ConnectActorMaterialStatements)?.ToArray();
            ConnectActorMaterialRequest_To_ConnectActorMaterialRequest_Transformations.Add(domainConnectActorMaterialRequestInput, interfacesKnowledgeBaseConnectActorMaterialRequestOutput);
            return interfacesKnowledgeBaseConnectActorMaterialRequestOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.ConnectActorMaterialRequest, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest> ConnectActorMaterialRequest_To_ConnectActorMaterialRequest_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.ConnectActorMaterialRequest, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest ConnectActorMaterialRequest_To_ConnectActorMaterialRequest(DigicircMatchmaking.BO.ConnectActorMaterialRequest domainConnectActorMaterialRequestInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest interfacesKnowledgeBaseConnectActorMaterialRequestInstance)
        {
            //Leave, if there is nothing to transform
            if(domainConnectActorMaterialRequestInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest);
            if(interfacesKnowledgeBaseConnectActorMaterialRequestInstance == null)
                return ConnectActorMaterialRequest_To_ConnectActorMaterialRequest (domainConnectActorMaterialRequestInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ConnectActorMaterialRequest_To_ConnectActorMaterialRequest_MappingTransformations.ContainsKey(domainConnectActorMaterialRequestInput))
            {
                return ConnectActorMaterialRequest_To_ConnectActorMaterialRequest_MappingTransformations[domainConnectActorMaterialRequestInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseConnectActorMaterialRequestOutput = interfacesKnowledgeBaseConnectActorMaterialRequestInstance;
            // ConnectActorMaterialRequest.Statements to ConnectActorMaterialRequest.statements
            var statements_Statements_MappedInstanceListCount = interfacesKnowledgeBaseConnectActorMaterialRequestOutput.statements == null ? 0 : interfacesKnowledgeBaseConnectActorMaterialRequestOutput.statements.Count();
            var statements_Statements_InputListCount = domainConnectActorMaterialRequestInput.Statements == null ? 0 : domainConnectActorMaterialRequestInput.Statements.Count();
            var statements_Statements_TemporaryOutputList = new List<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialStatements>();
            if(statements_Statements_InputListCount > 0)
            {
                int statements_Statements_Index = 0;
                foreach(var initialItem in domainConnectActorMaterialRequestInput.Statements)
                {
                    if(statements_Statements_Index <= statements_Statements_MappedInstanceListCount -1 )
                    {
                        var instancedItem = interfacesKnowledgeBaseConnectActorMaterialRequestOutput.statements[statements_Statements_Index];
                        var transformedItem = ConnectActorMaterialStatements_To_ConnectActorMaterialStatements(initialItem, instancedItem);
                        if(transformedItem != null) statements_Statements_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    statements_Statements_Index++;
                }
                interfacesKnowledgeBaseConnectActorMaterialRequestOutput.statements = statements_Statements_TemporaryOutputList.ToArray();
            }
            ConnectActorMaterialRequest_To_ConnectActorMaterialRequest_MappingTransformations.Add(domainConnectActorMaterialRequestInput, interfacesKnowledgeBaseConnectActorMaterialRequestOutput);
            return interfacesKnowledgeBaseConnectActorMaterialRequestOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest, DigicircMatchmaking.BO.ConnectActorMaterialRequest> ConnectActorMaterialRequest_To_ConnectActorMaterialRequestReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest, DigicircMatchmaking.BO.ConnectActorMaterialRequest>();
        public DigicircMatchmaking.BO.ConnectActorMaterialRequest ConnectActorMaterialRequest_To_ConnectActorMaterialRequestReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest interfacesKnowledgeBaseConnectActorMaterialRequestInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseConnectActorMaterialRequestInput == null) return default(DigicircMatchmaking.BO.ConnectActorMaterialRequest);
            // If the same Transformation has already ran, get the stored Output and return
            if(ConnectActorMaterialRequest_To_ConnectActorMaterialRequestReversed_Transformations.ContainsKey(interfacesKnowledgeBaseConnectActorMaterialRequestInput))
            {
                return ConnectActorMaterialRequest_To_ConnectActorMaterialRequestReversed_Transformations[interfacesKnowledgeBaseConnectActorMaterialRequestInput];
            }
            // Instantiate target root
            var domainConnectActorMaterialRequestOutput = new DigicircMatchmaking.BO.ConnectActorMaterialRequest();
            // ConnectActorMaterialRequest.statements to ConnectActorMaterialRequest.Statements
            domainConnectActorMaterialRequestOutput.Statements = interfacesKnowledgeBaseConnectActorMaterialRequestInput?.statements?.Select(ConnectActorMaterialStatements_To_ConnectActorMaterialStatementsReversed)?.ToList();
            ConnectActorMaterialRequest_To_ConnectActorMaterialRequestReversed_Transformations.Add(interfacesKnowledgeBaseConnectActorMaterialRequestInput, domainConnectActorMaterialRequestOutput);
            return domainConnectActorMaterialRequestOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest, DigicircMatchmaking.BO.ConnectActorMaterialRequest> ConnectActorMaterialRequest_To_ConnectActorMaterialRequestReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest, DigicircMatchmaking.BO.ConnectActorMaterialRequest>();
        public DigicircMatchmaking.BO.ConnectActorMaterialRequest ConnectActorMaterialRequest_To_ConnectActorMaterialRequestReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest interfacesKnowledgeBaseConnectActorMaterialRequestInput, DigicircMatchmaking.BO.ConnectActorMaterialRequest domainConnectActorMaterialRequestInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseConnectActorMaterialRequestInput == null) return default(DigicircMatchmaking.BO.ConnectActorMaterialRequest);
            if(domainConnectActorMaterialRequestInstance == null)
                return ConnectActorMaterialRequest_To_ConnectActorMaterialRequestReversed (interfacesKnowledgeBaseConnectActorMaterialRequestInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ConnectActorMaterialRequest_To_ConnectActorMaterialRequestReversed_MappingTransformations.ContainsKey(interfacesKnowledgeBaseConnectActorMaterialRequestInput))
            {
                return ConnectActorMaterialRequest_To_ConnectActorMaterialRequestReversed_MappingTransformations[interfacesKnowledgeBaseConnectActorMaterialRequestInput];
            }
            // Instantiate target root
            var domainConnectActorMaterialRequestOutput = domainConnectActorMaterialRequestInstance;
            // ConnectActorMaterialRequest.statements to ConnectActorMaterialRequest.Statements
            var Statements_statements_MappedInstanceListCount = domainConnectActorMaterialRequestOutput.Statements == null ? 0 : domainConnectActorMaterialRequestOutput.Statements.Count();
            var Statements_statements_InputListCount = interfacesKnowledgeBaseConnectActorMaterialRequestInput.statements == null ? 0 : interfacesKnowledgeBaseConnectActorMaterialRequestInput.statements.Count();
            var Statements_statements_TemporaryOutputList = new List<DigicircMatchmaking.BO.ConnectActorMaterialStatements>();
            if(Statements_statements_InputListCount > 0)
            {
                int Statements_statements_Index = 0;
                foreach(var initialItem in interfacesKnowledgeBaseConnectActorMaterialRequestInput.statements)
                {
                    if(Statements_statements_Index <= Statements_statements_MappedInstanceListCount -1 )
                    {
                        var instancedItem = domainConnectActorMaterialRequestOutput.Statements[Statements_statements_Index];
                        var transformedItem = ConnectActorMaterialStatements_To_ConnectActorMaterialStatementsReversed(initialItem, instancedItem);
                        if(transformedItem != null) Statements_statements_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Statements_statements_Index++;
                }
                domainConnectActorMaterialRequestOutput.Statements = Statements_statements_TemporaryOutputList;
            }
            ConnectActorMaterialRequest_To_ConnectActorMaterialRequestReversed_MappingTransformations.Add(interfacesKnowledgeBaseConnectActorMaterialRequestInput, domainConnectActorMaterialRequestOutput);
            return domainConnectActorMaterialRequestOutput;
        }

        #endregion

        #region Transformation 'ConnectActorMaterialStatements_To_ConnectActorMaterialStatements'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.ConnectActorMaterialStatements, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialStatements> ConnectActorMaterialStatements_To_ConnectActorMaterialStatements_Transformations = new Dictionary<DigicircMatchmaking.BO.ConnectActorMaterialStatements, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialStatements>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialStatements ConnectActorMaterialStatements_To_ConnectActorMaterialStatements(DigicircMatchmaking.BO.ConnectActorMaterialStatements domainConnectActorMaterialStatementsInput)
        {
            //Leave, if there is nothing to transform
            if(domainConnectActorMaterialStatementsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialStatements);
            // If the same Transformation has already ran, get the stored Output and return
            if(ConnectActorMaterialStatements_To_ConnectActorMaterialStatements_Transformations.ContainsKey(domainConnectActorMaterialStatementsInput))
            {
                return ConnectActorMaterialStatements_To_ConnectActorMaterialStatements_Transformations[domainConnectActorMaterialStatementsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseConnectActorMaterialStatementsOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialStatements();
            // ConnectActorMaterialStatements.Statement to ConnectActorMaterialStatements.statement
            interfacesKnowledgeBaseConnectActorMaterialStatementsOutput.statement = domainConnectActorMaterialStatementsInput?.Statement;
            // ConnectActorMaterialStatements.Parameters to ConnectActorMaterialStatements.parameters
            interfacesKnowledgeBaseConnectActorMaterialStatementsOutput.parameters = ConnectActorMaterialParameters_To_ConnectActorMaterialParameters(domainConnectActorMaterialStatementsInput?.Parameters);
            ConnectActorMaterialStatements_To_ConnectActorMaterialStatements_Transformations.Add(domainConnectActorMaterialStatementsInput, interfacesKnowledgeBaseConnectActorMaterialStatementsOutput);
            return interfacesKnowledgeBaseConnectActorMaterialStatementsOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.ConnectActorMaterialStatements, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialStatements> ConnectActorMaterialStatements_To_ConnectActorMaterialStatements_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.ConnectActorMaterialStatements, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialStatements>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialStatements ConnectActorMaterialStatements_To_ConnectActorMaterialStatements(DigicircMatchmaking.BO.ConnectActorMaterialStatements domainConnectActorMaterialStatementsInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialStatements interfacesKnowledgeBaseConnectActorMaterialStatementsInstance)
        {
            //Leave, if there is nothing to transform
            if(domainConnectActorMaterialStatementsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialStatements);
            if(interfacesKnowledgeBaseConnectActorMaterialStatementsInstance == null)
                return ConnectActorMaterialStatements_To_ConnectActorMaterialStatements (domainConnectActorMaterialStatementsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ConnectActorMaterialStatements_To_ConnectActorMaterialStatements_MappingTransformations.ContainsKey(domainConnectActorMaterialStatementsInput))
            {
                return ConnectActorMaterialStatements_To_ConnectActorMaterialStatements_MappingTransformations[domainConnectActorMaterialStatementsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseConnectActorMaterialStatementsOutput = interfacesKnowledgeBaseConnectActorMaterialStatementsInstance;
            // ConnectActorMaterialStatements.Statement to ConnectActorMaterialStatements.statement
            interfacesKnowledgeBaseConnectActorMaterialStatementsOutput.statement = domainConnectActorMaterialStatementsInput?.Statement;
            // ConnectActorMaterialStatements.Parameters to ConnectActorMaterialStatements.parameters
            interfacesKnowledgeBaseConnectActorMaterialStatementsOutput.parameters = ConnectActorMaterialParameters_To_ConnectActorMaterialParameters(domainConnectActorMaterialStatementsInput?.Parameters);
            ConnectActorMaterialStatements_To_ConnectActorMaterialStatements_MappingTransformations.Add(domainConnectActorMaterialStatementsInput, interfacesKnowledgeBaseConnectActorMaterialStatementsOutput);
            return interfacesKnowledgeBaseConnectActorMaterialStatementsOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialStatements, DigicircMatchmaking.BO.ConnectActorMaterialStatements> ConnectActorMaterialStatements_To_ConnectActorMaterialStatementsReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialStatements, DigicircMatchmaking.BO.ConnectActorMaterialStatements>();
        public DigicircMatchmaking.BO.ConnectActorMaterialStatements ConnectActorMaterialStatements_To_ConnectActorMaterialStatementsReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialStatements interfacesKnowledgeBaseConnectActorMaterialStatementsInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseConnectActorMaterialStatementsInput == null) return default(DigicircMatchmaking.BO.ConnectActorMaterialStatements);
            // If the same Transformation has already ran, get the stored Output and return
            if(ConnectActorMaterialStatements_To_ConnectActorMaterialStatementsReversed_Transformations.ContainsKey(interfacesKnowledgeBaseConnectActorMaterialStatementsInput))
            {
                return ConnectActorMaterialStatements_To_ConnectActorMaterialStatementsReversed_Transformations[interfacesKnowledgeBaseConnectActorMaterialStatementsInput];
            }
            // Instantiate target root
            var domainConnectActorMaterialStatementsOutput = new DigicircMatchmaking.BO.ConnectActorMaterialStatements();
            // ConnectActorMaterialStatements.statement to ConnectActorMaterialStatements.Statement
            domainConnectActorMaterialStatementsOutput.Statement = interfacesKnowledgeBaseConnectActorMaterialStatementsInput?.statement;
            // ConnectActorMaterialStatements.parameters to ConnectActorMaterialStatements.Parameters
            domainConnectActorMaterialStatementsOutput.Parameters = ConnectActorMaterialParameters_To_ConnectActorMaterialParametersReversed(interfacesKnowledgeBaseConnectActorMaterialStatementsInput?.parameters);
            ConnectActorMaterialStatements_To_ConnectActorMaterialStatementsReversed_Transformations.Add(interfacesKnowledgeBaseConnectActorMaterialStatementsInput, domainConnectActorMaterialStatementsOutput);
            return domainConnectActorMaterialStatementsOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialStatements, DigicircMatchmaking.BO.ConnectActorMaterialStatements> ConnectActorMaterialStatements_To_ConnectActorMaterialStatementsReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialStatements, DigicircMatchmaking.BO.ConnectActorMaterialStatements>();
        public DigicircMatchmaking.BO.ConnectActorMaterialStatements ConnectActorMaterialStatements_To_ConnectActorMaterialStatementsReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialStatements interfacesKnowledgeBaseConnectActorMaterialStatementsInput, DigicircMatchmaking.BO.ConnectActorMaterialStatements domainConnectActorMaterialStatementsInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseConnectActorMaterialStatementsInput == null) return default(DigicircMatchmaking.BO.ConnectActorMaterialStatements);
            if(domainConnectActorMaterialStatementsInstance == null)
                return ConnectActorMaterialStatements_To_ConnectActorMaterialStatementsReversed (interfacesKnowledgeBaseConnectActorMaterialStatementsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ConnectActorMaterialStatements_To_ConnectActorMaterialStatementsReversed_MappingTransformations.ContainsKey(interfacesKnowledgeBaseConnectActorMaterialStatementsInput))
            {
                return ConnectActorMaterialStatements_To_ConnectActorMaterialStatementsReversed_MappingTransformations[interfacesKnowledgeBaseConnectActorMaterialStatementsInput];
            }
            // Instantiate target root
            var domainConnectActorMaterialStatementsOutput = domainConnectActorMaterialStatementsInstance;
            // ConnectActorMaterialStatements.statement to ConnectActorMaterialStatements.Statement
            domainConnectActorMaterialStatementsOutput.Statement = interfacesKnowledgeBaseConnectActorMaterialStatementsInput?.statement;
            // ConnectActorMaterialStatements.parameters to ConnectActorMaterialStatements.Parameters
            domainConnectActorMaterialStatementsOutput.Parameters = ConnectActorMaterialParameters_To_ConnectActorMaterialParametersReversed(interfacesKnowledgeBaseConnectActorMaterialStatementsInput?.parameters);
            ConnectActorMaterialStatements_To_ConnectActorMaterialStatementsReversed_MappingTransformations.Add(interfacesKnowledgeBaseConnectActorMaterialStatementsInput, domainConnectActorMaterialStatementsOutput);
            return domainConnectActorMaterialStatementsOutput;
        }

        #endregion

        #region Transformation 'ConnectActorMaterialParameters_To_ConnectActorMaterialParameters'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.ConnectActorMaterialParameters, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialParameters> ConnectActorMaterialParameters_To_ConnectActorMaterialParameters_Transformations = new Dictionary<DigicircMatchmaking.BO.ConnectActorMaterialParameters, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialParameters>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialParameters ConnectActorMaterialParameters_To_ConnectActorMaterialParameters(DigicircMatchmaking.BO.ConnectActorMaterialParameters domainConnectActorMaterialParametersInput)
        {
            //Leave, if there is nothing to transform
            if(domainConnectActorMaterialParametersInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialParameters);
            // If the same Transformation has already ran, get the stored Output and return
            if(ConnectActorMaterialParameters_To_ConnectActorMaterialParameters_Transformations.ContainsKey(domainConnectActorMaterialParametersInput))
            {
                return ConnectActorMaterialParameters_To_ConnectActorMaterialParameters_Transformations[domainConnectActorMaterialParametersInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseConnectActorMaterialParametersOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialParameters();
            // ConnectActorMaterialParameters.Props to ConnectActorMaterialParameters.props
            interfacesKnowledgeBaseConnectActorMaterialParametersOutput.props = ConnectActorMaterialProps_To_ConnectActorMaterialProps(domainConnectActorMaterialParametersInput?.Props);
            ConnectActorMaterialParameters_To_ConnectActorMaterialParameters_Transformations.Add(domainConnectActorMaterialParametersInput, interfacesKnowledgeBaseConnectActorMaterialParametersOutput);
            return interfacesKnowledgeBaseConnectActorMaterialParametersOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.ConnectActorMaterialParameters, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialParameters> ConnectActorMaterialParameters_To_ConnectActorMaterialParameters_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.ConnectActorMaterialParameters, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialParameters>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialParameters ConnectActorMaterialParameters_To_ConnectActorMaterialParameters(DigicircMatchmaking.BO.ConnectActorMaterialParameters domainConnectActorMaterialParametersInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialParameters interfacesKnowledgeBaseConnectActorMaterialParametersInstance)
        {
            //Leave, if there is nothing to transform
            if(domainConnectActorMaterialParametersInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialParameters);
            if(interfacesKnowledgeBaseConnectActorMaterialParametersInstance == null)
                return ConnectActorMaterialParameters_To_ConnectActorMaterialParameters (domainConnectActorMaterialParametersInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ConnectActorMaterialParameters_To_ConnectActorMaterialParameters_MappingTransformations.ContainsKey(domainConnectActorMaterialParametersInput))
            {
                return ConnectActorMaterialParameters_To_ConnectActorMaterialParameters_MappingTransformations[domainConnectActorMaterialParametersInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseConnectActorMaterialParametersOutput = interfacesKnowledgeBaseConnectActorMaterialParametersInstance;
            // ConnectActorMaterialParameters.Props to ConnectActorMaterialParameters.props
            interfacesKnowledgeBaseConnectActorMaterialParametersOutput.props = ConnectActorMaterialProps_To_ConnectActorMaterialProps(domainConnectActorMaterialParametersInput?.Props);
            ConnectActorMaterialParameters_To_ConnectActorMaterialParameters_MappingTransformations.Add(domainConnectActorMaterialParametersInput, interfacesKnowledgeBaseConnectActorMaterialParametersOutput);
            return interfacesKnowledgeBaseConnectActorMaterialParametersOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialParameters, DigicircMatchmaking.BO.ConnectActorMaterialParameters> ConnectActorMaterialParameters_To_ConnectActorMaterialParametersReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialParameters, DigicircMatchmaking.BO.ConnectActorMaterialParameters>();
        public DigicircMatchmaking.BO.ConnectActorMaterialParameters ConnectActorMaterialParameters_To_ConnectActorMaterialParametersReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialParameters interfacesKnowledgeBaseConnectActorMaterialParametersInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseConnectActorMaterialParametersInput == null) return default(DigicircMatchmaking.BO.ConnectActorMaterialParameters);
            // If the same Transformation has already ran, get the stored Output and return
            if(ConnectActorMaterialParameters_To_ConnectActorMaterialParametersReversed_Transformations.ContainsKey(interfacesKnowledgeBaseConnectActorMaterialParametersInput))
            {
                return ConnectActorMaterialParameters_To_ConnectActorMaterialParametersReversed_Transformations[interfacesKnowledgeBaseConnectActorMaterialParametersInput];
            }
            // Instantiate target root
            var domainConnectActorMaterialParametersOutput = new DigicircMatchmaking.BO.ConnectActorMaterialParameters();
            // ConnectActorMaterialParameters.props to ConnectActorMaterialParameters.Props
            domainConnectActorMaterialParametersOutput.Props = ConnectActorMaterialProps_To_ConnectActorMaterialPropsReversed(interfacesKnowledgeBaseConnectActorMaterialParametersInput?.props);
            ConnectActorMaterialParameters_To_ConnectActorMaterialParametersReversed_Transformations.Add(interfacesKnowledgeBaseConnectActorMaterialParametersInput, domainConnectActorMaterialParametersOutput);
            return domainConnectActorMaterialParametersOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialParameters, DigicircMatchmaking.BO.ConnectActorMaterialParameters> ConnectActorMaterialParameters_To_ConnectActorMaterialParametersReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialParameters, DigicircMatchmaking.BO.ConnectActorMaterialParameters>();
        public DigicircMatchmaking.BO.ConnectActorMaterialParameters ConnectActorMaterialParameters_To_ConnectActorMaterialParametersReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialParameters interfacesKnowledgeBaseConnectActorMaterialParametersInput, DigicircMatchmaking.BO.ConnectActorMaterialParameters domainConnectActorMaterialParametersInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseConnectActorMaterialParametersInput == null) return default(DigicircMatchmaking.BO.ConnectActorMaterialParameters);
            if(domainConnectActorMaterialParametersInstance == null)
                return ConnectActorMaterialParameters_To_ConnectActorMaterialParametersReversed (interfacesKnowledgeBaseConnectActorMaterialParametersInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ConnectActorMaterialParameters_To_ConnectActorMaterialParametersReversed_MappingTransformations.ContainsKey(interfacesKnowledgeBaseConnectActorMaterialParametersInput))
            {
                return ConnectActorMaterialParameters_To_ConnectActorMaterialParametersReversed_MappingTransformations[interfacesKnowledgeBaseConnectActorMaterialParametersInput];
            }
            // Instantiate target root
            var domainConnectActorMaterialParametersOutput = domainConnectActorMaterialParametersInstance;
            // ConnectActorMaterialParameters.props to ConnectActorMaterialParameters.Props
            domainConnectActorMaterialParametersOutput.Props = ConnectActorMaterialProps_To_ConnectActorMaterialPropsReversed(interfacesKnowledgeBaseConnectActorMaterialParametersInput?.props);
            ConnectActorMaterialParameters_To_ConnectActorMaterialParametersReversed_MappingTransformations.Add(interfacesKnowledgeBaseConnectActorMaterialParametersInput, domainConnectActorMaterialParametersOutput);
            return domainConnectActorMaterialParametersOutput;
        }

        #endregion

        #region Transformation 'ConnectActorMaterialProps_To_ConnectActorMaterialProps'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.ConnectActorMaterialProps, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialProps> ConnectActorMaterialProps_To_ConnectActorMaterialProps_Transformations = new Dictionary<DigicircMatchmaking.BO.ConnectActorMaterialProps, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialProps>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialProps ConnectActorMaterialProps_To_ConnectActorMaterialProps(DigicircMatchmaking.BO.ConnectActorMaterialProps domainConnectActorMaterialPropsInput)
        {
            //Leave, if there is nothing to transform
            if(domainConnectActorMaterialPropsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialProps);
            // If the same Transformation has already ran, get the stored Output and return
            if(ConnectActorMaterialProps_To_ConnectActorMaterialProps_Transformations.ContainsKey(domainConnectActorMaterialPropsInput))
            {
                return ConnectActorMaterialProps_To_ConnectActorMaterialProps_Transformations[domainConnectActorMaterialPropsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseConnectActorMaterialPropsOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialProps();
            // ConnectActorMaterialProps.ActorId to ConnectActorMaterialProps.ActorId
            interfacesKnowledgeBaseConnectActorMaterialPropsOutput.ActorId = domainConnectActorMaterialPropsInput?.ActorId;
            // ConnectActorMaterialProps.MaterialId to ConnectActorMaterialProps.MaterialId
            interfacesKnowledgeBaseConnectActorMaterialPropsOutput.MaterialId = domainConnectActorMaterialPropsInput?.MaterialId;
            ConnectActorMaterialProps_To_ConnectActorMaterialProps_Transformations.Add(domainConnectActorMaterialPropsInput, interfacesKnowledgeBaseConnectActorMaterialPropsOutput);
            return interfacesKnowledgeBaseConnectActorMaterialPropsOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.ConnectActorMaterialProps, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialProps> ConnectActorMaterialProps_To_ConnectActorMaterialProps_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.ConnectActorMaterialProps, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialProps>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialProps ConnectActorMaterialProps_To_ConnectActorMaterialProps(DigicircMatchmaking.BO.ConnectActorMaterialProps domainConnectActorMaterialPropsInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialProps interfacesKnowledgeBaseConnectActorMaterialPropsInstance)
        {
            //Leave, if there is nothing to transform
            if(domainConnectActorMaterialPropsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialProps);
            if(interfacesKnowledgeBaseConnectActorMaterialPropsInstance == null)
                return ConnectActorMaterialProps_To_ConnectActorMaterialProps (domainConnectActorMaterialPropsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ConnectActorMaterialProps_To_ConnectActorMaterialProps_MappingTransformations.ContainsKey(domainConnectActorMaterialPropsInput))
            {
                return ConnectActorMaterialProps_To_ConnectActorMaterialProps_MappingTransformations[domainConnectActorMaterialPropsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseConnectActorMaterialPropsOutput = interfacesKnowledgeBaseConnectActorMaterialPropsInstance;
            // ConnectActorMaterialProps.ActorId to ConnectActorMaterialProps.ActorId
            interfacesKnowledgeBaseConnectActorMaterialPropsOutput.ActorId = domainConnectActorMaterialPropsInput?.ActorId;
            // ConnectActorMaterialProps.MaterialId to ConnectActorMaterialProps.MaterialId
            interfacesKnowledgeBaseConnectActorMaterialPropsOutput.MaterialId = domainConnectActorMaterialPropsInput?.MaterialId;
            ConnectActorMaterialProps_To_ConnectActorMaterialProps_MappingTransformations.Add(domainConnectActorMaterialPropsInput, interfacesKnowledgeBaseConnectActorMaterialPropsOutput);
            return interfacesKnowledgeBaseConnectActorMaterialPropsOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialProps, DigicircMatchmaking.BO.ConnectActorMaterialProps> ConnectActorMaterialProps_To_ConnectActorMaterialPropsReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialProps, DigicircMatchmaking.BO.ConnectActorMaterialProps>();
        public DigicircMatchmaking.BO.ConnectActorMaterialProps ConnectActorMaterialProps_To_ConnectActorMaterialPropsReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialProps interfacesKnowledgeBaseConnectActorMaterialPropsInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseConnectActorMaterialPropsInput == null) return default(DigicircMatchmaking.BO.ConnectActorMaterialProps);
            // If the same Transformation has already ran, get the stored Output and return
            if(ConnectActorMaterialProps_To_ConnectActorMaterialPropsReversed_Transformations.ContainsKey(interfacesKnowledgeBaseConnectActorMaterialPropsInput))
            {
                return ConnectActorMaterialProps_To_ConnectActorMaterialPropsReversed_Transformations[interfacesKnowledgeBaseConnectActorMaterialPropsInput];
            }
            // Instantiate target root
            var domainConnectActorMaterialPropsOutput = new DigicircMatchmaking.BO.ConnectActorMaterialProps();
            // ConnectActorMaterialProps.ActorId to ConnectActorMaterialProps.ActorId
            domainConnectActorMaterialPropsOutput.ActorId = interfacesKnowledgeBaseConnectActorMaterialPropsInput?.ActorId;
            // ConnectActorMaterialProps.MaterialId to ConnectActorMaterialProps.MaterialId
            domainConnectActorMaterialPropsOutput.MaterialId = interfacesKnowledgeBaseConnectActorMaterialPropsInput?.MaterialId;
            ConnectActorMaterialProps_To_ConnectActorMaterialPropsReversed_Transformations.Add(interfacesKnowledgeBaseConnectActorMaterialPropsInput, domainConnectActorMaterialPropsOutput);
            return domainConnectActorMaterialPropsOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialProps, DigicircMatchmaking.BO.ConnectActorMaterialProps> ConnectActorMaterialProps_To_ConnectActorMaterialPropsReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialProps, DigicircMatchmaking.BO.ConnectActorMaterialProps>();
        public DigicircMatchmaking.BO.ConnectActorMaterialProps ConnectActorMaterialProps_To_ConnectActorMaterialPropsReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialProps interfacesKnowledgeBaseConnectActorMaterialPropsInput, DigicircMatchmaking.BO.ConnectActorMaterialProps domainConnectActorMaterialPropsInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseConnectActorMaterialPropsInput == null) return default(DigicircMatchmaking.BO.ConnectActorMaterialProps);
            if(domainConnectActorMaterialPropsInstance == null)
                return ConnectActorMaterialProps_To_ConnectActorMaterialPropsReversed (interfacesKnowledgeBaseConnectActorMaterialPropsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ConnectActorMaterialProps_To_ConnectActorMaterialPropsReversed_MappingTransformations.ContainsKey(interfacesKnowledgeBaseConnectActorMaterialPropsInput))
            {
                return ConnectActorMaterialProps_To_ConnectActorMaterialPropsReversed_MappingTransformations[interfacesKnowledgeBaseConnectActorMaterialPropsInput];
            }
            // Instantiate target root
            var domainConnectActorMaterialPropsOutput = domainConnectActorMaterialPropsInstance;
            // ConnectActorMaterialProps.ActorId to ConnectActorMaterialProps.ActorId
            domainConnectActorMaterialPropsOutput.ActorId = interfacesKnowledgeBaseConnectActorMaterialPropsInput?.ActorId;
            // ConnectActorMaterialProps.MaterialId to ConnectActorMaterialProps.MaterialId
            domainConnectActorMaterialPropsOutput.MaterialId = interfacesKnowledgeBaseConnectActorMaterialPropsInput?.MaterialId;
            ConnectActorMaterialProps_To_ConnectActorMaterialPropsReversed_MappingTransformations.Add(interfacesKnowledgeBaseConnectActorMaterialPropsInput, domainConnectActorMaterialPropsOutput);
            return domainConnectActorMaterialPropsOutput;
        }

        #endregion

        #region Transformation 'ListProducersMaterialRequest_To_ListProducersMaterialRequest'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.ListProducersMaterialRequest, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialRequest> ListProducersMaterialRequest_To_ListProducersMaterialRequest_Transformations = new Dictionary<DigicircMatchmaking.BO.ListProducersMaterialRequest, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialRequest>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialRequest ListProducersMaterialRequest_To_ListProducersMaterialRequest(DigicircMatchmaking.BO.ListProducersMaterialRequest domainListProducersMaterialRequestInput)
        {
            //Leave, if there is nothing to transform
            if(domainListProducersMaterialRequestInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialRequest);
            // If the same Transformation has already ran, get the stored Output and return
            if(ListProducersMaterialRequest_To_ListProducersMaterialRequest_Transformations.ContainsKey(domainListProducersMaterialRequestInput))
            {
                return ListProducersMaterialRequest_To_ListProducersMaterialRequest_Transformations[domainListProducersMaterialRequestInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseListProducersMaterialRequestOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialRequest();
            // ListProducersMaterialRequest.Statements to ListProducersMaterialRequest.statements
            interfacesKnowledgeBaseListProducersMaterialRequestOutput.statements = domainListProducersMaterialRequestInput?.Statements?.Select(ListProducersMaterialStatements_To_ListProducersMaterialStatements)?.ToArray();
            ListProducersMaterialRequest_To_ListProducersMaterialRequest_Transformations.Add(domainListProducersMaterialRequestInput, interfacesKnowledgeBaseListProducersMaterialRequestOutput);
            return interfacesKnowledgeBaseListProducersMaterialRequestOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.ListProducersMaterialRequest, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialRequest> ListProducersMaterialRequest_To_ListProducersMaterialRequest_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.ListProducersMaterialRequest, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialRequest>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialRequest ListProducersMaterialRequest_To_ListProducersMaterialRequest(DigicircMatchmaking.BO.ListProducersMaterialRequest domainListProducersMaterialRequestInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialRequest interfacesKnowledgeBaseListProducersMaterialRequestInstance)
        {
            //Leave, if there is nothing to transform
            if(domainListProducersMaterialRequestInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialRequest);
            if(interfacesKnowledgeBaseListProducersMaterialRequestInstance == null)
                return ListProducersMaterialRequest_To_ListProducersMaterialRequest (domainListProducersMaterialRequestInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ListProducersMaterialRequest_To_ListProducersMaterialRequest_MappingTransformations.ContainsKey(domainListProducersMaterialRequestInput))
            {
                return ListProducersMaterialRequest_To_ListProducersMaterialRequest_MappingTransformations[domainListProducersMaterialRequestInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseListProducersMaterialRequestOutput = interfacesKnowledgeBaseListProducersMaterialRequestInstance;
            // ListProducersMaterialRequest.Statements to ListProducersMaterialRequest.statements
            var statements_Statements_MappedInstanceListCount = interfacesKnowledgeBaseListProducersMaterialRequestOutput.statements == null ? 0 : interfacesKnowledgeBaseListProducersMaterialRequestOutput.statements.Count();
            var statements_Statements_InputListCount = domainListProducersMaterialRequestInput.Statements == null ? 0 : domainListProducersMaterialRequestInput.Statements.Count();
            var statements_Statements_TemporaryOutputList = new List<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialStatements>();
            if(statements_Statements_InputListCount > 0)
            {
                int statements_Statements_Index = 0;
                foreach(var initialItem in domainListProducersMaterialRequestInput.Statements)
                {
                    if(statements_Statements_Index <= statements_Statements_MappedInstanceListCount -1 )
                    {
                        var instancedItem = interfacesKnowledgeBaseListProducersMaterialRequestOutput.statements[statements_Statements_Index];
                        var transformedItem = ListProducersMaterialStatements_To_ListProducersMaterialStatements(initialItem, instancedItem);
                        if(transformedItem != null) statements_Statements_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    statements_Statements_Index++;
                }
                interfacesKnowledgeBaseListProducersMaterialRequestOutput.statements = statements_Statements_TemporaryOutputList.ToArray();
            }
            ListProducersMaterialRequest_To_ListProducersMaterialRequest_MappingTransformations.Add(domainListProducersMaterialRequestInput, interfacesKnowledgeBaseListProducersMaterialRequestOutput);
            return interfacesKnowledgeBaseListProducersMaterialRequestOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialRequest, DigicircMatchmaking.BO.ListProducersMaterialRequest> ListProducersMaterialRequest_To_ListProducersMaterialRequestReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialRequest, DigicircMatchmaking.BO.ListProducersMaterialRequest>();
        public DigicircMatchmaking.BO.ListProducersMaterialRequest ListProducersMaterialRequest_To_ListProducersMaterialRequestReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialRequest interfacesKnowledgeBaseListProducersMaterialRequestInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseListProducersMaterialRequestInput == null) return default(DigicircMatchmaking.BO.ListProducersMaterialRequest);
            // If the same Transformation has already ran, get the stored Output and return
            if(ListProducersMaterialRequest_To_ListProducersMaterialRequestReversed_Transformations.ContainsKey(interfacesKnowledgeBaseListProducersMaterialRequestInput))
            {
                return ListProducersMaterialRequest_To_ListProducersMaterialRequestReversed_Transformations[interfacesKnowledgeBaseListProducersMaterialRequestInput];
            }
            // Instantiate target root
            var domainListProducersMaterialRequestOutput = new DigicircMatchmaking.BO.ListProducersMaterialRequest();
            // ListProducersMaterialRequest.statements to ListProducersMaterialRequest.Statements
            domainListProducersMaterialRequestOutput.Statements = interfacesKnowledgeBaseListProducersMaterialRequestInput?.statements?.Select(ListProducersMaterialStatements_To_ListProducersMaterialStatementsReversed)?.ToList();
            ListProducersMaterialRequest_To_ListProducersMaterialRequestReversed_Transformations.Add(interfacesKnowledgeBaseListProducersMaterialRequestInput, domainListProducersMaterialRequestOutput);
            return domainListProducersMaterialRequestOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialRequest, DigicircMatchmaking.BO.ListProducersMaterialRequest> ListProducersMaterialRequest_To_ListProducersMaterialRequestReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialRequest, DigicircMatchmaking.BO.ListProducersMaterialRequest>();
        public DigicircMatchmaking.BO.ListProducersMaterialRequest ListProducersMaterialRequest_To_ListProducersMaterialRequestReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialRequest interfacesKnowledgeBaseListProducersMaterialRequestInput, DigicircMatchmaking.BO.ListProducersMaterialRequest domainListProducersMaterialRequestInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseListProducersMaterialRequestInput == null) return default(DigicircMatchmaking.BO.ListProducersMaterialRequest);
            if(domainListProducersMaterialRequestInstance == null)
                return ListProducersMaterialRequest_To_ListProducersMaterialRequestReversed (interfacesKnowledgeBaseListProducersMaterialRequestInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ListProducersMaterialRequest_To_ListProducersMaterialRequestReversed_MappingTransformations.ContainsKey(interfacesKnowledgeBaseListProducersMaterialRequestInput))
            {
                return ListProducersMaterialRequest_To_ListProducersMaterialRequestReversed_MappingTransformations[interfacesKnowledgeBaseListProducersMaterialRequestInput];
            }
            // Instantiate target root
            var domainListProducersMaterialRequestOutput = domainListProducersMaterialRequestInstance;
            // ListProducersMaterialRequest.statements to ListProducersMaterialRequest.Statements
            var Statements_statements_MappedInstanceListCount = domainListProducersMaterialRequestOutput.Statements == null ? 0 : domainListProducersMaterialRequestOutput.Statements.Count();
            var Statements_statements_InputListCount = interfacesKnowledgeBaseListProducersMaterialRequestInput.statements == null ? 0 : interfacesKnowledgeBaseListProducersMaterialRequestInput.statements.Count();
            var Statements_statements_TemporaryOutputList = new List<DigicircMatchmaking.BO.ListProducersMaterialStatements>();
            if(Statements_statements_InputListCount > 0)
            {
                int Statements_statements_Index = 0;
                foreach(var initialItem in interfacesKnowledgeBaseListProducersMaterialRequestInput.statements)
                {
                    if(Statements_statements_Index <= Statements_statements_MappedInstanceListCount -1 )
                    {
                        var instancedItem = domainListProducersMaterialRequestOutput.Statements[Statements_statements_Index];
                        var transformedItem = ListProducersMaterialStatements_To_ListProducersMaterialStatementsReversed(initialItem, instancedItem);
                        if(transformedItem != null) Statements_statements_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Statements_statements_Index++;
                }
                domainListProducersMaterialRequestOutput.Statements = Statements_statements_TemporaryOutputList;
            }
            ListProducersMaterialRequest_To_ListProducersMaterialRequestReversed_MappingTransformations.Add(interfacesKnowledgeBaseListProducersMaterialRequestInput, domainListProducersMaterialRequestOutput);
            return domainListProducersMaterialRequestOutput;
        }

        #endregion

        #region Transformation 'ListProducersMaterialStatements_To_ListProducersMaterialStatements'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.ListProducersMaterialStatements, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialStatements> ListProducersMaterialStatements_To_ListProducersMaterialStatements_Transformations = new Dictionary<DigicircMatchmaking.BO.ListProducersMaterialStatements, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialStatements>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialStatements ListProducersMaterialStatements_To_ListProducersMaterialStatements(DigicircMatchmaking.BO.ListProducersMaterialStatements domainListProducersMaterialStatementsInput)
        {
            //Leave, if there is nothing to transform
            if(domainListProducersMaterialStatementsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialStatements);
            // If the same Transformation has already ran, get the stored Output and return
            if(ListProducersMaterialStatements_To_ListProducersMaterialStatements_Transformations.ContainsKey(domainListProducersMaterialStatementsInput))
            {
                return ListProducersMaterialStatements_To_ListProducersMaterialStatements_Transformations[domainListProducersMaterialStatementsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseListProducersMaterialStatementsOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialStatements();
            // ListProducersMaterialStatements.Statement to ListProducersMaterialStatements.statement
            interfacesKnowledgeBaseListProducersMaterialStatementsOutput.statement = domainListProducersMaterialStatementsInput?.Statement;
            // ListProducersMaterialStatements.Parameters to ListProducersMaterialStatements.parameters
            interfacesKnowledgeBaseListProducersMaterialStatementsOutput.parameters = ListProducersMaterialParameters_To_ListProducersMaterialParameters(domainListProducersMaterialStatementsInput?.Parameters);
            ListProducersMaterialStatements_To_ListProducersMaterialStatements_Transformations.Add(domainListProducersMaterialStatementsInput, interfacesKnowledgeBaseListProducersMaterialStatementsOutput);
            return interfacesKnowledgeBaseListProducersMaterialStatementsOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.ListProducersMaterialStatements, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialStatements> ListProducersMaterialStatements_To_ListProducersMaterialStatements_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.ListProducersMaterialStatements, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialStatements>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialStatements ListProducersMaterialStatements_To_ListProducersMaterialStatements(DigicircMatchmaking.BO.ListProducersMaterialStatements domainListProducersMaterialStatementsInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialStatements interfacesKnowledgeBaseListProducersMaterialStatementsInstance)
        {
            //Leave, if there is nothing to transform
            if(domainListProducersMaterialStatementsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialStatements);
            if(interfacesKnowledgeBaseListProducersMaterialStatementsInstance == null)
                return ListProducersMaterialStatements_To_ListProducersMaterialStatements (domainListProducersMaterialStatementsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ListProducersMaterialStatements_To_ListProducersMaterialStatements_MappingTransformations.ContainsKey(domainListProducersMaterialStatementsInput))
            {
                return ListProducersMaterialStatements_To_ListProducersMaterialStatements_MappingTransformations[domainListProducersMaterialStatementsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseListProducersMaterialStatementsOutput = interfacesKnowledgeBaseListProducersMaterialStatementsInstance;
            // ListProducersMaterialStatements.Statement to ListProducersMaterialStatements.statement
            interfacesKnowledgeBaseListProducersMaterialStatementsOutput.statement = domainListProducersMaterialStatementsInput?.Statement;
            // ListProducersMaterialStatements.Parameters to ListProducersMaterialStatements.parameters
            interfacesKnowledgeBaseListProducersMaterialStatementsOutput.parameters = ListProducersMaterialParameters_To_ListProducersMaterialParameters(domainListProducersMaterialStatementsInput?.Parameters);
            ListProducersMaterialStatements_To_ListProducersMaterialStatements_MappingTransformations.Add(domainListProducersMaterialStatementsInput, interfacesKnowledgeBaseListProducersMaterialStatementsOutput);
            return interfacesKnowledgeBaseListProducersMaterialStatementsOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialStatements, DigicircMatchmaking.BO.ListProducersMaterialStatements> ListProducersMaterialStatements_To_ListProducersMaterialStatementsReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialStatements, DigicircMatchmaking.BO.ListProducersMaterialStatements>();
        public DigicircMatchmaking.BO.ListProducersMaterialStatements ListProducersMaterialStatements_To_ListProducersMaterialStatementsReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialStatements interfacesKnowledgeBaseListProducersMaterialStatementsInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseListProducersMaterialStatementsInput == null) return default(DigicircMatchmaking.BO.ListProducersMaterialStatements);
            // If the same Transformation has already ran, get the stored Output and return
            if(ListProducersMaterialStatements_To_ListProducersMaterialStatementsReversed_Transformations.ContainsKey(interfacesKnowledgeBaseListProducersMaterialStatementsInput))
            {
                return ListProducersMaterialStatements_To_ListProducersMaterialStatementsReversed_Transformations[interfacesKnowledgeBaseListProducersMaterialStatementsInput];
            }
            // Instantiate target root
            var domainListProducersMaterialStatementsOutput = new DigicircMatchmaking.BO.ListProducersMaterialStatements();
            // ListProducersMaterialStatements.statement to ListProducersMaterialStatements.Statement
            domainListProducersMaterialStatementsOutput.Statement = interfacesKnowledgeBaseListProducersMaterialStatementsInput?.statement;
            // ListProducersMaterialStatements.parameters to ListProducersMaterialStatements.Parameters
            domainListProducersMaterialStatementsOutput.Parameters = ListProducersMaterialParameters_To_ListProducersMaterialParametersReversed(interfacesKnowledgeBaseListProducersMaterialStatementsInput?.parameters);
            ListProducersMaterialStatements_To_ListProducersMaterialStatementsReversed_Transformations.Add(interfacesKnowledgeBaseListProducersMaterialStatementsInput, domainListProducersMaterialStatementsOutput);
            return domainListProducersMaterialStatementsOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialStatements, DigicircMatchmaking.BO.ListProducersMaterialStatements> ListProducersMaterialStatements_To_ListProducersMaterialStatementsReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialStatements, DigicircMatchmaking.BO.ListProducersMaterialStatements>();
        public DigicircMatchmaking.BO.ListProducersMaterialStatements ListProducersMaterialStatements_To_ListProducersMaterialStatementsReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialStatements interfacesKnowledgeBaseListProducersMaterialStatementsInput, DigicircMatchmaking.BO.ListProducersMaterialStatements domainListProducersMaterialStatementsInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseListProducersMaterialStatementsInput == null) return default(DigicircMatchmaking.BO.ListProducersMaterialStatements);
            if(domainListProducersMaterialStatementsInstance == null)
                return ListProducersMaterialStatements_To_ListProducersMaterialStatementsReversed (interfacesKnowledgeBaseListProducersMaterialStatementsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ListProducersMaterialStatements_To_ListProducersMaterialStatementsReversed_MappingTransformations.ContainsKey(interfacesKnowledgeBaseListProducersMaterialStatementsInput))
            {
                return ListProducersMaterialStatements_To_ListProducersMaterialStatementsReversed_MappingTransformations[interfacesKnowledgeBaseListProducersMaterialStatementsInput];
            }
            // Instantiate target root
            var domainListProducersMaterialStatementsOutput = domainListProducersMaterialStatementsInstance;
            // ListProducersMaterialStatements.statement to ListProducersMaterialStatements.Statement
            domainListProducersMaterialStatementsOutput.Statement = interfacesKnowledgeBaseListProducersMaterialStatementsInput?.statement;
            // ListProducersMaterialStatements.parameters to ListProducersMaterialStatements.Parameters
            domainListProducersMaterialStatementsOutput.Parameters = ListProducersMaterialParameters_To_ListProducersMaterialParametersReversed(interfacesKnowledgeBaseListProducersMaterialStatementsInput?.parameters);
            ListProducersMaterialStatements_To_ListProducersMaterialStatementsReversed_MappingTransformations.Add(interfacesKnowledgeBaseListProducersMaterialStatementsInput, domainListProducersMaterialStatementsOutput);
            return domainListProducersMaterialStatementsOutput;
        }

        #endregion

        #region Transformation 'ListProducersMaterialParameters_To_ListProducersMaterialParameters'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.ListProducersMaterialParameters, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialParameters> ListProducersMaterialParameters_To_ListProducersMaterialParameters_Transformations = new Dictionary<DigicircMatchmaking.BO.ListProducersMaterialParameters, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialParameters>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialParameters ListProducersMaterialParameters_To_ListProducersMaterialParameters(DigicircMatchmaking.BO.ListProducersMaterialParameters domainListProducersMaterialParametersInput)
        {
            //Leave, if there is nothing to transform
            if(domainListProducersMaterialParametersInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialParameters);
            // If the same Transformation has already ran, get the stored Output and return
            if(ListProducersMaterialParameters_To_ListProducersMaterialParameters_Transformations.ContainsKey(domainListProducersMaterialParametersInput))
            {
                return ListProducersMaterialParameters_To_ListProducersMaterialParameters_Transformations[domainListProducersMaterialParametersInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseListProducersMaterialParametersOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialParameters();
            // ListProducersMaterialParameters.Properties to ListProducersMaterialParameters.props
            interfacesKnowledgeBaseListProducersMaterialParametersOutput.props = ListProducersMaterialProps_To_ListProducersMaterialProps(domainListProducersMaterialParametersInput?.Properties);
            ListProducersMaterialParameters_To_ListProducersMaterialParameters_Transformations.Add(domainListProducersMaterialParametersInput, interfacesKnowledgeBaseListProducersMaterialParametersOutput);
            return interfacesKnowledgeBaseListProducersMaterialParametersOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.ListProducersMaterialParameters, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialParameters> ListProducersMaterialParameters_To_ListProducersMaterialParameters_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.ListProducersMaterialParameters, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialParameters>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialParameters ListProducersMaterialParameters_To_ListProducersMaterialParameters(DigicircMatchmaking.BO.ListProducersMaterialParameters domainListProducersMaterialParametersInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialParameters interfacesKnowledgeBaseListProducersMaterialParametersInstance)
        {
            //Leave, if there is nothing to transform
            if(domainListProducersMaterialParametersInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialParameters);
            if(interfacesKnowledgeBaseListProducersMaterialParametersInstance == null)
                return ListProducersMaterialParameters_To_ListProducersMaterialParameters (domainListProducersMaterialParametersInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ListProducersMaterialParameters_To_ListProducersMaterialParameters_MappingTransformations.ContainsKey(domainListProducersMaterialParametersInput))
            {
                return ListProducersMaterialParameters_To_ListProducersMaterialParameters_MappingTransformations[domainListProducersMaterialParametersInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseListProducersMaterialParametersOutput = interfacesKnowledgeBaseListProducersMaterialParametersInstance;
            // ListProducersMaterialParameters.Properties to ListProducersMaterialParameters.props
            interfacesKnowledgeBaseListProducersMaterialParametersOutput.props = ListProducersMaterialProps_To_ListProducersMaterialProps(domainListProducersMaterialParametersInput?.Properties);
            ListProducersMaterialParameters_To_ListProducersMaterialParameters_MappingTransformations.Add(domainListProducersMaterialParametersInput, interfacesKnowledgeBaseListProducersMaterialParametersOutput);
            return interfacesKnowledgeBaseListProducersMaterialParametersOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialParameters, DigicircMatchmaking.BO.ListProducersMaterialParameters> ListProducersMaterialParameters_To_ListProducersMaterialParametersReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialParameters, DigicircMatchmaking.BO.ListProducersMaterialParameters>();
        public DigicircMatchmaking.BO.ListProducersMaterialParameters ListProducersMaterialParameters_To_ListProducersMaterialParametersReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialParameters interfacesKnowledgeBaseListProducersMaterialParametersInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseListProducersMaterialParametersInput == null) return default(DigicircMatchmaking.BO.ListProducersMaterialParameters);
            // If the same Transformation has already ran, get the stored Output and return
            if(ListProducersMaterialParameters_To_ListProducersMaterialParametersReversed_Transformations.ContainsKey(interfacesKnowledgeBaseListProducersMaterialParametersInput))
            {
                return ListProducersMaterialParameters_To_ListProducersMaterialParametersReversed_Transformations[interfacesKnowledgeBaseListProducersMaterialParametersInput];
            }
            // Instantiate target root
            var domainListProducersMaterialParametersOutput = new DigicircMatchmaking.BO.ListProducersMaterialParameters();
            // ListProducersMaterialParameters.props to ListProducersMaterialParameters.Properties
            domainListProducersMaterialParametersOutput.Properties = ListProducersMaterialProps_To_ListProducersMaterialPropsReversed(interfacesKnowledgeBaseListProducersMaterialParametersInput?.props);
            ListProducersMaterialParameters_To_ListProducersMaterialParametersReversed_Transformations.Add(interfacesKnowledgeBaseListProducersMaterialParametersInput, domainListProducersMaterialParametersOutput);
            return domainListProducersMaterialParametersOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialParameters, DigicircMatchmaking.BO.ListProducersMaterialParameters> ListProducersMaterialParameters_To_ListProducersMaterialParametersReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialParameters, DigicircMatchmaking.BO.ListProducersMaterialParameters>();
        public DigicircMatchmaking.BO.ListProducersMaterialParameters ListProducersMaterialParameters_To_ListProducersMaterialParametersReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialParameters interfacesKnowledgeBaseListProducersMaterialParametersInput, DigicircMatchmaking.BO.ListProducersMaterialParameters domainListProducersMaterialParametersInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseListProducersMaterialParametersInput == null) return default(DigicircMatchmaking.BO.ListProducersMaterialParameters);
            if(domainListProducersMaterialParametersInstance == null)
                return ListProducersMaterialParameters_To_ListProducersMaterialParametersReversed (interfacesKnowledgeBaseListProducersMaterialParametersInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ListProducersMaterialParameters_To_ListProducersMaterialParametersReversed_MappingTransformations.ContainsKey(interfacesKnowledgeBaseListProducersMaterialParametersInput))
            {
                return ListProducersMaterialParameters_To_ListProducersMaterialParametersReversed_MappingTransformations[interfacesKnowledgeBaseListProducersMaterialParametersInput];
            }
            // Instantiate target root
            var domainListProducersMaterialParametersOutput = domainListProducersMaterialParametersInstance;
            // ListProducersMaterialParameters.props to ListProducersMaterialParameters.Properties
            domainListProducersMaterialParametersOutput.Properties = ListProducersMaterialProps_To_ListProducersMaterialPropsReversed(interfacesKnowledgeBaseListProducersMaterialParametersInput?.props);
            ListProducersMaterialParameters_To_ListProducersMaterialParametersReversed_MappingTransformations.Add(interfacesKnowledgeBaseListProducersMaterialParametersInput, domainListProducersMaterialParametersOutput);
            return domainListProducersMaterialParametersOutput;
        }

        #endregion

        #region Transformation 'ListProducersMaterialProps_To_ListProducersMaterialProps'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.ListProducersMaterialProps, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialProps> ListProducersMaterialProps_To_ListProducersMaterialProps_Transformations = new Dictionary<DigicircMatchmaking.BO.ListProducersMaterialProps, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialProps>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialProps ListProducersMaterialProps_To_ListProducersMaterialProps(DigicircMatchmaking.BO.ListProducersMaterialProps domainListProducersMaterialPropsInput)
        {
            //Leave, if there is nothing to transform
            if(domainListProducersMaterialPropsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialProps);
            // If the same Transformation has already ran, get the stored Output and return
            if(ListProducersMaterialProps_To_ListProducersMaterialProps_Transformations.ContainsKey(domainListProducersMaterialPropsInput))
            {
                return ListProducersMaterialProps_To_ListProducersMaterialProps_Transformations[domainListProducersMaterialPropsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseListProducersMaterialPropsOutput = new DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialProps();
            // ListProducersMaterialProps.ActorId to ListProducersMaterialProps.ActorId
            interfacesKnowledgeBaseListProducersMaterialPropsOutput.ActorId = domainListProducersMaterialPropsInput?.ActorId;
            // ListProducersMaterialProps.MaterialId to ListProducersMaterialProps.MaterialId
            interfacesKnowledgeBaseListProducersMaterialPropsOutput.MaterialId = domainListProducersMaterialPropsInput?.MaterialId;
            ListProducersMaterialProps_To_ListProducersMaterialProps_Transformations.Add(domainListProducersMaterialPropsInput, interfacesKnowledgeBaseListProducersMaterialPropsOutput);
            return interfacesKnowledgeBaseListProducersMaterialPropsOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.ListProducersMaterialProps, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialProps> ListProducersMaterialProps_To_ListProducersMaterialProps_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.ListProducersMaterialProps, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialProps>();
        public DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialProps ListProducersMaterialProps_To_ListProducersMaterialProps(DigicircMatchmaking.BO.ListProducersMaterialProps domainListProducersMaterialPropsInput, DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialProps interfacesKnowledgeBaseListProducersMaterialPropsInstance)
        {
            //Leave, if there is nothing to transform
            if(domainListProducersMaterialPropsInput == null) return default(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialProps);
            if(interfacesKnowledgeBaseListProducersMaterialPropsInstance == null)
                return ListProducersMaterialProps_To_ListProducersMaterialProps (domainListProducersMaterialPropsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ListProducersMaterialProps_To_ListProducersMaterialProps_MappingTransformations.ContainsKey(domainListProducersMaterialPropsInput))
            {
                return ListProducersMaterialProps_To_ListProducersMaterialProps_MappingTransformations[domainListProducersMaterialPropsInput];
            }
            // Instantiate target root
            var interfacesKnowledgeBaseListProducersMaterialPropsOutput = interfacesKnowledgeBaseListProducersMaterialPropsInstance;
            // ListProducersMaterialProps.ActorId to ListProducersMaterialProps.ActorId
            interfacesKnowledgeBaseListProducersMaterialPropsOutput.ActorId = domainListProducersMaterialPropsInput?.ActorId;
            // ListProducersMaterialProps.MaterialId to ListProducersMaterialProps.MaterialId
            interfacesKnowledgeBaseListProducersMaterialPropsOutput.MaterialId = domainListProducersMaterialPropsInput?.MaterialId;
            ListProducersMaterialProps_To_ListProducersMaterialProps_MappingTransformations.Add(domainListProducersMaterialPropsInput, interfacesKnowledgeBaseListProducersMaterialPropsOutput);
            return interfacesKnowledgeBaseListProducersMaterialPropsOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialProps, DigicircMatchmaking.BO.ListProducersMaterialProps> ListProducersMaterialProps_To_ListProducersMaterialPropsReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialProps, DigicircMatchmaking.BO.ListProducersMaterialProps>();
        public DigicircMatchmaking.BO.ListProducersMaterialProps ListProducersMaterialProps_To_ListProducersMaterialPropsReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialProps interfacesKnowledgeBaseListProducersMaterialPropsInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseListProducersMaterialPropsInput == null) return default(DigicircMatchmaking.BO.ListProducersMaterialProps);
            // If the same Transformation has already ran, get the stored Output and return
            if(ListProducersMaterialProps_To_ListProducersMaterialPropsReversed_Transformations.ContainsKey(interfacesKnowledgeBaseListProducersMaterialPropsInput))
            {
                return ListProducersMaterialProps_To_ListProducersMaterialPropsReversed_Transformations[interfacesKnowledgeBaseListProducersMaterialPropsInput];
            }
            // Instantiate target root
            var domainListProducersMaterialPropsOutput = new DigicircMatchmaking.BO.ListProducersMaterialProps();
            // ListProducersMaterialProps.ActorId to ListProducersMaterialProps.ActorId
            domainListProducersMaterialPropsOutput.ActorId = interfacesKnowledgeBaseListProducersMaterialPropsInput?.ActorId;
            // ListProducersMaterialProps.MaterialId to ListProducersMaterialProps.MaterialId
            domainListProducersMaterialPropsOutput.MaterialId = interfacesKnowledgeBaseListProducersMaterialPropsInput?.MaterialId;
            ListProducersMaterialProps_To_ListProducersMaterialPropsReversed_Transformations.Add(interfacesKnowledgeBaseListProducersMaterialPropsInput, domainListProducersMaterialPropsOutput);
            return domainListProducersMaterialPropsOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialProps, DigicircMatchmaking.BO.ListProducersMaterialProps> ListProducersMaterialProps_To_ListProducersMaterialPropsReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialProps, DigicircMatchmaking.BO.ListProducersMaterialProps>();
        public DigicircMatchmaking.BO.ListProducersMaterialProps ListProducersMaterialProps_To_ListProducersMaterialPropsReversed(DigicircMatchmaking.ExternalStructs.KnowledgeBase.ListProducersMaterialProps interfacesKnowledgeBaseListProducersMaterialPropsInput, DigicircMatchmaking.BO.ListProducersMaterialProps domainListProducersMaterialPropsInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesKnowledgeBaseListProducersMaterialPropsInput == null) return default(DigicircMatchmaking.BO.ListProducersMaterialProps);
            if(domainListProducersMaterialPropsInstance == null)
                return ListProducersMaterialProps_To_ListProducersMaterialPropsReversed (interfacesKnowledgeBaseListProducersMaterialPropsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ListProducersMaterialProps_To_ListProducersMaterialPropsReversed_MappingTransformations.ContainsKey(interfacesKnowledgeBaseListProducersMaterialPropsInput))
            {
                return ListProducersMaterialProps_To_ListProducersMaterialPropsReversed_MappingTransformations[interfacesKnowledgeBaseListProducersMaterialPropsInput];
            }
            // Instantiate target root
            var domainListProducersMaterialPropsOutput = domainListProducersMaterialPropsInstance;
            // ListProducersMaterialProps.ActorId to ListProducersMaterialProps.ActorId
            domainListProducersMaterialPropsOutput.ActorId = interfacesKnowledgeBaseListProducersMaterialPropsInput?.ActorId;
            // ListProducersMaterialProps.MaterialId to ListProducersMaterialProps.MaterialId
            domainListProducersMaterialPropsOutput.MaterialId = interfacesKnowledgeBaseListProducersMaterialPropsInput?.MaterialId;
            ListProducersMaterialProps_To_ListProducersMaterialPropsReversed_MappingTransformations.Add(interfacesKnowledgeBaseListProducersMaterialPropsInput, domainListProducersMaterialPropsOutput);
            return domainListProducersMaterialPropsOutput;
        }

        #endregion

    }
}