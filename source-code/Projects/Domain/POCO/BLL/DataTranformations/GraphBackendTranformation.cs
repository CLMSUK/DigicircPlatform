// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using System.Linq;
using System.Collections.Generic;
using log4net;
using System.Collections.ObjectModel;
using System.Data;

namespace DigicircMatchmaking.BO.GraphBackendDataTransformation
{
    public class Transformer
    {

        #region Transformation 'Metadata_To_Metadata'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.Metadata, DigicircMatchmaking.ExternalStructs.GraphBackend.Metadata> Metadata_To_Metadata_Transformations = new Dictionary<DigicircMatchmaking.BO.Metadata, DigicircMatchmaking.ExternalStructs.GraphBackend.Metadata>();
        public DigicircMatchmaking.ExternalStructs.GraphBackend.Metadata Metadata_To_Metadata(DigicircMatchmaking.BO.Metadata domainMetadataInput)
        {
            //Leave, if there is nothing to transform
            if(domainMetadataInput == null) return default(DigicircMatchmaking.ExternalStructs.GraphBackend.Metadata);
            // If the same Transformation has already ran, get the stored Output and return
            if(Metadata_To_Metadata_Transformations.ContainsKey(domainMetadataInput))
            {
                return Metadata_To_Metadata_Transformations[domainMetadataInput];
            }
            // Instantiate target root
            var interfacesGraphBackendMetadataOutput = new DigicircMatchmaking.ExternalStructs.GraphBackend.Metadata();
            // Metadata.ExportDataAsJson to Metadata.ExportDataAsJson
            interfacesGraphBackendMetadataOutput.ExportDataAsJson = domainMetadataInput?.ExportDataAsJson == true;
            // Metadata.Pages to Metadata.Pages
            interfacesGraphBackendMetadataOutput.Pages = domainMetadataInput?.Pages;
            // Metadata.PageSize to Metadata.PageSize
            interfacesGraphBackendMetadataOutput.PageSize = domainMetadataInput?.PageSize;
            // Metadata.QueryElapsedTime to Metadata.QueryElapsedTime
            interfacesGraphBackendMetadataOutput.QueryElapsedTime = domainMetadataInput?.QueryElapsedTime;
            // Metadata.TotalResponseElementsWithPositiveRelevanceLevel to Metadata.TotalResponseElementsWithPositiveRelevanceLevel
            interfacesGraphBackendMetadataOutput.TotalResponseElementsWithPositiveRelevanceLevel = domainMetadataInput?.TotalResponseElementsWithPositiveRelevanceLevel;
            // Metadata.Elements to Metadata.Elements
            interfacesGraphBackendMetadataOutput.Elements = domainMetadataInput?.Elements;
            // Metadata.Relations to Metadata.Relations
            interfacesGraphBackendMetadataOutput.Relations = domainMetadataInput?.Relations;
            // Metadata.ExportType to Metadata.ExportType
            interfacesGraphBackendMetadataOutput.ExportType = domainMetadataInput?.ExportType;
            Metadata_To_Metadata_Transformations.Add(domainMetadataInput, interfacesGraphBackendMetadataOutput);
            return interfacesGraphBackendMetadataOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.Metadata, DigicircMatchmaking.ExternalStructs.GraphBackend.Metadata> Metadata_To_Metadata_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.Metadata, DigicircMatchmaking.ExternalStructs.GraphBackend.Metadata>();
        public DigicircMatchmaking.ExternalStructs.GraphBackend.Metadata Metadata_To_Metadata(DigicircMatchmaking.BO.Metadata domainMetadataInput, DigicircMatchmaking.ExternalStructs.GraphBackend.Metadata interfacesGraphBackendMetadataInstance)
        {
            //Leave, if there is nothing to transform
            if(domainMetadataInput == null) return default(DigicircMatchmaking.ExternalStructs.GraphBackend.Metadata);
            if(interfacesGraphBackendMetadataInstance == null)
                return Metadata_To_Metadata (domainMetadataInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(Metadata_To_Metadata_MappingTransformations.ContainsKey(domainMetadataInput))
            {
                return Metadata_To_Metadata_MappingTransformations[domainMetadataInput];
            }
            // Instantiate target root
            var interfacesGraphBackendMetadataOutput = interfacesGraphBackendMetadataInstance;
            // Metadata.ExportDataAsJson to Metadata.ExportDataAsJson
            interfacesGraphBackendMetadataOutput.ExportDataAsJson = domainMetadataInput?.ExportDataAsJson == true;
            // Metadata.Pages to Metadata.Pages
            interfacesGraphBackendMetadataOutput.Pages = domainMetadataInput?.Pages;
            // Metadata.PageSize to Metadata.PageSize
            interfacesGraphBackendMetadataOutput.PageSize = domainMetadataInput?.PageSize;
            // Metadata.QueryElapsedTime to Metadata.QueryElapsedTime
            interfacesGraphBackendMetadataOutput.QueryElapsedTime = domainMetadataInput?.QueryElapsedTime;
            // Metadata.TotalResponseElementsWithPositiveRelevanceLevel to Metadata.TotalResponseElementsWithPositiveRelevanceLevel
            interfacesGraphBackendMetadataOutput.TotalResponseElementsWithPositiveRelevanceLevel = domainMetadataInput?.TotalResponseElementsWithPositiveRelevanceLevel;
            // Metadata.Elements to Metadata.Elements
            interfacesGraphBackendMetadataOutput.Elements = domainMetadataInput?.Elements;
            // Metadata.Relations to Metadata.Relations
            interfacesGraphBackendMetadataOutput.Relations = domainMetadataInput?.Relations;
            // Metadata.ExportType to Metadata.ExportType
            interfacesGraphBackendMetadataOutput.ExportType = domainMetadataInput?.ExportType;
            Metadata_To_Metadata_MappingTransformations.Add(domainMetadataInput, interfacesGraphBackendMetadataOutput);
            return interfacesGraphBackendMetadataOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.Metadata, DigicircMatchmaking.BO.Metadata> Metadata_To_MetadataReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.Metadata, DigicircMatchmaking.BO.Metadata>();
        public DigicircMatchmaking.BO.Metadata Metadata_To_MetadataReversed(DigicircMatchmaking.ExternalStructs.GraphBackend.Metadata interfacesGraphBackendMetadataInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesGraphBackendMetadataInput == null) return default(DigicircMatchmaking.BO.Metadata);
            // If the same Transformation has already ran, get the stored Output and return
            if(Metadata_To_MetadataReversed_Transformations.ContainsKey(interfacesGraphBackendMetadataInput))
            {
                return Metadata_To_MetadataReversed_Transformations[interfacesGraphBackendMetadataInput];
            }
            // Instantiate target root
            var domainMetadataOutput = new DigicircMatchmaking.BO.Metadata();
            // Metadata.ExportDataAsJson to Metadata.ExportDataAsJson
            domainMetadataOutput.ExportDataAsJson = interfacesGraphBackendMetadataInput?.ExportDataAsJson == true;
            // Metadata.Pages to Metadata.Pages
            domainMetadataOutput.Pages = interfacesGraphBackendMetadataInput?.Pages;
            // Metadata.PageSize to Metadata.PageSize
            domainMetadataOutput.PageSize = interfacesGraphBackendMetadataInput?.PageSize;
            // Metadata.QueryElapsedTime to Metadata.QueryElapsedTime
            domainMetadataOutput.QueryElapsedTime = interfacesGraphBackendMetadataInput?.QueryElapsedTime;
            // Metadata.TotalResponseElementsWithPositiveRelevanceLevel to Metadata.TotalResponseElementsWithPositiveRelevanceLevel
            domainMetadataOutput.TotalResponseElementsWithPositiveRelevanceLevel = interfacesGraphBackendMetadataInput?.TotalResponseElementsWithPositiveRelevanceLevel;
            // Metadata.Elements to Metadata.Elements
            domainMetadataOutput.Elements = interfacesGraphBackendMetadataInput?.Elements;
            // Metadata.Relations to Metadata.Relations
            domainMetadataOutput.Relations = interfacesGraphBackendMetadataInput?.Relations;
            // Metadata.ExportType to Metadata.ExportType
            domainMetadataOutput.ExportType = interfacesGraphBackendMetadataInput?.ExportType;
            Metadata_To_MetadataReversed_Transformations.Add(interfacesGraphBackendMetadataInput, domainMetadataOutput);
            return domainMetadataOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.Metadata, DigicircMatchmaking.BO.Metadata> Metadata_To_MetadataReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.Metadata, DigicircMatchmaking.BO.Metadata>();
        public DigicircMatchmaking.BO.Metadata Metadata_To_MetadataReversed(DigicircMatchmaking.ExternalStructs.GraphBackend.Metadata interfacesGraphBackendMetadataInput, DigicircMatchmaking.BO.Metadata domainMetadataInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesGraphBackendMetadataInput == null) return default(DigicircMatchmaking.BO.Metadata);
            if(domainMetadataInstance == null)
                return Metadata_To_MetadataReversed (interfacesGraphBackendMetadataInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(Metadata_To_MetadataReversed_MappingTransformations.ContainsKey(interfacesGraphBackendMetadataInput))
            {
                return Metadata_To_MetadataReversed_MappingTransformations[interfacesGraphBackendMetadataInput];
            }
            // Instantiate target root
            var domainMetadataOutput = domainMetadataInstance;
            // Metadata.ExportDataAsJson to Metadata.ExportDataAsJson
            domainMetadataOutput.ExportDataAsJson = interfacesGraphBackendMetadataInput?.ExportDataAsJson == true;
            // Metadata.Pages to Metadata.Pages
            domainMetadataOutput.Pages = interfacesGraphBackendMetadataInput?.Pages;
            // Metadata.PageSize to Metadata.PageSize
            domainMetadataOutput.PageSize = interfacesGraphBackendMetadataInput?.PageSize;
            // Metadata.QueryElapsedTime to Metadata.QueryElapsedTime
            domainMetadataOutput.QueryElapsedTime = interfacesGraphBackendMetadataInput?.QueryElapsedTime;
            // Metadata.TotalResponseElementsWithPositiveRelevanceLevel to Metadata.TotalResponseElementsWithPositiveRelevanceLevel
            domainMetadataOutput.TotalResponseElementsWithPositiveRelevanceLevel = interfacesGraphBackendMetadataInput?.TotalResponseElementsWithPositiveRelevanceLevel;
            // Metadata.Elements to Metadata.Elements
            domainMetadataOutput.Elements = interfacesGraphBackendMetadataInput?.Elements;
            // Metadata.Relations to Metadata.Relations
            domainMetadataOutput.Relations = interfacesGraphBackendMetadataInput?.Relations;
            // Metadata.ExportType to Metadata.ExportType
            domainMetadataOutput.ExportType = interfacesGraphBackendMetadataInput?.ExportType;
            Metadata_To_MetadataReversed_MappingTransformations.Add(interfacesGraphBackendMetadataInput, domainMetadataOutput);
            return domainMetadataOutput;
        }

        #endregion

        #region Transformation 'Nodes_To_Nodes'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.Nodes, DigicircMatchmaking.ExternalStructs.GraphBackend.Nodes> Nodes_To_Nodes_Transformations = new Dictionary<DigicircMatchmaking.BO.Nodes, DigicircMatchmaking.ExternalStructs.GraphBackend.Nodes>();
        public DigicircMatchmaking.ExternalStructs.GraphBackend.Nodes Nodes_To_Nodes(DigicircMatchmaking.BO.Nodes domainNodesInput)
        {
            //Leave, if there is nothing to transform
            if(domainNodesInput == null) return default(DigicircMatchmaking.ExternalStructs.GraphBackend.Nodes);
            // If the same Transformation has already ran, get the stored Output and return
            if(Nodes_To_Nodes_Transformations.ContainsKey(domainNodesInput))
            {
                return Nodes_To_Nodes_Transformations[domainNodesInput];
            }
            // Instantiate target root
            var interfacesGraphBackendNodesOutput = new DigicircMatchmaking.ExternalStructs.GraphBackend.Nodes();
            // Nodes.Name to Nodes.Name
            interfacesGraphBackendNodesOutput.Name = domainNodesInput?.Name;
            // Nodes.Label to Nodes.Label
            interfacesGraphBackendNodesOutput.Label = domainNodesInput?.Label;
            // Nodes.LabelType to Nodes.LabelType
            interfacesGraphBackendNodesOutput.LabelType = domainNodesInput?.LabelType;
            // Nodes.Id to Nodes.Id
            interfacesGraphBackendNodesOutput.Id = domainNodesInput?.Id;
            // Nodes.Graphid to Nodes.Graphid
            interfacesGraphBackendNodesOutput.Graphid = domainNodesInput?.Graphid;
            // Nodes.CC to Nodes.CC
            interfacesGraphBackendNodesOutput.CC = domainNodesInput?.CC == true;
            // Nodes.SL to Nodes.SL
            interfacesGraphBackendNodesOutput.SL = domainNodesInput?.SL;
            // Nodes.CL to Nodes.CL
            interfacesGraphBackendNodesOutput.CL = domainNodesInput?.CL;
            // Nodes.RL to Nodes.RL
            interfacesGraphBackendNodesOutput.RL = domainNodesInput?.RL;
            // Nodes.IA to Nodes.IA
            interfacesGraphBackendNodesOutput.IA = domainNodesInput?.IA == true;
            // Nodes.AL to Nodes.AL
            interfacesGraphBackendNodesOutput.AL = domainNodesInput?.AL;
            // Nodes.AC to Nodes.AC
            interfacesGraphBackendNodesOutput.AC = domainNodesInput?.AC;
            // Nodes.Attr to Nodes.Attr
            interfacesGraphBackendNodesOutput.Attr = domainNodesInput?.Attr == true;
            Nodes_To_Nodes_Transformations.Add(domainNodesInput, interfacesGraphBackendNodesOutput);
            return interfacesGraphBackendNodesOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.Nodes, DigicircMatchmaking.ExternalStructs.GraphBackend.Nodes> Nodes_To_Nodes_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.Nodes, DigicircMatchmaking.ExternalStructs.GraphBackend.Nodes>();
        public DigicircMatchmaking.ExternalStructs.GraphBackend.Nodes Nodes_To_Nodes(DigicircMatchmaking.BO.Nodes domainNodesInput, DigicircMatchmaking.ExternalStructs.GraphBackend.Nodes interfacesGraphBackendNodesInstance)
        {
            //Leave, if there is nothing to transform
            if(domainNodesInput == null) return default(DigicircMatchmaking.ExternalStructs.GraphBackend.Nodes);
            if(interfacesGraphBackendNodesInstance == null)
                return Nodes_To_Nodes (domainNodesInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(Nodes_To_Nodes_MappingTransformations.ContainsKey(domainNodesInput))
            {
                return Nodes_To_Nodes_MappingTransformations[domainNodesInput];
            }
            // Instantiate target root
            var interfacesGraphBackendNodesOutput = interfacesGraphBackendNodesInstance;
            // Nodes.Name to Nodes.Name
            interfacesGraphBackendNodesOutput.Name = domainNodesInput?.Name;
            // Nodes.Label to Nodes.Label
            interfacesGraphBackendNodesOutput.Label = domainNodesInput?.Label;
            // Nodes.LabelType to Nodes.LabelType
            interfacesGraphBackendNodesOutput.LabelType = domainNodesInput?.LabelType;
            // Nodes.Id to Nodes.Id
            interfacesGraphBackendNodesOutput.Id = domainNodesInput?.Id;
            // Nodes.Graphid to Nodes.Graphid
            interfacesGraphBackendNodesOutput.Graphid = domainNodesInput?.Graphid;
            // Nodes.CC to Nodes.CC
            interfacesGraphBackendNodesOutput.CC = domainNodesInput?.CC == true;
            // Nodes.SL to Nodes.SL
            interfacesGraphBackendNodesOutput.SL = domainNodesInput?.SL;
            // Nodes.CL to Nodes.CL
            interfacesGraphBackendNodesOutput.CL = domainNodesInput?.CL;
            // Nodes.RL to Nodes.RL
            interfacesGraphBackendNodesOutput.RL = domainNodesInput?.RL;
            // Nodes.IA to Nodes.IA
            interfacesGraphBackendNodesOutput.IA = domainNodesInput?.IA == true;
            // Nodes.AL to Nodes.AL
            interfacesGraphBackendNodesOutput.AL = domainNodesInput?.AL;
            // Nodes.AC to Nodes.AC
            interfacesGraphBackendNodesOutput.AC = domainNodesInput?.AC;
            // Nodes.Attr to Nodes.Attr
            interfacesGraphBackendNodesOutput.Attr = domainNodesInput?.Attr == true;
            Nodes_To_Nodes_MappingTransformations.Add(domainNodesInput, interfacesGraphBackendNodesOutput);
            return interfacesGraphBackendNodesOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.Nodes, DigicircMatchmaking.BO.Nodes> Nodes_To_NodesReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.Nodes, DigicircMatchmaking.BO.Nodes>();
        public DigicircMatchmaking.BO.Nodes Nodes_To_NodesReversed(DigicircMatchmaking.ExternalStructs.GraphBackend.Nodes interfacesGraphBackendNodesInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesGraphBackendNodesInput == null) return default(DigicircMatchmaking.BO.Nodes);
            // If the same Transformation has already ran, get the stored Output and return
            if(Nodes_To_NodesReversed_Transformations.ContainsKey(interfacesGraphBackendNodesInput))
            {
                return Nodes_To_NodesReversed_Transformations[interfacesGraphBackendNodesInput];
            }
            // Instantiate target root
            var domainNodesOutput = new DigicircMatchmaking.BO.Nodes();
            // Nodes.Name to Nodes.Name
            domainNodesOutput.Name = interfacesGraphBackendNodesInput?.Name;
            // Nodes.Label to Nodes.Label
            domainNodesOutput.Label = interfacesGraphBackendNodesInput?.Label;
            // Nodes.LabelType to Nodes.LabelType
            domainNodesOutput.LabelType = interfacesGraphBackendNodesInput?.LabelType;
            // Nodes.Id to Nodes.Id
            domainNodesOutput.Id = interfacesGraphBackendNodesInput?.Id;
            // Nodes.Graphid to Nodes.Graphid
            domainNodesOutput.Graphid = interfacesGraphBackendNodesInput?.Graphid;
            // Nodes.CC to Nodes.CC
            domainNodesOutput.CC = interfacesGraphBackendNodesInput?.CC == true;
            // Nodes.SL to Nodes.SL
            domainNodesOutput.SL = interfacesGraphBackendNodesInput?.SL;
            // Nodes.CL to Nodes.CL
            domainNodesOutput.CL = interfacesGraphBackendNodesInput?.CL;
            // Nodes.RL to Nodes.RL
            domainNodesOutput.RL = interfacesGraphBackendNodesInput?.RL;
            // Nodes.IA to Nodes.IA
            domainNodesOutput.IA = interfacesGraphBackendNodesInput?.IA == true;
            // Nodes.AL to Nodes.AL
            domainNodesOutput.AL = interfacesGraphBackendNodesInput?.AL;
            // Nodes.AC to Nodes.AC
            domainNodesOutput.AC = interfacesGraphBackendNodesInput?.AC;
            // Nodes.Attr to Nodes.Attr
            domainNodesOutput.Attr = interfacesGraphBackendNodesInput?.Attr == true;
            Nodes_To_NodesReversed_Transformations.Add(interfacesGraphBackendNodesInput, domainNodesOutput);
            return domainNodesOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.Nodes, DigicircMatchmaking.BO.Nodes> Nodes_To_NodesReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.Nodes, DigicircMatchmaking.BO.Nodes>();
        public DigicircMatchmaking.BO.Nodes Nodes_To_NodesReversed(DigicircMatchmaking.ExternalStructs.GraphBackend.Nodes interfacesGraphBackendNodesInput, DigicircMatchmaking.BO.Nodes domainNodesInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesGraphBackendNodesInput == null) return default(DigicircMatchmaking.BO.Nodes);
            if(domainNodesInstance == null)
                return Nodes_To_NodesReversed (interfacesGraphBackendNodesInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(Nodes_To_NodesReversed_MappingTransformations.ContainsKey(interfacesGraphBackendNodesInput))
            {
                return Nodes_To_NodesReversed_MappingTransformations[interfacesGraphBackendNodesInput];
            }
            // Instantiate target root
            var domainNodesOutput = domainNodesInstance;
            // Nodes.Name to Nodes.Name
            domainNodesOutput.Name = interfacesGraphBackendNodesInput?.Name;
            // Nodes.Label to Nodes.Label
            domainNodesOutput.Label = interfacesGraphBackendNodesInput?.Label;
            // Nodes.LabelType to Nodes.LabelType
            domainNodesOutput.LabelType = interfacesGraphBackendNodesInput?.LabelType;
            // Nodes.Id to Nodes.Id
            domainNodesOutput.Id = interfacesGraphBackendNodesInput?.Id;
            // Nodes.Graphid to Nodes.Graphid
            domainNodesOutput.Graphid = interfacesGraphBackendNodesInput?.Graphid;
            // Nodes.CC to Nodes.CC
            domainNodesOutput.CC = interfacesGraphBackendNodesInput?.CC == true;
            // Nodes.SL to Nodes.SL
            domainNodesOutput.SL = interfacesGraphBackendNodesInput?.SL;
            // Nodes.CL to Nodes.CL
            domainNodesOutput.CL = interfacesGraphBackendNodesInput?.CL;
            // Nodes.RL to Nodes.RL
            domainNodesOutput.RL = interfacesGraphBackendNodesInput?.RL;
            // Nodes.IA to Nodes.IA
            domainNodesOutput.IA = interfacesGraphBackendNodesInput?.IA == true;
            // Nodes.AL to Nodes.AL
            domainNodesOutput.AL = interfacesGraphBackendNodesInput?.AL;
            // Nodes.AC to Nodes.AC
            domainNodesOutput.AC = interfacesGraphBackendNodesInput?.AC;
            // Nodes.Attr to Nodes.Attr
            domainNodesOutput.Attr = interfacesGraphBackendNodesInput?.Attr == true;
            Nodes_To_NodesReversed_MappingTransformations.Add(interfacesGraphBackendNodesInput, domainNodesOutput);
            return domainNodesOutput;
        }

        #endregion

        #region Transformation 'Links_To_Links'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.Links, DigicircMatchmaking.ExternalStructs.GraphBackend.Links> Links_To_Links_Transformations = new Dictionary<DigicircMatchmaking.BO.Links, DigicircMatchmaking.ExternalStructs.GraphBackend.Links>();
        public DigicircMatchmaking.ExternalStructs.GraphBackend.Links Links_To_Links(DigicircMatchmaking.BO.Links domainLinksInput)
        {
            //Leave, if there is nothing to transform
            if(domainLinksInput == null) return default(DigicircMatchmaking.ExternalStructs.GraphBackend.Links);
            // If the same Transformation has already ran, get the stored Output and return
            if(Links_To_Links_Transformations.ContainsKey(domainLinksInput))
            {
                return Links_To_Links_Transformations[domainLinksInput];
            }
            // Instantiate target root
            var interfacesGraphBackendLinksOutput = new DigicircMatchmaking.ExternalStructs.GraphBackend.Links();
            // Links.Source to Links.Source
            interfacesGraphBackendLinksOutput.Source = domainLinksInput?.Source;
            // Links.Target to Links.Target
            interfacesGraphBackendLinksOutput.Target = domainLinksInput?.Target;
            // Links.Type to Links.Type
            interfacesGraphBackendLinksOutput.Type = domainLinksInput?.Type;
            // Links.TypeRel to Links.TypeRel
            interfacesGraphBackendLinksOutput.TypeRel = domainLinksInput?.TypeRel;
            // Links.Sid to Links.Sid
            interfacesGraphBackendLinksOutput.Sid = domainLinksInput?.Sid;
            // Links.Tid to Links.Tid
            interfacesGraphBackendLinksOutput.Tid = domainLinksInput?.Tid;
            // Links.Weight to Links.Weight
            interfacesGraphBackendLinksOutput.Weight = domainLinksInput?.Weight;
            // Links.CL to Links.CL
            interfacesGraphBackendLinksOutput.CL = domainLinksInput?.CL;
            // Links.RL to Links.RL
            interfacesGraphBackendLinksOutput.RL = domainLinksInput?.RL;
            // Links.IA to Links.IA
            interfacesGraphBackendLinksOutput.IA = domainLinksInput?.IA == true;
            // Links.AL to Links.AL
            interfacesGraphBackendLinksOutput.AL = domainLinksInput?.AL;
            // Links.AC to Links.AC
            interfacesGraphBackendLinksOutput.AC = domainLinksInput?.AC;
            // Links.Attr to Links.Attr
            interfacesGraphBackendLinksOutput.Attr = domainLinksInput?.Attr == true;
            Links_To_Links_Transformations.Add(domainLinksInput, interfacesGraphBackendLinksOutput);
            return interfacesGraphBackendLinksOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.Links, DigicircMatchmaking.ExternalStructs.GraphBackend.Links> Links_To_Links_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.Links, DigicircMatchmaking.ExternalStructs.GraphBackend.Links>();
        public DigicircMatchmaking.ExternalStructs.GraphBackend.Links Links_To_Links(DigicircMatchmaking.BO.Links domainLinksInput, DigicircMatchmaking.ExternalStructs.GraphBackend.Links interfacesGraphBackendLinksInstance)
        {
            //Leave, if there is nothing to transform
            if(domainLinksInput == null) return default(DigicircMatchmaking.ExternalStructs.GraphBackend.Links);
            if(interfacesGraphBackendLinksInstance == null)
                return Links_To_Links (domainLinksInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(Links_To_Links_MappingTransformations.ContainsKey(domainLinksInput))
            {
                return Links_To_Links_MappingTransformations[domainLinksInput];
            }
            // Instantiate target root
            var interfacesGraphBackendLinksOutput = interfacesGraphBackendLinksInstance;
            // Links.Source to Links.Source
            interfacesGraphBackendLinksOutput.Source = domainLinksInput?.Source;
            // Links.Target to Links.Target
            interfacesGraphBackendLinksOutput.Target = domainLinksInput?.Target;
            // Links.Type to Links.Type
            interfacesGraphBackendLinksOutput.Type = domainLinksInput?.Type;
            // Links.TypeRel to Links.TypeRel
            interfacesGraphBackendLinksOutput.TypeRel = domainLinksInput?.TypeRel;
            // Links.Sid to Links.Sid
            interfacesGraphBackendLinksOutput.Sid = domainLinksInput?.Sid;
            // Links.Tid to Links.Tid
            interfacesGraphBackendLinksOutput.Tid = domainLinksInput?.Tid;
            // Links.Weight to Links.Weight
            interfacesGraphBackendLinksOutput.Weight = domainLinksInput?.Weight;
            // Links.CL to Links.CL
            interfacesGraphBackendLinksOutput.CL = domainLinksInput?.CL;
            // Links.RL to Links.RL
            interfacesGraphBackendLinksOutput.RL = domainLinksInput?.RL;
            // Links.IA to Links.IA
            interfacesGraphBackendLinksOutput.IA = domainLinksInput?.IA == true;
            // Links.AL to Links.AL
            interfacesGraphBackendLinksOutput.AL = domainLinksInput?.AL;
            // Links.AC to Links.AC
            interfacesGraphBackendLinksOutput.AC = domainLinksInput?.AC;
            // Links.Attr to Links.Attr
            interfacesGraphBackendLinksOutput.Attr = domainLinksInput?.Attr == true;
            Links_To_Links_MappingTransformations.Add(domainLinksInput, interfacesGraphBackendLinksOutput);
            return interfacesGraphBackendLinksOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.Links, DigicircMatchmaking.BO.Links> Links_To_LinksReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.Links, DigicircMatchmaking.BO.Links>();
        public DigicircMatchmaking.BO.Links Links_To_LinksReversed(DigicircMatchmaking.ExternalStructs.GraphBackend.Links interfacesGraphBackendLinksInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesGraphBackendLinksInput == null) return default(DigicircMatchmaking.BO.Links);
            // If the same Transformation has already ran, get the stored Output and return
            if(Links_To_LinksReversed_Transformations.ContainsKey(interfacesGraphBackendLinksInput))
            {
                return Links_To_LinksReversed_Transformations[interfacesGraphBackendLinksInput];
            }
            // Instantiate target root
            var domainLinksOutput = new DigicircMatchmaking.BO.Links();
            // Links.Source to Links.Source
            domainLinksOutput.Source = interfacesGraphBackendLinksInput?.Source;
            // Links.Target to Links.Target
            domainLinksOutput.Target = interfacesGraphBackendLinksInput?.Target;
            // Links.Type to Links.Type
            domainLinksOutput.Type = interfacesGraphBackendLinksInput?.Type;
            // Links.TypeRel to Links.TypeRel
            domainLinksOutput.TypeRel = interfacesGraphBackendLinksInput?.TypeRel;
            // Links.Sid to Links.Sid
            domainLinksOutput.Sid = interfacesGraphBackendLinksInput?.Sid;
            // Links.Tid to Links.Tid
            domainLinksOutput.Tid = interfacesGraphBackendLinksInput?.Tid;
            // Links.Weight to Links.Weight
            domainLinksOutput.Weight = interfacesGraphBackendLinksInput?.Weight;
            // Links.CL to Links.CL
            domainLinksOutput.CL = interfacesGraphBackendLinksInput?.CL;
            // Links.RL to Links.RL
            domainLinksOutput.RL = interfacesGraphBackendLinksInput?.RL;
            // Links.IA to Links.IA
            domainLinksOutput.IA = interfacesGraphBackendLinksInput?.IA == true;
            // Links.AL to Links.AL
            domainLinksOutput.AL = interfacesGraphBackendLinksInput?.AL;
            // Links.AC to Links.AC
            domainLinksOutput.AC = interfacesGraphBackendLinksInput?.AC;
            // Links.Attr to Links.Attr
            domainLinksOutput.Attr = interfacesGraphBackendLinksInput?.Attr == true;
            Links_To_LinksReversed_Transformations.Add(interfacesGraphBackendLinksInput, domainLinksOutput);
            return domainLinksOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.Links, DigicircMatchmaking.BO.Links> Links_To_LinksReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.Links, DigicircMatchmaking.BO.Links>();
        public DigicircMatchmaking.BO.Links Links_To_LinksReversed(DigicircMatchmaking.ExternalStructs.GraphBackend.Links interfacesGraphBackendLinksInput, DigicircMatchmaking.BO.Links domainLinksInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesGraphBackendLinksInput == null) return default(DigicircMatchmaking.BO.Links);
            if(domainLinksInstance == null)
                return Links_To_LinksReversed (interfacesGraphBackendLinksInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(Links_To_LinksReversed_MappingTransformations.ContainsKey(interfacesGraphBackendLinksInput))
            {
                return Links_To_LinksReversed_MappingTransformations[interfacesGraphBackendLinksInput];
            }
            // Instantiate target root
            var domainLinksOutput = domainLinksInstance;
            // Links.Source to Links.Source
            domainLinksOutput.Source = interfacesGraphBackendLinksInput?.Source;
            // Links.Target to Links.Target
            domainLinksOutput.Target = interfacesGraphBackendLinksInput?.Target;
            // Links.Type to Links.Type
            domainLinksOutput.Type = interfacesGraphBackendLinksInput?.Type;
            // Links.TypeRel to Links.TypeRel
            domainLinksOutput.TypeRel = interfacesGraphBackendLinksInput?.TypeRel;
            // Links.Sid to Links.Sid
            domainLinksOutput.Sid = interfacesGraphBackendLinksInput?.Sid;
            // Links.Tid to Links.Tid
            domainLinksOutput.Tid = interfacesGraphBackendLinksInput?.Tid;
            // Links.Weight to Links.Weight
            domainLinksOutput.Weight = interfacesGraphBackendLinksInput?.Weight;
            // Links.CL to Links.CL
            domainLinksOutput.CL = interfacesGraphBackendLinksInput?.CL;
            // Links.RL to Links.RL
            domainLinksOutput.RL = interfacesGraphBackendLinksInput?.RL;
            // Links.IA to Links.IA
            domainLinksOutput.IA = interfacesGraphBackendLinksInput?.IA == true;
            // Links.AL to Links.AL
            domainLinksOutput.AL = interfacesGraphBackendLinksInput?.AL;
            // Links.AC to Links.AC
            domainLinksOutput.AC = interfacesGraphBackendLinksInput?.AC;
            // Links.Attr to Links.Attr
            domainLinksOutput.Attr = interfacesGraphBackendLinksInput?.Attr == true;
            Links_To_LinksReversed_MappingTransformations.Add(interfacesGraphBackendLinksInput, domainLinksOutput);
            return domainLinksOutput;
        }

        #endregion

        #region Transformation 'QueryExtended_To_QueryExtended'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.QueryExtended, DigicircMatchmaking.ExternalStructs.GraphBackend.QueryExtended> QueryExtended_To_QueryExtended_Transformations = new Dictionary<DigicircMatchmaking.BO.QueryExtended, DigicircMatchmaking.ExternalStructs.GraphBackend.QueryExtended>();
        public DigicircMatchmaking.ExternalStructs.GraphBackend.QueryExtended QueryExtended_To_QueryExtended(DigicircMatchmaking.BO.QueryExtended domainQueryExtendedInput)
        {
            //Leave, if there is nothing to transform
            if(domainQueryExtendedInput == null) return default(DigicircMatchmaking.ExternalStructs.GraphBackend.QueryExtended);
            // If the same Transformation has already ran, get the stored Output and return
            if(QueryExtended_To_QueryExtended_Transformations.ContainsKey(domainQueryExtendedInput))
            {
                return QueryExtended_To_QueryExtended_Transformations[domainQueryExtendedInput];
            }
            // Instantiate target root
            var interfacesGraphBackendQueryExtendedOutput = new DigicircMatchmaking.ExternalStructs.GraphBackend.QueryExtended();
            // QueryExtended.GraphContext to QueryExtended.GraphContext
            interfacesGraphBackendQueryExtendedOutput.GraphContext = domainQueryExtendedInput?.GraphContext;
            // QueryExtended.GraphSubContext to QueryExtended.GraphSubContext
            interfacesGraphBackendQueryExtendedOutput.GraphSubContext = domainQueryExtendedInput?.GraphSubContext;
            // QueryExtended.MessageType to QueryExtended.MessageType
            interfacesGraphBackendQueryExtendedOutput.MessageType = domainQueryExtendedInput?.MessageType;
            // QueryExtended.Elements to QueryExtended.Elements
            interfacesGraphBackendQueryExtendedOutput.Elements = domainQueryExtendedInput?.Elements?.Select(ExElements_To_ExElements)?.ToList();
            // QueryExtended.Relations to QueryExtended.Relations
            interfacesGraphBackendQueryExtendedOutput.Relations = domainQueryExtendedInput?.Relations?.Select(ExRelations_To_ExRelations)?.ToList();
            // QueryExtended.MessageSearchData to QueryExtended.MessageSearchData
            interfacesGraphBackendQueryExtendedOutput.MessageSearchData = ExMessageSearchData_To_ExMessageSearchData(domainQueryExtendedInput?.MessageSearchData);
            QueryExtended_To_QueryExtended_Transformations.Add(domainQueryExtendedInput, interfacesGraphBackendQueryExtendedOutput);
            return interfacesGraphBackendQueryExtendedOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.QueryExtended, DigicircMatchmaking.ExternalStructs.GraphBackend.QueryExtended> QueryExtended_To_QueryExtended_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.QueryExtended, DigicircMatchmaking.ExternalStructs.GraphBackend.QueryExtended>();
        public DigicircMatchmaking.ExternalStructs.GraphBackend.QueryExtended QueryExtended_To_QueryExtended(DigicircMatchmaking.BO.QueryExtended domainQueryExtendedInput, DigicircMatchmaking.ExternalStructs.GraphBackend.QueryExtended interfacesGraphBackendQueryExtendedInstance)
        {
            //Leave, if there is nothing to transform
            if(domainQueryExtendedInput == null) return default(DigicircMatchmaking.ExternalStructs.GraphBackend.QueryExtended);
            if(interfacesGraphBackendQueryExtendedInstance == null)
                return QueryExtended_To_QueryExtended (domainQueryExtendedInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(QueryExtended_To_QueryExtended_MappingTransformations.ContainsKey(domainQueryExtendedInput))
            {
                return QueryExtended_To_QueryExtended_MappingTransformations[domainQueryExtendedInput];
            }
            // Instantiate target root
            var interfacesGraphBackendQueryExtendedOutput = interfacesGraphBackendQueryExtendedInstance;
            // QueryExtended.GraphContext to QueryExtended.GraphContext
            interfacesGraphBackendQueryExtendedOutput.GraphContext = domainQueryExtendedInput?.GraphContext;
            // QueryExtended.GraphSubContext to QueryExtended.GraphSubContext
            interfacesGraphBackendQueryExtendedOutput.GraphSubContext = domainQueryExtendedInput?.GraphSubContext;
            // QueryExtended.MessageType to QueryExtended.MessageType
            interfacesGraphBackendQueryExtendedOutput.MessageType = domainQueryExtendedInput?.MessageType;
            // QueryExtended.Elements to QueryExtended.Elements
            var Elements_Elements_MappedInstanceListCount = interfacesGraphBackendQueryExtendedOutput.Elements == null ? 0 : interfacesGraphBackendQueryExtendedOutput.Elements.Count();
            var Elements_Elements_InputListCount = domainQueryExtendedInput.Elements == null ? 0 : domainQueryExtendedInput.Elements.Count();
            var Elements_Elements_TemporaryOutputList = new List<DigicircMatchmaking.ExternalStructs.GraphBackend.ExElements>();
            if(Elements_Elements_InputListCount > 0)
            {
                int Elements_Elements_Index = 0;
                foreach(var initialItem in domainQueryExtendedInput.Elements)
                {
                    if(Elements_Elements_Index <= Elements_Elements_MappedInstanceListCount -1 )
                    {
                        var instancedItem = interfacesGraphBackendQueryExtendedOutput.Elements[Elements_Elements_Index];
                        var transformedItem = ExElements_To_ExElements(initialItem, instancedItem);
                        if(transformedItem != null) Elements_Elements_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Elements_Elements_Index++;
                }
                interfacesGraphBackendQueryExtendedOutput.Elements = Elements_Elements_TemporaryOutputList;
            }
            // QueryExtended.Relations to QueryExtended.Relations
            var Relations_Relations_MappedInstanceListCount = interfacesGraphBackendQueryExtendedOutput.Relations == null ? 0 : interfacesGraphBackendQueryExtendedOutput.Relations.Count();
            var Relations_Relations_InputListCount = domainQueryExtendedInput.Relations == null ? 0 : domainQueryExtendedInput.Relations.Count();
            var Relations_Relations_TemporaryOutputList = new List<DigicircMatchmaking.ExternalStructs.GraphBackend.ExRelations>();
            if(Relations_Relations_InputListCount > 0)
            {
                int Relations_Relations_Index = 0;
                foreach(var initialItem in domainQueryExtendedInput.Relations)
                {
                    if(Relations_Relations_Index <= Relations_Relations_MappedInstanceListCount -1 )
                    {
                        var instancedItem = interfacesGraphBackendQueryExtendedOutput.Relations[Relations_Relations_Index];
                        var transformedItem = ExRelations_To_ExRelations(initialItem, instancedItem);
                        if(transformedItem != null) Relations_Relations_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Relations_Relations_Index++;
                }
                interfacesGraphBackendQueryExtendedOutput.Relations = Relations_Relations_TemporaryOutputList;
            }
            // QueryExtended.MessageSearchData to QueryExtended.MessageSearchData
            interfacesGraphBackendQueryExtendedOutput.MessageSearchData = ExMessageSearchData_To_ExMessageSearchData(domainQueryExtendedInput?.MessageSearchData);
            QueryExtended_To_QueryExtended_MappingTransformations.Add(domainQueryExtendedInput, interfacesGraphBackendQueryExtendedOutput);
            return interfacesGraphBackendQueryExtendedOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.QueryExtended, DigicircMatchmaking.BO.QueryExtended> QueryExtended_To_QueryExtendedReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.QueryExtended, DigicircMatchmaking.BO.QueryExtended>();
        public DigicircMatchmaking.BO.QueryExtended QueryExtended_To_QueryExtendedReversed(DigicircMatchmaking.ExternalStructs.GraphBackend.QueryExtended interfacesGraphBackendQueryExtendedInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesGraphBackendQueryExtendedInput == null) return default(DigicircMatchmaking.BO.QueryExtended);
            // If the same Transformation has already ran, get the stored Output and return
            if(QueryExtended_To_QueryExtendedReversed_Transformations.ContainsKey(interfacesGraphBackendQueryExtendedInput))
            {
                return QueryExtended_To_QueryExtendedReversed_Transformations[interfacesGraphBackendQueryExtendedInput];
            }
            // Instantiate target root
            var domainQueryExtendedOutput = new DigicircMatchmaking.BO.QueryExtended();
            // QueryExtended.GraphContext to QueryExtended.GraphContext
            domainQueryExtendedOutput.GraphContext = interfacesGraphBackendQueryExtendedInput?.GraphContext;
            // QueryExtended.GraphSubContext to QueryExtended.GraphSubContext
            domainQueryExtendedOutput.GraphSubContext = interfacesGraphBackendQueryExtendedInput?.GraphSubContext;
            // QueryExtended.MessageType to QueryExtended.MessageType
            domainQueryExtendedOutput.MessageType = interfacesGraphBackendQueryExtendedInput?.MessageType;
            // QueryExtended.Elements to QueryExtended.Elements
            domainQueryExtendedOutput.Elements = interfacesGraphBackendQueryExtendedInput?.Elements?.Select(ExElements_To_ExElementsReversed)?.ToList();
            // QueryExtended.Relations to QueryExtended.Relations
            domainQueryExtendedOutput.Relations = interfacesGraphBackendQueryExtendedInput?.Relations?.Select(ExRelations_To_ExRelationsReversed)?.ToList();
            // QueryExtended.MessageSearchData to QueryExtended.MessageSearchData
            domainQueryExtendedOutput.MessageSearchData = ExMessageSearchData_To_ExMessageSearchDataReversed(interfacesGraphBackendQueryExtendedInput?.MessageSearchData);
            QueryExtended_To_QueryExtendedReversed_Transformations.Add(interfacesGraphBackendQueryExtendedInput, domainQueryExtendedOutput);
            return domainQueryExtendedOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.QueryExtended, DigicircMatchmaking.BO.QueryExtended> QueryExtended_To_QueryExtendedReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.QueryExtended, DigicircMatchmaking.BO.QueryExtended>();
        public DigicircMatchmaking.BO.QueryExtended QueryExtended_To_QueryExtendedReversed(DigicircMatchmaking.ExternalStructs.GraphBackend.QueryExtended interfacesGraphBackendQueryExtendedInput, DigicircMatchmaking.BO.QueryExtended domainQueryExtendedInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesGraphBackendQueryExtendedInput == null) return default(DigicircMatchmaking.BO.QueryExtended);
            if(domainQueryExtendedInstance == null)
                return QueryExtended_To_QueryExtendedReversed (interfacesGraphBackendQueryExtendedInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(QueryExtended_To_QueryExtendedReversed_MappingTransformations.ContainsKey(interfacesGraphBackendQueryExtendedInput))
            {
                return QueryExtended_To_QueryExtendedReversed_MappingTransformations[interfacesGraphBackendQueryExtendedInput];
            }
            // Instantiate target root
            var domainQueryExtendedOutput = domainQueryExtendedInstance;
            // QueryExtended.GraphContext to QueryExtended.GraphContext
            domainQueryExtendedOutput.GraphContext = interfacesGraphBackendQueryExtendedInput?.GraphContext;
            // QueryExtended.GraphSubContext to QueryExtended.GraphSubContext
            domainQueryExtendedOutput.GraphSubContext = interfacesGraphBackendQueryExtendedInput?.GraphSubContext;
            // QueryExtended.MessageType to QueryExtended.MessageType
            domainQueryExtendedOutput.MessageType = interfacesGraphBackendQueryExtendedInput?.MessageType;
            // QueryExtended.Elements to QueryExtended.Elements
            var Elements_Elements_MappedInstanceListCount = domainQueryExtendedOutput.Elements == null ? 0 : domainQueryExtendedOutput.Elements.Count();
            var Elements_Elements_InputListCount = interfacesGraphBackendQueryExtendedInput.Elements == null ? 0 : interfacesGraphBackendQueryExtendedInput.Elements.Count();
            var Elements_Elements_TemporaryOutputList = new List<DigicircMatchmaking.BO.ExElements>();
            if(Elements_Elements_InputListCount > 0)
            {
                int Elements_Elements_Index = 0;
                foreach(var initialItem in interfacesGraphBackendQueryExtendedInput.Elements)
                {
                    if(Elements_Elements_Index <= Elements_Elements_MappedInstanceListCount -1 )
                    {
                        var instancedItem = domainQueryExtendedOutput.Elements[Elements_Elements_Index];
                        var transformedItem = ExElements_To_ExElementsReversed(initialItem, instancedItem);
                        if(transformedItem != null) Elements_Elements_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Elements_Elements_Index++;
                }
                domainQueryExtendedOutput.Elements = Elements_Elements_TemporaryOutputList;
            }
            // QueryExtended.Relations to QueryExtended.Relations
            var Relations_Relations_MappedInstanceListCount = domainQueryExtendedOutput.Relations == null ? 0 : domainQueryExtendedOutput.Relations.Count();
            var Relations_Relations_InputListCount = interfacesGraphBackendQueryExtendedInput.Relations == null ? 0 : interfacesGraphBackendQueryExtendedInput.Relations.Count();
            var Relations_Relations_TemporaryOutputList = new List<DigicircMatchmaking.BO.ExRelations>();
            if(Relations_Relations_InputListCount > 0)
            {
                int Relations_Relations_Index = 0;
                foreach(var initialItem in interfacesGraphBackendQueryExtendedInput.Relations)
                {
                    if(Relations_Relations_Index <= Relations_Relations_MappedInstanceListCount -1 )
                    {
                        var instancedItem = domainQueryExtendedOutput.Relations[Relations_Relations_Index];
                        var transformedItem = ExRelations_To_ExRelationsReversed(initialItem, instancedItem);
                        if(transformedItem != null) Relations_Relations_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Relations_Relations_Index++;
                }
                domainQueryExtendedOutput.Relations = Relations_Relations_TemporaryOutputList;
            }
            // QueryExtended.MessageSearchData to QueryExtended.MessageSearchData
            domainQueryExtendedOutput.MessageSearchData = ExMessageSearchData_To_ExMessageSearchDataReversed(interfacesGraphBackendQueryExtendedInput?.MessageSearchData);
            QueryExtended_To_QueryExtendedReversed_MappingTransformations.Add(interfacesGraphBackendQueryExtendedInput, domainQueryExtendedOutput);
            return domainQueryExtendedOutput;
        }

        #endregion

        #region Transformation 'ExElements_To_ExElements'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.ExElements, DigicircMatchmaking.ExternalStructs.GraphBackend.ExElements> ExElements_To_ExElements_Transformations = new Dictionary<DigicircMatchmaking.BO.ExElements, DigicircMatchmaking.ExternalStructs.GraphBackend.ExElements>();
        public DigicircMatchmaking.ExternalStructs.GraphBackend.ExElements ExElements_To_ExElements(DigicircMatchmaking.BO.ExElements domainExElementsInput)
        {
            //Leave, if there is nothing to transform
            if(domainExElementsInput == null) return default(DigicircMatchmaking.ExternalStructs.GraphBackend.ExElements);
            // If the same Transformation has already ran, get the stored Output and return
            if(ExElements_To_ExElements_Transformations.ContainsKey(domainExElementsInput))
            {
                return ExElements_To_ExElements_Transformations[domainExElementsInput];
            }
            // Instantiate target root
            var interfacesGraphBackendExElementsOutput = new DigicircMatchmaking.ExternalStructs.GraphBackend.ExElements();
            // ExElements.Type to ExElements.Type
            interfacesGraphBackendExElementsOutput.Type = domainExElementsInput?.Type;
            // ExElements.Name to ExElements.Name
            interfacesGraphBackendExElementsOutput.Name = domainExElementsInput?.Name;
            // ExElements.Category to ExElements.Category
            interfacesGraphBackendExElementsOutput.Category = domainExElementsInput?.Category;
            // ExElements.Data to ExElements.Data
            interfacesGraphBackendExElementsOutput.Data = domainExElementsInput?.Data;
            ExElements_To_ExElements_Transformations.Add(domainExElementsInput, interfacesGraphBackendExElementsOutput);
            return interfacesGraphBackendExElementsOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.ExElements, DigicircMatchmaking.ExternalStructs.GraphBackend.ExElements> ExElements_To_ExElements_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.ExElements, DigicircMatchmaking.ExternalStructs.GraphBackend.ExElements>();
        public DigicircMatchmaking.ExternalStructs.GraphBackend.ExElements ExElements_To_ExElements(DigicircMatchmaking.BO.ExElements domainExElementsInput, DigicircMatchmaking.ExternalStructs.GraphBackend.ExElements interfacesGraphBackendExElementsInstance)
        {
            //Leave, if there is nothing to transform
            if(domainExElementsInput == null) return default(DigicircMatchmaking.ExternalStructs.GraphBackend.ExElements);
            if(interfacesGraphBackendExElementsInstance == null)
                return ExElements_To_ExElements (domainExElementsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ExElements_To_ExElements_MappingTransformations.ContainsKey(domainExElementsInput))
            {
                return ExElements_To_ExElements_MappingTransformations[domainExElementsInput];
            }
            // Instantiate target root
            var interfacesGraphBackendExElementsOutput = interfacesGraphBackendExElementsInstance;
            // ExElements.Type to ExElements.Type
            interfacesGraphBackendExElementsOutput.Type = domainExElementsInput?.Type;
            // ExElements.Name to ExElements.Name
            interfacesGraphBackendExElementsOutput.Name = domainExElementsInput?.Name;
            // ExElements.Category to ExElements.Category
            interfacesGraphBackendExElementsOutput.Category = domainExElementsInput?.Category;
            // ExElements.Data to ExElements.Data
            interfacesGraphBackendExElementsOutput.Data = domainExElementsInput?.Data;
            ExElements_To_ExElements_MappingTransformations.Add(domainExElementsInput, interfacesGraphBackendExElementsOutput);
            return interfacesGraphBackendExElementsOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.ExElements, DigicircMatchmaking.BO.ExElements> ExElements_To_ExElementsReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.ExElements, DigicircMatchmaking.BO.ExElements>();
        public DigicircMatchmaking.BO.ExElements ExElements_To_ExElementsReversed(DigicircMatchmaking.ExternalStructs.GraphBackend.ExElements interfacesGraphBackendExElementsInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesGraphBackendExElementsInput == null) return default(DigicircMatchmaking.BO.ExElements);
            // If the same Transformation has already ran, get the stored Output and return
            if(ExElements_To_ExElementsReversed_Transformations.ContainsKey(interfacesGraphBackendExElementsInput))
            {
                return ExElements_To_ExElementsReversed_Transformations[interfacesGraphBackendExElementsInput];
            }
            // Instantiate target root
            var domainExElementsOutput = new DigicircMatchmaking.BO.ExElements();
            // ExElements.Type to ExElements.Type
            domainExElementsOutput.Type = interfacesGraphBackendExElementsInput?.Type;
            // ExElements.Name to ExElements.Name
            domainExElementsOutput.Name = interfacesGraphBackendExElementsInput?.Name;
            // ExElements.Category to ExElements.Category
            domainExElementsOutput.Category = interfacesGraphBackendExElementsInput?.Category;
            // ExElements.Data to ExElements.Data
            domainExElementsOutput.Data = interfacesGraphBackendExElementsInput?.Data;
            ExElements_To_ExElementsReversed_Transformations.Add(interfacesGraphBackendExElementsInput, domainExElementsOutput);
            return domainExElementsOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.ExElements, DigicircMatchmaking.BO.ExElements> ExElements_To_ExElementsReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.ExElements, DigicircMatchmaking.BO.ExElements>();
        public DigicircMatchmaking.BO.ExElements ExElements_To_ExElementsReversed(DigicircMatchmaking.ExternalStructs.GraphBackend.ExElements interfacesGraphBackendExElementsInput, DigicircMatchmaking.BO.ExElements domainExElementsInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesGraphBackendExElementsInput == null) return default(DigicircMatchmaking.BO.ExElements);
            if(domainExElementsInstance == null)
                return ExElements_To_ExElementsReversed (interfacesGraphBackendExElementsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ExElements_To_ExElementsReversed_MappingTransformations.ContainsKey(interfacesGraphBackendExElementsInput))
            {
                return ExElements_To_ExElementsReversed_MappingTransformations[interfacesGraphBackendExElementsInput];
            }
            // Instantiate target root
            var domainExElementsOutput = domainExElementsInstance;
            // ExElements.Type to ExElements.Type
            domainExElementsOutput.Type = interfacesGraphBackendExElementsInput?.Type;
            // ExElements.Name to ExElements.Name
            domainExElementsOutput.Name = interfacesGraphBackendExElementsInput?.Name;
            // ExElements.Category to ExElements.Category
            domainExElementsOutput.Category = interfacesGraphBackendExElementsInput?.Category;
            // ExElements.Data to ExElements.Data
            domainExElementsOutput.Data = interfacesGraphBackendExElementsInput?.Data;
            ExElements_To_ExElementsReversed_MappingTransformations.Add(interfacesGraphBackendExElementsInput, domainExElementsOutput);
            return domainExElementsOutput;
        }

        #endregion

        #region Transformation 'ExRelations_To_ExRelations'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.ExRelations, DigicircMatchmaking.ExternalStructs.GraphBackend.ExRelations> ExRelations_To_ExRelations_Transformations = new Dictionary<DigicircMatchmaking.BO.ExRelations, DigicircMatchmaking.ExternalStructs.GraphBackend.ExRelations>();
        public DigicircMatchmaking.ExternalStructs.GraphBackend.ExRelations ExRelations_To_ExRelations(DigicircMatchmaking.BO.ExRelations domainExRelationsInput)
        {
            //Leave, if there is nothing to transform
            if(domainExRelationsInput == null) return default(DigicircMatchmaking.ExternalStructs.GraphBackend.ExRelations);
            // If the same Transformation has already ran, get the stored Output and return
            if(ExRelations_To_ExRelations_Transformations.ContainsKey(domainExRelationsInput))
            {
                return ExRelations_To_ExRelations_Transformations[domainExRelationsInput];
            }
            // Instantiate target root
            var interfacesGraphBackendExRelationsOutput = new DigicircMatchmaking.ExternalStructs.GraphBackend.ExRelations();
            // ExRelations.Type to ExRelations.Type
            interfacesGraphBackendExRelationsOutput.Type = domainExRelationsInput?.Type;
            ExRelations_To_ExRelations_Transformations.Add(domainExRelationsInput, interfacesGraphBackendExRelationsOutput);
            return interfacesGraphBackendExRelationsOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.ExRelations, DigicircMatchmaking.ExternalStructs.GraphBackend.ExRelations> ExRelations_To_ExRelations_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.ExRelations, DigicircMatchmaking.ExternalStructs.GraphBackend.ExRelations>();
        public DigicircMatchmaking.ExternalStructs.GraphBackend.ExRelations ExRelations_To_ExRelations(DigicircMatchmaking.BO.ExRelations domainExRelationsInput, DigicircMatchmaking.ExternalStructs.GraphBackend.ExRelations interfacesGraphBackendExRelationsInstance)
        {
            //Leave, if there is nothing to transform
            if(domainExRelationsInput == null) return default(DigicircMatchmaking.ExternalStructs.GraphBackend.ExRelations);
            if(interfacesGraphBackendExRelationsInstance == null)
                return ExRelations_To_ExRelations (domainExRelationsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ExRelations_To_ExRelations_MappingTransformations.ContainsKey(domainExRelationsInput))
            {
                return ExRelations_To_ExRelations_MappingTransformations[domainExRelationsInput];
            }
            // Instantiate target root
            var interfacesGraphBackendExRelationsOutput = interfacesGraphBackendExRelationsInstance;
            // ExRelations.Type to ExRelations.Type
            interfacesGraphBackendExRelationsOutput.Type = domainExRelationsInput?.Type;
            ExRelations_To_ExRelations_MappingTransformations.Add(domainExRelationsInput, interfacesGraphBackendExRelationsOutput);
            return interfacesGraphBackendExRelationsOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.ExRelations, DigicircMatchmaking.BO.ExRelations> ExRelations_To_ExRelationsReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.ExRelations, DigicircMatchmaking.BO.ExRelations>();
        public DigicircMatchmaking.BO.ExRelations ExRelations_To_ExRelationsReversed(DigicircMatchmaking.ExternalStructs.GraphBackend.ExRelations interfacesGraphBackendExRelationsInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesGraphBackendExRelationsInput == null) return default(DigicircMatchmaking.BO.ExRelations);
            // If the same Transformation has already ran, get the stored Output and return
            if(ExRelations_To_ExRelationsReversed_Transformations.ContainsKey(interfacesGraphBackendExRelationsInput))
            {
                return ExRelations_To_ExRelationsReversed_Transformations[interfacesGraphBackendExRelationsInput];
            }
            // Instantiate target root
            var domainExRelationsOutput = new DigicircMatchmaking.BO.ExRelations();
            // ExRelations.Type to ExRelations.Type
            domainExRelationsOutput.Type = interfacesGraphBackendExRelationsInput?.Type;
            ExRelations_To_ExRelationsReversed_Transformations.Add(interfacesGraphBackendExRelationsInput, domainExRelationsOutput);
            return domainExRelationsOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.ExRelations, DigicircMatchmaking.BO.ExRelations> ExRelations_To_ExRelationsReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.ExRelations, DigicircMatchmaking.BO.ExRelations>();
        public DigicircMatchmaking.BO.ExRelations ExRelations_To_ExRelationsReversed(DigicircMatchmaking.ExternalStructs.GraphBackend.ExRelations interfacesGraphBackendExRelationsInput, DigicircMatchmaking.BO.ExRelations domainExRelationsInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesGraphBackendExRelationsInput == null) return default(DigicircMatchmaking.BO.ExRelations);
            if(domainExRelationsInstance == null)
                return ExRelations_To_ExRelationsReversed (interfacesGraphBackendExRelationsInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ExRelations_To_ExRelationsReversed_MappingTransformations.ContainsKey(interfacesGraphBackendExRelationsInput))
            {
                return ExRelations_To_ExRelationsReversed_MappingTransformations[interfacesGraphBackendExRelationsInput];
            }
            // Instantiate target root
            var domainExRelationsOutput = domainExRelationsInstance;
            // ExRelations.Type to ExRelations.Type
            domainExRelationsOutput.Type = interfacesGraphBackendExRelationsInput?.Type;
            ExRelations_To_ExRelationsReversed_MappingTransformations.Add(interfacesGraphBackendExRelationsInput, domainExRelationsOutput);
            return domainExRelationsOutput;
        }

        #endregion

        #region Transformation 'ExMessageSearchData_To_ExMessageSearchData'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.ExMessageSearchData, DigicircMatchmaking.ExternalStructs.GraphBackend.ExMessageSearchData> ExMessageSearchData_To_ExMessageSearchData_Transformations = new Dictionary<DigicircMatchmaking.BO.ExMessageSearchData, DigicircMatchmaking.ExternalStructs.GraphBackend.ExMessageSearchData>();
        public DigicircMatchmaking.ExternalStructs.GraphBackend.ExMessageSearchData ExMessageSearchData_To_ExMessageSearchData(DigicircMatchmaking.BO.ExMessageSearchData domainExMessageSearchDataInput)
        {
            //Leave, if there is nothing to transform
            if(domainExMessageSearchDataInput == null) return default(DigicircMatchmaking.ExternalStructs.GraphBackend.ExMessageSearchData);
            // If the same Transformation has already ran, get the stored Output and return
            if(ExMessageSearchData_To_ExMessageSearchData_Transformations.ContainsKey(domainExMessageSearchDataInput))
            {
                return ExMessageSearchData_To_ExMessageSearchData_Transformations[domainExMessageSearchDataInput];
            }
            // Instantiate target root
            var interfacesGraphBackendExMessageSearchDataOutput = new DigicircMatchmaking.ExternalStructs.GraphBackend.ExMessageSearchData();
            // ExMessageSearchData.LabelSearchType to ExMessageSearchData.LabelSearchType
            interfacesGraphBackendExMessageSearchDataOutput.LabelSearchType = domainExMessageSearchDataInput?.LabelSearchType;
            // ExMessageSearchData.DepthSearchLevel to ExMessageSearchData.DepthSearchLevel
            interfacesGraphBackendExMessageSearchDataOutput.DepthSearchLevel = domainExMessageSearchDataInput?.DepthSearchLevel;
            // ExMessageSearchData.AlgorithmName to ExMessageSearchData.AlgorithmName
            interfacesGraphBackendExMessageSearchDataOutput.AlgorithmName = domainExMessageSearchDataInput?.AlgorithmName;
            // ExMessageSearchData.JsonResponseFormat to ExMessageSearchData.JsonResponseFormat
            interfacesGraphBackendExMessageSearchDataOutput.JsonResponseFormat = domainExMessageSearchDataInput?.JsonResponseFormat;
            // ExMessageSearchData.ExSecurity to ExMessageSearchData.ExSecurity
            interfacesGraphBackendExMessageSearchDataOutput.ExSecurity = ExSecurity_To_ExSecurity(domainExMessageSearchDataInput?.ExSecurity);
            ExMessageSearchData_To_ExMessageSearchData_Transformations.Add(domainExMessageSearchDataInput, interfacesGraphBackendExMessageSearchDataOutput);
            return interfacesGraphBackendExMessageSearchDataOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.ExMessageSearchData, DigicircMatchmaking.ExternalStructs.GraphBackend.ExMessageSearchData> ExMessageSearchData_To_ExMessageSearchData_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.ExMessageSearchData, DigicircMatchmaking.ExternalStructs.GraphBackend.ExMessageSearchData>();
        public DigicircMatchmaking.ExternalStructs.GraphBackend.ExMessageSearchData ExMessageSearchData_To_ExMessageSearchData(DigicircMatchmaking.BO.ExMessageSearchData domainExMessageSearchDataInput, DigicircMatchmaking.ExternalStructs.GraphBackend.ExMessageSearchData interfacesGraphBackendExMessageSearchDataInstance)
        {
            //Leave, if there is nothing to transform
            if(domainExMessageSearchDataInput == null) return default(DigicircMatchmaking.ExternalStructs.GraphBackend.ExMessageSearchData);
            if(interfacesGraphBackendExMessageSearchDataInstance == null)
                return ExMessageSearchData_To_ExMessageSearchData (domainExMessageSearchDataInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ExMessageSearchData_To_ExMessageSearchData_MappingTransformations.ContainsKey(domainExMessageSearchDataInput))
            {
                return ExMessageSearchData_To_ExMessageSearchData_MappingTransformations[domainExMessageSearchDataInput];
            }
            // Instantiate target root
            var interfacesGraphBackendExMessageSearchDataOutput = interfacesGraphBackendExMessageSearchDataInstance;
            // ExMessageSearchData.LabelSearchType to ExMessageSearchData.LabelSearchType
            interfacesGraphBackendExMessageSearchDataOutput.LabelSearchType = domainExMessageSearchDataInput?.LabelSearchType;
            // ExMessageSearchData.DepthSearchLevel to ExMessageSearchData.DepthSearchLevel
            interfacesGraphBackendExMessageSearchDataOutput.DepthSearchLevel = domainExMessageSearchDataInput?.DepthSearchLevel;
            // ExMessageSearchData.AlgorithmName to ExMessageSearchData.AlgorithmName
            interfacesGraphBackendExMessageSearchDataOutput.AlgorithmName = domainExMessageSearchDataInput?.AlgorithmName;
            // ExMessageSearchData.JsonResponseFormat to ExMessageSearchData.JsonResponseFormat
            interfacesGraphBackendExMessageSearchDataOutput.JsonResponseFormat = domainExMessageSearchDataInput?.JsonResponseFormat;
            // ExMessageSearchData.ExSecurity to ExMessageSearchData.ExSecurity
            interfacesGraphBackendExMessageSearchDataOutput.ExSecurity = ExSecurity_To_ExSecurity(domainExMessageSearchDataInput?.ExSecurity);
            ExMessageSearchData_To_ExMessageSearchData_MappingTransformations.Add(domainExMessageSearchDataInput, interfacesGraphBackendExMessageSearchDataOutput);
            return interfacesGraphBackendExMessageSearchDataOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.ExMessageSearchData, DigicircMatchmaking.BO.ExMessageSearchData> ExMessageSearchData_To_ExMessageSearchDataReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.ExMessageSearchData, DigicircMatchmaking.BO.ExMessageSearchData>();
        public DigicircMatchmaking.BO.ExMessageSearchData ExMessageSearchData_To_ExMessageSearchDataReversed(DigicircMatchmaking.ExternalStructs.GraphBackend.ExMessageSearchData interfacesGraphBackendExMessageSearchDataInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesGraphBackendExMessageSearchDataInput == null) return default(DigicircMatchmaking.BO.ExMessageSearchData);
            // If the same Transformation has already ran, get the stored Output and return
            if(ExMessageSearchData_To_ExMessageSearchDataReversed_Transformations.ContainsKey(interfacesGraphBackendExMessageSearchDataInput))
            {
                return ExMessageSearchData_To_ExMessageSearchDataReversed_Transformations[interfacesGraphBackendExMessageSearchDataInput];
            }
            // Instantiate target root
            var domainExMessageSearchDataOutput = new DigicircMatchmaking.BO.ExMessageSearchData();
            // ExMessageSearchData.LabelSearchType to ExMessageSearchData.LabelSearchType
            domainExMessageSearchDataOutput.LabelSearchType = interfacesGraphBackendExMessageSearchDataInput?.LabelSearchType;
            // ExMessageSearchData.DepthSearchLevel to ExMessageSearchData.DepthSearchLevel
            domainExMessageSearchDataOutput.DepthSearchLevel = interfacesGraphBackendExMessageSearchDataInput?.DepthSearchLevel;
            // ExMessageSearchData.AlgorithmName to ExMessageSearchData.AlgorithmName
            domainExMessageSearchDataOutput.AlgorithmName = interfacesGraphBackendExMessageSearchDataInput?.AlgorithmName;
            // ExMessageSearchData.JsonResponseFormat to ExMessageSearchData.JsonResponseFormat
            domainExMessageSearchDataOutput.JsonResponseFormat = interfacesGraphBackendExMessageSearchDataInput?.JsonResponseFormat;
            // ExMessageSearchData.ExSecurity to ExMessageSearchData.ExSecurity
            domainExMessageSearchDataOutput.ExSecurity = ExSecurity_To_ExSecurityReversed(interfacesGraphBackendExMessageSearchDataInput?.ExSecurity);
            ExMessageSearchData_To_ExMessageSearchDataReversed_Transformations.Add(interfacesGraphBackendExMessageSearchDataInput, domainExMessageSearchDataOutput);
            return domainExMessageSearchDataOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.ExMessageSearchData, DigicircMatchmaking.BO.ExMessageSearchData> ExMessageSearchData_To_ExMessageSearchDataReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.ExMessageSearchData, DigicircMatchmaking.BO.ExMessageSearchData>();
        public DigicircMatchmaking.BO.ExMessageSearchData ExMessageSearchData_To_ExMessageSearchDataReversed(DigicircMatchmaking.ExternalStructs.GraphBackend.ExMessageSearchData interfacesGraphBackendExMessageSearchDataInput, DigicircMatchmaking.BO.ExMessageSearchData domainExMessageSearchDataInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesGraphBackendExMessageSearchDataInput == null) return default(DigicircMatchmaking.BO.ExMessageSearchData);
            if(domainExMessageSearchDataInstance == null)
                return ExMessageSearchData_To_ExMessageSearchDataReversed (interfacesGraphBackendExMessageSearchDataInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ExMessageSearchData_To_ExMessageSearchDataReversed_MappingTransformations.ContainsKey(interfacesGraphBackendExMessageSearchDataInput))
            {
                return ExMessageSearchData_To_ExMessageSearchDataReversed_MappingTransformations[interfacesGraphBackendExMessageSearchDataInput];
            }
            // Instantiate target root
            var domainExMessageSearchDataOutput = domainExMessageSearchDataInstance;
            // ExMessageSearchData.LabelSearchType to ExMessageSearchData.LabelSearchType
            domainExMessageSearchDataOutput.LabelSearchType = interfacesGraphBackendExMessageSearchDataInput?.LabelSearchType;
            // ExMessageSearchData.DepthSearchLevel to ExMessageSearchData.DepthSearchLevel
            domainExMessageSearchDataOutput.DepthSearchLevel = interfacesGraphBackendExMessageSearchDataInput?.DepthSearchLevel;
            // ExMessageSearchData.AlgorithmName to ExMessageSearchData.AlgorithmName
            domainExMessageSearchDataOutput.AlgorithmName = interfacesGraphBackendExMessageSearchDataInput?.AlgorithmName;
            // ExMessageSearchData.JsonResponseFormat to ExMessageSearchData.JsonResponseFormat
            domainExMessageSearchDataOutput.JsonResponseFormat = interfacesGraphBackendExMessageSearchDataInput?.JsonResponseFormat;
            // ExMessageSearchData.ExSecurity to ExMessageSearchData.ExSecurity
            domainExMessageSearchDataOutput.ExSecurity = ExSecurity_To_ExSecurityReversed(interfacesGraphBackendExMessageSearchDataInput?.ExSecurity);
            ExMessageSearchData_To_ExMessageSearchDataReversed_MappingTransformations.Add(interfacesGraphBackendExMessageSearchDataInput, domainExMessageSearchDataOutput);
            return domainExMessageSearchDataOutput;
        }

        #endregion

        #region Transformation 'ExSecurity_To_ExSecurity'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.ExSecurity, DigicircMatchmaking.ExternalStructs.GraphBackend.ExSecurity> ExSecurity_To_ExSecurity_Transformations = new Dictionary<DigicircMatchmaking.BO.ExSecurity, DigicircMatchmaking.ExternalStructs.GraphBackend.ExSecurity>();
        public DigicircMatchmaking.ExternalStructs.GraphBackend.ExSecurity ExSecurity_To_ExSecurity(DigicircMatchmaking.BO.ExSecurity domainExSecurityInput)
        {
            //Leave, if there is nothing to transform
            if(domainExSecurityInput == null) return default(DigicircMatchmaking.ExternalStructs.GraphBackend.ExSecurity);
            // If the same Transformation has already ran, get the stored Output and return
            if(ExSecurity_To_ExSecurity_Transformations.ContainsKey(domainExSecurityInput))
            {
                return ExSecurity_To_ExSecurity_Transformations[domainExSecurityInput];
            }
            // Instantiate target root
            var interfacesGraphBackendExSecurityOutput = new DigicircMatchmaking.ExternalStructs.GraphBackend.ExSecurity();
            // ExSecurity.ExAuthorization to ExSecurity.ExAuthorization
            interfacesGraphBackendExSecurityOutput.ExAuthorization = domainExSecurityInput?.ExAuthorization;
            // ExSecurity.UserName to ExSecurity.UserName
            interfacesGraphBackendExSecurityOutput.UserName = domainExSecurityInput?.UserName;
            // ExSecurity.Passwd to ExSecurity.Passwd
            interfacesGraphBackendExSecurityOutput.Passwd = domainExSecurityInput?.Passwd;
            ExSecurity_To_ExSecurity_Transformations.Add(domainExSecurityInput, interfacesGraphBackendExSecurityOutput);
            return interfacesGraphBackendExSecurityOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.ExSecurity, DigicircMatchmaking.ExternalStructs.GraphBackend.ExSecurity> ExSecurity_To_ExSecurity_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.ExSecurity, DigicircMatchmaking.ExternalStructs.GraphBackend.ExSecurity>();
        public DigicircMatchmaking.ExternalStructs.GraphBackend.ExSecurity ExSecurity_To_ExSecurity(DigicircMatchmaking.BO.ExSecurity domainExSecurityInput, DigicircMatchmaking.ExternalStructs.GraphBackend.ExSecurity interfacesGraphBackendExSecurityInstance)
        {
            //Leave, if there is nothing to transform
            if(domainExSecurityInput == null) return default(DigicircMatchmaking.ExternalStructs.GraphBackend.ExSecurity);
            if(interfacesGraphBackendExSecurityInstance == null)
                return ExSecurity_To_ExSecurity (domainExSecurityInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ExSecurity_To_ExSecurity_MappingTransformations.ContainsKey(domainExSecurityInput))
            {
                return ExSecurity_To_ExSecurity_MappingTransformations[domainExSecurityInput];
            }
            // Instantiate target root
            var interfacesGraphBackendExSecurityOutput = interfacesGraphBackendExSecurityInstance;
            // ExSecurity.ExAuthorization to ExSecurity.ExAuthorization
            interfacesGraphBackendExSecurityOutput.ExAuthorization = domainExSecurityInput?.ExAuthorization;
            // ExSecurity.UserName to ExSecurity.UserName
            interfacesGraphBackendExSecurityOutput.UserName = domainExSecurityInput?.UserName;
            // ExSecurity.Passwd to ExSecurity.Passwd
            interfacesGraphBackendExSecurityOutput.Passwd = domainExSecurityInput?.Passwd;
            ExSecurity_To_ExSecurity_MappingTransformations.Add(domainExSecurityInput, interfacesGraphBackendExSecurityOutput);
            return interfacesGraphBackendExSecurityOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.ExSecurity, DigicircMatchmaking.BO.ExSecurity> ExSecurity_To_ExSecurityReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.ExSecurity, DigicircMatchmaking.BO.ExSecurity>();
        public DigicircMatchmaking.BO.ExSecurity ExSecurity_To_ExSecurityReversed(DigicircMatchmaking.ExternalStructs.GraphBackend.ExSecurity interfacesGraphBackendExSecurityInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesGraphBackendExSecurityInput == null) return default(DigicircMatchmaking.BO.ExSecurity);
            // If the same Transformation has already ran, get the stored Output and return
            if(ExSecurity_To_ExSecurityReversed_Transformations.ContainsKey(interfacesGraphBackendExSecurityInput))
            {
                return ExSecurity_To_ExSecurityReversed_Transformations[interfacesGraphBackendExSecurityInput];
            }
            // Instantiate target root
            var domainExSecurityOutput = new DigicircMatchmaking.BO.ExSecurity();
            // ExSecurity.ExAuthorization to ExSecurity.ExAuthorization
            domainExSecurityOutput.ExAuthorization = interfacesGraphBackendExSecurityInput?.ExAuthorization;
            // ExSecurity.UserName to ExSecurity.UserName
            domainExSecurityOutput.UserName = interfacesGraphBackendExSecurityInput?.UserName;
            // ExSecurity.Passwd to ExSecurity.Passwd
            domainExSecurityOutput.Passwd = interfacesGraphBackendExSecurityInput?.Passwd;
            ExSecurity_To_ExSecurityReversed_Transformations.Add(interfacesGraphBackendExSecurityInput, domainExSecurityOutput);
            return domainExSecurityOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.ExSecurity, DigicircMatchmaking.BO.ExSecurity> ExSecurity_To_ExSecurityReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.ExSecurity, DigicircMatchmaking.BO.ExSecurity>();
        public DigicircMatchmaking.BO.ExSecurity ExSecurity_To_ExSecurityReversed(DigicircMatchmaking.ExternalStructs.GraphBackend.ExSecurity interfacesGraphBackendExSecurityInput, DigicircMatchmaking.BO.ExSecurity domainExSecurityInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesGraphBackendExSecurityInput == null) return default(DigicircMatchmaking.BO.ExSecurity);
            if(domainExSecurityInstance == null)
                return ExSecurity_To_ExSecurityReversed (interfacesGraphBackendExSecurityInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(ExSecurity_To_ExSecurityReversed_MappingTransformations.ContainsKey(interfacesGraphBackendExSecurityInput))
            {
                return ExSecurity_To_ExSecurityReversed_MappingTransformations[interfacesGraphBackendExSecurityInput];
            }
            // Instantiate target root
            var domainExSecurityOutput = domainExSecurityInstance;
            // ExSecurity.ExAuthorization to ExSecurity.ExAuthorization
            domainExSecurityOutput.ExAuthorization = interfacesGraphBackendExSecurityInput?.ExAuthorization;
            // ExSecurity.UserName to ExSecurity.UserName
            domainExSecurityOutput.UserName = interfacesGraphBackendExSecurityInput?.UserName;
            // ExSecurity.Passwd to ExSecurity.Passwd
            domainExSecurityOutput.Passwd = interfacesGraphBackendExSecurityInput?.Passwd;
            ExSecurity_To_ExSecurityReversed_MappingTransformations.Add(interfacesGraphBackendExSecurityInput, domainExSecurityOutput);
            return domainExSecurityOutput;
        }

        #endregion

        #region Transformation 'GraphBackendResponse_To_GraphBackendResponse'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.GraphBackendResponse, DigicircMatchmaking.ExternalStructs.GraphBackend.GraphBackendResponse> GraphBackendResponse_To_GraphBackendResponse_Transformations = new Dictionary<DigicircMatchmaking.BO.GraphBackendResponse, DigicircMatchmaking.ExternalStructs.GraphBackend.GraphBackendResponse>();
        public DigicircMatchmaking.ExternalStructs.GraphBackend.GraphBackendResponse GraphBackendResponse_To_GraphBackendResponse(DigicircMatchmaking.BO.GraphBackendResponse domainGraphBackendResponseInput)
        {
            //Leave, if there is nothing to transform
            if(domainGraphBackendResponseInput == null) return default(DigicircMatchmaking.ExternalStructs.GraphBackend.GraphBackendResponse);
            // If the same Transformation has already ran, get the stored Output and return
            if(GraphBackendResponse_To_GraphBackendResponse_Transformations.ContainsKey(domainGraphBackendResponseInput))
            {
                return GraphBackendResponse_To_GraphBackendResponse_Transformations[domainGraphBackendResponseInput];
            }
            // Instantiate target root
            var interfacesGraphBackendGraphBackendResponseOutput = new DigicircMatchmaking.ExternalStructs.GraphBackend.GraphBackendResponse();
            // GraphBackendResponse.Metadata to GraphBackendResponse.Metadata
            interfacesGraphBackendGraphBackendResponseOutput.Metadata = Metadata_To_Metadata(domainGraphBackendResponseInput?.Metadata);
            // GraphBackendResponse.Nodes to GraphBackendResponse.Nodes
            interfacesGraphBackendGraphBackendResponseOutput.Nodes = domainGraphBackendResponseInput?.Nodes?.Select(Nodes_To_Nodes)?.ToArray();
            // GraphBackendResponse.Links to GraphBackendResponse.Links
            interfacesGraphBackendGraphBackendResponseOutput.Links = domainGraphBackendResponseInput?.Links?.Select(Links_To_Links)?.ToArray();
            GraphBackendResponse_To_GraphBackendResponse_Transformations.Add(domainGraphBackendResponseInput, interfacesGraphBackendGraphBackendResponseOutput);
            return interfacesGraphBackendGraphBackendResponseOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.GraphBackendResponse, DigicircMatchmaking.ExternalStructs.GraphBackend.GraphBackendResponse> GraphBackendResponse_To_GraphBackendResponse_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.GraphBackendResponse, DigicircMatchmaking.ExternalStructs.GraphBackend.GraphBackendResponse>();
        public DigicircMatchmaking.ExternalStructs.GraphBackend.GraphBackendResponse GraphBackendResponse_To_GraphBackendResponse(DigicircMatchmaking.BO.GraphBackendResponse domainGraphBackendResponseInput, DigicircMatchmaking.ExternalStructs.GraphBackend.GraphBackendResponse interfacesGraphBackendGraphBackendResponseInstance)
        {
            //Leave, if there is nothing to transform
            if(domainGraphBackendResponseInput == null) return default(DigicircMatchmaking.ExternalStructs.GraphBackend.GraphBackendResponse);
            if(interfacesGraphBackendGraphBackendResponseInstance == null)
                return GraphBackendResponse_To_GraphBackendResponse (domainGraphBackendResponseInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(GraphBackendResponse_To_GraphBackendResponse_MappingTransformations.ContainsKey(domainGraphBackendResponseInput))
            {
                return GraphBackendResponse_To_GraphBackendResponse_MappingTransformations[domainGraphBackendResponseInput];
            }
            // Instantiate target root
            var interfacesGraphBackendGraphBackendResponseOutput = interfacesGraphBackendGraphBackendResponseInstance;
            // GraphBackendResponse.Metadata to GraphBackendResponse.Metadata
            interfacesGraphBackendGraphBackendResponseOutput.Metadata = Metadata_To_Metadata(domainGraphBackendResponseInput?.Metadata);
            // GraphBackendResponse.Nodes to GraphBackendResponse.Nodes
            var Nodes_Nodes_MappedInstanceListCount = interfacesGraphBackendGraphBackendResponseOutput.Nodes == null ? 0 : interfacesGraphBackendGraphBackendResponseOutput.Nodes.Count();
            var Nodes_Nodes_InputListCount = domainGraphBackendResponseInput.Nodes == null ? 0 : domainGraphBackendResponseInput.Nodes.Count();
            var Nodes_Nodes_TemporaryOutputList = new List<DigicircMatchmaking.ExternalStructs.GraphBackend.Nodes>();
            if(Nodes_Nodes_InputListCount > 0)
            {
                int Nodes_Nodes_Index = 0;
                foreach(var initialItem in domainGraphBackendResponseInput.Nodes)
                {
                    if(Nodes_Nodes_Index <= Nodes_Nodes_MappedInstanceListCount -1 )
                    {
                        var instancedItem = interfacesGraphBackendGraphBackendResponseOutput.Nodes[Nodes_Nodes_Index];
                        var transformedItem = Nodes_To_Nodes(initialItem, instancedItem);
                        if(transformedItem != null) Nodes_Nodes_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Nodes_Nodes_Index++;
                }
                interfacesGraphBackendGraphBackendResponseOutput.Nodes = Nodes_Nodes_TemporaryOutputList.ToArray();
            }
            // GraphBackendResponse.Links to GraphBackendResponse.Links
            var Links_Links_MappedInstanceListCount = interfacesGraphBackendGraphBackendResponseOutput.Links == null ? 0 : interfacesGraphBackendGraphBackendResponseOutput.Links.Count();
            var Links_Links_InputListCount = domainGraphBackendResponseInput.Links == null ? 0 : domainGraphBackendResponseInput.Links.Count();
            var Links_Links_TemporaryOutputList = new List<DigicircMatchmaking.ExternalStructs.GraphBackend.Links>();
            if(Links_Links_InputListCount > 0)
            {
                int Links_Links_Index = 0;
                foreach(var initialItem in domainGraphBackendResponseInput.Links)
                {
                    if(Links_Links_Index <= Links_Links_MappedInstanceListCount -1 )
                    {
                        var instancedItem = interfacesGraphBackendGraphBackendResponseOutput.Links[Links_Links_Index];
                        var transformedItem = Links_To_Links(initialItem, instancedItem);
                        if(transformedItem != null) Links_Links_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Links_Links_Index++;
                }
                interfacesGraphBackendGraphBackendResponseOutput.Links = Links_Links_TemporaryOutputList.ToArray();
            }
            GraphBackendResponse_To_GraphBackendResponse_MappingTransformations.Add(domainGraphBackendResponseInput, interfacesGraphBackendGraphBackendResponseOutput);
            return interfacesGraphBackendGraphBackendResponseOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.GraphBackendResponse, DigicircMatchmaking.BO.GraphBackendResponse> GraphBackendResponse_To_GraphBackendResponseReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.GraphBackendResponse, DigicircMatchmaking.BO.GraphBackendResponse>();
        public DigicircMatchmaking.BO.GraphBackendResponse GraphBackendResponse_To_GraphBackendResponseReversed(DigicircMatchmaking.ExternalStructs.GraphBackend.GraphBackendResponse interfacesGraphBackendGraphBackendResponseInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesGraphBackendGraphBackendResponseInput == null) return default(DigicircMatchmaking.BO.GraphBackendResponse);
            // If the same Transformation has already ran, get the stored Output and return
            if(GraphBackendResponse_To_GraphBackendResponseReversed_Transformations.ContainsKey(interfacesGraphBackendGraphBackendResponseInput))
            {
                return GraphBackendResponse_To_GraphBackendResponseReversed_Transformations[interfacesGraphBackendGraphBackendResponseInput];
            }
            // Instantiate target root
            var domainGraphBackendResponseOutput = new DigicircMatchmaking.BO.GraphBackendResponse();
            // GraphBackendResponse.Metadata to GraphBackendResponse.Metadata
            domainGraphBackendResponseOutput.Metadata = Metadata_To_MetadataReversed(interfacesGraphBackendGraphBackendResponseInput?.Metadata);
            // GraphBackendResponse.Nodes to GraphBackendResponse.Nodes
            domainGraphBackendResponseOutput.Nodes = interfacesGraphBackendGraphBackendResponseInput?.Nodes?.Select(Nodes_To_NodesReversed)?.ToList();
            // GraphBackendResponse.Links to GraphBackendResponse.Links
            domainGraphBackendResponseOutput.Links = interfacesGraphBackendGraphBackendResponseInput?.Links?.Select(Links_To_LinksReversed)?.ToList();
            GraphBackendResponse_To_GraphBackendResponseReversed_Transformations.Add(interfacesGraphBackendGraphBackendResponseInput, domainGraphBackendResponseOutput);
            return domainGraphBackendResponseOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.GraphBackendResponse, DigicircMatchmaking.BO.GraphBackendResponse> GraphBackendResponse_To_GraphBackendResponseReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.GraphBackendResponse, DigicircMatchmaking.BO.GraphBackendResponse>();
        public DigicircMatchmaking.BO.GraphBackendResponse GraphBackendResponse_To_GraphBackendResponseReversed(DigicircMatchmaking.ExternalStructs.GraphBackend.GraphBackendResponse interfacesGraphBackendGraphBackendResponseInput, DigicircMatchmaking.BO.GraphBackendResponse domainGraphBackendResponseInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesGraphBackendGraphBackendResponseInput == null) return default(DigicircMatchmaking.BO.GraphBackendResponse);
            if(domainGraphBackendResponseInstance == null)
                return GraphBackendResponse_To_GraphBackendResponseReversed (interfacesGraphBackendGraphBackendResponseInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(GraphBackendResponse_To_GraphBackendResponseReversed_MappingTransformations.ContainsKey(interfacesGraphBackendGraphBackendResponseInput))
            {
                return GraphBackendResponse_To_GraphBackendResponseReversed_MappingTransformations[interfacesGraphBackendGraphBackendResponseInput];
            }
            // Instantiate target root
            var domainGraphBackendResponseOutput = domainGraphBackendResponseInstance;
            // GraphBackendResponse.Metadata to GraphBackendResponse.Metadata
            domainGraphBackendResponseOutput.Metadata = Metadata_To_MetadataReversed(interfacesGraphBackendGraphBackendResponseInput?.Metadata);
            // GraphBackendResponse.Nodes to GraphBackendResponse.Nodes
            var Nodes_Nodes_MappedInstanceListCount = domainGraphBackendResponseOutput.Nodes == null ? 0 : domainGraphBackendResponseOutput.Nodes.Count();
            var Nodes_Nodes_InputListCount = interfacesGraphBackendGraphBackendResponseInput.Nodes == null ? 0 : interfacesGraphBackendGraphBackendResponseInput.Nodes.Count();
            var Nodes_Nodes_TemporaryOutputList = new List<DigicircMatchmaking.BO.Nodes>();
            if(Nodes_Nodes_InputListCount > 0)
            {
                int Nodes_Nodes_Index = 0;
                foreach(var initialItem in interfacesGraphBackendGraphBackendResponseInput.Nodes)
                {
                    if(Nodes_Nodes_Index <= Nodes_Nodes_MappedInstanceListCount -1 )
                    {
                        var instancedItem = domainGraphBackendResponseOutput.Nodes[Nodes_Nodes_Index];
                        var transformedItem = Nodes_To_NodesReversed(initialItem, instancedItem);
                        if(transformedItem != null) Nodes_Nodes_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Nodes_Nodes_Index++;
                }
                domainGraphBackendResponseOutput.Nodes = Nodes_Nodes_TemporaryOutputList;
            }
            // GraphBackendResponse.Links to GraphBackendResponse.Links
            var Links_Links_MappedInstanceListCount = domainGraphBackendResponseOutput.Links == null ? 0 : domainGraphBackendResponseOutput.Links.Count();
            var Links_Links_InputListCount = interfacesGraphBackendGraphBackendResponseInput.Links == null ? 0 : interfacesGraphBackendGraphBackendResponseInput.Links.Count();
            var Links_Links_TemporaryOutputList = new List<DigicircMatchmaking.BO.Links>();
            if(Links_Links_InputListCount > 0)
            {
                int Links_Links_Index = 0;
                foreach(var initialItem in interfacesGraphBackendGraphBackendResponseInput.Links)
                {
                    if(Links_Links_Index <= Links_Links_MappedInstanceListCount -1 )
                    {
                        var instancedItem = domainGraphBackendResponseOutput.Links[Links_Links_Index];
                        var transformedItem = Links_To_LinksReversed(initialItem, instancedItem);
                        if(transformedItem != null) Links_Links_TemporaryOutputList.Add(transformedItem);
                    }
                    else
                    {
                        break;
                    }
                    Links_Links_Index++;
                }
                domainGraphBackendResponseOutput.Links = Links_Links_TemporaryOutputList;
            }
            GraphBackendResponse_To_GraphBackendResponseReversed_MappingTransformations.Add(interfacesGraphBackendGraphBackendResponseInput, domainGraphBackendResponseOutput);
            return domainGraphBackendResponseOutput;
        }

        #endregion

        #region Transformation 'UpdateResponse_To_UpdateResponse'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.UpdateResponse, DigicircMatchmaking.ExternalStructs.GraphBackend.UpdateResponse> UpdateResponse_To_UpdateResponse_Transformations = new Dictionary<DigicircMatchmaking.BO.UpdateResponse, DigicircMatchmaking.ExternalStructs.GraphBackend.UpdateResponse>();
        public DigicircMatchmaking.ExternalStructs.GraphBackend.UpdateResponse UpdateResponse_To_UpdateResponse(DigicircMatchmaking.BO.UpdateResponse domainUpdateResponseInput)
        {
            //Leave, if there is nothing to transform
            if(domainUpdateResponseInput == null) return default(DigicircMatchmaking.ExternalStructs.GraphBackend.UpdateResponse);
            // If the same Transformation has already ran, get the stored Output and return
            if(UpdateResponse_To_UpdateResponse_Transformations.ContainsKey(domainUpdateResponseInput))
            {
                return UpdateResponse_To_UpdateResponse_Transformations[domainUpdateResponseInput];
            }
            // Instantiate target root
            var interfacesGraphBackendUpdateResponseOutput = new DigicircMatchmaking.ExternalStructs.GraphBackend.UpdateResponse();
            // UpdateResponse.Type to UpdateResponse.Type
            interfacesGraphBackendUpdateResponseOutput.Type = domainUpdateResponseInput?.Type;
            // UpdateResponse.Desc to UpdateResponse.Desc
            interfacesGraphBackendUpdateResponseOutput.Desc = domainUpdateResponseInput?.Desc;
            UpdateResponse_To_UpdateResponse_Transformations.Add(domainUpdateResponseInput, interfacesGraphBackendUpdateResponseOutput);
            return interfacesGraphBackendUpdateResponseOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.UpdateResponse, DigicircMatchmaking.ExternalStructs.GraphBackend.UpdateResponse> UpdateResponse_To_UpdateResponse_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.UpdateResponse, DigicircMatchmaking.ExternalStructs.GraphBackend.UpdateResponse>();
        public DigicircMatchmaking.ExternalStructs.GraphBackend.UpdateResponse UpdateResponse_To_UpdateResponse(DigicircMatchmaking.BO.UpdateResponse domainUpdateResponseInput, DigicircMatchmaking.ExternalStructs.GraphBackend.UpdateResponse interfacesGraphBackendUpdateResponseInstance)
        {
            //Leave, if there is nothing to transform
            if(domainUpdateResponseInput == null) return default(DigicircMatchmaking.ExternalStructs.GraphBackend.UpdateResponse);
            if(interfacesGraphBackendUpdateResponseInstance == null)
                return UpdateResponse_To_UpdateResponse (domainUpdateResponseInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(UpdateResponse_To_UpdateResponse_MappingTransformations.ContainsKey(domainUpdateResponseInput))
            {
                return UpdateResponse_To_UpdateResponse_MappingTransformations[domainUpdateResponseInput];
            }
            // Instantiate target root
            var interfacesGraphBackendUpdateResponseOutput = interfacesGraphBackendUpdateResponseInstance;
            // UpdateResponse.Type to UpdateResponse.Type
            interfacesGraphBackendUpdateResponseOutput.Type = domainUpdateResponseInput?.Type;
            // UpdateResponse.Desc to UpdateResponse.Desc
            interfacesGraphBackendUpdateResponseOutput.Desc = domainUpdateResponseInput?.Desc;
            UpdateResponse_To_UpdateResponse_MappingTransformations.Add(domainUpdateResponseInput, interfacesGraphBackendUpdateResponseOutput);
            return interfacesGraphBackendUpdateResponseOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.UpdateResponse, DigicircMatchmaking.BO.UpdateResponse> UpdateResponse_To_UpdateResponseReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.UpdateResponse, DigicircMatchmaking.BO.UpdateResponse>();
        public DigicircMatchmaking.BO.UpdateResponse UpdateResponse_To_UpdateResponseReversed(DigicircMatchmaking.ExternalStructs.GraphBackend.UpdateResponse interfacesGraphBackendUpdateResponseInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesGraphBackendUpdateResponseInput == null) return default(DigicircMatchmaking.BO.UpdateResponse);
            // If the same Transformation has already ran, get the stored Output and return
            if(UpdateResponse_To_UpdateResponseReversed_Transformations.ContainsKey(interfacesGraphBackendUpdateResponseInput))
            {
                return UpdateResponse_To_UpdateResponseReversed_Transformations[interfacesGraphBackendUpdateResponseInput];
            }
            // Instantiate target root
            var domainUpdateResponseOutput = new DigicircMatchmaking.BO.UpdateResponse();
            // UpdateResponse.Type to UpdateResponse.Type
            domainUpdateResponseOutput.Type = interfacesGraphBackendUpdateResponseInput?.Type;
            // UpdateResponse.Desc to UpdateResponse.Desc
            domainUpdateResponseOutput.Desc = interfacesGraphBackendUpdateResponseInput?.Desc;
            UpdateResponse_To_UpdateResponseReversed_Transformations.Add(interfacesGraphBackendUpdateResponseInput, domainUpdateResponseOutput);
            return domainUpdateResponseOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.UpdateResponse, DigicircMatchmaking.BO.UpdateResponse> UpdateResponse_To_UpdateResponseReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.GraphBackend.UpdateResponse, DigicircMatchmaking.BO.UpdateResponse>();
        public DigicircMatchmaking.BO.UpdateResponse UpdateResponse_To_UpdateResponseReversed(DigicircMatchmaking.ExternalStructs.GraphBackend.UpdateResponse interfacesGraphBackendUpdateResponseInput, DigicircMatchmaking.BO.UpdateResponse domainUpdateResponseInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesGraphBackendUpdateResponseInput == null) return default(DigicircMatchmaking.BO.UpdateResponse);
            if(domainUpdateResponseInstance == null)
                return UpdateResponse_To_UpdateResponseReversed (interfacesGraphBackendUpdateResponseInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(UpdateResponse_To_UpdateResponseReversed_MappingTransformations.ContainsKey(interfacesGraphBackendUpdateResponseInput))
            {
                return UpdateResponse_To_UpdateResponseReversed_MappingTransformations[interfacesGraphBackendUpdateResponseInput];
            }
            // Instantiate target root
            var domainUpdateResponseOutput = domainUpdateResponseInstance;
            // UpdateResponse.Type to UpdateResponse.Type
            domainUpdateResponseOutput.Type = interfacesGraphBackendUpdateResponseInput?.Type;
            // UpdateResponse.Desc to UpdateResponse.Desc
            domainUpdateResponseOutput.Desc = interfacesGraphBackendUpdateResponseInput?.Desc;
            UpdateResponse_To_UpdateResponseReversed_MappingTransformations.Add(interfacesGraphBackendUpdateResponseInput, domainUpdateResponseOutput);
            return domainUpdateResponseOutput;
        }

        #endregion

    }
}