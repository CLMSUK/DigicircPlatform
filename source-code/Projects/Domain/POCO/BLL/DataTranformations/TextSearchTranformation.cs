// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using System.Linq;
using System.Collections.Generic;
using log4net;
using System.Collections.ObjectModel;
using System.Data;

namespace DigicircMatchmaking.BO.TextSearchDataTransformation
{
    public class Transformer
    {

        #region Transformation 'TextSearchRequest_To_TextSearchRequest'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.TextSearchRequest, DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchRequest> TextSearchRequest_To_TextSearchRequest_Transformations = new Dictionary<DigicircMatchmaking.BO.TextSearchRequest, DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchRequest>();
        public DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchRequest TextSearchRequest_To_TextSearchRequest(DigicircMatchmaking.BO.TextSearchRequest domainTextSearchRequestInput)
        {
            //Leave, if there is nothing to transform
            if(domainTextSearchRequestInput == null) return default(DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchRequest);
            // If the same Transformation has already ran, get the stored Output and return
            if(TextSearchRequest_To_TextSearchRequest_Transformations.ContainsKey(domainTextSearchRequestInput))
            {
                return TextSearchRequest_To_TextSearchRequest_Transformations[domainTextSearchRequestInput];
            }
            // Instantiate target root
            var interfacesTextSearchTextSearchRequestOutput = new DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchRequest();
            // TextSearchRequest.Text to TextSearchRequest.Text
            interfacesTextSearchTextSearchRequestOutput.Text = domainTextSearchRequestInput?.Text;
            TextSearchRequest_To_TextSearchRequest_Transformations.Add(domainTextSearchRequestInput, interfacesTextSearchTextSearchRequestOutput);
            return interfacesTextSearchTextSearchRequestOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.TextSearchRequest, DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchRequest> TextSearchRequest_To_TextSearchRequest_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.TextSearchRequest, DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchRequest>();
        public DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchRequest TextSearchRequest_To_TextSearchRequest(DigicircMatchmaking.BO.TextSearchRequest domainTextSearchRequestInput, DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchRequest interfacesTextSearchTextSearchRequestInstance)
        {
            //Leave, if there is nothing to transform
            if(domainTextSearchRequestInput == null) return default(DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchRequest);
            if(interfacesTextSearchTextSearchRequestInstance == null)
                return TextSearchRequest_To_TextSearchRequest (domainTextSearchRequestInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(TextSearchRequest_To_TextSearchRequest_MappingTransformations.ContainsKey(domainTextSearchRequestInput))
            {
                return TextSearchRequest_To_TextSearchRequest_MappingTransformations[domainTextSearchRequestInput];
            }
            // Instantiate target root
            var interfacesTextSearchTextSearchRequestOutput = interfacesTextSearchTextSearchRequestInstance;
            // TextSearchRequest.Text to TextSearchRequest.Text
            interfacesTextSearchTextSearchRequestOutput.Text = domainTextSearchRequestInput?.Text;
            TextSearchRequest_To_TextSearchRequest_MappingTransformations.Add(domainTextSearchRequestInput, interfacesTextSearchTextSearchRequestOutput);
            return interfacesTextSearchTextSearchRequestOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchRequest, DigicircMatchmaking.BO.TextSearchRequest> TextSearchRequest_To_TextSearchRequestReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchRequest, DigicircMatchmaking.BO.TextSearchRequest>();
        public DigicircMatchmaking.BO.TextSearchRequest TextSearchRequest_To_TextSearchRequestReversed(DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchRequest interfacesTextSearchTextSearchRequestInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesTextSearchTextSearchRequestInput == null) return default(DigicircMatchmaking.BO.TextSearchRequest);
            // If the same Transformation has already ran, get the stored Output and return
            if(TextSearchRequest_To_TextSearchRequestReversed_Transformations.ContainsKey(interfacesTextSearchTextSearchRequestInput))
            {
                return TextSearchRequest_To_TextSearchRequestReversed_Transformations[interfacesTextSearchTextSearchRequestInput];
            }
            // Instantiate target root
            var domainTextSearchRequestOutput = new DigicircMatchmaking.BO.TextSearchRequest();
            // TextSearchRequest.Text to TextSearchRequest.Text
            domainTextSearchRequestOutput.Text = interfacesTextSearchTextSearchRequestInput?.Text;
            TextSearchRequest_To_TextSearchRequestReversed_Transformations.Add(interfacesTextSearchTextSearchRequestInput, domainTextSearchRequestOutput);
            return domainTextSearchRequestOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchRequest, DigicircMatchmaking.BO.TextSearchRequest> TextSearchRequest_To_TextSearchRequestReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchRequest, DigicircMatchmaking.BO.TextSearchRequest>();
        public DigicircMatchmaking.BO.TextSearchRequest TextSearchRequest_To_TextSearchRequestReversed(DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchRequest interfacesTextSearchTextSearchRequestInput, DigicircMatchmaking.BO.TextSearchRequest domainTextSearchRequestInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesTextSearchTextSearchRequestInput == null) return default(DigicircMatchmaking.BO.TextSearchRequest);
            if(domainTextSearchRequestInstance == null)
                return TextSearchRequest_To_TextSearchRequestReversed (interfacesTextSearchTextSearchRequestInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(TextSearchRequest_To_TextSearchRequestReversed_MappingTransformations.ContainsKey(interfacesTextSearchTextSearchRequestInput))
            {
                return TextSearchRequest_To_TextSearchRequestReversed_MappingTransformations[interfacesTextSearchTextSearchRequestInput];
            }
            // Instantiate target root
            var domainTextSearchRequestOutput = domainTextSearchRequestInstance;
            // TextSearchRequest.Text to TextSearchRequest.Text
            domainTextSearchRequestOutput.Text = interfacesTextSearchTextSearchRequestInput?.Text;
            TextSearchRequest_To_TextSearchRequestReversed_MappingTransformations.Add(interfacesTextSearchTextSearchRequestInput, domainTextSearchRequestOutput);
            return domainTextSearchRequestOutput;
        }

        #endregion

        #region Transformation 'TextSearchResponse_To_TextSearchResponse'





        // Left To Right

        private readonly Dictionary<DigicircMatchmaking.BO.TextSearchResponse, DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchResponse> TextSearchResponse_To_TextSearchResponse_Transformations = new Dictionary<DigicircMatchmaking.BO.TextSearchResponse, DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchResponse>();
        public DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchResponse TextSearchResponse_To_TextSearchResponse(DigicircMatchmaking.BO.TextSearchResponse domainTextSearchResponseInput)
        {
            //Leave, if there is nothing to transform
            if(domainTextSearchResponseInput == null) return default(DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchResponse);
            // If the same Transformation has already ran, get the stored Output and return
            if(TextSearchResponse_To_TextSearchResponse_Transformations.ContainsKey(domainTextSearchResponseInput))
            {
                return TextSearchResponse_To_TextSearchResponse_Transformations[domainTextSearchResponseInput];
            }
            // Instantiate target root
            var interfacesTextSearchTextSearchResponseOutput = new DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchResponse();
            // TextSearchResponse.Tags to TextSearchResponse.Tags
            interfacesTextSearchTextSearchResponseOutput.Tags = domainTextSearchResponseInput?.Tags;
            TextSearchResponse_To_TextSearchResponse_Transformations.Add(domainTextSearchResponseInput, interfacesTextSearchTextSearchResponseOutput);
            return interfacesTextSearchTextSearchResponseOutput;
        }

        // Left To Right with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.BO.TextSearchResponse, DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchResponse> TextSearchResponse_To_TextSearchResponse_MappingTransformations = new Dictionary<DigicircMatchmaking.BO.TextSearchResponse, DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchResponse>();
        public DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchResponse TextSearchResponse_To_TextSearchResponse(DigicircMatchmaking.BO.TextSearchResponse domainTextSearchResponseInput, DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchResponse interfacesTextSearchTextSearchResponseInstance)
        {
            //Leave, if there is nothing to transform
            if(domainTextSearchResponseInput == null) return default(DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchResponse);
            if(interfacesTextSearchTextSearchResponseInstance == null)
                return TextSearchResponse_To_TextSearchResponse (domainTextSearchResponseInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(TextSearchResponse_To_TextSearchResponse_MappingTransformations.ContainsKey(domainTextSearchResponseInput))
            {
                return TextSearchResponse_To_TextSearchResponse_MappingTransformations[domainTextSearchResponseInput];
            }
            // Instantiate target root
            var interfacesTextSearchTextSearchResponseOutput = interfacesTextSearchTextSearchResponseInstance;
            // TextSearchResponse.Tags to TextSearchResponse.Tags
            interfacesTextSearchTextSearchResponseOutput.Tags = domainTextSearchResponseInput?.Tags;
            TextSearchResponse_To_TextSearchResponse_MappingTransformations.Add(domainTextSearchResponseInput, interfacesTextSearchTextSearchResponseOutput);
            return interfacesTextSearchTextSearchResponseOutput;
        }

        // Right To Left

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchResponse, DigicircMatchmaking.BO.TextSearchResponse> TextSearchResponse_To_TextSearchResponseReversed_Transformations = new Dictionary<DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchResponse, DigicircMatchmaking.BO.TextSearchResponse>();
        public DigicircMatchmaking.BO.TextSearchResponse TextSearchResponse_To_TextSearchResponseReversed(DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchResponse interfacesTextSearchTextSearchResponseInput)
        {
            //Leave, if there is nothing to transform
            if(interfacesTextSearchTextSearchResponseInput == null) return default(DigicircMatchmaking.BO.TextSearchResponse);
            // If the same Transformation has already ran, get the stored Output and return
            if(TextSearchResponse_To_TextSearchResponseReversed_Transformations.ContainsKey(interfacesTextSearchTextSearchResponseInput))
            {
                return TextSearchResponse_To_TextSearchResponseReversed_Transformations[interfacesTextSearchTextSearchResponseInput];
            }
            // Instantiate target root
            var domainTextSearchResponseOutput = new DigicircMatchmaking.BO.TextSearchResponse();
            // TextSearchResponse.Tags to TextSearchResponse.Tags
            domainTextSearchResponseOutput.Tags = interfacesTextSearchTextSearchResponseInput?.Tags;
            TextSearchResponse_To_TextSearchResponseReversed_Transformations.Add(interfacesTextSearchTextSearchResponseInput, domainTextSearchResponseOutput);
            return domainTextSearchResponseOutput;
        }

        // Right To Left with Existing Instance

        private readonly Dictionary<DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchResponse, DigicircMatchmaking.BO.TextSearchResponse> TextSearchResponse_To_TextSearchResponseReversed_MappingTransformations = new Dictionary<DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchResponse, DigicircMatchmaking.BO.TextSearchResponse>();
        public DigicircMatchmaking.BO.TextSearchResponse TextSearchResponse_To_TextSearchResponseReversed(DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchResponse interfacesTextSearchTextSearchResponseInput, DigicircMatchmaking.BO.TextSearchResponse domainTextSearchResponseInstance)
        {
            //Leave, if there is nothing to transform
            if(interfacesTextSearchTextSearchResponseInput == null) return default(DigicircMatchmaking.BO.TextSearchResponse);
            if(domainTextSearchResponseInstance == null)
                return TextSearchResponse_To_TextSearchResponseReversed (interfacesTextSearchTextSearchResponseInput);
            // If the same Transformation has already ran, get the stored Output and return
            if(TextSearchResponse_To_TextSearchResponseReversed_MappingTransformations.ContainsKey(interfacesTextSearchTextSearchResponseInput))
            {
                return TextSearchResponse_To_TextSearchResponseReversed_MappingTransformations[interfacesTextSearchTextSearchResponseInput];
            }
            // Instantiate target root
            var domainTextSearchResponseOutput = domainTextSearchResponseInstance;
            // TextSearchResponse.Tags to TextSearchResponse.Tags
            domainTextSearchResponseOutput.Tags = interfacesTextSearchTextSearchResponseInput?.Tags;
            TextSearchResponse_To_TextSearchResponseReversed_MappingTransformations.Add(interfacesTextSearchTextSearchResponseInput, domainTextSearchResponseOutput);
            return domainTextSearchResponseOutput;
        }

        #endregion

    }
}