
// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using NHibernate.Linq;

using DigicircMatchmaking.DAL;
using DigicircMatchmaking.DAL.Queries;
namespace DigicircMatchmaking.BO
{
    /// <summary>
    /// The GraphUpdate extensions
    /// </summary>
    public static class GraphUpdateExtensions
    {
        public static DigicircMatchmaking.BO.UpdateResponse AddNewRelation(DigicircMatchmaking.BO.GraphUpdateElement element)
        {
            DigicircMatchmaking.ExternalStructs.GraphBackend.QueryExtended q = DigicircMatchmaking.BO.QueryExtendedExtensions.GetDefault();
            q.MessageType = "Update";
            q.MessageSearchData = DigicircMatchmaking.BO.GraphQueriesExtensions.GetExMessageSearchData();
            q.Elements = DigicircMatchmaking.BO.ExElementsExtensions.PrepareRelationNodes(element).ToList();
            q.Relations = DigicircMatchmaking.BO.ExRelationsExtensions.GetRelationType((element?.RelationType ?? "")).ToList();
            DigicircMatchmaking.ExternalStructs.GraphBackend.UpdateResponse response = DigicircMatchmaking.BLL.ExternalRestServices.GraphBackendRestService.Update(q);
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "GraphUpdate", DigicircMatchmaking.Hubs.EventsHub.RaiseDebugMessage, response.Type);
            return (new DigicircMatchmaking.BO.GraphBackendDataTransformation.Transformer()).UpdateResponse_To_UpdateResponseReversed(response);
        }


        public static void SendActorToGraph(DigicircMatchmaking.BO.Actor actor)
        {
            if ((actor?.Address != null && actor?.Address?.Country != null))
            {
                DigicircMatchmaking.BO.GraphUpdateElement nameCountryElement = new DigicircMatchmaking.BO.GraphUpdateElement();
                nameCountryElement.RelationType = "hasCompany";
                nameCountryElement.SourceNodeName = (actor?.Address?.Country?.Name ?? "");
                nameCountryElement.SourceNodeType = "Country";
                nameCountryElement.DestinationNodeName = (actor?.Name ?? "");
                nameCountryElement.DestinationNodeType = (actor?.EntityType?.Code ?? "");
                DigicircMatchmaking.BO.UpdateResponse resultNameCountry = DigicircMatchmaking.BO.GraphUpdateExtensions.AddNewRelation(nameCountryElement);
                DigicircMatchmaking.BO.GraphUpdateElement nameCountryElementReverse = new DigicircMatchmaking.BO.GraphUpdateElement();
                nameCountryElementReverse.RelationType = "isCompanyOf";
                nameCountryElementReverse.SourceNodeName = (actor?.Name ?? "");
                nameCountryElementReverse.SourceNodeType = (actor?.EntityType?.Code ?? "");
                nameCountryElementReverse.DestinationNodeName = (actor?.Address?.Country?.Name ?? "");
                nameCountryElementReverse.DestinationNodeType = "Country";
                DigicircMatchmaking.BO.UpdateResponse resultNameCountryReverse = DigicircMatchmaking.BO.GraphUpdateExtensions.AddNewRelation(nameCountryElementReverse);
            }
            if ((actor?.Address != null && ((((actor?.Address?.Town ?? "") == null || (actor?.Address?.Town ?? "") == "")) == false)))
            {
                DigicircMatchmaking.BO.GraphUpdateElement nameTownElement = new DigicircMatchmaking.BO.GraphUpdateElement();
                nameTownElement.RelationType = "hasCompany";
                nameTownElement.SourceNodeName = (actor?.Address?.Town ?? "");
                nameTownElement.SourceNodeType = "Town";
                nameTownElement.DestinationNodeName = (actor?.Name ?? "");
                nameTownElement.DestinationNodeType = (actor?.EntityType?.Code ?? "");
                DigicircMatchmaking.BO.UpdateResponse resultNameTown = DigicircMatchmaking.BO.GraphUpdateExtensions.AddNewRelation(nameTownElement);
                DigicircMatchmaking.BO.GraphUpdateElement nameTownElementReverse = new DigicircMatchmaking.BO.GraphUpdateElement();
                nameTownElementReverse.RelationType = "isCompanyOf";
                nameTownElementReverse.SourceNodeName = (actor?.Name ?? "");
                nameTownElementReverse.SourceNodeType = (actor?.EntityType?.Code ?? "");
                nameTownElementReverse.DestinationNodeName = (actor?.Address?.Town ?? "");
                nameTownElementReverse.DestinationNodeType = "Town";
                DigicircMatchmaking.BO.UpdateResponse resultNameTownReverse = DigicircMatchmaking.BO.GraphUpdateExtensions.AddNewRelation(nameTownElementReverse);
            }
            if ((actor?.Address != null && ((((actor?.Address?.Town ?? "") == null || (actor?.Address?.Town ?? "") == "")) == false) && actor?.Address?.Country != null))
            {
                DigicircMatchmaking.BO.GraphUpdateElement nameTownElement = new DigicircMatchmaking.BO.GraphUpdateElement();
                nameTownElement.RelationType = "isLocationOf";
                nameTownElement.SourceNodeName = (actor?.Address?.Town ?? "");
                nameTownElement.SourceNodeType = "Town";
                nameTownElement.DestinationNodeName = (actor?.Address?.Country?.Name ?? "");
                nameTownElement.DestinationNodeType = "Country";
                DigicircMatchmaking.BO.UpdateResponse resultNameTown = DigicircMatchmaking.BO.GraphUpdateExtensions.AddNewRelation(nameTownElement);
                DigicircMatchmaking.BO.GraphUpdateElement nameTownElementReverse = new DigicircMatchmaking.BO.GraphUpdateElement();
                nameTownElementReverse.RelationType = "hasLocation";
                nameTownElementReverse.SourceNodeName = (actor?.Address?.Country?.Name ?? "");
                nameTownElementReverse.SourceNodeType = "Country";
                nameTownElementReverse.DestinationNodeName = (actor?.Address?.Town ?? "");
                nameTownElementReverse.DestinationNodeType = "Town";
                DigicircMatchmaking.BO.UpdateResponse resultNameTownReverse = DigicircMatchmaking.BO.GraphUpdateExtensions.AddNewRelation(nameTownElementReverse);
            }
            if ((((((actor?.Description ?? "") == null || (actor?.Description ?? "") == "")) == false)))
            {
                DigicircMatchmaking.BO.GraphUpdateElement nameDescriptionElement = new DigicircMatchmaking.BO.GraphUpdateElement();
                nameDescriptionElement.RelationType = "isDescriptionOf";
                nameDescriptionElement.SourceNodeName = (actor?.Description ?? "");
                nameDescriptionElement.SourceNodeType = "Description";
                nameDescriptionElement.DestinationNodeName = (actor?.Name ?? "");
                nameDescriptionElement.DestinationNodeType = (actor?.EntityType?.Value ?? "");
                DigicircMatchmaking.BO.UpdateResponse resultNameDesc = DigicircMatchmaking.BO.GraphUpdateExtensions.AddNewRelationTypeText(nameDescriptionElement, true);
                DigicircMatchmaking.BO.GraphUpdateElement nameDescriptionElementReverse = new DigicircMatchmaking.BO.GraphUpdateElement();
                nameDescriptionElementReverse.RelationType = "hasDescription";
                nameDescriptionElementReverse.SourceNodeName = (actor?.Name ?? "");
                nameDescriptionElementReverse.SourceNodeType = (actor?.EntityType?.Value ?? "");
                nameDescriptionElementReverse.DestinationNodeName = (actor?.Description ?? "");
                nameDescriptionElementReverse.DestinationNodeType = "Description";
                DigicircMatchmaking.BO.UpdateResponse resultNameDescReverse = DigicircMatchmaking.BO.GraphUpdateExtensions.AddNewRelationTypeText(nameDescriptionElementReverse, false);
            }
            if (((actor?.SectorTypes?.Count() ?? 0) > 0))
            {
                foreach (var sector in actor?.SectorTypes ?? Enumerable.Empty<DigicircMatchmaking.BO.SectorType>())
                {
                    DigicircMatchmaking.BO.GraphUpdateElement sectorElement = new DigicircMatchmaking.BO.GraphUpdateElement();
                    sectorElement.RelationType = "hasSectorType";
                    sectorElement.SourceNodeName = (actor?.Name ?? "");
                    sectorElement.SourceNodeType = (actor?.EntityType?.Code ?? "");
                    sectorElement.DestinationNodeName = (sector?.Value ?? "");
                    sectorElement.DestinationNodeType = "SectorType";
                    DigicircMatchmaking.BO.UpdateResponse resultSector = DigicircMatchmaking.BO.GraphUpdateExtensions.AddNewRelation(sectorElement);
                    DigicircMatchmaking.BO.GraphUpdateElement sectorElementReverse = new DigicircMatchmaking.BO.GraphUpdateElement();
                    sectorElementReverse.RelationType = "isSectorTypeOf";
                    sectorElementReverse.SourceNodeName = (sector?.Value ?? "");
                    sectorElementReverse.SourceNodeType = "SectorType";
                    sectorElementReverse.DestinationNodeName = (actor?.Name ?? "");
                    sectorElementReverse.DestinationNodeType = (actor?.EntityType?.Code ?? "");
                    DigicircMatchmaking.BO.UpdateResponse resultSectorReverse = DigicircMatchmaking.BO.GraphUpdateExtensions.AddNewRelation(sectorElementReverse);
                }
            }
        }


        public static void InitGraphFromDB()
        {
            foreach (var actor in new DigicircMatchmaking.DAL.Repository().GetAll<DigicircMatchmaking.BO.Actor>() ?? Enumerable.Empty<DigicircMatchmaking.BO.Actor>())
            {
                DigicircMatchmaking.BO.GraphUpdateExtensions.SendActorToGraph(actor);
            }
        }


        public static DigicircMatchmaking.BO.UpdateResponse DeleteRelation(DigicircMatchmaking.BO.GraphUpdateElement element)
        {
            DigicircMatchmaking.ExternalStructs.GraphBackend.QueryExtended q = DigicircMatchmaking.BO.QueryExtendedExtensions.GetDeleteDefault();
            q.MessageSearchData = DigicircMatchmaking.BO.GraphQueriesExtensions.GetExMessageSearchData();
            q.Elements = DigicircMatchmaking.BO.ExElementsExtensions.PrepareRelationNodes(element).ToList();
            q.Relations = DigicircMatchmaking.BO.ExRelationsExtensions.GetRelationType((element?.RelationType ?? "")).ToList();
            DigicircMatchmaking.ExternalStructs.GraphBackend.UpdateResponse response = DigicircMatchmaking.BLL.ExternalRestServices.GraphBackendRestService.Update(q);
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "GraphUpdate", DigicircMatchmaking.Hubs.EventsHub.RaiseDebugMessage, response.Type);
            return (new DigicircMatchmaking.BO.GraphBackendDataTransformation.Transformer()).UpdateResponse_To_UpdateResponseReversed(response);
        }


        public static void DeleteOldRelations(DigicircMatchmaking.BO.Actor oldInstance, DigicircMatchmaking.BO.Actor newInstance)
        {
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "GraphUpdate", DigicircMatchmaking.Hubs.EventsHub.RaiseDebugMessage, "Insinde delete");
            if ((oldInstance?.Address?.Country != newInstance?.Address?.Country))
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "GraphUpdate", DigicircMatchmaking.Hubs.EventsHub.RaiseDebugMessage, "Delete country");
                DigicircMatchmaking.BO.GraphUpdateElement nameCountryElement = new DigicircMatchmaking.BO.GraphUpdateElement();
                nameCountryElement.RelationType = "hasCompany";
                nameCountryElement.SourceNodeName = (oldInstance?.Address?.Country?.Name ?? "");
                nameCountryElement.SourceNodeType = "Country";
                nameCountryElement.DestinationNodeName = (oldInstance?.Name ?? "");
                nameCountryElement.DestinationNodeType = (oldInstance?.EntityType?.Code ?? "");
                DigicircMatchmaking.BO.UpdateResponse resultNameCountry = DigicircMatchmaking.BO.GraphUpdateExtensions.DeleteRelation(nameCountryElement);
                DigicircMatchmaking.BO.GraphUpdateElement nameCountryElementReversed = new DigicircMatchmaking.BO.GraphUpdateElement();
                nameCountryElementReversed.RelationType = "isCompanyOf";
                nameCountryElementReversed.SourceNodeName = (oldInstance?.Name ?? "");
                nameCountryElementReversed.SourceNodeType = (oldInstance?.EntityType?.Code ?? "");
                nameCountryElementReversed.DestinationNodeName = (oldInstance?.Address?.Country?.Name ?? "");
                nameCountryElementReversed.DestinationNodeType = "Country";
                DigicircMatchmaking.BO.UpdateResponse resultNameCountryReversed = DigicircMatchmaking.BO.GraphUpdateExtensions.DeleteRelation(nameCountryElementReversed);
            }
            if ((oldInstance?.Description != newInstance?.Description))
            {
                DigicircMatchmaking.BO.GraphUpdateElement nameDescriptionElement = new DigicircMatchmaking.BO.GraphUpdateElement();
                nameDescriptionElement.RelationType = "isDescriptionOf";
                nameDescriptionElement.SourceNodeName = (oldInstance?.Description ?? "");
                nameDescriptionElement.SourceNodeType = "Description";
                nameDescriptionElement.DestinationNodeName = (oldInstance?.Name ?? "");
                nameDescriptionElement.DestinationNodeType = (oldInstance?.EntityType?.Value ?? "");
                DigicircMatchmaking.BO.UpdateResponse resultNameDesc = DigicircMatchmaking.BO.GraphUpdateExtensions.DeleteRelation(nameDescriptionElement);
                DigicircMatchmaking.BO.GraphUpdateElement nameDescriptionElementReverse = new DigicircMatchmaking.BO.GraphUpdateElement();
                nameDescriptionElementReverse.RelationType = "hasDescription";
                nameDescriptionElementReverse.SourceNodeName = (oldInstance?.Name ?? "");
                nameDescriptionElementReverse.SourceNodeType = (oldInstance?.EntityType?.Value ?? "");
                nameDescriptionElementReverse.DestinationNodeName = (oldInstance?.Description ?? "");
                nameDescriptionElementReverse.DestinationNodeType = "Description";
                DigicircMatchmaking.BO.UpdateResponse resultNameDescReverse = DigicircMatchmaking.BO.GraphUpdateExtensions.DeleteRelation(nameDescriptionElementReverse);
            }
            if (((oldInstance?.SectorTypes?.Count() ?? 0) > 0))
            {
                foreach (var sector in oldInstance?.SectorTypes ?? Enumerable.Empty<DigicircMatchmaking.BO.SectorType>())
                {
                    var _var0 = sector?.Code;
                    if (((newInstance?.SectorTypes?.Any((a) => a.Code == _var0) ?? false)))
                    {
                        DigicircMatchmaking.BO.GraphUpdateElement sectorElement = new DigicircMatchmaking.BO.GraphUpdateElement();
                        sectorElement.RelationType = "hasSectorType";
                        sectorElement.SourceNodeName = (oldInstance?.Name ?? "");
                        sectorElement.SourceNodeType = (oldInstance?.EntityType?.Code ?? "");
                        sectorElement.DestinationNodeName = (sector?.Value ?? "");
                        sectorElement.DestinationNodeType = "SectorType";
                        DigicircMatchmaking.BO.UpdateResponse resultSector = DigicircMatchmaking.BO.GraphUpdateExtensions.DeleteRelation(sectorElement);
                        DigicircMatchmaking.BO.GraphUpdateElement sectorElementReverse = new DigicircMatchmaking.BO.GraphUpdateElement();
                        sectorElementReverse.RelationType = "isSectorTypeOf";
                        sectorElementReverse.SourceNodeName = (sector?.Value ?? "");
                        sectorElementReverse.SourceNodeType = "SectorType";
                        sectorElementReverse.DestinationNodeName = (oldInstance?.Name ?? "");
                        sectorElementReverse.DestinationNodeType = (oldInstance?.EntityType?.Code ?? "");
                        DigicircMatchmaking.BO.UpdateResponse resultSectorReverse = DigicircMatchmaking.BO.GraphUpdateExtensions.DeleteRelation(sectorElementReverse);
                    }
                }
            }
        }


        public static DigicircMatchmaking.BO.UpdateResponse AddNewRelationTypeText(DigicircMatchmaking.BO.GraphUpdateElement element, bool isTextInSource)
        {
            DigicircMatchmaking.ExternalStructs.GraphBackend.QueryExtended q = DigicircMatchmaking.BO.QueryExtendedExtensions.GetDefault();
            q.MessageType = "Update";
            q.MessageSearchData = DigicircMatchmaking.BO.GraphQueriesExtensions.GetExMessageSearchData();
            q.Elements = DigicircMatchmaking.BO.ExElementsExtensions.PrepareRalationNodesTypeText(element, isTextInSource).ToList();
            q.Relations = DigicircMatchmaking.BO.ExRelationsExtensions.GetRelationType((element?.RelationType ?? "")).ToList();
            DigicircMatchmaking.ExternalStructs.GraphBackend.UpdateResponse response = DigicircMatchmaking.BLL.ExternalRestServices.GraphBackendRestService.Update(q);
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "GraphUpdate", DigicircMatchmaking.Hubs.EventsHub.RaiseDebugMessage, response.Type);
            return (new DigicircMatchmaking.BO.GraphBackendDataTransformation.Transformer()).UpdateResponse_To_UpdateResponseReversed(response);
        }




    }
}
