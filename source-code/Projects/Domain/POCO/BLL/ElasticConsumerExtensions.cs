
// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using NHibernate.Linq;

using DigicircMatchmaking.DAL;
using DigicircMatchmaking.DAL.Queries;
namespace DigicircMatchmaking.BO
{
    /// <summary>
    /// The ElasticConsumer extensions
    /// </summary>
    public static class ElasticConsumerExtensions
    {
        public static void InitElasticFromDb()
        {
            foreach (var actor in new DigicircMatchmaking.DAL.Repository().GetAll<DigicircMatchmaking.BO.Actor>() ?? Enumerable.Empty<DigicircMatchmaking.BO.Actor>())
            {
                DigicircMatchmaking.BO.ElasticDocExtensions.SendActorDoc(actor);
            }
        }


        public static DigicircMatchmaking.ExternalStructs.ElasticSearch.SearchResponse Search(DigicircMatchmaking.BO.SearchQuery modelQuery)
        {
            DigicircMatchmaking.ExternalStructs.ElasticSearch.SearchRequest request = new DigicircMatchmaking.ExternalStructs.ElasticSearch.SearchRequest();
            DigicircMatchmaking.ExternalStructs.ElasticSearch.Query query = new DigicircMatchmaking.ExternalStructs.ElasticSearch.Query();
            if (((((modelQuery?.AdvanceSearch ?? false)) == false)))
            {
                System.Collections.Generic.List<DigicircMatchmaking.ExternalStructs.ElasticSearch.Must> mustCollection = DigicircMatchmaking.BO.ElasticConsumerExtensions.Filters(modelQuery, true);
                DigicircMatchmaking.ExternalStructs.ElasticSearch.BoolStatement boolElastic = new DigicircMatchmaking.ExternalStructs.ElasticSearch.BoolStatement();
                query.Bool = boolElastic;
                query.Bool.Must = mustCollection.ToArray();
            }
            else
            {
                System.Collections.Generic.List<DigicircMatchmaking.ExternalStructs.ElasticSearch.Must> mustCollection = DigicircMatchmaking.BO.ElasticConsumerExtensions.Filters(modelQuery, false);
                if ((((((modelQuery?.SearchTerm ?? "") == null || (modelQuery?.SearchTerm ?? "") == "")) == false)))
                {
                    DigicircMatchmaking.ExternalStructs.ElasticSearch.Must mustSearchTerm = new DigicircMatchmaking.ExternalStructs.ElasticSearch.Must();
                    DigicircMatchmaking.ExternalStructs.ElasticSearch.MultiMatch matchSearchTerm = new DigicircMatchmaking.ExternalStructs.ElasticSearch.MultiMatch();
                    matchSearchTerm.Query = (modelQuery?.SearchTerm ?? "");
                    string materialSearchMode = "";
                    switch((modelQuery?.MaterialSearchMode ?? ""))
                    {
                    case "offers":
                    {
                        materialSearchMode = "Resources";
                        break;
                    }
                    case "requests":
                    {
                        materialSearchMode = "RequestedResources";
                        break;
                    }
                    }
                    matchSearchTerm.Fields = new string[] { "Name", "Description", materialSearchMode };
                    mustSearchTerm.MultiMatch = matchSearchTerm;
                    mustCollection.Add(mustSearchTerm);
                }
                DigicircMatchmaking.ExternalStructs.ElasticSearch.BoolStatement boolElastic = new DigicircMatchmaking.ExternalStructs.ElasticSearch.BoolStatement();
                query.Bool = boolElastic;
                query.Bool.Must = mustCollection.ToArray();
            }
            request.Query = query;
            zAppDev.DotNet.Framework.Utilities.Serializer<DigicircMatchmaking.ExternalStructs.ElasticSearch.SearchRequest> serQ = new zAppDev.DotNet.Framework.Utilities.Serializer<DigicircMatchmaking.ExternalStructs.ElasticSearch.SearchRequest>();
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "ElasticConsumer", DigicircMatchmaking.Hubs.EventsHub.RaiseDebugMessage, "search query " + serQ.ToJson(request));
            DigicircMatchmaking.ExternalStructs.ElasticSearch.SearchResponse response = DigicircMatchmaking.BLL.ExternalRestServices.ElasticSearchRestService.Search(request);
            zAppDev.DotNet.Framework.Utilities.Serializer<DigicircMatchmaking.ExternalStructs.ElasticSearch.SearchResponse> serR = new zAppDev.DotNet.Framework.Utilities.Serializer<DigicircMatchmaking.ExternalStructs.ElasticSearch.SearchResponse>();
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "ElasticConsumer", DigicircMatchmaking.Hubs.EventsHub.RaiseDebugMessage, "response elastic " + serR.ToJson(response));
            return response;
        }


        public static System.Collections.Generic.List<DigicircMatchmaking.ExternalStructs.ElasticSearch.Must> Filters(DigicircMatchmaking.BO.SearchQuery modelQuery, bool filterResource)
        {
            System.Collections.Generic.List<DigicircMatchmaking.ExternalStructs.ElasticSearch.Must> mustCollection = new System.Collections.Generic.List<DigicircMatchmaking.ExternalStructs.ElasticSearch.Must>();
            if ((modelQuery?.SelectedCountry?.Name != null))
            {
                DigicircMatchmaking.ExternalStructs.ElasticSearch.Must must = new DigicircMatchmaking.ExternalStructs.ElasticSearch.Must();
                DigicircMatchmaking.ExternalStructs.ElasticSearch.MultiMatch match = new DigicircMatchmaking.ExternalStructs.ElasticSearch.MultiMatch();
                match.Query = (modelQuery?.SelectedCountry?.Name ?? "");
                match.Fields = new string[] { "Country" };
                must.MultiMatch = match;
                mustCollection.Add(must);
            }
            if ((modelQuery?.SelectedSector?.Value != null))
            {
                DigicircMatchmaking.ExternalStructs.ElasticSearch.Must must = new DigicircMatchmaking.ExternalStructs.ElasticSearch.Must();
                DigicircMatchmaking.ExternalStructs.ElasticSearch.MultiMatch match = new DigicircMatchmaking.ExternalStructs.ElasticSearch.MultiMatch();
                match.Query = (modelQuery?.SelectedSector?.Value ?? "");
                match.Fields = new string[] { "Sector" };
                must.MultiMatch = match;
                mustCollection.Add(must);
            }
            if ((filterResource && modelQuery?.SelectedMaterial?.Name != null))
            {
                DigicircMatchmaking.ExternalStructs.ElasticSearch.Must mustSearchTerm = new DigicircMatchmaking.ExternalStructs.ElasticSearch.Must();
                DigicircMatchmaking.ExternalStructs.ElasticSearch.MultiMatch matchSearchTerm = new DigicircMatchmaking.ExternalStructs.ElasticSearch.MultiMatch();
                matchSearchTerm.Query = (modelQuery?.SelectedMaterial?.Name ?? "");
                string materialSearchMode = "";
                switch((modelQuery?.MaterialSearchMode ?? ""))
                {
                case "offers":
                {
                    materialSearchMode = "Resources";
                    break;
                }
                case "requests":
                {
                    materialSearchMode = "RequestedResources";
                    break;
                }
                }
                matchSearchTerm.Fields = new string[] { materialSearchMode };
                mustSearchTerm.MultiMatch = matchSearchTerm;
                mustCollection.Add(mustSearchTerm);
            }
            return mustCollection;
        }




    }
}
