
// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using NHibernate.Linq;

using DigicircMatchmaking.DAL;
using DigicircMatchmaking.DAL.Queries;
namespace DigicircMatchmaking.BO
{
    /// <summary>
    /// The DataHelper extensions
    /// </summary>
    public static class DataHelperExtensions
    {
        public static void CleanDuplcateSectors(DigicircMatchmaking.BO.SectorType sector)
        {
            foreach (var actor in new DigicircMatchmaking.DAL.Repository().GetAll<DigicircMatchmaking.BO.Actor>() ?? Enumerable.Empty<DigicircMatchmaking.BO.Actor>())
            {
                var _var0 = sector?.Value;
                if (((actor?.SectorTypes?.Any((a) => a.Value == _var0) ?? false)))
                {
                    zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "DataHelper", DigicircMatchmaking.Hubs.EventsHub.RaiseDebugMessage, "Found same sector value in actor");
                    var _var1 = sector?.Value;
                    DigicircMatchmaking.BO.SectorType sectorToRemove = actor?.SectorTypes?.Where((a) => a.Value == _var1).FirstOrDefault();
                    if ((sectorToRemove?.Id == sector?.Id))
                    {
                        continue;
                    }
                    actor?.RemoveSectorTypes(sectorToRemove);
                    sectorToRemove.Actor = null;
                    new DigicircMatchmaking.DAL.Repository().DeleteSectorType(sectorToRemove);
                    actor?.AddSectorTypes(sector);
                    new DigicircMatchmaking.DAL.Repository().Save<DigicircMatchmaking.BO.Actor>(actor);
                }
            }
        }




    }
}
