
// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using NHibernate.Linq;

using DigicircMatchmaking.DAL;
using DigicircMatchmaking.DAL.Queries;
namespace DigicircMatchmaking.BO
{
    /// <summary>
    /// The ProcessBackend extensions
    /// </summary>
    public static class ProcessBackendExtensions
    {
        public static void CreateKnowledgeProcess(DigicircMatchmaking.BO.Process process)
        {
            if (zAppDev.DotNet.Framework.Utilities.Common.GetConfigurationKey("DontCallKnowledgeGraph") == "true")
            {
                return;
            }
            DigicircMatchmaking.BO.ProcessCreateRequest req = new DigicircMatchmaking.BO.ProcessCreateRequest();
            req?.AddStatements(DigicircMatchmaking.BO.ProcessBackendExtensions.CreateProcessStatement(process));
            DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateRequest reqParsed = (new DigicircMatchmaking.BO.KnowledgeBaseDataTransformation.Transformer()).ProcessCreateRequest_To_ProcessCreateRequest(req);
            DigicircMatchmaking.BLL.ExternalRestServices.KnowledgeBaseRestService.CreateProcess(reqParsed);
        }


        public static void CreateKnowledgeProcessPlus(DigicircMatchmaking.BO.Process process, bool edit)
        {
            if (zAppDev.DotNet.Framework.Utilities.Common.GetConfigurationKey("DontCallKnowledgeGraph") == "true")
            {
                return;
            }
            DigicircMatchmaking.BO.ProcessCreateRequest req = new DigicircMatchmaking.BO.ProcessCreateRequest();
            req?.AddStatements(DigicircMatchmaking.BO.ProcessBackendExtensions.CreateProcessStatement(process));
            DigicircMatchmaking.BO.Material source = process?.Source?.FirstOrDefault();
            req?.AddStatements(DigicircMatchmaking.BO.ProcessBackendExtensions.CreateConvertByStatement(process, source));
            DigicircMatchmaking.BO.Material product = process?.Product?.FirstOrDefault();
            req?.AddStatements(DigicircMatchmaking.BO.ProcessBackendExtensions.CreateConvertedByStatement(process, product));
            DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateRequest reqParsed = (new DigicircMatchmaking.BO.KnowledgeBaseDataTransformation.Transformer()).ProcessCreateRequest_To_ProcessCreateRequest(req);
            DigicircMatchmaking.BLL.ExternalRestServices.KnowledgeBaseRestService.CreateProcess(reqParsed);
        }


        public static DigicircMatchmaking.BO.ProcessCreateStatements CreateProcessStatement(DigicircMatchmaking.BO.Process process)
        {
            DigicircMatchmaking.BO.ProcessCreateStatements stat = new DigicircMatchmaking.BO.ProcessCreateStatements();
            stat.Statement = "CREATE (n:Process $props) RETURN n";
            stat.Parameters = new DigicircMatchmaking.BO.ProcessCreateParameters();
            stat.Parameters.Props = new DigicircMatchmaking.BO.ProcessCreateProps();
            stat.Parameters.Props.Id = (process?.Id ?? 0);
            stat.Parameters.Props.Name = (process?.Name ?? "");
            stat.Parameters.Props.Notes = (process?.Notes ?? "");
            stat.Parameters.Props.Ref = (process?.Ref ?? "");
            return stat;
        }


        public static DigicircMatchmaking.BO.ProcessCreateStatements CreateConvertedByStatement(DigicircMatchmaking.BO.Process process, DigicircMatchmaking.BO.Material product)
        {
            DigicircMatchmaking.BO.ProcessCreateStatements stat = new DigicircMatchmaking.BO.ProcessCreateStatements();
            stat.Statement = "MATCH (m:Material {Id: $props.ProductId}) MATCH (p:Process {Id: $props.Id}) MERGE (p)-[rel:CONVERTED_BY]->(m) RETURN m";
            stat.Parameters = new DigicircMatchmaking.BO.ProcessCreateParameters();
            stat.Parameters.Props = new DigicircMatchmaking.BO.ProcessCreateProps();
            stat.Parameters.Props.Id = (process?.Id ?? 0);
            stat.Parameters.Props.ProductId = (product?.Id ?? 0);
            return stat;
        }


        public static DigicircMatchmaking.BO.ProcessCreateStatements CreateConvertByStatement(DigicircMatchmaking.BO.Process process, DigicircMatchmaking.BO.Material product)
        {
            DigicircMatchmaking.BO.ProcessCreateStatements stat = new DigicircMatchmaking.BO.ProcessCreateStatements();
            stat.Statement = "MATCH (m:Material {Id: $props.SourceId}) MATCH (p:Process {Id: $props.Id}) MERGE (m)-[rel:CONVERT_BY]->(p) RETURN m";
            stat.Parameters = new DigicircMatchmaking.BO.ProcessCreateParameters();
            stat.Parameters.Props = new DigicircMatchmaking.BO.ProcessCreateProps();
            stat.Parameters.Props.Id = (process?.Id ?? 0);
            stat.Parameters.Props.SourceId = (product?.Id ?? 0);
            return stat;
        }


        public static void DeleteKnowledgeProcess(DigicircMatchmaking.BO.Process process)
        {
            if (zAppDev.DotNet.Framework.Utilities.Common.GetConfigurationKey("DontCallKnowledgeGraph") == "true")
            {
                return;
            }
            DigicircMatchmaking.BO.ProcessCreateRequest req = new DigicircMatchmaking.BO.ProcessCreateRequest();
            req?.AddStatements(DigicircMatchmaking.BO.ProcessBackendExtensions.DeleteProcessStatement(process));
            DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateRequest reqParsed = (new DigicircMatchmaking.BO.KnowledgeBaseDataTransformation.Transformer()).ProcessCreateRequest_To_ProcessCreateRequest(req);
            DigicircMatchmaking.BLL.ExternalRestServices.KnowledgeBaseRestService.CreateProcess(reqParsed);
        }


        public static DigicircMatchmaking.BO.ProcessCreateStatements DeleteProcessStatement(DigicircMatchmaking.BO.Process process)
        {
            DigicircMatchmaking.BO.ProcessCreateStatements stat = new DigicircMatchmaking.BO.ProcessCreateStatements();
            stat.Statement = "MATCH (n:Process {Id: $props.Id}) DETACH DELETE n";
            stat.Parameters = new DigicircMatchmaking.BO.ProcessCreateParameters();
            stat.Parameters.Props = new DigicircMatchmaking.BO.ProcessCreateProps();
            stat.Parameters.Props.Id = (process?.Id ?? 0);
            return stat;
        }


        public static void UpdateKnowledgeProcess(DigicircMatchmaking.BO.Process process)
        {
            if (zAppDev.DotNet.Framework.Utilities.Common.GetConfigurationKey("DontCallKnowledgeGraph") == "true")
            {
                return;
            }
            DigicircMatchmaking.BO.ProcessCreateRequest req = new DigicircMatchmaking.BO.ProcessCreateRequest();
            req?.AddStatements(DigicircMatchmaking.BO.ProcessBackendExtensions.UpdateProcessStatement(process));
            DigicircMatchmaking.ExternalStructs.KnowledgeBase.ProcessCreateRequest reqParsed = (new DigicircMatchmaking.BO.KnowledgeBaseDataTransformation.Transformer()).ProcessCreateRequest_To_ProcessCreateRequest(req);
            DigicircMatchmaking.BLL.ExternalRestServices.KnowledgeBaseRestService.CreateProcess(reqParsed);
        }


        public static DigicircMatchmaking.BO.ProcessCreateStatements UpdateProcessStatement(DigicircMatchmaking.BO.Process process)
        {
            DigicircMatchmaking.BO.ProcessCreateStatements stat = new DigicircMatchmaking.BO.ProcessCreateStatements();
            stat.Statement = "MATCH (m:Process {Id: $props.Id}) SET m = $props RETURN m";
            stat.Parameters = new DigicircMatchmaking.BO.ProcessCreateParameters();
            stat.Parameters.Props = new DigicircMatchmaking.BO.ProcessCreateProps();
            stat.Parameters.Props.Id = (process?.Id ?? 0);
            stat.Parameters.Props.Name = (process?.Name ?? "");
            stat.Parameters.Props.Notes = (process?.Notes ?? "");
            stat.Parameters.Props.Ref = (process?.Ref ?? "");
            return stat;
        }




    }
}
