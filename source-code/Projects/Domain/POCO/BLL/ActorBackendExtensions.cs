
// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using NHibernate.Linq;

using DigicircMatchmaking.DAL;
using DigicircMatchmaking.DAL.Queries;
namespace DigicircMatchmaking.BO
{
    /// <summary>
    /// The ActorBackend extensions
    /// </summary>
    public static class ActorBackendExtensions
    {
        public static void CreateKnowledgeActor(DigicircMatchmaking.BO.Actor actor)
        {
            if (zAppDev.DotNet.Framework.Utilities.Common.GetConfigurationKey("DontCallKnowledgeGraph") == "true")
            {
                return;
            }
            DigicircMatchmaking.BO.ActorCreateRequest req = new DigicircMatchmaking.BO.ActorCreateRequest();
            DigicircMatchmaking.BO.ActorCreateStatements stat = new DigicircMatchmaking.BO.ActorCreateStatements();
            stat.Statement = "MERGE (n:Actor {Id: $props.Id}) SET n = $props RETURN n";
            stat.Parameters = new DigicircMatchmaking.BO.ActorCreateParameters();
            stat.Parameters.Props = new DigicircMatchmaking.BO.ActorCreateProps();
            stat.Parameters.Props.Id = (actor?.Id ?? 0);
            stat.Parameters.Props.Name = (actor?.Name ?? "");
            req?.AddStatements(stat);
            DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateRequest reqParsed = (new DigicircMatchmaking.BO.KnowledgeBaseDataTransformation.Transformer()).ActorCreateRequest_To_ActorCreateRequest(req);
            DigicircMatchmaking.BLL.ExternalRestServices.KnowledgeBaseRestService.CreateActor(reqParsed);
        }


        public static void ConnectActorOfferedBy(int? actorId, DigicircMatchmaking.BO.Product product)
        {
            if (zAppDev.DotNet.Framework.Utilities.Common.GetConfigurationKey("DontCallKnowledgeGraph") == "true")
            {
                return;
            }
            DigicircMatchmaking.BO.ConnectActorMaterialRequest req = new DigicircMatchmaking.BO.ConnectActorMaterialRequest();
            DigicircMatchmaking.BO.ConnectActorMaterialStatements stat = new DigicircMatchmaking.BO.ConnectActorMaterialStatements();
            stat.Statement = "MATCH (a:Actor {Id: $props.ActorId}) MATCH (m:Material {Id: $props.MaterialId}) MERGE (a)-[rel:OFFERED_BY]->(m)";
            stat.Parameters = new DigicircMatchmaking.BO.ConnectActorMaterialParameters();
            stat.Parameters.Props = new DigicircMatchmaking.BO.ConnectActorMaterialProps();
            stat.Parameters.Props.ActorId = actorId;
            stat.Parameters.Props.MaterialId = (product?.Resource?.Id ?? 0);
            req?.AddStatements(stat);
            DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest reqParsed = (new DigicircMatchmaking.BO.KnowledgeBaseDataTransformation.Transformer()).ConnectActorMaterialRequest_To_ConnectActorMaterialRequest(req);
            zAppDev.DotNet.Framework.Utilities.Serializer<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest> ser = new zAppDev.DotNet.Framework.Utilities.Serializer<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest>();
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "ActorBackend", DigicircMatchmaking.Hubs.EventsHub.RaiseDebugMessage, "request " + ser.ToJson(reqParsed));
            DigicircMatchmaking.BLL.ExternalRestServices.KnowledgeBaseRestService.ConnectActorOfferedBy(reqParsed);
        }


        public static void ConnectActorRequests(int? actorId, DigicircMatchmaking.BO.Product product)
        {
            if (zAppDev.DotNet.Framework.Utilities.Common.GetConfigurationKey("DontCallKnowledgeGraph") == "true")
            {
                return;
            }
            DigicircMatchmaking.BO.ConnectActorMaterialRequest req = new DigicircMatchmaking.BO.ConnectActorMaterialRequest();
            DigicircMatchmaking.BO.ConnectActorMaterialStatements stat = new DigicircMatchmaking.BO.ConnectActorMaterialStatements();
            stat.Statement = "MATCH (a:Actor {Id: $props.ActorId}) MATCH (m:Material {Id: $props.MaterialId}) MERGE (m)-[rel:REQUESTED_BY]->(a)";
            stat.Parameters = new DigicircMatchmaking.BO.ConnectActorMaterialParameters();
            stat.Parameters.Props = new DigicircMatchmaking.BO.ConnectActorMaterialProps();
            stat.Parameters.Props.ActorId = actorId;
            stat.Parameters.Props.MaterialId = (product?.Resource?.Id ?? 0);
            req?.AddStatements(stat);
            DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest reqParsed = (new DigicircMatchmaking.BO.KnowledgeBaseDataTransformation.Transformer()).ConnectActorMaterialRequest_To_ConnectActorMaterialRequest(req);
            DigicircMatchmaking.BLL.ExternalRestServices.KnowledgeBaseRestService.ConnectActorRequests(reqParsed);
        }


        public static void DeleteKnowledgeActor(DigicircMatchmaking.BO.Actor actor)
        {
            if (zAppDev.DotNet.Framework.Utilities.Common.GetConfigurationKey("DontCallKnowledgeGraph") == "true")
            {
                return;
            }
            DigicircMatchmaking.BO.ActorCreateRequest req = new DigicircMatchmaking.BO.ActorCreateRequest();
            req?.AddStatements(DigicircMatchmaking.BO.ActorBackendExtensions.PrepareDeleteKnowledgeActor(actor));
            DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateRequest reqParsed = (new DigicircMatchmaking.BO.KnowledgeBaseDataTransformation.Transformer()).ActorCreateRequest_To_ActorCreateRequest(req);
            DigicircMatchmaking.BLL.ExternalRestServices.KnowledgeBaseRestService.CreateActor(reqParsed);
        }


        public static DigicircMatchmaking.BO.ActorCreateStatements PrepareDeleteKnowledgeActor(DigicircMatchmaking.BO.Actor actor)
        {
            DigicircMatchmaking.BO.ActorCreateStatements stat = new DigicircMatchmaking.BO.ActorCreateStatements();
            stat.Statement = "MATCH (n:Actor {Id: $props.Id}) DETACH DELETE n";
            stat.Parameters = new DigicircMatchmaking.BO.ActorCreateParameters();
            stat.Parameters.Props = new DigicircMatchmaking.BO.ActorCreateProps();
            stat.Parameters.Props.Id = (actor?.Id ?? 0);
            stat.Parameters.Props.Name = (actor?.Name ?? "");
            return stat;
        }


        public static void UpdateKnowledgeActor(DigicircMatchmaking.BO.Actor actor)
        {
            if (zAppDev.DotNet.Framework.Utilities.Common.GetConfigurationKey("DontCallKnowledgeGraph") == "true")
            {
                return;
            }
            DigicircMatchmaking.BO.ActorCreateRequest req = new DigicircMatchmaking.BO.ActorCreateRequest();
            req?.AddStatements(DigicircMatchmaking.BO.ActorBackendExtensions.PrepareUpdateKnowledgeActor(actor));
            DigicircMatchmaking.ExternalStructs.KnowledgeBase.ActorCreateRequest reqParsed = (new DigicircMatchmaking.BO.KnowledgeBaseDataTransformation.Transformer()).ActorCreateRequest_To_ActorCreateRequest(req);
            DigicircMatchmaking.BLL.ExternalRestServices.KnowledgeBaseRestService.CreateActor(reqParsed);
        }


        public static DigicircMatchmaking.BO.ActorCreateStatements PrepareUpdateKnowledgeActor(DigicircMatchmaking.BO.Actor actor)
        {
            DigicircMatchmaking.BO.ActorCreateStatements stat = new DigicircMatchmaking.BO.ActorCreateStatements();
            stat.Statement = "MATCH (n:Actor {Id: $props.Id}) SET m = $props RETURN m";
            stat.Parameters = new DigicircMatchmaking.BO.ActorCreateParameters();
            stat.Parameters.Props = new DigicircMatchmaking.BO.ActorCreateProps();
            stat.Parameters.Props.Id = (actor?.Id ?? 0);
            stat.Parameters.Props.Name = (actor?.Name ?? "");
            return stat;
        }


        public static void DeleteRelationShips(int? actorId, int? resourceId)
        {
            if (zAppDev.DotNet.Framework.Utilities.Common.GetConfigurationKey("DontCallKnowledgeGraph") == "true")
            {
                return;
            }
            DigicircMatchmaking.BO.ConnectActorMaterialRequest req = new DigicircMatchmaking.BO.ConnectActorMaterialRequest();
            DigicircMatchmaking.BO.ConnectActorMaterialStatements stat = new DigicircMatchmaking.BO.ConnectActorMaterialStatements();
            stat.Statement = "Match (a:Actor {Id: $props.ActorId})-[r]->(m:Material {Id: $props.MaterialId})  DELETE r";
            stat.Parameters = new DigicircMatchmaking.BO.ConnectActorMaterialParameters();
            stat.Parameters.Props = new DigicircMatchmaking.BO.ConnectActorMaterialProps();
            stat.Parameters.Props.ActorId = actorId;
            stat.Parameters.Props.MaterialId = resourceId;
            req?.AddStatements(stat);
            DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest reqParsed = (new DigicircMatchmaking.BO.KnowledgeBaseDataTransformation.Transformer()).ConnectActorMaterialRequest_To_ConnectActorMaterialRequest(req);
            zAppDev.DotNet.Framework.Utilities.Serializer<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest> ser = new zAppDev.DotNet.Framework.Utilities.Serializer<DigicircMatchmaking.ExternalStructs.KnowledgeBase.ConnectActorMaterialRequest>();
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "ActorBackend", DigicircMatchmaking.Hubs.EventsHub.RaiseDebugMessage, "request " + ser.ToJson(reqParsed));
            DigicircMatchmaking.BLL.ExternalRestServices.KnowledgeBaseRestService.DeleteRelationships(reqParsed);
        }




    }
}
