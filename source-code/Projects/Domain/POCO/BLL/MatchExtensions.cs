
// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using NHibernate.Linq;

using DigicircMatchmaking.DAL;
using DigicircMatchmaking.DAL.Queries;
namespace DigicircMatchmaking.BO
{
    /// <summary>
    /// The Match extensions
    /// </summary>
    public static class MatchExtensions
    {
        public static void MatchProducts(DigicircMatchmaking.BO.Actor actor)
        {
            foreach (var product in actor?.CircularEconomyRequirements?.Resources ?? Enumerable.Empty<DigicircMatchmaking.BO.Product>())
            {
                var _var0 = product?.Resource?.Id;
                var _var1 = (product?.ValidFrom ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                var _var2 = (product?.ValidTo ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                System.Collections.Generic.List<DigicircMatchmaking.BO.Product> possibleMatches = new DigicircMatchmaking.DAL.Repository().Get<DigicircMatchmaking.BO.Product>((p) => p.IsDesired && p.Resource.Id == _var0 && p.ValidTo >= _var1 && p.ValidFrom <= _var2);
                if ((possibleMatches?.Count() == 0))
                {
                    continue;
                }
                DigicircMatchmaking.BO.Match match = new DigicircMatchmaking.BO.Match();
                DigicircMatchmaking.BO.Product matchedProduct = possibleMatches?.FirstOrDefault();
                var _var3 = matchedProduct?.Id;
                DigicircMatchmaking.BO.Actor actorRequested = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Actor>((a) => a.CircularEconomyRequirements.DesiredResources.Any((p) => p.Id == _var3))?.FirstOrDefault();
                if ((actorRequested == null))
                {
                    continue;
                }
                var _var4 = actor?.Id;
                var _var5 = actorRequested?.Id;
                var _var6 = matchedProduct?.Resource?.Id;
                if (((new DigicircMatchmaking.DAL.Repository().Get<DigicircMatchmaking.BO.Match>((x) => x.ActorOffer.Id == _var4 && x.ActorRequest.Id == _var5 && x.Resource.Id == _var6)?.Any() ?? false)))
                {
                    continue;
                }
                match.Resource = matchedProduct?.Resource;
                match.ValidFrom = DateTime.Compare((product?.ValidFrom ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value), (matchedProduct?.ValidFrom ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value)) <= 0 ? (matchedProduct?.ValidFrom ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value) : (product?.ValidFrom ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                match.ValidTo = DateTime.Compare((product?.ValidTo ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value), (matchedProduct?.ValidTo ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value)) <= 0 ? (product?.ValidTo ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value) : (matchedProduct?.ValidTo ?? System.Data.SqlTypes.SqlDateTime.MinValue.Value);
                match.ActorOffer = actor;
                match.ActorRequest = actorRequested;
                match.QuantityLack = (product?.Quantity ?? 0) - (matchedProduct?.Quantity ?? 0);
                new DigicircMatchmaking.DAL.Repository().Save<DigicircMatchmaking.BO.Match>(match);
            }
        }




    }
}
