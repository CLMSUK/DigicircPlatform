// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using System.IO;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using Identity = zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity;
using DigicircMatchmaking.DAL;
using Newtonsoft.Json;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DigicircMatchmaking.BO
{
    #region Implementation
    public class QueryGeocoderWorkflow : WorkflowImplementation
    {

        public override WorkflowContextBase GetContext()
        {
            return Context;
        }

        #region Step Fields
        private readonly QueryGeocoderStep0 Step0 = new QueryGeocoderStep0();
        #endregion
        public override WorkflowStatus? Execute()
        {
            return Run();
        }
        #region Context
        public override WorkflowStatus? Status
        {
            get
            {
                return Context.Status;
            }
            set
            {
                Context.Status = value;
            }
        }
        public DigicircMatchmaking.BO.QueryGeocoderContext Context;
        #endregion
        public QueryGeocoderWorkflow()
        {
            Context = new DigicircMatchmaking.BO.QueryGeocoderContext();
            Context.Name = this.GetType().Name;
            Status = WorkflowStatus.None;
        }
        public WorkflowStatus? Step0Step(bool run = true)
        {
            Step0.Context = Context;
            if (run)
            {
                return Step0.Run();
            }
            return WorkflowStatus.Completed;
        }
        public WorkflowExecutionResult RunAndGetResult()
        {
            var result = Run();
            return new WorkflowExecutionResult { Status = result, Context = Context };
        }
        public WorkflowStatus? Run()
        {
            try
            {
                if (Step0Step() == WorkflowStatus.Pending) return WorkflowStatus.Pending;
                return WorkflowStatus.Completed;
                Status = WorkflowStatus.Completed;
            }
            catch (Exception e)
            {
                Context.Error = $"Message: {e.Message}\n StackTrace: {e.StackTrace}";
                log4net.LogManager.GetLogger(GetType()).Error($"Error running workflow 'QueryGeocoder'!", e);
                return WorkflowStatus.Failed;
            }
        }
        public override T GetStep<T>()
        {
            var stepName = typeof (T).Name;
            if (stepName == QueryGeocoderStep0.StepName)
            {
                Step0Step(false);
                return Step0 as T;
            }
            return null;
        }
        public override WorkflowStatus? Continue(string stepName)
        {
            try
            {
                return WorkflowStatus.StepToContinueNotFound;
            }
            catch (Exception e)
            {
                Context.Error = $"Message: {e.Message}\n StackTrace: {e.StackTrace}";
                log4net.LogManager.GetLogger(GetType()).Error($"Error continuing workflow 'QueryGeocoder'", e);
                throw;
            }
        }

        public override void CreatePendingJob(string stepName)
        {
            string user = null;
            try
            {
                user = Identity.IdentityHelper.GetCurrentUserName();
            }
            catch (Exception e)
            {
                Context.Error = $"Message: {e.Message}\n StackTrace: {e.StackTrace}";
                log4net.LogManager.GetLogger(GetType()).Warn("Could not get Current User while creating a Pending Job", e);
            }
            Context.PendingJobCreatedBy = user;
            Context.PendingStep = stepName;
            Context.PendingSince = DateTime.UtcNow;
            Status = WorkflowStatus.Pending;
            new DAL.Repository().Save(Context);
        }

        public override void RestoreState(WorkflowContextBase state)
        {
            Context = state as DigicircMatchmaking.BO.QueryGeocoderContext;
        }
    }
    #endregion
    #region Steps
    public class QueryGeocoderStep0 : IWorkflowStep
    {
        public static string StepName => "Step0";
        public DigicircMatchmaking.BO.QueryGeocoderContext Context
        {
            get;
            set;
        }
        public Guid? Id
        {
            get;
            set;
        }
        private bool ShouldRun()
        {
            if (!ClaimPermission.CheckAccess(ClaimTypes.IDEF0Activity, "QueryGeocoder", "Step0"))
            {
                IdentityHelper.LogAction("QueryGeocoder", "Step0", false, "Unauthorized");
                throw new UnauthorizedAccessException("You do not have permissions to execute step 'Step0' of 'QueryGeocoder' Workflow");
            }
            return true;
        }
        public WorkflowStatus? Run()
        {
            if (!ShouldRun()) return WorkflowStatus.Completed;
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "QueryGeocoderStep0", DigicircMatchmaking.Hubs.EventsHub.RaiseDebugMessage, "Geocoder workflow");
            System.Collections.Generic.List<DigicircMatchmaking.BO.Actor> notGeoDataActors = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Actor>((a) => a.Address.Latitude == null || a.Address.Longitude == null)?.Take(10).ToList();
            foreach (var actor in notGeoDataActors ?? Enumerable.Empty<DigicircMatchmaking.BO.Actor>())
            {
                actor.Address = DigicircMatchmaking.BO.GeocoderExtensions.Query(actor?.Address);
                new DigicircMatchmaking.DAL.Repository().Save<DigicircMatchmaking.BO.Actor>(actor);
            }
            return WorkflowStatus.Completed;
        }
    }

    #endregion
}
