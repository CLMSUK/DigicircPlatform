// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using zAppDev.DotNet.Framework.Services;
using System;
using System.IO;
using System.Text;
using System.Linq;
using System.Xml.Serialization;
using System.Collections.Generic;
using zAppDev.DotNet.Framework.Utilities;

namespace DigicircMatchmaking.BLL.ExternalRestServices
{
    public class TextSearchRestService
    {
        public static string BaseUrl
        {
            get
            {
                var baseUrl = System.Configuration.ConfigurationManager.AppSettings["externalapis:TextSearch:baseurl"];
                if (string.IsNullOrWhiteSpace(baseUrl))
                {
                    baseUrl = "https://keyword-extraction.clms.io";
                }
                if (!string.IsNullOrWhiteSpace(baseUrl) && !baseUrl.EndsWith("/"))
                {
                    baseUrl += "/";
                }
                return baseUrl;
            }
        }

        private static string ProxyPort
        {
            get
            {
                var val = System.Configuration.ConfigurationManager.AppSettings["externalapis:proxy:port"];
                return string.IsNullOrEmpty(val) ? "0" : val;
            }
        }
        private static string BasicAuthUsername
        {
            get
            {
                var val = System.Configuration.ConfigurationManager.AppSettings["externalapis:TextSearch:username"];
                return string.IsNullOrEmpty(val) ? "demo" : val;
            }
        }

        private static string BasicAuthPassword
        {
            get
            {
                var val = System.Configuration.ConfigurationManager.AppSettings["externalapis:TextSearch:password"];
                return string.IsNullOrEmpty(val) ? "qwerty1@" : val;
            }
        }

        public static DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchResponse GetKeywords(DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchRequest parameter)
        {
            System.Func<string> getUrl = () =>
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
                return "keywords";
            };
            var _operationRelativeUrl = getUrl.Invoke().Trim();
            if (_operationRelativeUrl?.StartsWith("/") == true && BaseUrl?.EndsWith("/") == true)
            {
                _operationRelativeUrl = _operationRelativeUrl.TrimStart('/');
            }
            var _targetUrl = BaseUrl + _operationRelativeUrl;
            var _options = new RestServiceConsumptionOptions
            {
                Url = _targetUrl,
                Verb = RestHTTPVerb.POST,
                SecurityType = RestSecurityType.BasicAuth,
                UserName = BasicAuthUsername,
                Password = BasicAuthPassword,
                ExtraHeaderData = new System.Collections.Generic.Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) {   },
                LogAccess = false,
                IsCachingEnabled = false,
                ApiName = "TextSearch",
                Operation = "GetKeywords",
                ProxyAddress = System.Configuration.ConfigurationManager.AppSettings["externalapis:proxy:address"],
                ProxyPort = int.Parse(ProxyPort),
                ProxyUser = System.Configuration.ConfigurationManager.AppSettings["externalapis:proxy:user"],
                ProxyPassword = System.Configuration.ConfigurationManager.AppSettings["externalapis:proxy:password"],
                PostType = PostType.JSON,
                Data = parameter, FormData = new Dictionary<string, object> {{"parameter",parameter}}
            };
            Func<ServiceConsumptionContainer, DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchResponse> _invocation = (_httpResponse) =>
            {
                var _returnedItem = RestServiceConsumer.Consume<DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchResponse>(_options, _httpResponse);
                return zAppDev.DotNet.Framework.Utilities.Common.SafeCast<DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchResponse>(_returnedItem);
            };
            var _consumer = new ServiceConsumer<DigicircMatchmaking.ExternalStructs.TextSearch.TextSearchResponse>(_invocation);
            return _consumer.Invoke(_options);
        }

    }
}