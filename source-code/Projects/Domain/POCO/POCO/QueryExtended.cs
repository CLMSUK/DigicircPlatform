// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DigicircMatchmaking.BO
{
    /// <summary>
    /// The QueryExtended class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    public class QueryExtended
    {
        #region QueryExtended's Fields

        protected Guid _transientId= Guid.NewGuid();
        public virtual Guid TransientId
        {
            get
            {
                return _transientId;
            }
            set
            {
                _transientId = value;
            }
        }
        [DataMember(Name="GraphContext")]
        protected string graphContext;
        [DataMember(Name="GraphSubContext")]
        protected string graphSubContext;
        [DataMember(Name="MessageType")]
        protected string messageType;
        [DataMember(Name="QueryExtendedKey")]
        protected int? queryExtendedKey = 0;
#pragma warning disable 0649
        private bool disableInternalAdditions;
#pragma warning restore 0649
        #endregion
        #region QueryExtended's Properties
/// <summary>
/// The GraphContext property
///
/// </summary>
///
        public virtual string GraphContext
        {
            get
            {
                return graphContext;
            }
            set
            {
                graphContext = value;
            }
        }
/// <summary>
/// The GraphSubContext property
///
/// </summary>
///
        public virtual string GraphSubContext
        {
            get
            {
                return graphSubContext;
            }
            set
            {
                graphSubContext = value;
            }
        }
/// <summary>
/// The MessageType property
///
/// </summary>
///
        public virtual string MessageType
        {
            get
            {
                return messageType;
            }
            set
            {
                messageType = value;
            }
        }
/// <summary>
/// The QueryExtendedKey property
///
/// </summary>
///
        [Key]
        public virtual int? QueryExtendedKey
        {
            get
            {
                return queryExtendedKey;
            }
            set
            {
                queryExtendedKey = value;
            }
        }
        #endregion
        #region QueryExtended's Participant Properties
        [DataMember(Name="Elements")]
        protected IList<ExElements> elements = new List<ExElements>();
        public virtual List<ExElements> Elements
        {
            get
            {
                if (elements is ExElements[])
                {
                    elements = elements.ToList();
                }
                if (elements == null)
                {
                    elements = new List<ExElements>();
                }
                return elements.ToList();
            }
            set
            {
                if (elements is ExElements[])
                {
                    elements = elements.ToList();
                }
                if (elements != null)
                {
                    var __itemsToDelete = new List<ExElements>(elements);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveElements(__item);
                    }
                }
                if(value == null)
                {
                    elements = new List<ExElements>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddElements(__item);
                }
            }
        }
        public virtual void AddElements(IList<ExElements> __items)
        {
            foreach (var __item in __items)
            {
                AddElements(__item);
            }
        }

        public virtual void InternalAddElements(ExElements __item)
        {
            if (__item == null || disableInternalAdditions) return;
            elements?.Add(__item);
        }

        public virtual void InternalRemoveElements(ExElements __item)
        {
            if (__item == null) return;
            elements?.Remove(__item);
        }

        public virtual void AddElements(ExElements __item)
        {
            if (__item == null) return;
            InternalAddElements(__item);
        }

        public virtual void AddAtIndexElements(int index, ExElements __item)
        {
            if (__item == null) return;
            elements?.Insert(index, __item);
        }

        public virtual void RemoveElements(ExElements __item)
        {
            if (__item != null)
            {
                InternalRemoveElements(__item);
            }
        }
        public virtual void SetElementsAt(ExElements __item, int __index)
        {
            if (__item == null)
            {
                elements[__index] = null;
            }
            else
            {
                elements[__index] = __item;
            }
        }

        public virtual void ClearElements()
        {
            if (elements!=null)
            {
                var __itemsToRemove = elements.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveElements(__item);
                }
            }
        }
        [DataMember(Name="Relations")]
        protected IList<ExRelations> relations = new List<ExRelations>();
        public virtual List<ExRelations> Relations
        {
            get
            {
                if (relations is ExRelations[])
                {
                    relations = relations.ToList();
                }
                if (relations == null)
                {
                    relations = new List<ExRelations>();
                }
                return relations.ToList();
            }
            set
            {
                if (relations is ExRelations[])
                {
                    relations = relations.ToList();
                }
                if (relations != null)
                {
                    var __itemsToDelete = new List<ExRelations>(relations);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveRelations(__item);
                    }
                }
                if(value == null)
                {
                    relations = new List<ExRelations>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddRelations(__item);
                }
            }
        }
        public virtual void AddRelations(IList<ExRelations> __items)
        {
            foreach (var __item in __items)
            {
                AddRelations(__item);
            }
        }

        public virtual void InternalAddRelations(ExRelations __item)
        {
            if (__item == null || disableInternalAdditions) return;
            relations?.Add(__item);
        }

        public virtual void InternalRemoveRelations(ExRelations __item)
        {
            if (__item == null) return;
            relations?.Remove(__item);
        }

        public virtual void AddRelations(ExRelations __item)
        {
            if (__item == null) return;
            InternalAddRelations(__item);
        }

        public virtual void AddAtIndexRelations(int index, ExRelations __item)
        {
            if (__item == null) return;
            relations?.Insert(index, __item);
        }

        public virtual void RemoveRelations(ExRelations __item)
        {
            if (__item != null)
            {
                InternalRemoveRelations(__item);
            }
        }
        public virtual void SetRelationsAt(ExRelations __item, int __index)
        {
            if (__item == null)
            {
                relations[__index] = null;
            }
            else
            {
                relations[__index] = __item;
            }
        }

        public virtual void ClearRelations()
        {
            if (relations!=null)
            {
                var __itemsToRemove = relations.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveRelations(__item);
                }
            }
        }
        [DataMember(Name="MessageSearchData")]
        protected ExMessageSearchData messageSearchData;
        public virtual ExMessageSearchData MessageSearchData
        {
            get
            {
                return messageSearchData;
            }
            set
            {
                if(Equals(messageSearchData, value)) return;
                var __oldValue = messageSearchData;
                if (value != null)
                {
                    messageSearchData = value;
                }
                else
                {
                    if (messageSearchData != null)
                    {
                        messageSearchData = null;
                    }
                }
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the QueryExtended class
/// </summary>
/// <returns>New QueryExtended object</returns>
/// <remarks></remarks>
        public QueryExtended() {}
        #endregion
        #region Methods

        public virtual List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            if (GraphContext != null && GraphContext.Length > 100)
            {
                __errors.Add("Length of property 'GraphContext' cannot be greater than 100.");
            }
            if (GraphSubContext != null && GraphSubContext.Length > 100)
            {
                __errors.Add("Length of property 'GraphSubContext' cannot be greater than 100.");
            }
            if (MessageType != null && MessageType.Length > 100)
            {
                __errors.Add("Length of property 'MessageType' cannot be greater than 100.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'QueryExtended' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (GraphContext?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (GraphSubContext?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (MessageType?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (QueryExtendedKey?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [QueryExtended] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual QueryExtended Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, QueryExtended copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (QueryExtended)copiedObjects[this];
            copy = copy ?? new QueryExtended();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
                copy.QueryExtendedKey = this.QueryExtendedKey;
            }
            copy.GraphContext = this.GraphContext;
            copy.GraphSubContext = this.GraphSubContext;
            copy.MessageType = this.MessageType;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            copy.elements = new List<ExElements>();
            if(deep && this.elements != null)
            {
                foreach (var __item in this.elements)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddElements(__item);
                        else
                            copy.AddElements(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddElements((ExElements)copiedObjects[__item]);
                    }
                }
            }
            copy.relations = new List<ExRelations>();
            if(deep && this.relations != null)
            {
                foreach (var __item in this.relations)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddRelations(__item);
                        else
                            copy.AddRelations(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddRelations((ExRelations)copiedObjects[__item]);
                    }
                }
            }
            if(deep && this.messageSearchData != null)
            {
                if (!copiedObjects.Contains(this.messageSearchData))
                {
                    if (asNew && reuseNestedObjects)
                        copy.MessageSearchData = this.MessageSearchData;
                    else if (asNew)
                        copy.MessageSearchData = this.MessageSearchData.Copy(deep, copiedObjects, true);
                    else
                        copy.messageSearchData = this.messageSearchData.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.MessageSearchData = (ExMessageSearchData)copiedObjects[this.MessageSearchData];
                    else
                        copy.messageSearchData = (ExMessageSearchData)copiedObjects[this.MessageSearchData];
                }
            }
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as QueryExtended;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(QueryExtended x, QueryExtended y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(QueryExtended x, QueryExtended y)
        {
            return !(x == y);
        }

        private PropertyInfo __propertyKeyCache;
        public virtual PropertyInfo GetPrimaryKey()
        {
            if (__propertyKeyCache == null)
            {
                __propertyKeyCache = this.GetType().GetProperty("QueryExtendedKey");
            }
            return __propertyKeyCache;
        }


/// <summary>
///     To help ensure hashcode uniqueness, a carefully selected random number multiplier
///     is used within the calculation.  Goodrich and Tamassia's Data Structures and
///     Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
///     of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
///     for more information.
/// </summary>
        private const int HashMultiplier = 31;
        private int? cachedHashcode;

        public override int GetHashCode()
        {
            if (this.cachedHashcode.HasValue)
            {
                return this.cachedHashcode.Value;
            }
            if (this.IsTransient())
            {
                //this.cachedHashcode = base.GetHashCode();
                return this.TransientId.GetHashCode(); //don't cache because this won't stay transient forever
            }
            else
            {
                unchecked
                {
                    // It's possible for two objects to return the same hash code based on
                    // identically valued properties, even if they're of two different types,
                    // so we include the object's type in the hash calculation
                    var hashCode = this.GetType().GetHashCode();
                    this.cachedHashcode = (hashCode * HashMultiplier) ^ this.QueryExtendedKey.GetHashCode();
                }
            }
            return this.cachedHashcode.Value;
        }

/// <summary>
///     Transient objects are not associated with an item already in storage.  For instance,
///     a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed
///     objects to be lazily loaded.
/// </summary>
        public virtual bool IsTransient()
        {
            return this.QueryExtendedKey == default(int) || this.QueryExtendedKey.Equals(default(int));
        }

/// <summary>
///     When NHibernate proxies objects, it masks the type of the actual entity object.
///     This wrapper burrows into the proxied object to get its actual type.
///
///     Although this assumes NHibernate is being used, it doesn't require any NHibernate
///     related dependencies and has no bad side effects if NHibernate isn't being used.
///
///     Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
/// </summary>
        protected virtual System.Type GetTypeUnproxied()
        {
            return this.GetType();
        }

/// <summary>
///     Returns true if self and the provided entity have the same Id values
///     and the Ids are not of the default Id value
/// </summary>
        protected bool HasSameNonDefaultIdAs(QueryExtended compareTo)
        {
            return !this.IsTransient() && !compareTo.IsTransient() && this.QueryExtendedKey.Equals(compareTo.QueryExtendedKey);
        }

        #endregion


    }
}
