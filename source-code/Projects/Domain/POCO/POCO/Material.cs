// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DigicircMatchmaking.BO
{
    /// <summary>
    /// The Material class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    public class Material : IDomainModelClass
    {
        #region Material's Fields

        protected Guid _transientId= Guid.NewGuid();
        public virtual Guid TransientId
        {
            get
            {
                return _transientId;
            }
            set
            {
                _transientId = value;
            }
        }
        [DataMember(Name="Id")]
        protected int? id = 0;
        [DataMember(Name="Name")]
        protected string name;
        [DataMember(Name="Description")]
        protected string description;
        [DataMember(Name="HsSpecific")]
        protected string hsSpecific;
        [DataMember(Name="PendingGraph")]
        protected bool pendingGraph;
        [DataMember(Name="IsHazardous")]
        protected bool isHazardous;
        [DataMember(Name="VersionTimestamp")]
        protected int? versionTimestamp;

#pragma warning disable 0649
        private bool disableInternalAdditions;
#pragma warning restore 0649
        #endregion
        #region Material's Properties
/// <summary>
/// The Id property
///
/// </summary>
///
        [Key]
        public virtual int? Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }
/// <summary>
/// The Name property
///
/// </summary>
///
        public virtual string Name
        {
            get
            {
                return name;
            }
            set
            {
                name = value;
            }
        }
/// <summary>
/// The Description property
///
/// </summary>
///
        public virtual string Description
        {
            get
            {
                return description;
            }
            set
            {
                description = value;
            }
        }
/// <summary>
/// The HsSpecific property
///
/// </summary>
///
        public virtual string HsSpecific
        {
            get
            {
                return hsSpecific;
            }
            set
            {
                hsSpecific = value;
            }
        }
/// <summary>
/// The PendingGraph property
///
/// </summary>
///
        public virtual bool PendingGraph
        {
            get
            {
                return pendingGraph;
            }
            set
            {
                pendingGraph = value;
            }
        }
/// <summary>
/// The IsHazardous property
///
/// </summary>
///
        public virtual bool IsHazardous
        {
            get
            {
                return isHazardous;
            }
            set
            {
                isHazardous = value;
            }
        }
/// <summary>
/// The VersionTimestamp property
///Provides concurrency control for the class
/// </summary>
///
        public virtual int? VersionTimestamp
        {
            get
            {
                return versionTimestamp;
            }
            set
            {
                versionTimestamp = value;
            }
        }
        #endregion
        #region Material's Participant Properties
        [DataMember(Name="ConvertedBy")]
        protected IList<Process> convertedBy = new List<Process>();
        public virtual List<Process> ConvertedBy
        {
            get
            {
                if (convertedBy is Process[])
                {
                    convertedBy = convertedBy.ToList();
                }
                if (convertedBy == null)
                {
                    convertedBy = new List<Process>();
                }
                return convertedBy.ToList();
            }
            set
            {
                if (convertedBy is Process[])
                {
                    convertedBy = convertedBy.ToList();
                }
                if (convertedBy != null)
                {
                    var __itemsToDelete = new List<Process>(convertedBy);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveConvertedBy(__item);
                    }
                }
                if(value == null)
                {
                    convertedBy = new List<Process>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddConvertedBy(__item);
                }
            }
        }
        public virtual void AddConvertedBy(IList<Process> __items)
        {
            foreach (var __item in __items)
            {
                AddConvertedBy(__item);
            }
        }

        public virtual void InternalAddConvertedBy(Process __item)
        {
            if (__item == null || disableInternalAdditions) return;
            convertedBy?.Add(__item);
        }

        public virtual void InternalRemoveConvertedBy(Process __item)
        {
            if (__item == null) return;
            convertedBy?.Remove(__item);
        }

        public virtual void AddConvertedBy(Process __item)
        {
            if (__item == null) return;
            if (!convertedBy.Contains(__item))
                InternalAddConvertedBy(__item);
            if (!__item.Product.Contains(this))
                __item.AddProduct(this);
        }

        public virtual void AddAtIndexConvertedBy(int index, Process __item)
        {
            if (__item == null) return;
            if (!convertedBy.Contains(__item))
                convertedBy.Insert(index, __item);
            if (!__item.Product.Contains(this))
                __item.AddProduct(this);
        }

        public virtual void RemoveConvertedBy(Process __item)
        {
            if (__item != null)
            {
                if (convertedBy.Contains(__item))
                    InternalRemoveConvertedBy(__item);
                if(__item.Product.Contains(this))
                    __item.RemoveProduct(this);
            }
        }
        public virtual void SetConvertedByAt(Process __item, int __index)
        {
            if (__item == null)
            {
                convertedBy[__index].RemoveProduct(this);
            }
            else
            {
                convertedBy[__index] = __item;
                if (!__item.Product.Contains(this))
                    __item.AddProduct(this);
            }
        }

        public virtual void ClearConvertedBy()
        {
            if (convertedBy!=null)
            {
                var __itemsToRemove = convertedBy.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveConvertedBy(__item);
                }
            }
        }
        [DataMember(Name="ConvertBy")]
        protected IList<Process> convertBy = new List<Process>();
        public virtual List<Process> ConvertBy
        {
            get
            {
                if (convertBy is Process[])
                {
                    convertBy = convertBy.ToList();
                }
                if (convertBy == null)
                {
                    convertBy = new List<Process>();
                }
                return convertBy.ToList();
            }
            set
            {
                if (convertBy is Process[])
                {
                    convertBy = convertBy.ToList();
                }
                if (convertBy != null)
                {
                    var __itemsToDelete = new List<Process>(convertBy);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveConvertBy(__item);
                    }
                }
                if(value == null)
                {
                    convertBy = new List<Process>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddConvertBy(__item);
                }
            }
        }
        public virtual void AddConvertBy(IList<Process> __items)
        {
            foreach (var __item in __items)
            {
                AddConvertBy(__item);
            }
        }

        public virtual void InternalAddConvertBy(Process __item)
        {
            if (__item == null || disableInternalAdditions) return;
            convertBy?.Add(__item);
        }

        public virtual void InternalRemoveConvertBy(Process __item)
        {
            if (__item == null) return;
            convertBy?.Remove(__item);
        }

        public virtual void AddConvertBy(Process __item)
        {
            if (__item == null) return;
            if (!convertBy.Contains(__item))
                InternalAddConvertBy(__item);
            if (!__item.Source.Contains(this))
                __item.AddSource(this);
        }

        public virtual void AddAtIndexConvertBy(int index, Process __item)
        {
            if (__item == null) return;
            if (!convertBy.Contains(__item))
                convertBy.Insert(index, __item);
            if (!__item.Source.Contains(this))
                __item.AddSource(this);
        }

        public virtual void RemoveConvertBy(Process __item)
        {
            if (__item != null)
            {
                if (convertBy.Contains(__item))
                    InternalRemoveConvertBy(__item);
                if(__item.Source.Contains(this))
                    __item.RemoveSource(this);
            }
        }
        public virtual void SetConvertByAt(Process __item, int __index)
        {
            if (__item == null)
            {
                convertBy[__index].RemoveSource(this);
            }
            else
            {
                convertBy[__index] = __item;
                if (!__item.Source.Contains(this))
                    __item.AddSource(this);
            }
        }

        public virtual void ClearConvertBy()
        {
            if (convertBy!=null)
            {
                var __itemsToRemove = convertBy.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveConvertBy(__item);
                }
            }
        }
        [DataMember(Name="RequestedBy")]
        protected DigicircUser requestedBy;
        public virtual DigicircUser RequestedBy
        {
            get
            {
                return requestedBy;
            }
            set
            {
                if(Equals(requestedBy, value)) return;
                var __oldValue = requestedBy;
                requestedBy = value;
            }
        }
        [DataMember(Name="Type")]
        protected ProductType type;
        public virtual ProductType Type
        {
            get
            {
                return type;
            }
            set
            {
                if(Equals(type, value)) return;
                var __oldValue = type;
                type = value;
            }
        }
        [DataMember(Name="PhysicalForm")]
        protected PhysicalForm physicalForm;
        public virtual PhysicalForm PhysicalForm
        {
            get
            {
                return physicalForm;
            }
            set
            {
                if(Equals(physicalForm, value)) return;
                var __oldValue = physicalForm;
                physicalForm = value;
            }
        }
        [DataMember(Name="UnitOfMeasurement")]
        protected UnitOfMeasurement unitOfMeasurement;
        public virtual UnitOfMeasurement UnitOfMeasurement
        {
            get
            {
                return unitOfMeasurement;
            }
            set
            {
                if(Equals(unitOfMeasurement, value)) return;
                var __oldValue = unitOfMeasurement;
                unitOfMeasurement = value;
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the Material class
/// </summary>
/// <returns>New Material object</returns>
/// <remarks></remarks>
        public Material() {}
        #endregion
        #region Methods

        public virtual List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            if (Id == null)
            {
                __errors.Add("Property 'Id' is required.");
            }
            if (Name != null && Name.Length > 2147483647)
            {
                __errors.Add("Length of property 'Name' cannot be greater than 2147483647.");
            }
            if (Description != null && Description.Length > 2147483647)
            {
                __errors.Add("Length of property 'Description' cannot be greater than 2147483647.");
            }
            if (HsSpecific != null && HsSpecific.Length > 2147483647)
            {
                __errors.Add("Length of property 'HsSpecific' cannot be greater than 2147483647.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'Material' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (Id?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Name?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Description?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (HsSpecific?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PendingGraph.GetHashCode() );
            hashCode = hashCode * -1521134295 + (IsHazardous.GetHashCode() );
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [Material] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual Material Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, Material copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (Material)copiedObjects[this];
            copy = copy ?? new Material();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
                copy.Id = this.Id;
            }
            copy.Name = this.Name;
            copy.Description = this.Description;
            copy.HsSpecific = this.HsSpecific;
            copy.PendingGraph = this.PendingGraph;
            copy.IsHazardous = this.IsHazardous;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            copy.convertedBy = new List<Process>();
            if(deep && this.convertedBy != null)
            {
                foreach (var __item in this.convertedBy)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddConvertedBy(__item);
                        else
                            copy.AddConvertedBy(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddConvertedBy((Process)copiedObjects[__item]);
                    }
                }
            }
            copy.convertBy = new List<Process>();
            if(deep && this.convertBy != null)
            {
                foreach (var __item in this.convertBy)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddConvertBy(__item);
                        else
                            copy.AddConvertBy(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddConvertBy((Process)copiedObjects[__item]);
                    }
                }
            }
            if(deep && this.requestedBy != null)
            {
                if (!copiedObjects.Contains(this.requestedBy))
                {
                    if (asNew && reuseNestedObjects)
                        copy.RequestedBy = this.RequestedBy;
                    else if (asNew)
                        copy.RequestedBy = this.RequestedBy.Copy(deep, copiedObjects, true);
                    else
                        copy.requestedBy = this.requestedBy.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.RequestedBy = (DigicircUser)copiedObjects[this.RequestedBy];
                    else
                        copy.requestedBy = (DigicircUser)copiedObjects[this.RequestedBy];
                }
            }
            if(deep && this.type != null)
            {
                if (!copiedObjects.Contains(this.type))
                {
                    if (asNew && reuseNestedObjects)
                        copy.Type = this.Type;
                    else if (asNew)
                        copy.Type = this.Type.Copy(deep, copiedObjects, true);
                    else
                        copy.type = this.type.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.Type = (ProductType)copiedObjects[this.Type];
                    else
                        copy.type = (ProductType)copiedObjects[this.Type];
                }
            }
            if(deep && this.physicalForm != null)
            {
                if (!copiedObjects.Contains(this.physicalForm))
                {
                    if (asNew && reuseNestedObjects)
                        copy.PhysicalForm = this.PhysicalForm;
                    else if (asNew)
                        copy.PhysicalForm = this.PhysicalForm.Copy(deep, copiedObjects, true);
                    else
                        copy.physicalForm = this.physicalForm.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.PhysicalForm = (PhysicalForm)copiedObjects[this.PhysicalForm];
                    else
                        copy.physicalForm = (PhysicalForm)copiedObjects[this.PhysicalForm];
                }
            }
            if(deep && this.unitOfMeasurement != null)
            {
                if (!copiedObjects.Contains(this.unitOfMeasurement))
                {
                    if (asNew && reuseNestedObjects)
                        copy.UnitOfMeasurement = this.UnitOfMeasurement;
                    else if (asNew)
                        copy.UnitOfMeasurement = this.UnitOfMeasurement.Copy(deep, copiedObjects, true);
                    else
                        copy.unitOfMeasurement = this.unitOfMeasurement.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.UnitOfMeasurement = (UnitOfMeasurement)copiedObjects[this.UnitOfMeasurement];
                    else
                        copy.unitOfMeasurement = (UnitOfMeasurement)copiedObjects[this.UnitOfMeasurement];
                }
            }
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as Material;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(Material x, Material y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(Material x, Material y)
        {
            return !(x == y);
        }

        private PropertyInfo __propertyKeyCache;
        public virtual PropertyInfo GetPrimaryKey()
        {
            if (__propertyKeyCache == null)
            {
                __propertyKeyCache = this.GetType().GetProperty("Id");
            }
            return __propertyKeyCache;
        }


/// <summary>
///     To help ensure hashcode uniqueness, a carefully selected random number multiplier
///     is used within the calculation.  Goodrich and Tamassia's Data Structures and
///     Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
///     of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
///     for more information.
/// </summary>
        private const int HashMultiplier = 31;
        private int? cachedHashcode;

        public override int GetHashCode()
        {
            if (this.cachedHashcode.HasValue)
            {
                return this.cachedHashcode.Value;
            }
            if (this.IsTransient())
            {
                //this.cachedHashcode = base.GetHashCode();
                return this.TransientId.GetHashCode(); //don't cache because this won't stay transient forever
            }
            else
            {
                unchecked
                {
                    // It's possible for two objects to return the same hash code based on
                    // identically valued properties, even if they're of two different types,
                    // so we include the object's type in the hash calculation
                    var hashCode = this.GetType().GetHashCode();
                    this.cachedHashcode = (hashCode * HashMultiplier) ^ this.Id.GetHashCode();
                }
            }
            return this.cachedHashcode.Value;
        }

/// <summary>
///     Transient objects are not associated with an item already in storage.  For instance,
///     a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed
///     objects to be lazily loaded.
/// </summary>
        public virtual bool IsTransient()
        {
            return this.Id == default(int) || this.Id.Equals(default(int));
        }

/// <summary>
///     When NHibernate proxies objects, it masks the type of the actual entity object.
///     This wrapper burrows into the proxied object to get its actual type.
///
///     Although this assumes NHibernate is being used, it doesn't require any NHibernate
///     related dependencies and has no bad side effects if NHibernate isn't being used.
///
///     Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
/// </summary>
        protected virtual System.Type GetTypeUnproxied()
        {
            return this.GetType();
        }

/// <summary>
///     Returns true if self and the provided entity have the same Id values
///     and the Ids are not of the default Id value
/// </summary>
        protected bool HasSameNonDefaultIdAs(Material compareTo)
        {
            return !this.IsTransient() && !compareTo.IsTransient() && this.Id.Equals(compareTo.Id);
        }

        #endregion


    }
}
