// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DigicircMatchmaking.BO
{
    /// <summary>
    /// The Process class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    public class Process : IDomainModelClass
    {
        #region Process's Fields

        protected Guid _transientId= Guid.NewGuid();
        public virtual Guid TransientId
        {
            get
            {
                return _transientId;
            }
            set
            {
                _transientId = value;
            }
        }
        [DataMember(Name="Id")]
        protected int? id = 0;
        [DataMember(Name="Name")]
        protected string name;
        [DataMember(Name="Notes")]
        protected string notes;
        [DataMember(Name="Ref")]
        protected string _ref;
        [DataMember(Name="ProductName")]
        protected string productName;
        [DataMember(Name="SourceName")]
        protected string sourceName;
        [DataMember(Name="EnvironmentalEffects")]
        protected string environmentalEffects;
        [DataMember(Name="ShortEnvironmentalEffects")]
        protected string shortEnvironmentalEffects;
        [DataMember(Name="VersionTimestamp")]
        protected int? versionTimestamp;

#pragma warning disable 0649
        private bool disableInternalAdditions;
#pragma warning restore 0649
        #endregion
        #region Process's Properties
/// <summary>
/// The Id property
///
/// </summary>
///
        [Key]
        public virtual int? Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }
/// <summary>
/// The Name property
///
/// </summary>
///
        public virtual string Name
        {
            get
            {
                return name;
            }
            set
            {
                name = value;
            }
        }
/// <summary>
/// The Notes property
///
/// </summary>
///
        public virtual string Notes
        {
            get
            {
                return notes;
            }
            set
            {
                notes = value;
            }
        }
/// <summary>
/// The Ref property
///
/// </summary>
///
        public virtual string Ref
        {
            get
            {
                return _ref;
            }
            set
            {
                _ref = value;
            }
        }
/// <summary>
/// The ProductName property
///
/// </summary>
///
        public virtual string ProductName
        {
            get
            {
                var __valToGet = GetProductName();
                return __valToGet;
            }
            set
            {
                productName = value;
            }
        }
/// <summary>
/// The SourceName property
///
/// </summary>
///
        public virtual string SourceName
        {
            get
            {
                var __valToGet = GetSourceName();
                return __valToGet;
            }
            set
            {
                sourceName = value;
            }
        }
/// <summary>
/// The EnvironmentalEffects property
///
/// </summary>
///
        public virtual string EnvironmentalEffects
        {
            get
            {
                return environmentalEffects;
            }
            set
            {
                environmentalEffects = value;
            }
        }
/// <summary>
/// The ShortEnvironmentalEffects property
///
/// </summary>
///
        public virtual string ShortEnvironmentalEffects
        {
            get
            {
                var __valToGet = GetEnvironmentalEffects();
                return __valToGet;
            }
            set
            {
                shortEnvironmentalEffects = value;
            }
        }
/// <summary>
/// The VersionTimestamp property
///Provides concurrency control for the class
/// </summary>
///
        public virtual int? VersionTimestamp
        {
            get
            {
                return versionTimestamp;
            }
            set
            {
                versionTimestamp = value;
            }
        }
        #endregion
        #region Process's Participant Properties
        [DataMember(Name="Product")]
        protected IList<Material> product = new List<Material>();
        public virtual List<Material> Product
        {
            get
            {
                if (product is Material[])
                {
                    product = product.ToList();
                }
                if (product == null)
                {
                    product = new List<Material>();
                }
                return product.ToList();
            }
            set
            {
                if (product is Material[])
                {
                    product = product.ToList();
                }
                if (product != null)
                {
                    var __itemsToDelete = new List<Material>(product);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveProduct(__item);
                    }
                }
                if(value == null)
                {
                    product = new List<Material>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddProduct(__item);
                }
            }
        }
        public virtual void AddProduct(IList<Material> __items)
        {
            foreach (var __item in __items)
            {
                AddProduct(__item);
            }
        }

        public virtual void InternalAddProduct(Material __item)
        {
            if (__item == null || disableInternalAdditions) return;
            product?.Add(__item);
        }

        public virtual void InternalRemoveProduct(Material __item)
        {
            if (__item == null) return;
            product?.Remove(__item);
        }

        public virtual void AddProduct(Material __item)
        {
            if (__item == null) return;
            if (!product.Contains(__item))
                InternalAddProduct(__item);
            if (!__item.ConvertedBy.Contains(this))
                __item.AddConvertedBy(this);
        }

        public virtual void AddAtIndexProduct(int index, Material __item)
        {
            if (__item == null) return;
            if (!product.Contains(__item))
                product.Insert(index, __item);
            if (!__item.ConvertedBy.Contains(this))
                __item.AddConvertedBy(this);
        }

        public virtual void RemoveProduct(Material __item)
        {
            if (__item != null)
            {
                if (product.Contains(__item))
                    InternalRemoveProduct(__item);
                if(__item.ConvertedBy.Contains(this))
                    __item.RemoveConvertedBy(this);
            }
        }
        public virtual void SetProductAt(Material __item, int __index)
        {
            if (__item == null)
            {
                product[__index].RemoveConvertedBy(this);
            }
            else
            {
                product[__index] = __item;
                if (!__item.ConvertedBy.Contains(this))
                    __item.AddConvertedBy(this);
            }
        }

        public virtual void ClearProduct()
        {
            if (product!=null)
            {
                var __itemsToRemove = product.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveProduct(__item);
                }
            }
        }
        [DataMember(Name="Source")]
        protected IList<Material> source = new List<Material>();
        public virtual List<Material> Source
        {
            get
            {
                if (source is Material[])
                {
                    source = source.ToList();
                }
                if (source == null)
                {
                    source = new List<Material>();
                }
                return source.ToList();
            }
            set
            {
                if (source is Material[])
                {
                    source = source.ToList();
                }
                if (source != null)
                {
                    var __itemsToDelete = new List<Material>(source);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveSource(__item);
                    }
                }
                if(value == null)
                {
                    source = new List<Material>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddSource(__item);
                }
            }
        }
        public virtual void AddSource(IList<Material> __items)
        {
            foreach (var __item in __items)
            {
                AddSource(__item);
            }
        }

        public virtual void InternalAddSource(Material __item)
        {
            if (__item == null || disableInternalAdditions) return;
            source?.Add(__item);
        }

        public virtual void InternalRemoveSource(Material __item)
        {
            if (__item == null) return;
            source?.Remove(__item);
        }

        public virtual void AddSource(Material __item)
        {
            if (__item == null) return;
            if (!source.Contains(__item))
                InternalAddSource(__item);
            if (!__item.ConvertBy.Contains(this))
                __item.AddConvertBy(this);
        }

        public virtual void AddAtIndexSource(int index, Material __item)
        {
            if (__item == null) return;
            if (!source.Contains(__item))
                source.Insert(index, __item);
            if (!__item.ConvertBy.Contains(this))
                __item.AddConvertBy(this);
        }

        public virtual void RemoveSource(Material __item)
        {
            if (__item != null)
            {
                if (source.Contains(__item))
                    InternalRemoveSource(__item);
                if(__item.ConvertBy.Contains(this))
                    __item.RemoveConvertBy(this);
            }
        }
        public virtual void SetSourceAt(Material __item, int __index)
        {
            if (__item == null)
            {
                source[__index].RemoveConvertBy(this);
            }
            else
            {
                source[__index] = __item;
                if (!__item.ConvertBy.Contains(this))
                    __item.AddConvertBy(this);
            }
        }

        public virtual void ClearSource()
        {
            if (source!=null)
            {
                var __itemsToRemove = source.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveSource(__item);
                }
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the Process class
/// </summary>
/// <returns>New Process object</returns>
/// <remarks></remarks>
        public Process() {}
        #endregion
        #region Accessors Implementation
        private string GetProductName()
        {
            System.Collections.Generic.List<string> productList = new System.Collections.Generic.List<string>();
            foreach (var product in this?.product ?? Enumerable.Empty<DigicircMatchmaking.BO.Material>())
            {
                productList.Add((product?.Name ?? ""));
            }
            return string.Join(",", productList);
        }

        private string GetSourceName()
        {
            System.Collections.Generic.List<string> productList = new System.Collections.Generic.List<string>();
            foreach (var product in this?.source ?? Enumerable.Empty<DigicircMatchmaking.BO.Material>())
            {
                productList.Add((product?.Name ?? ""));
            }
            return string.Join(",", productList);
        }

        private string GetEnvironmentalEffects()
        {
            if (((this?.environmentalEffects?.Length ?? 0) < 50))
            {
                return (this?.environmentalEffects ?? "");
            }
            else
            {
                return (this?.environmentalEffects?.Substring(0, 50) ?? "") + "...";
            }
        }

        #endregion
        #region Methods

        public virtual List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            if (Id == null)
            {
                __errors.Add("Property 'Id' is required.");
            }
            if (Name != null && Name.Length > 2147483647)
            {
                __errors.Add("Length of property 'Name' cannot be greater than 2147483647.");
            }
            if (Notes != null && Notes.Length > 2147483647)
            {
                __errors.Add("Length of property 'Notes' cannot be greater than 2147483647.");
            }
            if (Ref != null && Ref.Length > 2147483647)
            {
                __errors.Add("Length of property 'Ref' cannot be greater than 2147483647.");
            }
            if (ProductName != null && ProductName.Length > 100)
            {
                __errors.Add("Length of property 'ProductName' cannot be greater than 100.");
            }
            if (SourceName != null && SourceName.Length > 100)
            {
                __errors.Add("Length of property 'SourceName' cannot be greater than 100.");
            }
            if (EnvironmentalEffects != null && EnvironmentalEffects.Length > 2147483647)
            {
                __errors.Add("Length of property 'EnvironmentalEffects' cannot be greater than 2147483647.");
            }
            if (ShortEnvironmentalEffects != null && ShortEnvironmentalEffects.Length > 100)
            {
                __errors.Add("Length of property 'ShortEnvironmentalEffects' cannot be greater than 100.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'Process' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (Id?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Name?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Notes?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Ref?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ProductName?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (SourceName?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (EnvironmentalEffects?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ShortEnvironmentalEffects?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [Process] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual Process Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, Process copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (Process)copiedObjects[this];
            copy = copy ?? new Process();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
                copy.Id = this.Id;
            }
            copy.Name = this.Name;
            copy.Notes = this.Notes;
            copy.Ref = this.Ref;
            copy.ProductName = this.ProductName;
            copy.SourceName = this.SourceName;
            copy.EnvironmentalEffects = this.EnvironmentalEffects;
            copy.ShortEnvironmentalEffects = this.ShortEnvironmentalEffects;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            copy.product = new List<Material>();
            if(deep && this.product != null)
            {
                foreach (var __item in this.product)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddProduct(__item);
                        else
                            copy.AddProduct(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddProduct((Material)copiedObjects[__item]);
                    }
                }
            }
            copy.source = new List<Material>();
            if(deep && this.source != null)
            {
                foreach (var __item in this.source)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddSource(__item);
                        else
                            copy.AddSource(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddSource((Material)copiedObjects[__item]);
                    }
                }
            }
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as Process;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(Process x, Process y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(Process x, Process y)
        {
            return !(x == y);
        }

        private PropertyInfo __propertyKeyCache;
        public virtual PropertyInfo GetPrimaryKey()
        {
            if (__propertyKeyCache == null)
            {
                __propertyKeyCache = this.GetType().GetProperty("Id");
            }
            return __propertyKeyCache;
        }


/// <summary>
///     To help ensure hashcode uniqueness, a carefully selected random number multiplier
///     is used within the calculation.  Goodrich and Tamassia's Data Structures and
///     Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
///     of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
///     for more information.
/// </summary>
        private const int HashMultiplier = 31;
        private int? cachedHashcode;

        public override int GetHashCode()
        {
            if (this.cachedHashcode.HasValue)
            {
                return this.cachedHashcode.Value;
            }
            if (this.IsTransient())
            {
                //this.cachedHashcode = base.GetHashCode();
                return this.TransientId.GetHashCode(); //don't cache because this won't stay transient forever
            }
            else
            {
                unchecked
                {
                    // It's possible for two objects to return the same hash code based on
                    // identically valued properties, even if they're of two different types,
                    // so we include the object's type in the hash calculation
                    var hashCode = this.GetType().GetHashCode();
                    this.cachedHashcode = (hashCode * HashMultiplier) ^ this.Id.GetHashCode();
                }
            }
            return this.cachedHashcode.Value;
        }

/// <summary>
///     Transient objects are not associated with an item already in storage.  For instance,
///     a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed
///     objects to be lazily loaded.
/// </summary>
        public virtual bool IsTransient()
        {
            return this.Id == default(int) || this.Id.Equals(default(int));
        }

/// <summary>
///     When NHibernate proxies objects, it masks the type of the actual entity object.
///     This wrapper burrows into the proxied object to get its actual type.
///
///     Although this assumes NHibernate is being used, it doesn't require any NHibernate
///     related dependencies and has no bad side effects if NHibernate isn't being used.
///
///     Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
/// </summary>
        protected virtual System.Type GetTypeUnproxied()
        {
            return this.GetType();
        }

/// <summary>
///     Returns true if self and the provided entity have the same Id values
///     and the Ids are not of the default Id value
/// </summary>
        protected bool HasSameNonDefaultIdAs(Process compareTo)
        {
            return !this.IsTransient() && !compareTo.IsTransient() && this.Id.Equals(compareTo.Id);
        }

        #endregion


    }
}
