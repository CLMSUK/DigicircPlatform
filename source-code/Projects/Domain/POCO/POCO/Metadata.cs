// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DigicircMatchmaking.BO
{
    /// <summary>
    /// The Metadata class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    public class Metadata
    {
        #region Metadata's Fields

        protected Guid _transientId= Guid.NewGuid();
        public virtual Guid TransientId
        {
            get
            {
                return _transientId;
            }
            set
            {
                _transientId = value;
            }
        }
        [DataMember(Name="ExportDataAsJson")]
        protected bool exportDataAsJson;
        [DataMember(Name="Pages")]
        protected int? pages;
        [DataMember(Name="PageSize")]
        protected int? pageSize;
        [DataMember(Name="QueryElapsedTime")]
        protected int? queryElapsedTime;
        [DataMember(Name="TotalResponseElementsWithPositiveRelevanceLevel")]
        protected int? totalResponseElementsWithPositiveRelevanceLevel;
        [DataMember(Name="Elements")]
        protected int? elements;
        [DataMember(Name="Relations")]
        protected int? relations;
        [DataMember(Name="ExportType")]
        protected string exportType;
        [DataMember(Name="MetadataKey")]
        protected int? metadataKey = 0;
        #endregion
        #region Metadata's Properties
/// <summary>
/// The ExportDataAsJson property
///
/// </summary>
///
        public virtual bool ExportDataAsJson
        {
            get
            {
                return exportDataAsJson;
            }
            set
            {
                exportDataAsJson = value;
            }
        }
/// <summary>
/// The Pages property
///
/// </summary>
///
        public virtual int? Pages
        {
            get
            {
                return pages;
            }
            set
            {
                pages = value;
            }
        }
/// <summary>
/// The PageSize property
///
/// </summary>
///
        public virtual int? PageSize
        {
            get
            {
                return pageSize;
            }
            set
            {
                pageSize = value;
            }
        }
/// <summary>
/// The QueryElapsedTime property
///
/// </summary>
///
        public virtual int? QueryElapsedTime
        {
            get
            {
                return queryElapsedTime;
            }
            set
            {
                queryElapsedTime = value;
            }
        }
/// <summary>
/// The TotalResponseElementsWithPositiveRelevanceLevel property
///
/// </summary>
///
        public virtual int? TotalResponseElementsWithPositiveRelevanceLevel
        {
            get
            {
                return totalResponseElementsWithPositiveRelevanceLevel;
            }
            set
            {
                totalResponseElementsWithPositiveRelevanceLevel = value;
            }
        }
/// <summary>
/// The Elements property
///
/// </summary>
///
        public virtual int? Elements
        {
            get
            {
                return elements;
            }
            set
            {
                elements = value;
            }
        }
/// <summary>
/// The Relations property
///
/// </summary>
///
        public virtual int? Relations
        {
            get
            {
                return relations;
            }
            set
            {
                relations = value;
            }
        }
/// <summary>
/// The ExportType property
///
/// </summary>
///
        public virtual string ExportType
        {
            get
            {
                return exportType;
            }
            set
            {
                exportType = value;
            }
        }
/// <summary>
/// The MetadataKey property
///
/// </summary>
///
        [Key]
        public virtual int? MetadataKey
        {
            get
            {
                return metadataKey;
            }
            set
            {
                metadataKey = value;
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the Metadata class
/// </summary>
/// <returns>New Metadata object</returns>
/// <remarks></remarks>
        public Metadata() {}
        #endregion
        #region Methods

        public virtual List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            if (ExportType != null && ExportType.Length > 100)
            {
                __errors.Add("Length of property 'ExportType' cannot be greater than 100.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'Metadata' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (ExportDataAsJson.GetHashCode() );
            hashCode = hashCode * -1521134295 + (Pages?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PageSize?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (QueryElapsedTime?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (TotalResponseElementsWithPositiveRelevanceLevel?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Elements?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Relations?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ExportType?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (MetadataKey?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [Metadata] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual Metadata Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, Metadata copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (Metadata)copiedObjects[this];
            copy = copy ?? new Metadata();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
                copy.MetadataKey = this.MetadataKey;
            }
            copy.ExportDataAsJson = this.ExportDataAsJson;
            copy.Pages = this.Pages;
            copy.PageSize = this.PageSize;
            copy.QueryElapsedTime = this.QueryElapsedTime;
            copy.TotalResponseElementsWithPositiveRelevanceLevel = this.TotalResponseElementsWithPositiveRelevanceLevel;
            copy.Elements = this.Elements;
            copy.Relations = this.Relations;
            copy.ExportType = this.ExportType;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as Metadata;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(Metadata x, Metadata y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(Metadata x, Metadata y)
        {
            return !(x == y);
        }

        private PropertyInfo __propertyKeyCache;
        public virtual PropertyInfo GetPrimaryKey()
        {
            if (__propertyKeyCache == null)
            {
                __propertyKeyCache = this.GetType().GetProperty("MetadataKey");
            }
            return __propertyKeyCache;
        }


/// <summary>
///     To help ensure hashcode uniqueness, a carefully selected random number multiplier
///     is used within the calculation.  Goodrich and Tamassia's Data Structures and
///     Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
///     of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
///     for more information.
/// </summary>
        private const int HashMultiplier = 31;
        private int? cachedHashcode;

        public override int GetHashCode()
        {
            if (this.cachedHashcode.HasValue)
            {
                return this.cachedHashcode.Value;
            }
            if (this.IsTransient())
            {
                //this.cachedHashcode = base.GetHashCode();
                return this.TransientId.GetHashCode(); //don't cache because this won't stay transient forever
            }
            else
            {
                unchecked
                {
                    // It's possible for two objects to return the same hash code based on
                    // identically valued properties, even if they're of two different types,
                    // so we include the object's type in the hash calculation
                    var hashCode = this.GetType().GetHashCode();
                    this.cachedHashcode = (hashCode * HashMultiplier) ^ this.MetadataKey.GetHashCode();
                }
            }
            return this.cachedHashcode.Value;
        }

/// <summary>
///     Transient objects are not associated with an item already in storage.  For instance,
///     a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed
///     objects to be lazily loaded.
/// </summary>
        public virtual bool IsTransient()
        {
            return this.MetadataKey == default(int) || this.MetadataKey.Equals(default(int));
        }

/// <summary>
///     When NHibernate proxies objects, it masks the type of the actual entity object.
///     This wrapper burrows into the proxied object to get its actual type.
///
///     Although this assumes NHibernate is being used, it doesn't require any NHibernate
///     related dependencies and has no bad side effects if NHibernate isn't being used.
///
///     Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
/// </summary>
        protected virtual System.Type GetTypeUnproxied()
        {
            return this.GetType();
        }

/// <summary>
///     Returns true if self and the provided entity have the same Id values
///     and the Ids are not of the default Id value
/// </summary>
        protected bool HasSameNonDefaultIdAs(Metadata compareTo)
        {
            return !this.IsTransient() && !compareTo.IsTransient() && this.MetadataKey.Equals(compareTo.MetadataKey);
        }

        #endregion


    }
}
