// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DigicircMatchmaking.BO
{
    /// <summary>
    /// The CircularEconomyReport class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    public class CircularEconomyReport : IDomainModelClass
    {
        #region CircularEconomyReport's Fields

        protected Guid _transientId= Guid.NewGuid();
        public virtual Guid TransientId
        {
            get
            {
                return _transientId;
            }
            set
            {
                _transientId = value;
            }
        }
        [DataMember(Name="Id")]
        protected int? id = 0;
        [DataMember(Name="ExperienceInCircularEconomy")]
        protected bool experienceInCircularEconomy;
        [DataMember(Name="SpecifyExperienceInCircularEconomy")]
        protected string specifyExperienceInCircularEconomy;
        [DataMember(Name="DigitalExpertise")]
        protected DigicircMatchmaking.BO.DigitalExpertise? digitalExpertise;
        [DataMember(Name="DigitalProviredNeeded")]
        protected bool digitalProviredNeeded;
        [DataMember(Name="ThematicExpertiseNeeded")]
        protected bool thematicExpertiseNeeded;
        [DataMember(Name="GetExperienceInCircularEconomy")]
        protected string getExperienceInCircularEconomy;
        [DataMember(Name="VersionTimestamp")]
        protected int? versionTimestamp;

#pragma warning disable 0649
        private bool disableInternalAdditions;
#pragma warning restore 0649
        #endregion
        #region CircularEconomyReport's Properties
/// <summary>
/// The Id property
///
/// </summary>
///
        [Key]
        public virtual int? Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }
/// <summary>
/// The ExperienceInCircularEconomy property
///
/// </summary>
///
        public virtual bool ExperienceInCircularEconomy
        {
            get
            {
                return experienceInCircularEconomy;
            }
            set
            {
                experienceInCircularEconomy = value;
            }
        }
/// <summary>
/// The SpecifyExperienceInCircularEconomy property
///
/// </summary>
///
        public virtual string SpecifyExperienceInCircularEconomy
        {
            get
            {
                return specifyExperienceInCircularEconomy;
            }
            set
            {
                specifyExperienceInCircularEconomy = value;
            }
        }
/// <summary>
/// The DigitalExpertise property
///
/// </summary>
///
        public virtual DigicircMatchmaking.BO.DigitalExpertise? DigitalExpertise
        {
            get
            {
                return digitalExpertise;
            }
            set
            {
                digitalExpertise = value;
            }
        }
/// <summary>
/// The DigitalProviredNeeded property
///
/// </summary>
///
        public virtual bool DigitalProviredNeeded
        {
            get
            {
                return digitalProviredNeeded;
            }
            set
            {
                digitalProviredNeeded = value;
            }
        }
/// <summary>
/// The ThematicExpertiseNeeded property
///
/// </summary>
///
        public virtual bool ThematicExpertiseNeeded
        {
            get
            {
                return thematicExpertiseNeeded;
            }
            set
            {
                thematicExpertiseNeeded = value;
            }
        }
/// <summary>
/// The GetExperienceInCircularEconomy property
///
/// </summary>
///
        public virtual string GetExperienceInCircularEconomy
        {
            get
            {
                var __valToGet = GetGetExperienceInCircularEconomy();
                return __valToGet;
            }
            set
            {
                getExperienceInCircularEconomy = value;
            }
        }
/// <summary>
/// The VersionTimestamp property
///Provides concurrency control for the class
/// </summary>
///
        public virtual int? VersionTimestamp
        {
            get
            {
                return versionTimestamp;
            }
            set
            {
                versionTimestamp = value;
            }
        }
        #endregion
        #region CircularEconomyReport's Participant Properties
        [DataMember(Name="DesiredThematicExpertises")]
        protected IList<ThematicExpertise> desiredThematicExpertises = new List<ThematicExpertise>();
        public virtual List<ThematicExpertise> DesiredThematicExpertises
        {
            get
            {
                if (desiredThematicExpertises is ThematicExpertise[])
                {
                    desiredThematicExpertises = desiredThematicExpertises.ToList();
                }
                if (desiredThematicExpertises == null)
                {
                    desiredThematicExpertises = new List<ThematicExpertise>();
                }
                return desiredThematicExpertises.ToList();
            }
            set
            {
                if (desiredThematicExpertises is ThematicExpertise[])
                {
                    desiredThematicExpertises = desiredThematicExpertises.ToList();
                }
                if (desiredThematicExpertises != null)
                {
                    var __itemsToDelete = new List<ThematicExpertise>(desiredThematicExpertises);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveDesiredThematicExpertises(__item);
                    }
                }
                if(value == null)
                {
                    desiredThematicExpertises = new List<ThematicExpertise>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddDesiredThematicExpertises(__item);
                }
            }
        }
        public virtual void AddDesiredThematicExpertises(IList<ThematicExpertise> __items)
        {
            foreach (var __item in __items)
            {
                AddDesiredThematicExpertises(__item);
            }
        }

        public virtual void InternalAddDesiredThematicExpertises(ThematicExpertise __item)
        {
            if (__item == null || disableInternalAdditions) return;
            desiredThematicExpertises?.Add(__item);
        }

        public virtual void InternalRemoveDesiredThematicExpertises(ThematicExpertise __item)
        {
            if (__item == null) return;
            desiredThematicExpertises?.Remove(__item);
        }

        public virtual void AddDesiredThematicExpertises(ThematicExpertise __item)
        {
            if (__item == null) return;
            if (!desiredThematicExpertises.Contains(__item))
                InternalAddDesiredThematicExpertises(__item);
        }

        public virtual void AddAtIndexDesiredThematicExpertises(int index, ThematicExpertise __item)
        {
            if (__item == null) return;
            if (!desiredThematicExpertises.Contains(__item))
                desiredThematicExpertises.Insert(index, __item);
        }

        public virtual void RemoveDesiredThematicExpertises(ThematicExpertise __item)
        {
            if (__item != null)
            {
                InternalRemoveDesiredThematicExpertises(__item);
            }
        }
        public virtual void SetDesiredThematicExpertisesAt(ThematicExpertise __item, int __index)
        {
            if (__item == null)
            {
                desiredThematicExpertises[__index] = null;
            }
            else
            {
                desiredThematicExpertises[__index] = __item;
            }
        }

        public virtual void ClearDesiredThematicExpertises()
        {
            if (desiredThematicExpertises!=null)
            {
                var __itemsToRemove = desiredThematicExpertises.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveDesiredThematicExpertises(__item);
                }
            }
        }
        [DataMember(Name="DesiredSMESector")]
        protected SectorType desiredSMESector;
        public virtual SectorType DesiredSMESector
        {
            get
            {
                return desiredSMESector;
            }
            set
            {
                if(Equals(desiredSMESector, value)) return;
                var __oldValue = desiredSMESector;
                if (value != null)
                {
                    desiredSMESector = value;
                }
                else
                {
                    if (desiredSMESector != null)
                    {
                        desiredSMESector = null;
                    }
                }
            }
        }
        [DataMember(Name="DesiredGeographicalArea")]
        protected IList<GeographicalArea> desiredGeographicalArea = new List<GeographicalArea>();
        public virtual List<GeographicalArea> DesiredGeographicalArea
        {
            get
            {
                if (desiredGeographicalArea is GeographicalArea[])
                {
                    desiredGeographicalArea = desiredGeographicalArea.ToList();
                }
                if (desiredGeographicalArea == null)
                {
                    desiredGeographicalArea = new List<GeographicalArea>();
                }
                return desiredGeographicalArea.ToList();
            }
            set
            {
                if (desiredGeographicalArea is GeographicalArea[])
                {
                    desiredGeographicalArea = desiredGeographicalArea.ToList();
                }
                if (desiredGeographicalArea != null)
                {
                    var __itemsToDelete = new List<GeographicalArea>(desiredGeographicalArea);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveDesiredGeographicalArea(__item);
                    }
                }
                if(value == null)
                {
                    desiredGeographicalArea = new List<GeographicalArea>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddDesiredGeographicalArea(__item);
                }
            }
        }
        public virtual void AddDesiredGeographicalArea(IList<GeographicalArea> __items)
        {
            foreach (var __item in __items)
            {
                AddDesiredGeographicalArea(__item);
            }
        }

        public virtual void InternalAddDesiredGeographicalArea(GeographicalArea __item)
        {
            if (__item == null || disableInternalAdditions) return;
            desiredGeographicalArea?.Add(__item);
        }

        public virtual void InternalRemoveDesiredGeographicalArea(GeographicalArea __item)
        {
            if (__item == null) return;
            desiredGeographicalArea?.Remove(__item);
        }

        public virtual void AddDesiredGeographicalArea(GeographicalArea __item)
        {
            if (__item == null) return;
            InternalAddDesiredGeographicalArea(__item);
        }

        public virtual void AddAtIndexDesiredGeographicalArea(int index, GeographicalArea __item)
        {
            if (__item == null) return;
            desiredGeographicalArea?.Insert(index, __item);
        }

        public virtual void RemoveDesiredGeographicalArea(GeographicalArea __item)
        {
            if (__item != null)
            {
                InternalRemoveDesiredGeographicalArea(__item);
            }
        }
        public virtual void SetDesiredGeographicalAreaAt(GeographicalArea __item, int __index)
        {
            if (__item == null)
            {
                desiredGeographicalArea[__index] = null;
            }
            else
            {
                desiredGeographicalArea[__index] = __item;
            }
        }

        public virtual void ClearDesiredGeographicalArea()
        {
            if (desiredGeographicalArea!=null)
            {
                var __itemsToRemove = desiredGeographicalArea.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveDesiredGeographicalArea(__item);
                }
            }
        }
        [DataMember(Name="Resources")]
        protected IList<Product> resources = new List<Product>();
        public virtual List<Product> Resources
        {
            get
            {
                if (resources is Product[])
                {
                    resources = resources.ToList();
                }
                if (resources == null)
                {
                    resources = new List<Product>();
                }
                return resources.ToList();
            }
            set
            {
                if (resources is Product[])
                {
                    resources = resources.ToList();
                }
                if (resources != null)
                {
                    var __itemsToDelete = new List<Product>(resources);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveResources(__item);
                    }
                }
                if(value == null)
                {
                    resources = new List<Product>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddResources(__item);
                }
            }
        }
        public virtual void AddResources(IList<Product> __items)
        {
            foreach (var __item in __items)
            {
                AddResources(__item);
            }
        }

        public virtual void InternalAddResources(Product __item)
        {
            if (__item == null || disableInternalAdditions) return;
            resources?.Add(__item);
        }

        public virtual void InternalRemoveResources(Product __item)
        {
            if (__item == null) return;
            resources?.Remove(__item);
        }

        public virtual void AddResources(Product __item)
        {
            if (__item == null) return;
            InternalAddResources(__item);
        }

        public virtual void AddAtIndexResources(int index, Product __item)
        {
            if (__item == null) return;
            resources?.Insert(index, __item);
        }

        public virtual void RemoveResources(Product __item)
        {
            if (__item != null)
            {
                InternalRemoveResources(__item);
            }
        }
        public virtual void SetResourcesAt(Product __item, int __index)
        {
            if (__item == null)
            {
                resources[__index] = null;
            }
            else
            {
                resources[__index] = __item;
            }
        }

        public virtual void ClearResources()
        {
            if (resources!=null)
            {
                var __itemsToRemove = resources.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveResources(__item);
                }
            }
        }
        [DataMember(Name="DesiredResources")]
        protected IList<Product> desiredResources = new List<Product>();
        public virtual List<Product> DesiredResources
        {
            get
            {
                if (desiredResources is Product[])
                {
                    desiredResources = desiredResources.ToList();
                }
                if (desiredResources == null)
                {
                    desiredResources = new List<Product>();
                }
                return desiredResources.ToList();
            }
            set
            {
                if (desiredResources is Product[])
                {
                    desiredResources = desiredResources.ToList();
                }
                if (desiredResources != null)
                {
                    var __itemsToDelete = new List<Product>(desiredResources);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveDesiredResources(__item);
                    }
                }
                if(value == null)
                {
                    desiredResources = new List<Product>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddDesiredResources(__item);
                }
            }
        }
        public virtual void AddDesiredResources(IList<Product> __items)
        {
            foreach (var __item in __items)
            {
                AddDesiredResources(__item);
            }
        }

        public virtual void InternalAddDesiredResources(Product __item)
        {
            if (__item == null || disableInternalAdditions) return;
            desiredResources?.Add(__item);
        }

        public virtual void InternalRemoveDesiredResources(Product __item)
        {
            if (__item == null) return;
            desiredResources?.Remove(__item);
        }

        public virtual void AddDesiredResources(Product __item)
        {
            if (__item == null) return;
            InternalAddDesiredResources(__item);
        }

        public virtual void AddAtIndexDesiredResources(int index, Product __item)
        {
            if (__item == null) return;
            desiredResources?.Insert(index, __item);
        }

        public virtual void RemoveDesiredResources(Product __item)
        {
            if (__item != null)
            {
                InternalRemoveDesiredResources(__item);
            }
        }
        public virtual void SetDesiredResourcesAt(Product __item, int __index)
        {
            if (__item == null)
            {
                desiredResources[__index] = null;
            }
            else
            {
                desiredResources[__index] = __item;
            }
        }

        public virtual void ClearDesiredResources()
        {
            if (desiredResources!=null)
            {
                var __itemsToRemove = desiredResources.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveDesiredResources(__item);
                }
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the CircularEconomyReport class
/// </summary>
/// <returns>New CircularEconomyReport object</returns>
/// <remarks></remarks>
        public CircularEconomyReport() {}
        #endregion
        #region Accessors Implementation
        private string GetGetExperienceInCircularEconomy()
        {
            return (this?.experienceInCircularEconomy ?? false) ? "yes" : "no";
        }

        #endregion
        #region Methods

        public virtual List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            if (Id == null)
            {
                __errors.Add("Property 'Id' is required.");
            }
            if (SpecifyExperienceInCircularEconomy != null && SpecifyExperienceInCircularEconomy.Length > 250)
            {
                __errors.Add("Length of property 'SpecifyExperienceInCircularEconomy' cannot be greater than 250.");
            }
            if (GetExperienceInCircularEconomy != null && GetExperienceInCircularEconomy.Length > 100)
            {
                __errors.Add("Length of property 'GetExperienceInCircularEconomy' cannot be greater than 100.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'CircularEconomyReport' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (Id?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ExperienceInCircularEconomy.GetHashCode() );
            hashCode = hashCode * -1521134295 + (SpecifyExperienceInCircularEconomy?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (DigitalExpertise?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (DigitalProviredNeeded.GetHashCode() );
            hashCode = hashCode * -1521134295 + (ThematicExpertiseNeeded.GetHashCode() );
            hashCode = hashCode * -1521134295 + (GetExperienceInCircularEconomy?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [CircularEconomyReport] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual CircularEconomyReport Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, CircularEconomyReport copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (CircularEconomyReport)copiedObjects[this];
            copy = copy ?? new CircularEconomyReport();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
                copy.Id = this.Id;
            }
            copy.ExperienceInCircularEconomy = this.ExperienceInCircularEconomy;
            copy.SpecifyExperienceInCircularEconomy = this.SpecifyExperienceInCircularEconomy;
            copy.DigitalExpertise = this.DigitalExpertise;
            copy.DigitalProviredNeeded = this.DigitalProviredNeeded;
            copy.ThematicExpertiseNeeded = this.ThematicExpertiseNeeded;
            copy.GetExperienceInCircularEconomy = this.GetExperienceInCircularEconomy;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            copy.desiredThematicExpertises = new List<ThematicExpertise>();
            if(deep && this.desiredThematicExpertises != null)
            {
                foreach (var __item in this.desiredThematicExpertises)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddDesiredThematicExpertises(__item);
                        else
                            copy.AddDesiredThematicExpertises(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddDesiredThematicExpertises((ThematicExpertise)copiedObjects[__item]);
                    }
                }
            }
            if(deep && this.desiredSMESector != null)
            {
                if (!copiedObjects.Contains(this.desiredSMESector))
                {
                    if (asNew && reuseNestedObjects)
                        copy.DesiredSMESector = this.DesiredSMESector;
                    else if (asNew)
                        copy.DesiredSMESector = this.DesiredSMESector.Copy(deep, copiedObjects, true);
                    else
                        copy.desiredSMESector = this.desiredSMESector.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.DesiredSMESector = (SectorType)copiedObjects[this.DesiredSMESector];
                    else
                        copy.desiredSMESector = (SectorType)copiedObjects[this.DesiredSMESector];
                }
            }
            copy.desiredGeographicalArea = new List<GeographicalArea>();
            if(deep && this.desiredGeographicalArea != null)
            {
                foreach (var __item in this.desiredGeographicalArea)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddDesiredGeographicalArea(__item);
                        else
                            copy.AddDesiredGeographicalArea(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddDesiredGeographicalArea((GeographicalArea)copiedObjects[__item]);
                    }
                }
            }
            copy.resources = new List<Product>();
            if(deep && this.resources != null)
            {
                foreach (var __item in this.resources)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddResources(__item);
                        else
                            copy.AddResources(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddResources((Product)copiedObjects[__item]);
                    }
                }
            }
            copy.desiredResources = new List<Product>();
            if(deep && this.desiredResources != null)
            {
                foreach (var __item in this.desiredResources)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddDesiredResources(__item);
                        else
                            copy.AddDesiredResources(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddDesiredResources((Product)copiedObjects[__item]);
                    }
                }
            }
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as CircularEconomyReport;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(CircularEconomyReport x, CircularEconomyReport y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(CircularEconomyReport x, CircularEconomyReport y)
        {
            return !(x == y);
        }

        private PropertyInfo __propertyKeyCache;
        public virtual PropertyInfo GetPrimaryKey()
        {
            if (__propertyKeyCache == null)
            {
                __propertyKeyCache = this.GetType().GetProperty("Id");
            }
            return __propertyKeyCache;
        }


/// <summary>
///     To help ensure hashcode uniqueness, a carefully selected random number multiplier
///     is used within the calculation.  Goodrich and Tamassia's Data Structures and
///     Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
///     of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
///     for more information.
/// </summary>
        private const int HashMultiplier = 31;
        private int? cachedHashcode;

        public override int GetHashCode()
        {
            if (this.cachedHashcode.HasValue)
            {
                return this.cachedHashcode.Value;
            }
            if (this.IsTransient())
            {
                //this.cachedHashcode = base.GetHashCode();
                return this.TransientId.GetHashCode(); //don't cache because this won't stay transient forever
            }
            else
            {
                unchecked
                {
                    // It's possible for two objects to return the same hash code based on
                    // identically valued properties, even if they're of two different types,
                    // so we include the object's type in the hash calculation
                    var hashCode = this.GetType().GetHashCode();
                    this.cachedHashcode = (hashCode * HashMultiplier) ^ this.Id.GetHashCode();
                }
            }
            return this.cachedHashcode.Value;
        }

/// <summary>
///     Transient objects are not associated with an item already in storage.  For instance,
///     a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed
///     objects to be lazily loaded.
/// </summary>
        public virtual bool IsTransient()
        {
            return this.Id == default(int) || this.Id.Equals(default(int));
        }

/// <summary>
///     When NHibernate proxies objects, it masks the type of the actual entity object.
///     This wrapper burrows into the proxied object to get its actual type.
///
///     Although this assumes NHibernate is being used, it doesn't require any NHibernate
///     related dependencies and has no bad side effects if NHibernate isn't being used.
///
///     Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
/// </summary>
        protected virtual System.Type GetTypeUnproxied()
        {
            return this.GetType();
        }

/// <summary>
///     Returns true if self and the provided entity have the same Id values
///     and the Ids are not of the default Id value
/// </summary>
        protected bool HasSameNonDefaultIdAs(CircularEconomyReport compareTo)
        {
            return !this.IsTransient() && !compareTo.IsTransient() && this.Id.Equals(compareTo.Id);
        }

        #endregion


    }
}
