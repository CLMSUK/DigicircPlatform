// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DigicircMatchmaking.BO
{
    /// <summary>
    /// The Actor class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    public class Actor : IDomainModelClass
    {
        #region Actor's Fields

        protected Guid _transientId= Guid.NewGuid();
        public virtual Guid TransientId
        {
            get
            {
                return _transientId;
            }
            set
            {
                _transientId = value;
            }
        }
        [DataMember(Name="Id")]
        protected int? id = 0;
        [DataMember(Name="Name")]
        protected string name;
        [DataMember(Name="Description")]
        protected string description;
        [DataMember(Name="ShortDescription")]
        protected string shortDescription;
        [DataMember(Name="Url")]
        protected string url;
        [DataMember(Name="Email")]
        protected string email;
        [DataMember(Name="SpecifiedEnityType")]
        protected string specifiedEnityType;
        [DataMember(Name="MemberOfCluster")]
        protected bool memberOfCluster;
        [DataMember(Name="GetCountOfClusterMembers")]
        protected int? getCountOfClusterMembers;
        [DataMember(Name="ClusterName")]
        protected string clusterName;
        [DataMember(Name="Keywords")]
        protected string keywords;
        [DataMember(Name="HasSites")]
        protected bool hasSites;
        [DataMember(Name="VersionTimestamp")]
        protected int? versionTimestamp;

#pragma warning disable 0649
        private bool disableInternalAdditions;
#pragma warning restore 0649
        #endregion
        #region Actor's Properties
/// <summary>
/// The Id property
///
/// </summary>
///
        [Key]
        public virtual int? Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }
/// <summary>
/// The Name property
///
/// </summary>
///
        public virtual string Name
        {
            get
            {
                return name;
            }
            set
            {
                name = value;
            }
        }
/// <summary>
/// The Description property
///
/// </summary>
///
        public virtual string Description
        {
            get
            {
                return description;
            }
            set
            {
                description = value;
            }
        }
/// <summary>
/// The ShortDescription property
///
/// </summary>
///
        public virtual string ShortDescription
        {
            get
            {
                var __valToGet = GetShortDescription();
                return __valToGet;
            }
            set
            {
                shortDescription = value;
            }
        }
/// <summary>
/// The Url property
///
/// </summary>
///
        public virtual string Url
        {
            get
            {
                return url;
            }
            set
            {
                url = value;
            }
        }
/// <summary>
/// The Email property
///
/// </summary>
///
        public virtual string Email
        {
            get
            {
                return email;
            }
            set
            {
                email = value;
            }
        }
/// <summary>
/// The SpecifiedEnityType property
///
/// </summary>
///
        public virtual string SpecifiedEnityType
        {
            get
            {
                return specifiedEnityType;
            }
            set
            {
                specifiedEnityType = value;
            }
        }
/// <summary>
/// The MemberOfCluster property
///
/// </summary>
///
        public virtual bool MemberOfCluster
        {
            get
            {
                return memberOfCluster;
            }
            set
            {
                memberOfCluster = value;
            }
        }
/// <summary>
/// The GetCountOfClusterMembers property
///
/// </summary>
///
        public virtual int? GetCountOfClusterMembers
        {
            get
            {
                var __valToGet = GetGetCountOfClusterMembers();
                return __valToGet;
            }
            set
            {
                getCountOfClusterMembers = value;
            }
        }
/// <summary>
/// The ClusterName property
///
/// </summary>
///
        public virtual string ClusterName
        {
            get
            {
                return clusterName;
            }
            set
            {
                clusterName = value;
            }
        }
/// <summary>
/// The Keywords property
///
/// </summary>
///
        public virtual string Keywords
        {
            get
            {
                return keywords;
            }
            set
            {
                keywords = value;
            }
        }
/// <summary>
/// The HasSites property
///
/// </summary>
///
        public virtual bool HasSites
        {
            get
            {
                return hasSites;
            }
            set
            {
                hasSites = value;
            }
        }
/// <summary>
/// The VersionTimestamp property
///Provides concurrency control for the class
/// </summary>
///
        public virtual int? VersionTimestamp
        {
            get
            {
                return versionTimestamp;
            }
            set
            {
                versionTimestamp = value;
            }
        }
        #endregion
        #region Actor's Participant Properties
        [DataMember(Name="Address")]
        protected Address address;
        public virtual Address Address
        {
            get
            {
                return address;
            }
            set
            {
                if(Equals(address, value)) return;
                var __oldValue = address;
                if (value != null)
                {
                    address = value;
                }
                else
                {
                    if (address != null)
                    {
                        address = null;
                    }
                }
            }
        }
        [DataMember(Name="AddedBy")]
        protected DigicircUser addedBy;
        public virtual DigicircUser AddedBy
        {
            get
            {
                return addedBy;
            }
            set
            {
                if(Equals(addedBy, value)) return;
                var __oldValue = addedBy;
                if (value != null)
                {
                    addedBy = value;
                }
                else
                {
                    if (addedBy != null)
                    {
                        addedBy = null;
                    }
                }
            }
        }
        [DataMember(Name="CircularEconomyRequirements")]
        protected CircularEconomyReport circularEconomyRequirements;
        public virtual CircularEconomyReport CircularEconomyRequirements
        {
            get
            {
                return circularEconomyRequirements;
            }
            set
            {
                if(Equals(circularEconomyRequirements, value)) return;
                var __oldValue = circularEconomyRequirements;
                if (value != null)
                {
                    circularEconomyRequirements = value;
                }
                else
                {
                    if (circularEconomyRequirements != null)
                    {
                        circularEconomyRequirements = null;
                    }
                }
            }
        }
        [DataMember(Name="CircularEconomyProviderReport")]
        protected CircularEconomyProviderReport circularEconomyProviderReport;
        public virtual CircularEconomyProviderReport CircularEconomyProviderReport
        {
            get
            {
                return circularEconomyProviderReport;
            }
            set
            {
                if(Equals(circularEconomyProviderReport, value)) return;
                var __oldValue = circularEconomyProviderReport;
                if (value != null)
                {
                    circularEconomyProviderReport = value;
                }
                else
                {
                    if (circularEconomyProviderReport != null)
                    {
                        circularEconomyProviderReport = null;
                    }
                }
            }
        }
        [DataMember(Name="ActorLogo")]
        protected FileData actorLogo;
        public virtual FileData ActorLogo
        {
            get
            {
                return actorLogo;
            }
            set
            {
                if(Equals(actorLogo, value)) return;
                var __oldValue = actorLogo;
                if (value != null)
                {
                    actorLogo = value;
                }
                else
                {
                    if (actorLogo != null)
                    {
                        actorLogo = null;
                    }
                }
            }
        }
        [DataMember(Name="Cluster")]
        protected Actor cluster;
        public virtual Actor Cluster
        {
            get
            {
                return cluster;
            }
            set
            {
                if(Equals(cluster, value)) return;
                var __oldValue = cluster;
                cluster?.InternalRemoveActors(this);
                cluster = value;
                if (value != null)
                {
                    cluster.InternalAddActors(this);
                }
            }
        }
        [DataMember(Name="Actors")]
        protected IList<Actor> actors = new List<Actor>();
        public virtual List<Actor> Actors
        {
            get
            {
                if (actors is Actor[])
                {
                    actors = actors.ToList();
                }
                if (actors == null)
                {
                    actors = new List<Actor>();
                }
                return actors.ToList();
            }
            set
            {
                if (actors is Actor[])
                {
                    actors = actors.ToList();
                }
                if (actors != null)
                {
                    var __itemsToDelete = new List<Actor>(actors);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveActors(__item);
                    }
                }
                if(value == null)
                {
                    actors = new List<Actor>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddActors(__item);
                }
            }
        }
        public virtual void AddActors(IList<Actor> __items)
        {
            foreach (var __item in __items)
            {
                AddActors(__item);
            }
        }

        public virtual void InternalAddActors(Actor __item)
        {
            if (__item == null || disableInternalAdditions) return;
            actors?.Add(__item);
        }

        public virtual void InternalRemoveActors(Actor __item)
        {
            if (__item == null) return;
            actors?.Remove(__item);
        }

        public virtual void AddActors(Actor __item)
        {
            if (__item == null) return;
            if (__item.Cluster != this)
                __item.Cluster = this;
        }

        public virtual void AddAtIndexActors(int index, Actor __item)
        {
            if (__item == null) return;
            actors?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Cluster != this)
                    __item.Cluster = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveActors(Actor __item)
        {
            if (__item != null)
            {
                __item.Cluster = null;
            }
        }
        public virtual void SetActorsAt(Actor __item, int __index)
        {
            if (__item == null)
            {
                actors[__index].Cluster = null;
            }
            else
            {
                actors[__index] = __item;
                if (__item.Cluster != this)
                    __item.Cluster = this;
            }
        }

        public virtual void ClearActors()
        {
            if (actors!=null)
            {
                var __itemsToRemove = actors.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveActors(__item);
                }
            }
        }
        [DataMember(Name="Administrators")]
        protected IList<DigicircUser> administrators = new List<DigicircUser>();
        public virtual List<DigicircUser> Administrators
        {
            get
            {
                if (administrators is DigicircUser[])
                {
                    administrators = administrators.ToList();
                }
                if (administrators == null)
                {
                    administrators = new List<DigicircUser>();
                }
                return administrators.ToList();
            }
            set
            {
                if (administrators is DigicircUser[])
                {
                    administrators = administrators.ToList();
                }
                if (administrators != null)
                {
                    var __itemsToDelete = new List<DigicircUser>(administrators);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveAdministrators(__item);
                    }
                }
                if(value == null)
                {
                    administrators = new List<DigicircUser>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddAdministrators(__item);
                }
            }
        }
        public virtual void AddAdministrators(IList<DigicircUser> __items)
        {
            foreach (var __item in __items)
            {
                AddAdministrators(__item);
            }
        }

        public virtual void InternalAddAdministrators(DigicircUser __item)
        {
            if (__item == null || disableInternalAdditions) return;
            administrators?.Add(__item);
        }

        public virtual void InternalRemoveAdministrators(DigicircUser __item)
        {
            if (__item == null) return;
            administrators?.Remove(__item);
        }

        public virtual void AddAdministrators(DigicircUser __item)
        {
            if (__item == null) return;
            if (!administrators.Contains(__item))
                InternalAddAdministrators(__item);
        }

        public virtual void AddAtIndexAdministrators(int index, DigicircUser __item)
        {
            if (__item == null) return;
            if (!administrators.Contains(__item))
                administrators.Insert(index, __item);
        }

        public virtual void RemoveAdministrators(DigicircUser __item)
        {
            if (__item != null)
            {
                InternalRemoveAdministrators(__item);
            }
        }
        public virtual void SetAdministratorsAt(DigicircUser __item, int __index)
        {
            if (__item == null)
            {
                administrators[__index] = null;
            }
            else
            {
                administrators[__index] = __item;
            }
        }

        public virtual void ClearAdministrators()
        {
            if (administrators!=null)
            {
                var __itemsToRemove = administrators.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveAdministrators(__item);
                }
            }
        }
        [DataMember(Name="Sites")]
        protected IList<Address> sites = new List<Address>();
        public virtual List<Address> Sites
        {
            get
            {
                if (sites is Address[])
                {
                    sites = sites.ToList();
                }
                if (sites == null)
                {
                    sites = new List<Address>();
                }
                return sites.ToList();
            }
            set
            {
                if (sites is Address[])
                {
                    sites = sites.ToList();
                }
                if (sites != null)
                {
                    var __itemsToDelete = new List<Address>(sites);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveSites(__item);
                    }
                }
                if(value == null)
                {
                    sites = new List<Address>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddSites(__item);
                }
            }
        }
        public virtual void AddSites(IList<Address> __items)
        {
            foreach (var __item in __items)
            {
                AddSites(__item);
            }
        }

        public virtual void InternalAddSites(Address __item)
        {
            if (__item == null || disableInternalAdditions) return;
            sites?.Add(__item);
        }

        public virtual void InternalRemoveSites(Address __item)
        {
            if (__item == null) return;
            sites?.Remove(__item);
        }

        public virtual void AddSites(Address __item)
        {
            if (__item == null) return;
            InternalAddSites(__item);
        }

        public virtual void AddAtIndexSites(int index, Address __item)
        {
            if (__item == null) return;
            sites?.Insert(index, __item);
        }

        public virtual void RemoveSites(Address __item)
        {
            if (__item != null)
            {
                InternalRemoveSites(__item);
            }
        }
        public virtual void SetSitesAt(Address __item, int __index)
        {
            if (__item == null)
            {
                sites[__index] = null;
            }
            else
            {
                sites[__index] = __item;
            }
        }

        public virtual void ClearSites()
        {
            if (sites!=null)
            {
                var __itemsToRemove = sites.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveSites(__item);
                }
            }
        }
        [DataMember(Name="EntityType")]
        protected EntityType entityType;
        public virtual EntityType EntityType
        {
            get
            {
                return entityType;
            }
            set
            {
                if(Equals(entityType, value)) return;
                var __oldValue = entityType;
                entityType = value;
            }
        }
        [DataMember(Name="SectorTypes")]
        protected IList<SectorType> sectorTypes = new List<SectorType>();
        public virtual List<SectorType> SectorTypes
        {
            get
            {
                if (sectorTypes is SectorType[])
                {
                    sectorTypes = sectorTypes.ToList();
                }
                if (sectorTypes == null)
                {
                    sectorTypes = new List<SectorType>();
                }
                return sectorTypes.ToList();
            }
            set
            {
                if (sectorTypes is SectorType[])
                {
                    sectorTypes = sectorTypes.ToList();
                }
                if (sectorTypes != null)
                {
                    var __itemsToDelete = new List<SectorType>(sectorTypes);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveSectorTypes(__item);
                    }
                }
                if(value == null)
                {
                    sectorTypes = new List<SectorType>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddSectorTypes(__item);
                }
            }
        }
        public virtual void AddSectorTypes(IList<SectorType> __items)
        {
            foreach (var __item in __items)
            {
                AddSectorTypes(__item);
            }
        }

        public virtual void InternalAddSectorTypes(SectorType __item)
        {
            if (__item == null || disableInternalAdditions) return;
            sectorTypes?.Add(__item);
        }

        public virtual void InternalRemoveSectorTypes(SectorType __item)
        {
            if (__item == null) return;
            sectorTypes?.Remove(__item);
        }

        public virtual void AddSectorTypes(SectorType __item)
        {
            if (__item == null) return;
            if (!sectorTypes.Contains(__item))
                InternalAddSectorTypes(__item);
            if (!__item.Actor.Contains(this))
                __item.AddActor(this);
        }

        public virtual void AddAtIndexSectorTypes(int index, SectorType __item)
        {
            if (__item == null) return;
            if (!sectorTypes.Contains(__item))
                sectorTypes.Insert(index, __item);
            if (!__item.Actor.Contains(this))
                __item.AddActor(this);
        }

        public virtual void RemoveSectorTypes(SectorType __item)
        {
            if (__item != null)
            {
                if (sectorTypes.Contains(__item))
                    InternalRemoveSectorTypes(__item);
                if(__item.Actor.Contains(this))
                    __item.RemoveActor(this);
            }
        }
        public virtual void SetSectorTypesAt(SectorType __item, int __index)
        {
            if (__item == null)
            {
                sectorTypes[__index].RemoveActor(this);
            }
            else
            {
                sectorTypes[__index] = __item;
                if (!__item.Actor.Contains(this))
                    __item.AddActor(this);
            }
        }

        public virtual void ClearSectorTypes()
        {
            if (sectorTypes!=null)
            {
                var __itemsToRemove = sectorTypes.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveSectorTypes(__item);
                }
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the Actor class
/// </summary>
/// <returns>New Actor object</returns>
/// <remarks></remarks>
        public Actor() {}
        #endregion
        #region Accessors Implementation
        private string GetShortDescription()
        {
            int? descLength = (this?.description?.Length ?? 0);
            if ((descLength < 250))
            {
                return (this?.description ?? "");
            }
            return (this?.description?.Substring(0, 250) ?? "") + "...";
        }

        private int? GetGetCountOfClusterMembers()
        {
            if (((this?.entityType?.IsCluster ?? false)))
            {
                return (this?.actors?.Count() ?? 0);
            }
            return 0;
        }

        #endregion
        #region Methods

        public virtual List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            if (Id == null)
            {
                __errors.Add("Property 'Id' is required.");
            }
            if (Name != null && Name.Length > 255)
            {
                __errors.Add("Length of property 'Name' cannot be greater than 255.");
            }
            if (Description != null && Description.Length > 2147483647)
            {
                __errors.Add("Length of property 'Description' cannot be greater than 2147483647.");
            }
            if (ShortDescription != null && ShortDescription.Length > 2147483647)
            {
                __errors.Add("Length of property 'ShortDescription' cannot be greater than 2147483647.");
            }
            if (Url != null && Url.Length > 2147483647)
            {
                __errors.Add("Length of property 'Url' cannot be greater than 2147483647.");
            }
            if (Email != null && Email.Length > 2147483647)
            {
                __errors.Add("Length of property 'Email' cannot be greater than 2147483647.");
            }
            if (SpecifiedEnityType != null && SpecifiedEnityType.Length > 250)
            {
                __errors.Add("Length of property 'SpecifiedEnityType' cannot be greater than 250.");
            }
            if (ClusterName != null && ClusterName.Length > 100)
            {
                __errors.Add("Length of property 'ClusterName' cannot be greater than 100.");
            }
            if (Keywords != null && Keywords.Length > 2147483647)
            {
                __errors.Add("Length of property 'Keywords' cannot be greater than 2147483647.");
            }
            if (CircularEconomyRequirements == null)
            {
                __errors.Add("Association with 'CircularEconomyRequirements' is required.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'Actor' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (Id?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Name?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Description?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ShortDescription?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Url?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Email?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (SpecifiedEnityType?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (MemberOfCluster.GetHashCode() );
            hashCode = hashCode * -1521134295 + (GetCountOfClusterMembers?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ClusterName?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Keywords?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (HasSites.GetHashCode() );
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [Actor] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual Actor Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, Actor copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (Actor)copiedObjects[this];
            copy = copy ?? new Actor();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
                copy.Id = this.Id;
            }
            copy.Name = this.Name;
            copy.Description = this.Description;
            copy.ShortDescription = this.ShortDescription;
            copy.Url = this.Url;
            copy.Email = this.Email;
            copy.SpecifiedEnityType = this.SpecifiedEnityType;
            copy.MemberOfCluster = this.MemberOfCluster;
            copy.GetCountOfClusterMembers = this.GetCountOfClusterMembers;
            copy.ClusterName = this.ClusterName;
            copy.Keywords = this.Keywords;
            copy.HasSites = this.HasSites;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            if(deep && this.address != null)
            {
                if (!copiedObjects.Contains(this.address))
                {
                    if (asNew && reuseNestedObjects)
                        copy.Address = this.Address;
                    else if (asNew)
                        copy.Address = this.Address.Copy(deep, copiedObjects, true);
                    else
                        copy.address = this.address.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.Address = (Address)copiedObjects[this.Address];
                    else
                        copy.address = (Address)copiedObjects[this.Address];
                }
            }
            if(deep && this.addedBy != null)
            {
                if (!copiedObjects.Contains(this.addedBy))
                {
                    if (asNew && reuseNestedObjects)
                        copy.AddedBy = this.AddedBy;
                    else if (asNew)
                        copy.AddedBy = this.AddedBy.Copy(deep, copiedObjects, true);
                    else
                        copy.addedBy = this.addedBy.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.AddedBy = (DigicircUser)copiedObjects[this.AddedBy];
                    else
                        copy.addedBy = (DigicircUser)copiedObjects[this.AddedBy];
                }
            }
            if(deep && this.circularEconomyRequirements != null)
            {
                if (!copiedObjects.Contains(this.circularEconomyRequirements))
                {
                    if (asNew && reuseNestedObjects)
                        copy.CircularEconomyRequirements = this.CircularEconomyRequirements;
                    else if (asNew)
                        copy.CircularEconomyRequirements = this.CircularEconomyRequirements.Copy(deep, copiedObjects, true);
                    else
                        copy.circularEconomyRequirements = this.circularEconomyRequirements.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.CircularEconomyRequirements = (CircularEconomyReport)copiedObjects[this.CircularEconomyRequirements];
                    else
                        copy.circularEconomyRequirements = (CircularEconomyReport)copiedObjects[this.CircularEconomyRequirements];
                }
            }
            if(deep && this.circularEconomyProviderReport != null)
            {
                if (!copiedObjects.Contains(this.circularEconomyProviderReport))
                {
                    if (asNew && reuseNestedObjects)
                        copy.CircularEconomyProviderReport = this.CircularEconomyProviderReport;
                    else if (asNew)
                        copy.CircularEconomyProviderReport = this.CircularEconomyProviderReport.Copy(deep, copiedObjects, true);
                    else
                        copy.circularEconomyProviderReport = this.circularEconomyProviderReport.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.CircularEconomyProviderReport = (CircularEconomyProviderReport)copiedObjects[this.CircularEconomyProviderReport];
                    else
                        copy.circularEconomyProviderReport = (CircularEconomyProviderReport)copiedObjects[this.CircularEconomyProviderReport];
                }
            }
            if(deep && this.actorLogo != null)
            {
                if (!copiedObjects.Contains(this.actorLogo))
                {
                    if (asNew && reuseNestedObjects)
                        copy.ActorLogo = this.ActorLogo;
                    else if (asNew)
                        copy.ActorLogo = this.ActorLogo.Copy(deep, copiedObjects, true);
                    else
                        copy.actorLogo = this.actorLogo.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.ActorLogo = (FileData)copiedObjects[this.ActorLogo];
                    else
                        copy.actorLogo = (FileData)copiedObjects[this.ActorLogo];
                }
            }
            if(deep && this.cluster != null)
            {
                if (!copiedObjects.Contains(this.cluster))
                {
                    if (asNew && reuseNestedObjects)
                        copy.Cluster = this.Cluster;
                    else if (asNew)
                        copy.Cluster = this.Cluster.Copy(deep, copiedObjects, true);
                    else
                        copy.cluster = this.cluster.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.Cluster = (Actor)copiedObjects[this.Cluster];
                    else
                        copy.cluster = (Actor)copiedObjects[this.Cluster];
                }
            }
            copy.actors = new List<Actor>();
            if(deep && this.actors != null)
            {
                foreach (var __item in this.actors)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddActors(__item);
                        else
                            copy.AddActors(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddActors((Actor)copiedObjects[__item]);
                    }
                }
            }
            copy.administrators = new List<DigicircUser>();
            if(deep && this.administrators != null)
            {
                foreach (var __item in this.administrators)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddAdministrators(__item);
                        else
                            copy.AddAdministrators(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddAdministrators((DigicircUser)copiedObjects[__item]);
                    }
                }
            }
            copy.sites = new List<Address>();
            if(deep && this.sites != null)
            {
                foreach (var __item in this.sites)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddSites(__item);
                        else
                            copy.AddSites(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddSites((Address)copiedObjects[__item]);
                    }
                }
            }
            if(deep && this.entityType != null)
            {
                if (!copiedObjects.Contains(this.entityType))
                {
                    if (asNew && reuseNestedObjects)
                        copy.EntityType = this.EntityType;
                    else if (asNew)
                        copy.EntityType = this.EntityType.Copy(deep, copiedObjects, true);
                    else
                        copy.entityType = this.entityType.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.EntityType = (EntityType)copiedObjects[this.EntityType];
                    else
                        copy.entityType = (EntityType)copiedObjects[this.EntityType];
                }
            }
            copy.sectorTypes = new List<SectorType>();
            if(deep && this.sectorTypes != null)
            {
                foreach (var __item in this.sectorTypes)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddSectorTypes(__item);
                        else
                            copy.AddSectorTypes(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddSectorTypes((SectorType)copiedObjects[__item]);
                    }
                }
            }
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as Actor;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(Actor x, Actor y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(Actor x, Actor y)
        {
            return !(x == y);
        }

        private PropertyInfo __propertyKeyCache;
        public virtual PropertyInfo GetPrimaryKey()
        {
            if (__propertyKeyCache == null)
            {
                __propertyKeyCache = this.GetType().GetProperty("Id");
            }
            return __propertyKeyCache;
        }


/// <summary>
///     To help ensure hashcode uniqueness, a carefully selected random number multiplier
///     is used within the calculation.  Goodrich and Tamassia's Data Structures and
///     Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
///     of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
///     for more information.
/// </summary>
        private const int HashMultiplier = 31;
        private int? cachedHashcode;

        public override int GetHashCode()
        {
            if (this.cachedHashcode.HasValue)
            {
                return this.cachedHashcode.Value;
            }
            if (this.IsTransient())
            {
                //this.cachedHashcode = base.GetHashCode();
                return this.TransientId.GetHashCode(); //don't cache because this won't stay transient forever
            }
            else
            {
                unchecked
                {
                    // It's possible for two objects to return the same hash code based on
                    // identically valued properties, even if they're of two different types,
                    // so we include the object's type in the hash calculation
                    var hashCode = this.GetType().GetHashCode();
                    this.cachedHashcode = (hashCode * HashMultiplier) ^ this.Id.GetHashCode();
                }
            }
            return this.cachedHashcode.Value;
        }

/// <summary>
///     Transient objects are not associated with an item already in storage.  For instance,
///     a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed
///     objects to be lazily loaded.
/// </summary>
        public virtual bool IsTransient()
        {
            return this.Id == default(int) || this.Id.Equals(default(int));
        }

/// <summary>
///     When NHibernate proxies objects, it masks the type of the actual entity object.
///     This wrapper burrows into the proxied object to get its actual type.
///
///     Although this assumes NHibernate is being used, it doesn't require any NHibernate
///     related dependencies and has no bad side effects if NHibernate isn't being used.
///
///     Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
/// </summary>
        protected virtual System.Type GetTypeUnproxied()
        {
            return this.GetType();
        }

/// <summary>
///     Returns true if self and the provided entity have the same Id values
///     and the Ids are not of the default Id value
/// </summary>
        protected bool HasSameNonDefaultIdAs(Actor compareTo)
        {
            return !this.IsTransient() && !compareTo.IsTransient() && this.Id.Equals(compareTo.Id);
        }

        #endregion


    }
}
