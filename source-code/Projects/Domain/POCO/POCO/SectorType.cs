// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DigicircMatchmaking.BO
{
    /// <summary>
    /// The SectorType class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    [KnownType(typeof(ValueType))]

    public class SectorType : ValueType,IDomainModelClass
    {
        #region SectorType's Fields
#pragma warning disable 0649
        private bool disableInternalAdditions;
#pragma warning restore 0649
        #endregion
        #region SectorType's Participant Properties
        [DataMember(Name="Actor")]
        protected IList<Actor> actor = new List<Actor>();
        public virtual List<Actor> Actor
        {
            get
            {
                if (actor is Actor[])
                {
                    actor = actor.ToList();
                }
                if (actor == null)
                {
                    actor = new List<Actor>();
                }
                return actor.ToList();
            }
            set
            {
                if (actor is Actor[])
                {
                    actor = actor.ToList();
                }
                if (actor != null)
                {
                    var __itemsToDelete = new List<Actor>(actor);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveActor(__item);
                    }
                }
                if(value == null)
                {
                    actor = new List<Actor>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddActor(__item);
                }
            }
        }
        public virtual void AddActor(IList<Actor> __items)
        {
            foreach (var __item in __items)
            {
                AddActor(__item);
            }
        }

        public virtual void InternalAddActor(Actor __item)
        {
            if (__item == null || disableInternalAdditions) return;
            actor?.Add(__item);
        }

        public virtual void InternalRemoveActor(Actor __item)
        {
            if (__item == null) return;
            actor?.Remove(__item);
        }

        public virtual void AddActor(Actor __item)
        {
            if (__item == null) return;
            if (!actor.Contains(__item))
                InternalAddActor(__item);
            if (!__item.SectorTypes.Contains(this))
                __item.AddSectorTypes(this);
        }

        public virtual void AddAtIndexActor(int index, Actor __item)
        {
            if (__item == null) return;
            if (!actor.Contains(__item))
                actor.Insert(index, __item);
            if (!__item.SectorTypes.Contains(this))
                __item.AddSectorTypes(this);
        }

        public virtual void RemoveActor(Actor __item)
        {
            if (__item != null)
            {
                if (actor.Contains(__item))
                    InternalRemoveActor(__item);
                if(__item.SectorTypes.Contains(this))
                    __item.RemoveSectorTypes(this);
            }
        }
        public virtual void SetActorAt(Actor __item, int __index)
        {
            if (__item == null)
            {
                actor[__index].RemoveSectorTypes(this);
            }
            else
            {
                actor[__index] = __item;
                if (!__item.SectorTypes.Contains(this))
                    __item.AddSectorTypes(this);
            }
        }

        public virtual void ClearActor()
        {
            if (actor!=null)
            {
                var __itemsToRemove = actor.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveActor(__item);
                }
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the SectorType class
/// </summary>
/// <returns>New SectorType object</returns>
/// <remarks></remarks>
        public SectorType(): base() {}
        #endregion
        #region Methods

        public override List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            __errors = base._Validate(throwException);
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'SectorType' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (Id?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Code?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Value?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [SectorType] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual SectorType Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, SectorType copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (SectorType)copiedObjects[this];
            copy = copy ?? new SectorType();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
            }
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            copy.actor = new List<Actor>();
            if(deep && this.actor != null)
            {
                foreach (var __item in this.actor)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddActor(__item);
                        else
                            copy.AddActor(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddActor((Actor)copiedObjects[__item]);
                    }
                }
            }
            base.Copy(deep, copiedObjects, asNew, reuseNestedObjects, copy);
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as SectorType;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(SectorType x, SectorType y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(SectorType x, SectorType y)
        {
            return !(x == y);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #endregion


    }
}
