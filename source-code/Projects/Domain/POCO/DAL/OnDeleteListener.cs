// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using Iesi.Collections;
using log4net;
using NHibernate.Event;
using NHibernate.Util;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using DigicircMatchmaking.BO;

namespace DigicircMatchmaking.DAL
{
    public class OnDeleteListener : IDeleteEventListener
    {
        public System.Threading.Tasks.Task OnDeleteAsync(DeleteEvent @event, CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.Run(() => OnDelete(@event), cancellationToken);
        }

        public System.Threading.Tasks.Task OnDeleteAsync(DeleteEvent @event, ISet<object> transientEntities, CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.Run(() => OnDelete(@event, transientEntities), cancellationToken);
        }

        public void OnDelete(DeleteEvent @event)
        {
            OnDelete(@event, new IdentitySet());
        }

        public void OnDelete(DeleteEvent @event, ISet<object> transientEntities)
        {
            var entity = @event.Entity;
            System.Type entityType = entity.GetType();
            if (entityType.AssemblyQualifiedName.IndexOf("ProxyAssembly", StringComparison.OrdinalIgnoreCase) > -1)
            {
                entityType = entityType.BaseType;
            }
            try
            {
                switch (entity.GetType().FullName)
                {
                case "DigicircMatchmaking.BO.DigicircUser":
                    (new Repository()).DeleteDigicircUser((DigicircMatchmaking.BO.DigicircUser)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.Actor":
                    (new Repository()).DeleteActor((DigicircMatchmaking.BO.Actor)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.CircularEconomyReport":
                    (new Repository()).DeleteCircularEconomyReport((DigicircMatchmaking.BO.CircularEconomyReport)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.CircularEconomyProviderReport":
                    (new Repository()).DeleteCircularEconomyProviderReport((DigicircMatchmaking.BO.CircularEconomyProviderReport)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.Address":
                    (new Repository()).DeleteAddress((DigicircMatchmaking.BO.Address)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.Country":
                    (new Repository()).DeleteCountry((DigicircMatchmaking.BO.Country)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.GeographicalArea":
                    (new Repository()).DeleteGeographicalArea((DigicircMatchmaking.BO.GeographicalArea)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.BusinessFunction":
                    (new Repository()).DeleteBusinessFunction((DigicircMatchmaking.BO.BusinessFunction)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.BusinessType":
                    (new Repository()).DeleteBusinessType((DigicircMatchmaking.BO.BusinessType)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.Activities":
                    (new Repository()).DeleteActivities((DigicircMatchmaking.BO.Activities)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.ActorNames":
                    (new Repository()).DeleteActorNames((DigicircMatchmaking.BO.ActorNames)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.SectorType":
                    (new Repository()).DeleteSectorType((DigicircMatchmaking.BO.SectorType)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.EntityType":
                    (new Repository()).DeleteEntityType((DigicircMatchmaking.BO.EntityType)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.ValueType":
                    (new Repository()).DeleteValueType((DigicircMatchmaking.BO.ValueType)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.ThematicExpertise":
                    (new Repository()).DeleteThematicExpertise((DigicircMatchmaking.BO.ThematicExpertise)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.Services":
                    (new Repository()).DeleteServices((DigicircMatchmaking.BO.Services)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.Expertise":
                    (new Repository()).DeleteExpertise((DigicircMatchmaking.BO.Expertise)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.PhysicalForm":
                    (new Repository()).DeletePhysicalForm((DigicircMatchmaking.BO.PhysicalForm)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.UnitOfMeasurement":
                    (new Repository()).DeleteUnitOfMeasurement((DigicircMatchmaking.BO.UnitOfMeasurement)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.Company":
                    (new Repository()).DeleteCompany((DigicircMatchmaking.BO.Company)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.Material":
                    (new Repository()).DeleteMaterial((DigicircMatchmaking.BO.Material)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.Process":
                    (new Repository()).DeleteProcess((DigicircMatchmaking.BO.Process)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.Product":
                    (new Repository()).DeleteProduct((DigicircMatchmaking.BO.Product)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.ProductType":
                    (new Repository()).DeleteProductType((DigicircMatchmaking.BO.ProductType)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.SearchResponse":
                    (new Repository()).DeleteSearchResponse((DigicircMatchmaking.BO.SearchResponse)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.Match":
                    (new Repository()).DeleteMatch((DigicircMatchmaking.BO.Match)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction":
                    (new Repository()).DeleteApplicationUserAction((zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile":
                    (new Repository()).DeleteApplicationUserExternalProfile((zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting":
                    (new Repository()).DeleteApplicationSetting((zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationUser":
                    (new Repository()).DeleteApplicationUser((zAppDev.DotNet.Framework.Identity.Model.ApplicationUser)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationRole":
                    (new Repository()).DeleteApplicationRole((zAppDev.DotNet.Framework.Identity.Model.ApplicationRole)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation":
                    (new Repository()).DeleteApplicationOperation((zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission":
                    (new Repository()).DeleteApplicationPermission((zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationClient":
                    (new Repository()).DeleteApplicationClient((zAppDev.DotNet.Framework.Identity.Model.ApplicationClient)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin":
                    (new Repository()).DeleteApplicationUserLogin((zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim":
                    (new Repository()).DeleteApplicationUserClaim((zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ProfileSetting":
                    (new Repository()).DeleteProfileSetting((zAppDev.DotNet.Framework.Identity.Model.ProfileSetting)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.Profile":
                    (new Repository()).DeleteProfile((zAppDev.DotNet.Framework.Identity.Model.Profile)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage":
                    (new Repository()).DeleteApplicationLanguage((zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat":
                    (new Repository()).DeleteDateTimeFormat((zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme":
                    (new Repository()).DeleteApplicationTheme((zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.FileData":
                    (new Repository()).DeleteFileData((DigicircMatchmaking.BO.FileData)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration":
                    (new Repository()).DeleteAuditEntityConfiguration((zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration":
                    (new Repository()).DeleteAuditPropertyConfiguration((zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry":
                    (new Repository()).DeleteAuditLogEntry((zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType":
                    (new Repository()).DeleteAuditLogEntryType((zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType":
                    (new Repository()).DeleteAuditLogPropertyActionType((zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Workflow.WorkflowContextBase":
                    (new Repository()).DeleteWorkflowContextBase((zAppDev.DotNet.Framework.Workflow.WorkflowContextBase)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Workflow.WorkflowSchedule":
                    (new Repository()).DeleteWorkflowSchedule((zAppDev.DotNet.Framework.Workflow.WorkflowSchedule)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.QueryGeocoderContext":
                    (new Repository()).DeleteQueryGeocoderContext((DigicircMatchmaking.BO.QueryGeocoderContext)entity, true, true, null);
                    break;
                case "DigicircMatchmaking.BO.SuggestionsFlowContext":
                    (new Repository()).DeleteSuggestionsFlowContext((DigicircMatchmaking.BO.SuggestionsFlowContext)entity, true, true, null);
                    break;
                }
            }
            catch (Exception e)
            {
                (LogManager.GetLogger(this.GetType())).Error("Error deleting: " + entityType.FullName, e);
                throw;
            }
        }
    }
}
