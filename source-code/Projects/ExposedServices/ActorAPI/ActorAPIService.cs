// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.ServiceModel.Channels;
using System.Security.Permissions;
using System.Security.Principal;
using NHibernate;
using System.ServiceModel.Activation;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using DigicircMatchmaking.Services.ActorAPI.DataContracts;
using DigicircMatchmaking.BO;
using AutoMapper;

namespace DigicircMatchmaking.Services
{
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]
    public class ActorAPIService : IActorAPIService
    {
        private Dictionary<string, List<string>> requestHeaders = new Dictionary<string, List<string>>();

        public ActorAPIService()
        {
        }

        public ActorAPIService(Dictionary<string, List<string>> headers)
        {
            requestHeaders = headers;
        }

        public DigicircMatchmaking.Services.ActorAPI.DataContracts.ResponseDTO AddResource(DigicircMatchmaking.Services.ActorAPI.DataContracts.ProductDTO _product, int? _id, string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var inputproduct = Mapper.Map<DigicircMatchmaking.Services.ActorAPI.DataContracts.ProductDTO, DigicircMatchmaking.BO.Product>(_product);
                var inputid = _id;
                var _exposedOperation = AddResourceImplementation(inputproduct, inputid);
                var result = Mapper.Map<DigicircMatchmaking.BO.Response, DigicircMatchmaking.Services.ActorAPI.DataContracts.ResponseDTO>(_exposedOperation);
                return result;
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("ActorAPI Service").Error(@exception);
                throw;
            }
        }


        private void InitializeMappers()
        {
            Mapper.CreateMap<DigicircMatchmaking.Services.ActorAPI.DataContracts.AddressDTO, DigicircMatchmaking.BO.Address>();
            Mapper.CreateMap<DigicircMatchmaking.BO.Address, DigicircMatchmaking.Services.ActorAPI.DataContracts.AddressDTO>();
            Mapper.CreateMap<DigicircMatchmaking.Services.ActorAPI.DataContracts.MaterialDTO, DigicircMatchmaking.BO.Material>();
            Mapper.CreateMap<DigicircMatchmaking.BO.Material, DigicircMatchmaking.Services.ActorAPI.DataContracts.MaterialDTO>();
            Mapper.CreateMap<DigicircMatchmaking.Services.ActorAPI.DataContracts.PhysicalFormDTO, DigicircMatchmaking.BO.PhysicalForm>();
            Mapper.CreateMap<DigicircMatchmaking.BO.PhysicalForm, DigicircMatchmaking.Services.ActorAPI.DataContracts.PhysicalFormDTO>();
            Mapper.CreateMap<DigicircMatchmaking.Services.ActorAPI.DataContracts.ProductDTO, DigicircMatchmaking.BO.Product>();
            Mapper.CreateMap<DigicircMatchmaking.BO.Product, DigicircMatchmaking.Services.ActorAPI.DataContracts.ProductDTO>();
            Mapper.CreateMap<DigicircMatchmaking.Services.ActorAPI.DataContracts.ProductTypeDTO, DigicircMatchmaking.BO.ProductType>();
            Mapper.CreateMap<DigicircMatchmaking.BO.ProductType, DigicircMatchmaking.Services.ActorAPI.DataContracts.ProductTypeDTO>();
            Mapper.CreateMap<DigicircMatchmaking.Services.ActorAPI.DataContracts.ResponseDTO, DigicircMatchmaking.BO.Response>();
            Mapper.CreateMap<DigicircMatchmaking.BO.Response, DigicircMatchmaking.Services.ActorAPI.DataContracts.ResponseDTO>();
            Mapper.CreateMap<DigicircMatchmaking.Services.ActorAPI.DataContracts.UnitOfMeasurementDTO, DigicircMatchmaking.BO.UnitOfMeasurement>();
            Mapper.CreateMap<DigicircMatchmaking.BO.UnitOfMeasurement, DigicircMatchmaking.Services.ActorAPI.DataContracts.UnitOfMeasurementDTO>();
        }

        public DigicircMatchmaking.BO.Response AddResourceImplementation(DigicircMatchmaking.BO.Product product, int? id)
        {
            DigicircMatchmaking.BO.Response response = new DigicircMatchmaking.BO.Response();
            if ((id == null))
            {
                response.Status = "No Id provided";
                return response;
            }
            DigicircMatchmaking.BO.Actor actor =  new DigicircMatchmaking.DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(id, false);
            if ((actor == null))
            {
                response.Status = "There is no actor with the given Id";
                return response;
            }
            zAppDev.DotNet.Framework.Identity.Model.ApplicationUser user = zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentApplicationUser();
            var _var0 = user?.UserName;
            if ((actor?.AddedBy?.UserName != user?.UserName && (actor?.Administrators?.All((a) => a.UserName != _var0) ?? false)))
            {
                response.Status = "You have no permission to edit the given actor";
            }
            actor?.AddProductFromAPI(product, false);
            response.Status = "Ok";
            return response;
        }


    }
}