// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using System.IO;

using System.Text;
using System.Xml.Serialization;
using System.Linq;

namespace DigicircMatchmaking.ExternalStructs.GraphBackend
{
    [XmlRoot("UpdateResponse")]
    public class UpdateResponse
    {
        [XmlElement("Type")]
        [Newtonsoft.Json.JsonProperty("Type")]
        public string Type
        {
            get;
            set;
        }

        [XmlElement("Desc")]
        [Newtonsoft.Json.JsonProperty("Desc")]
        public string Desc
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           Type?.ToString() +
                                           Desc?.ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("GraphBackendResponce")]
    [Newtonsoft.Json.JsonObject(Title = "GraphBackendResponce")]
    public class GraphBackendResponse
    {
        [XmlElement("metadata")]
        [Newtonsoft.Json.JsonProperty("metadata")]
        public DigicircMatchmaking.ExternalStructs.GraphBackend.Metadata Metadata
        {
            get;
            set;
        }

        [XmlElement("nodes")]
        [Newtonsoft.Json.JsonProperty("nodes")]
        public DigicircMatchmaking.ExternalStructs.GraphBackend.Nodes[] Nodes
        {
            get;
            set;
        }

        [XmlElement("links")]
        [Newtonsoft.Json.JsonProperty("links")]
        public DigicircMatchmaking.ExternalStructs.GraphBackend.Links[] Links
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           Metadata?._CalculatedKey?.ToString() +
                                           Nodes?.Sum(x => x?._CalculatedKey)?.ToString() +
                                           Links?.Sum(x => x?._CalculatedKey)?.ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("Query")]
    public class Query
    {
        [XmlElement("GraphContext")]
        [Newtonsoft.Json.JsonProperty("GraphContext")]
        public string GraphContext
        {
            get;
            set;
        }

        [XmlElement("MessageType")]
        [Newtonsoft.Json.JsonProperty("MessageType")]
        public string MessageType
        {
            get;
            set;
        }

        [XmlElement("GraphSubContext")]
        [Newtonsoft.Json.JsonProperty("GraphSubContext")]
        public string GraphSubContext
        {
            get;
            set;
        }

        [XmlElement("SearchText")]
        [Newtonsoft.Json.JsonProperty("SearchText")]
        public string SearchText
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           GraphContext?.ToString() +
                                           MessageType?.ToString() +
                                           GraphSubContext?.ToString() +
                                           SearchText?.ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("QueryExtended")]
    public class QueryExtended
    {
        [XmlElement("GraphContext")]
        [Newtonsoft.Json.JsonProperty("GraphContext")]
        public string GraphContext
        {
            get;
            set;
        }

        [XmlElement("GraphSubContext")]
        [Newtonsoft.Json.JsonProperty("GraphSubContext")]
        public string GraphSubContext
        {
            get;
            set;
        }

        [XmlElement("MessageType")]
        [Newtonsoft.Json.JsonProperty("MessageType")]
        public string MessageType
        {
            get;
            set;
        }

        [XmlElement("ExElements")]
        [Newtonsoft.Json.JsonProperty("ExElements")]
        public System.Collections.Generic.List<DigicircMatchmaking.ExternalStructs.GraphBackend.ExElements> Elements
        {
            get;
            set;
        }

        [XmlElement("ExRelations")]
        [Newtonsoft.Json.JsonProperty("ExRelations")]
        public System.Collections.Generic.List<DigicircMatchmaking.ExternalStructs.GraphBackend.ExRelations> Relations
        {
            get;
            set;
        }

        [XmlElement("ExMessageSearchData")]
        [Newtonsoft.Json.JsonProperty("ExMessageSearchData")]
        public DigicircMatchmaking.ExternalStructs.GraphBackend.ExMessageSearchData MessageSearchData
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           GraphContext?.ToString() +
                                           GraphSubContext?.ToString() +
                                           MessageType?.ToString() +
                                           Elements?.Sum(x => x?._CalculatedKey)?.ToString() +
                                           Relations?.Sum(x => x?._CalculatedKey)?.ToString() +
                                           MessageSearchData?._CalculatedKey?.ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("QueryEditor")]
    public class QueryEditor
    {
        [XmlElement("GraphContext")]
        [Newtonsoft.Json.JsonProperty("GraphContext")]
        public string GraphContext
        {
            get;
            set;
        }

        [XmlElement("MessageType")]
        [Newtonsoft.Json.JsonProperty("MessageType")]
        public string MessageType
        {
            get;
            set;
        }

        [XmlElement("ExElements")]
        [Newtonsoft.Json.JsonProperty("ExElements")]
        public System.Collections.Generic.List<DigicircMatchmaking.ExternalStructs.GraphBackend.ExElements> ExElements
        {
            get;
            set;
        }

        [XmlElement("ExRelations")]
        [Newtonsoft.Json.JsonProperty("ExRelations")]
        public DigicircMatchmaking.ExternalStructs.GraphBackend.ExRelations[] ExRelations
        {
            get;
            set;
        }

        [XmlElement("ExMessageSearchData")]
        [Newtonsoft.Json.JsonProperty("ExMessageSearchData")]
        public DigicircMatchmaking.ExternalStructs.GraphBackend.ExMessageSearchData ExMessageSearchData
        {
            get;
            set;
        }

        [XmlElement("MessageSubType")]
        [Newtonsoft.Json.JsonProperty("MessageSubType")]
        public string MessageSubType
        {
            get;
            set;
        }

        [XmlElement("ValidExElements")]
        [Newtonsoft.Json.JsonProperty("ValidExElements")]
        public DigicircMatchmaking.ExternalStructs.GraphBackend.ValidExElements[] ValidExElements
        {
            get;
            set;
        }

        [XmlElement("ValidExRelations")]
        [Newtonsoft.Json.JsonProperty("ValidExRelations")]
        public DigicircMatchmaking.ExternalStructs.GraphBackend.ValidExRelations[] ValidExRelations
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           GraphContext?.ToString() +
                                           MessageType?.ToString() +
                                           ExElements?.Sum(x => x?._CalculatedKey)?.ToString() +
                                           ExRelations?.Sum(x => x?._CalculatedKey)?.ToString() +
                                           ExMessageSearchData?._CalculatedKey?.ToString() +
                                           MessageSubType?.ToString() +
                                           ValidExElements?.Sum(x => x?._CalculatedKey)?.ToString() +
                                           ValidExRelations?.Sum(x => x?._CalculatedKey)?.ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("ExElements")]
    public class ExElements
    {
        [XmlElement("Type")]
        [Newtonsoft.Json.JsonProperty("Type")]
        public string Type
        {
            get;
            set;
        }

        [XmlElement("Name")]
        [Newtonsoft.Json.JsonProperty("Name")]
        public string Name
        {
            get;
            set;
        }

        [XmlElement("Category")]
        [Newtonsoft.Json.JsonProperty("Category")]
        public string Category
        {
            get;
            set;
        }

        [XmlElement("Data")]
        [Newtonsoft.Json.JsonProperty("Data")]
        public string Data
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           Type?.ToString() +
                                           Name?.ToString() +
                                           Category?.ToString() +
                                           Data?.ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("ExRelations")]
    public class ExRelations
    {
        [XmlElement("Type")]
        [Newtonsoft.Json.JsonProperty("Type")]
        public string Type
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           Type?.ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("ExMessageSearchData")]
    public class ExMessageSearchData
    {
        [XmlElement("LabelSearchType")]
        [Newtonsoft.Json.JsonProperty("LabelSearchType")]
        public string LabelSearchType
        {
            get;
            set;
        }

        [XmlElement("DepthSearchLevel")]
        [Newtonsoft.Json.JsonProperty("DepthSearchLevel")]
        public string DepthSearchLevel
        {
            get;
            set;
        }

        [XmlElement("AlgorithmName")]
        [Newtonsoft.Json.JsonProperty("AlgorithmName")]
        public string AlgorithmName
        {
            get;
            set;
        }

        [XmlElement("JsonResponseFormat")]
        [Newtonsoft.Json.JsonProperty("JsonResponseFormat")]
        public string JsonResponseFormat
        {
            get;
            set;
        }

        [XmlElement("ExSecurity")]
        [Newtonsoft.Json.JsonProperty("ExSecurity")]
        public DigicircMatchmaking.ExternalStructs.GraphBackend.ExSecurity ExSecurity
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           LabelSearchType?.ToString() +
                                           DepthSearchLevel?.ToString() +
                                           AlgorithmName?.ToString() +
                                           JsonResponseFormat?.ToString() +
                                           ExSecurity?._CalculatedKey?.ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("ExSecurity")]
    public class ExSecurity
    {
        [XmlElement("ExAuthorization")]
        [Newtonsoft.Json.JsonProperty("ExAuthorization")]
        public string ExAuthorization
        {
            get;
            set;
        }

        [XmlElement("UserName")]
        [Newtonsoft.Json.JsonProperty("UserName")]
        public string UserName
        {
            get;
            set;
        }

        [XmlElement("Passwd")]
        [Newtonsoft.Json.JsonProperty("Passwd")]
        public string Passwd
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           ExAuthorization?.ToString() +
                                           UserName?.ToString() +
                                           Passwd?.ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("ValidExElements")]
    public class ValidExElements
    {
        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-";
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("ValidExRelations")]
    public class ValidExRelations
    {
        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-";
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("metadata")]
    [Newtonsoft.Json.JsonObject(Title = "metadata")]
    public class Metadata
    {
        [XmlElement("ExportDataAsJson")]
        [Newtonsoft.Json.JsonProperty("ExportDataAsJson")]
        public bool ExportDataAsJson
        {
            get;
            set;
        }

        [XmlElement("Pages")]
        [Newtonsoft.Json.JsonProperty("Pages")]
        public int? Pages
        {
            get;
            set;
        }

        [XmlElement("PageSize")]
        [Newtonsoft.Json.JsonProperty("PageSize")]
        public int? PageSize
        {
            get;
            set;
        }

        [XmlElement("QueryElapsedTime")]
        [Newtonsoft.Json.JsonProperty("QueryElapsedTime")]
        public int? QueryElapsedTime
        {
            get;
            set;
        }

        [XmlElement("TotalResponseElementsWithPositiveRelevanceLevel")]
        [Newtonsoft.Json.JsonProperty("TotalResponseElementsWithPositiveRelevanceLevel")]
        public int? TotalResponseElementsWithPositiveRelevanceLevel
        {
            get;
            set;
        }

        [XmlElement("Elements")]
        [Newtonsoft.Json.JsonProperty("Elements")]
        public int? Elements
        {
            get;
            set;
        }

        [XmlElement("Relations")]
        [Newtonsoft.Json.JsonProperty("Relations")]
        public int? Relations
        {
            get;
            set;
        }

        [XmlElement("ExportType")]
        [Newtonsoft.Json.JsonProperty("ExportType")]
        public string ExportType
        {
            get;
            set;
        }

        [XmlElement("HeaderElement")]
        [Newtonsoft.Json.JsonProperty("HeaderElement")]
        public System.Object HeaderElement
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           (ExportDataAsJson == true).ToString() +
                                           Pages?.ToString() +
                                           PageSize?.ToString() +
                                           QueryElapsedTime?.ToString() +
                                           TotalResponseElementsWithPositiveRelevanceLevel?.ToString() +
                                           Elements?.ToString() +
                                           Relations?.ToString() +
                                           ExportType?.ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("nodes")]
    [Newtonsoft.Json.JsonObject(Title = "nodes")]
    public class Nodes
    {
        [XmlElement("name")]
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name
        {
            get;
            set;
        }

        [XmlElement("label")]
        [Newtonsoft.Json.JsonProperty("label")]
        public string Label
        {
            get;
            set;
        }

        [XmlElement("labelType")]
        [Newtonsoft.Json.JsonProperty("labelType")]
        public string LabelType
        {
            get;
            set;
        }

        [XmlElement("id")]
        [Newtonsoft.Json.JsonProperty("id")]
        public int? Id
        {
            get;
            set;
        }

        [XmlElement("graphid")]
        [Newtonsoft.Json.JsonProperty("graphid")]
        public int? Graphid
        {
            get;
            set;
        }

        [XmlElement("data")]
        [Newtonsoft.Json.JsonProperty("data")]
        public DigicircMatchmaking.ExternalStructs.GraphBackend.Data data
        {
            get;
            set;
        }

        [XmlElement("CC")]
        [Newtonsoft.Json.JsonProperty("CC")]
        public bool CC
        {
            get;
            set;
        }

        [XmlElement("sL")]
        [Newtonsoft.Json.JsonProperty("sL")]
        public int? SL
        {
            get;
            set;
        }

        [XmlElement("cL")]
        [Newtonsoft.Json.JsonProperty("cL")]
        public float? CL
        {
            get;
            set;
        }

        [XmlElement("rL")]
        [Newtonsoft.Json.JsonProperty("rL")]
        public float? RL
        {
            get;
            set;
        }

        [XmlElement("iA")]
        [Newtonsoft.Json.JsonProperty("iA")]
        public bool IA
        {
            get;
            set;
        }

        [XmlElement("aL")]
        [Newtonsoft.Json.JsonProperty("aL")]
        public int? AL
        {
            get;
            set;
        }

        [XmlElement("aC")]
        [Newtonsoft.Json.JsonProperty("aC")]
        public float? AC
        {
            get;
            set;
        }

        [XmlElement("Attr")]
        [Newtonsoft.Json.JsonProperty("Attr")]
        public bool Attr
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           Name?.ToString() +
                                           Label?.ToString() +
                                           LabelType?.ToString() +
                                           Id?.ToString() +
                                           Graphid?.ToString() +
                                           data?._CalculatedKey?.ToString() +
                                           (CC == true).ToString() +
                                           SL?.ToString() +
                                           CL?.ToString() +
                                           RL?.ToString() +
                                           (IA == true).ToString() +
                                           AL?.ToString() +
                                           AC?.ToString() +
                                           (Attr == true).ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("data")]
    [Newtonsoft.Json.JsonObject(Title = "data")]
    public class Data
    {
        [XmlElement("Items")]
        [Newtonsoft.Json.JsonProperty("Items")]
        public System.Object[] Items
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           Items?.ToList()?.Count().ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("links")]
    [Newtonsoft.Json.JsonObject(Title = "links")]
    public class Links
    {
        [XmlElement("source")]
        [Newtonsoft.Json.JsonProperty("source")]
        public int? Source
        {
            get;
            set;
        }

        [XmlElement("target")]
        [Newtonsoft.Json.JsonProperty("target")]
        public int? Target
        {
            get;
            set;
        }

        [XmlElement("type")]
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type
        {
            get;
            set;
        }

        [XmlElement("typeRel")]
        [Newtonsoft.Json.JsonProperty("typeRel")]
        public string TypeRel
        {
            get;
            set;
        }

        [XmlElement("sid")]
        [Newtonsoft.Json.JsonProperty("sid")]
        public int? Sid
        {
            get;
            set;
        }

        [XmlElement("tid")]
        [Newtonsoft.Json.JsonProperty("tid")]
        public int? Tid
        {
            get;
            set;
        }

        [XmlElement("data")]
        [Newtonsoft.Json.JsonProperty("data")]
        public System.Object Data
        {
            get;
            set;
        }

        [XmlElement("weight")]
        [Newtonsoft.Json.JsonProperty("weight")]
        public float? Weight
        {
            get;
            set;
        }

        [XmlElement("cL")]
        [Newtonsoft.Json.JsonProperty("cL")]
        public float? CL
        {
            get;
            set;
        }

        [XmlElement("rL")]
        [Newtonsoft.Json.JsonProperty("rL")]
        public float? RL
        {
            get;
            set;
        }

        [XmlElement("iA")]
        [Newtonsoft.Json.JsonProperty("iA")]
        public bool IA
        {
            get;
            set;
        }

        [XmlElement("aL")]
        [Newtonsoft.Json.JsonProperty("aL")]
        public int? AL
        {
            get;
            set;
        }

        [XmlElement("aC")]
        [Newtonsoft.Json.JsonProperty("aC")]
        public float? AC
        {
            get;
            set;
        }

        [XmlElement("Attr")]
        [Newtonsoft.Json.JsonProperty("Attr")]
        public bool Attr
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           Source?.ToString() +
                                           Target?.ToString() +
                                           Type?.ToString() +
                                           TypeRel?.ToString() +
                                           Sid?.ToString() +
                                           Tid?.ToString() +
                                           Weight?.ToString() +
                                           CL?.ToString() +
                                           RL?.ToString() +
                                           (IA == true).ToString() +
                                           AL?.ToString() +
                                           AC?.ToString() +
                                           (Attr == true).ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }


}
