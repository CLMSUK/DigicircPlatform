// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.

using System;
using System.IO;

using System.Text;
using System.Xml.Serialization;
using System.Linq;

namespace DigicircMatchmaking.ExternalStructs.Geocoder
{
    [XmlRoot("Result")]
    public class Result
    {
        [XmlElement("documentation")]
        [Newtonsoft.Json.JsonProperty("documentation")]
        public string Documentation
        {
            get;
            set;
        }

        [XmlElement("licenses")]
        [Newtonsoft.Json.JsonProperty("licenses")]
        public System.Collections.Generic.List<DigicircMatchmaking.ExternalStructs.Geocoder.Licenses> Licenses
        {
            get;
            set;
        }

        [XmlElement("rate")]
        [Newtonsoft.Json.JsonProperty("rate")]
        public DigicircMatchmaking.ExternalStructs.Geocoder.Rate Rate
        {
            get;
            set;
        }

        [XmlElement("results")]
        [Newtonsoft.Json.JsonProperty("results")]
        public System.Collections.Generic.List<DigicircMatchmaking.ExternalStructs.Geocoder.ResultItems> Results
        {
            get;
            set;
        }

        [XmlElement("status")]
        [Newtonsoft.Json.JsonProperty("status")]
        public DigicircMatchmaking.ExternalStructs.Geocoder.Status Status
        {
            get;
            set;
        }

        [XmlElement("thanks")]
        [Newtonsoft.Json.JsonProperty("thanks")]
        public string Thanks
        {
            get;
            set;
        }

        [XmlElement("timestamp")]
        [Newtonsoft.Json.JsonProperty("timestamp")]
        public DigicircMatchmaking.ExternalStructs.Geocoder.Timestamp Timestamp
        {
            get;
            set;
        }

        [XmlElement("total_results")]
        [Newtonsoft.Json.JsonProperty("total_results")]
        public int? TotalResults
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           Documentation?.ToString() +
                                           Licenses?.Sum(x => x?._CalculatedKey)?.ToString() +
                                           Rate?._CalculatedKey?.ToString() +
                                           Results?.Sum(x => x?._CalculatedKey)?.ToString() +
                                           Status?._CalculatedKey?.ToString() +
                                           Thanks?.ToString() +
                                           Timestamp?._CalculatedKey?.ToString() +
                                           TotalResults?.ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("licenses")]
    [Newtonsoft.Json.JsonObject(Title = "licenses")]
    public class Licenses
    {
        [XmlElement("name")]
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name
        {
            get;
            set;
        }

        [XmlElement("url")]
        [Newtonsoft.Json.JsonProperty("url")]
        public string Url
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           Name?.ToString() +
                                           Url?.ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("rate")]
    [Newtonsoft.Json.JsonObject(Title = "rate")]
    public class Rate
    {
        [XmlElement("limit")]
        [Newtonsoft.Json.JsonProperty("limit")]
        public int? Limit
        {
            get;
            set;
        }

        [XmlElement("remaining")]
        [Newtonsoft.Json.JsonProperty("remaining")]
        public int? Remaining
        {
            get;
            set;
        }

        [XmlElement("reset")]
        [Newtonsoft.Json.JsonProperty("reset")]
        public int? Reset
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           Limit?.ToString() +
                                           Remaining?.ToString() +
                                           Reset?.ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("results")]
    [Newtonsoft.Json.JsonObject(Title = "results")]
    public class ResultItems
    {
        [XmlElement("bounds")]
        [Newtonsoft.Json.JsonProperty("bounds")]
        public DigicircMatchmaking.ExternalStructs.Geocoder.Bounds Bounds
        {
            get;
            set;
        }

        [XmlElement("confidence")]
        [Newtonsoft.Json.JsonProperty("confidence")]
        public int? Confidence
        {
            get;
            set;
        }

        [XmlElement("geometry")]
        [Newtonsoft.Json.JsonProperty("geometry")]
        public DigicircMatchmaking.ExternalStructs.Geocoder.Geometry Geometry
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           Bounds?._CalculatedKey?.ToString() +
                                           Confidence?.ToString() +
                                           Geometry?._CalculatedKey?.ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("bounds")]
    [Newtonsoft.Json.JsonObject(Title = "bounds")]
    public class Bounds
    {
        [XmlElement("Northeast")]
        [Newtonsoft.Json.JsonProperty("Northeast")]
        public DigicircMatchmaking.ExternalStructs.Geocoder.Northeast Northeast
        {
            get;
            set;
        }

        [XmlElement("Southwest")]
        [Newtonsoft.Json.JsonProperty("Southwest")]
        public DigicircMatchmaking.ExternalStructs.Geocoder.Southwest Southwest
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           Northeast?._CalculatedKey?.ToString() +
                                           Southwest?._CalculatedKey?.ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("northeast")]
    [Newtonsoft.Json.JsonObject(Title = "northeast")]
    public class Northeast
    {
        [XmlElement("lat")]
        [Newtonsoft.Json.JsonProperty("lat")]
        public float? Latitude
        {
            get;
            set;
        }

        [XmlElement("lng")]
        [Newtonsoft.Json.JsonProperty("lng")]
        public float? Longitude
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           Latitude?.ToString() +
                                           Longitude?.ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("southwest")]
    [Newtonsoft.Json.JsonObject(Title = "southwest")]
    public class Southwest
    {
        [XmlElement("lat")]
        [Newtonsoft.Json.JsonProperty("lat")]
        public float? Latitude
        {
            get;
            set;
        }

        [XmlElement("lng")]
        [Newtonsoft.Json.JsonProperty("lng")]
        public float? Longitude
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           Latitude?.ToString() +
                                           Longitude?.ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("geometry")]
    [Newtonsoft.Json.JsonObject(Title = "geometry")]
    public class Geometry
    {
        [XmlElement("lat")]
        [Newtonsoft.Json.JsonProperty("lat")]
        public float? Latitude
        {
            get;
            set;
        }

        [XmlElement("lng")]
        [Newtonsoft.Json.JsonProperty("lng")]
        public float? Longitude
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           Latitude?.ToString() +
                                           Longitude?.ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("status")]
    [Newtonsoft.Json.JsonObject(Title = "status")]
    public class Status
    {
        [XmlElement("code")]
        [Newtonsoft.Json.JsonProperty("code")]
        public int? Code
        {
            get;
            set;
        }

        [XmlElement("message")]
        [Newtonsoft.Json.JsonProperty("message")]
        public string Message
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           Code?.ToString() +
                                           Message?.ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }

    [XmlRoot("timestamp")]
    [Newtonsoft.Json.JsonObject(Title = "timestamp")]
    public class Timestamp
    {
        [XmlElement("created_http")]
        [Newtonsoft.Json.JsonProperty("created_http")]
        public string CreatedHttp
        {
            get;
            set;
        }

        [XmlElement("created_unix")]
        [Newtonsoft.Json.JsonProperty("created_unix")]
        public int? CreatedUnix
        {
            get;
            set;
        }

        [XmlElement("_CalculatedKey")]
        [Newtonsoft.Json.JsonProperty("_CalculatedKey")]
        public int? _CalculatedKey
        {
            get
            {
                try
                {
                    var allPropsConcated = "_CalculatedKey-" +
                                           CreatedHttp?.ToString() +
                                           CreatedUnix?.ToString();
                    return allPropsConcated.GetHashCode();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set {}
        }

    }


}
