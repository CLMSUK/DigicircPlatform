// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System.Collections.Generic;
using System.Linq;
using System.Collections.Concurrent;
using System.Reflection;
using zAppDev.DotNet.Framework.Data;
using Microsoft.Extensions.Configuration;

using DigicircMatchmaking.BO;
using DigicircMatchmaking.DAL;
using Identity = zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DigicircMatchmaking
{
    public class DatabaseSeeder
    {
        private ConcurrentDictionary<string, ApplicationPermission> _applicationPermissionDictionary = null;
        private IConfiguration configuration;

        public DatabaseSeeder(IConfiguration configuration = null)
        {
            this.configuration = configuration;
        }

        private ApplicationPermission CreateOrUpdatePermission(string name, string description, bool isCustom, Repository repo)
        {
            if (_applicationPermissionDictionary == null)
            {
                _applicationPermissionDictionary = new ConcurrentDictionary<string, ApplicationPermission>();
                var applicationPermissions = repo.Get<ApplicationPermission>(a => a.Name != null);
                foreach (var item in applicationPermissions)
                {
                    if (!_applicationPermissionDictionary.ContainsKey(item.Name))
                    {
                        _applicationPermissionDictionary.TryAdd(item.Name, item);
                    }
                }
            }
            bool update = false;
            ApplicationPermission p = null;
            if (_applicationPermissionDictionary.ContainsKey(name))
            {
                p = _applicationPermissionDictionary[name];
                if (p.IsCustom != isCustom)
                {
                    p.IsCustom = isCustom;
                    update = true;
                }
                if (p.Description != description)
                {
                    p.Description = description;
                    update = true;
                }
            }
            else
            {
                update = true;
                p = new ApplicationPermission();
                p.Name = name;
                p.IsCustom = isCustom;
                p.Description = description;
            }
            if (update)
            {
                repo.Save(p);
            }
            return p;
        }


        private ConcurrentDictionary<string, ApplicationOperation> _applicationOperationDictionary = null;


        private string GetApplicationOperationKey(string name, string parent, string type)
        {
            return name + '|' + parent + '|' + type;
        }

        private ApplicationOperation CreateOrUpdateOperation(string name, string parent, string type,
                bool isAvailableToAllAuthorizedUsers,
                bool isAvailableToAnonymous, IEnumerable<ApplicationPermission> perms, Repository repo)
        {
            if (_applicationOperationDictionary == null)
            {
                _applicationOperationDictionary = new ConcurrentDictionary<string, ApplicationOperation>();
                var applicationOperations = repo.Get<ApplicationOperation>(a => a.Name != null);
                foreach (ApplicationOperation item in applicationOperations)
                {
                    string key = GetApplicationOperationKey(item.Name, item.ParentControllerName, item.Type);
                    if (!_applicationOperationDictionary.ContainsKey(key))
                    {
                        _applicationOperationDictionary.TryAdd(key, item);
                    }
                }
            }
            ApplicationOperation op = null;
            string currentKey = GetApplicationOperationKey(name, parent, type);
            bool update = false;
            if (_applicationOperationDictionary.ContainsKey(currentKey))
            {
                op = _applicationOperationDictionary[currentKey];
                if (op.IsAvailableToAllAuthorizedUsers != isAvailableToAllAuthorizedUsers)
                {
                    op.IsAvailableToAllAuthorizedUsers = isAvailableToAllAuthorizedUsers;
                    update = true;
                }
                if (op.IsAvailableToAnonymous != isAvailableToAnonymous)
                {
                    op.IsAvailableToAnonymous = isAvailableToAnonymous;
                    update = true;
                }
                List<ApplicationPermission> applicationPermissions = op.Permissions.Where(p => !p.IsCustom).ToList();
                HandleApplicationPermissions<ApplicationOperation>(op, applicationPermissions, perms, ref update);
            }
            else
            {
                update = true;
                op = new ApplicationOperation();
                op.Name = name;
                op.Type = type;
                op.IsAvailableToAllAuthorizedUsers = isAvailableToAllAuthorizedUsers;
                op.IsAvailableToAnonymous = isAvailableToAnonymous;
                op.ParentControllerName = parent;
                if (perms != null)
                {
                    foreach (var p in perms)
                    {
                        op.AddPermissions(p);
                    }
                }
            }
            if (update)
            {
                repo.Save(op);
            }
            return op;
        }



        private ConcurrentDictionary<string, ApplicationRole> _applicationRoleDictionary = null;
        private ApplicationRole CreateOrUpdateRole(string name, string description, IEnumerable<ApplicationPermission> perms, Repository repo)
        {
            if (_applicationRoleDictionary == null)
            {
                _applicationRoleDictionary = new ConcurrentDictionary<string, ApplicationRole>();
                var applicationRoles = repo.Get<ApplicationRole>(a => a.Name != null);
                foreach (ApplicationRole item in applicationRoles)
                {
                    if (!_applicationRoleDictionary.ContainsKey(item.Name))
                    {
                        _applicationRoleDictionary.TryAdd(item.Name, item);
                    }
                }
            }
            ApplicationRole role = null;
            bool update = false;
            if (_applicationRoleDictionary.ContainsKey(name))
            {
                role = _applicationRoleDictionary[name];
                if (role.Description != description)
                {
                    role.Description = description;
                    update = true;
                }
                if (role.IsCustom != false)
                {
                    role.IsCustom = false;
                    update = true;
                }
                List<ApplicationPermission> applicationPermissions = role.Permissions.Where(p => !p.IsCustom).ToList();
                HandleApplicationPermissions<ApplicationRole>(role, applicationPermissions, perms, ref update);
            }
            else
            {
                update = true;
                role = new ApplicationRole();
                role.Name = name;
                role.Description = description;
                role.IsCustom = false;
                if (perms != null)
                {
                    foreach (var p in perms)
                    {
                        role.AddPermissions(p);
                    }
                }
            }
            if (update)
            {
                repo.Save(role);
            }
            return role;
        }


        private void RemoveApplicationPermissions<T>(T objT, List<ApplicationPermission> applicationPermissions)
        {
            MethodInfo removePermissions = typeof(T).GetMethod("RemovePermissions");
            foreach (var p in applicationPermissions)
            {
                removePermissions.Invoke(objT, new object[] { p });
            }
        }



        private void AddApplicationPermissions<T>(T objT,IEnumerable<ApplicationPermission> perms)
        {
            MethodInfo addPermissions = typeof(T).GetMethod("AddPermissions", new[] { typeof(ApplicationPermission) });
            foreach (var p in perms)
            {
                addPermissions.Invoke(objT, new object[] { p });
            }
        }


        private void HandleApplicationPermissions<T>(T objT, List<ApplicationPermission> applicationPermissions,
                IEnumerable<ApplicationPermission> perms,ref bool update)
        {
            if (perms == null)
            {
                if (applicationPermissions != null && applicationPermissions.Count > 0)
                {
                    update = true;
                    RemoveApplicationPermissions<T>(objT, applicationPermissions);
                }
            }
            else if (perms.Any())
            {
                if (applicationPermissions == null || applicationPermissions.Count == 0)
                {
                    update = true;
                    AddApplicationPermissions<T>(objT, perms);
                }
                else
                {
                    if (perms.Count() != applicationPermissions.Count)
                    {
                        update = true;
                        RemoveApplicationPermissions<T>(objT, applicationPermissions);
                        AddApplicationPermissions<T>(objT, perms);
                    }
                    else
                    {
                        bool diffFound = false;
                        foreach (var p in perms)
                        {
                            //if (!applicationPermissions.Contains(p))
                            var checkApplicationPermission = applicationPermissions.FirstOrDefault(a => a.Name == p.Name);
                            if (checkApplicationPermission == null)
                            {
                                diffFound = true;
                                break;
                            }
                        }
                        if (diffFound)
                        {
                            update = true;
                            RemoveApplicationPermissions<T>(objT, applicationPermissions);
                            AddApplicationPermissions<T>(objT, perms);
                        }
                    }
                }
            }
        }



        public void UpdateAuthorizationTables()
        {
            var confValue = System.Configuration.ConfigurationManager.AppSettings["SeedSecurityTables"];
            bool seedSecurityTables = true;
            bool bSeedSecurityTables;
            if (bool.TryParse(confValue, out bSeedSecurityTables))
            {
                seedSecurityTables = bSeedSecurityTables;
            }
            if(!seedSecurityTables) return;
            var watch = new System.Diagnostics.Stopwatch();
            watch.Start();
            MiniSessionManager.ExecuteInUoW(manager =>
            {
                var repo = new Repository(manager);
                var allRoles = new List<ApplicationRole>();
                #region Permissions
                var manageUsersPermission = CreateOrUpdatePermission("ManageUsers", "Can Manage Users", false, repo);
                var manageRolesPermission = CreateOrUpdatePermission("ManageRoles", "Can Manage Roles", false, repo);
                var managePermissionsPermission = CreateOrUpdatePermission("ManagePermissions", "Can Manage Permissions", false, repo);
                var manageOperationsPermission = CreateOrUpdatePermission("ManageOperations", "Can Manage Operations", false, repo);
                var manageSettingsPermission = CreateOrUpdatePermission("ManageSettings", "Can Manage Settings", false, repo);
                var manageApplicationDataPermission = CreateOrUpdatePermission("ManageApplicationData", "Can Manage Application Data", false, repo);
                var customerSelectionAndAdminAddPermission = CreateOrUpdatePermission("CustomerSelectionAndAdmin_Add", "CustomerSelectionAndAdmin_Add", false, repo);
                var userPermission = CreateOrUpdatePermission("User", "User Permision", false, repo);
                var editOrganisationPermission = CreateOrUpdatePermission("EditOrganisation", "User can Edit Organisation", false, repo);
                var editValueListsPermission = CreateOrUpdatePermission("EditValueLists", "Can manage value lists", false, repo);
                var developerPermission = CreateOrUpdatePermission("Developer", "Developer", false, repo);
                var manageActorsPermission = CreateOrUpdatePermission("ManageActors", "Can Manage Actors", false, repo);
                var manageSymbiosisPermission = CreateOrUpdatePermission("ManageSymbiosis", "Can Manage Symbiosys", false, repo);
                var addActorsPermission = CreateOrUpdatePermission("AddActors", "Can Add Actors", false, repo);
                #endregion
                #region Operations
                CreateOrUpdateOperation("GeneralOperation", "ErrorPage", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "ErrorPage", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("SendErrorToAdministrator", "ErrorPage", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "FirstAdminSetup", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Render", "FirstAdminSetup", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Save", "FirstAdminSetup", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "HomePage", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "HomePage", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "NotFoundPage", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "NotFoundPage", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "SignInPage", ClaimTypes.GenericAction, false, true, null, repo);
                CreateOrUpdateOperation("Load", "SignInPage", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("LoadDefault", "SignInPage", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("SignIn", "SignInPage", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "SignOutPage", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("SignOut", "SignOutPage", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Render", "SignOutPage", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "Unauthorized", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "Unauthorized", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "UserPreferences", ClaimTypes.GenericAction, false, false, null, repo);
                CreateOrUpdateOperation("Render", "UserPreferences", ClaimTypes.ControllerAction, false, false, null, repo);
                CreateOrUpdateOperation("Save", "UserPreferences", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("LanguageBoxDataSet", "UserPreferences", ClaimTypes.Dataset, false, false, null, repo);
                CreateOrUpdateOperation("LocaleBoxDataSet", "UserPreferences", ClaimTypes.Dataset, false, false, null, repo);
                CreateOrUpdateOperation("ApplicationThemeDataSet", "UserPreferences", ClaimTypes.Dataset, false, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "MasterPage", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "MasterPage", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("SignOut", "MasterPage", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "MasterPageForSlide", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "MasterPageForSlide", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ApplicationSettingForm", ClaimTypes.GenericAction, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("AddApplicationSetting", "ApplicationSettingForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("EditApplicationSetting", "ApplicationSettingForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("SaveApplicationSetting", "ApplicationSettingForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("DeleteApplicationSetting", "ApplicationSettingForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ApplicationSettingsList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "ApplicationSettingsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("Refresh", "ApplicationSettingsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("List1DataSet", "ApplicationSettingsList", ClaimTypes.Dataset, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ChangePassword", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Render", "ChangePassword", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("ChangePassword", "ChangePassword", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ForgotPassword", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "ForgotPassword", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("ResetPasswordRequest", "ForgotPassword", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("ResetPassword", "ForgotPassword", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ManageOperation", ClaimTypes.GenericAction, false, false,
                                        new [] { manageOperationsPermission }, repo);
                CreateOrUpdateOperation("EditOperation", "ManageOperation", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageOperationsPermission }, repo);
                CreateOrUpdateOperation("SaveOperation", "ManageOperation", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageOperationsPermission }, repo);
                CreateOrUpdateOperation("Button2DataSet", "ManageOperation", ClaimTypes.Dataset, false, false,
                                        new [] { manageOperationsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ManagePermission", ClaimTypes.GenericAction, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("NewPermission", "ManagePermission", ClaimTypes.ControllerAction, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("EditPermission", "ManagePermission", ClaimTypes.ControllerAction, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("SavePermission", "ManagePermission", ClaimTypes.ControllerAction, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("DeletePermission", "ManagePermission", ClaimTypes.ControllerAction, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("Button4DataSet", "ManagePermission", ClaimTypes.Dataset, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("Button41DataSet", "ManagePermission", ClaimTypes.Dataset, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("Button5DataSet", "ManagePermission", ClaimTypes.Dataset, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ManageRole", ClaimTypes.GenericAction, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("NewRole", "ManageRole", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("EditRole", "ManageRole", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("SaveRole", "ManageRole", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("DeleteRole", "ManageRole", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("AddPermissionDataSet", "ManageRole", ClaimTypes.Dataset, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ManageUser", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("NewUser", "ManageUser", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("EditUser", "ManageUser", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("SaveUser", "ManageUser", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("DeleteUser", "ManageUser", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("SetPassword", "ManageUser", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Button1DataSet", "ManageUser", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Button2DataSet", "ManageUser", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "OperationsList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageOperationsPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "OperationsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageOperationsPermission }, repo);
                CreateOrUpdateOperation("Refresh", "OperationsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("List1DataSet", "OperationsList", ClaimTypes.Dataset, false, false,
                                        new [] { manageOperationsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "PermissionsList", ClaimTypes.GenericAction, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "PermissionsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("Refresh", "PermissionsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("List1DataSet", "PermissionsList", ClaimTypes.Dataset, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "RolesList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "RolesList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("Refresh", "RolesList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("List1DataSet", "RolesList", ClaimTypes.Dataset, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "UsersList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "UsersList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Refresh", "UsersList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("List1DataSet", "UsersList", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "MasterPageSignIn", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Render", "MasterPageSignIn", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "CreateAdmin", ClaimTypes.GenericAction, false, true, null, repo);
                CreateOrUpdateOperation("Index", "CreateAdmin", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("Create", "CreateAdmin", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("AuthorizeAccess", "CreateAdmin", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "RegisterForm", ClaimTypes.GenericAction, false, true, null, repo);
                CreateOrUpdateOperation("Index", "RegisterForm", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("Register", "RegisterForm", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("ProfileDataSource", "RegisterForm", ClaimTypes.Dataset, false, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "SearchForm", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Index", "SearchForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("FromBack", "SearchForm", ClaimTypes.ControllerAction, true, true,
                                        new [] { userPermission }, repo);
                CreateOrUpdateOperation("ChangeMode", "SearchForm", ClaimTypes.ControllerAction, true, true,
                                        new [] { userPermission }, repo);
                CreateOrUpdateOperation("TestBubble", "SearchForm", ClaimTypes.ControllerAction, true, true,
                                        new [] { userPermission }, repo);
                CreateOrUpdateOperation("Search", "SearchForm", ClaimTypes.ControllerAction, true, true,
                                        new [] { userPermission }, repo);
                CreateOrUpdateOperation("SearchGraph", "SearchForm", ClaimTypes.ControllerAction, true, true,
                                        new [] { userPermission }, repo);
                CreateOrUpdateOperation("NewSearch", "SearchForm", ClaimTypes.ControllerAction, true, true,
                                        new [] { userPermission }, repo);
                CreateOrUpdateOperation("Refresh", "SearchForm", ClaimTypes.ControllerAction, true, true,
                                        new [] { userPermission }, repo);
                CreateOrUpdateOperation("Reset", "SearchForm", ClaimTypes.ControllerAction, true, true,
                                        new [] { userPermission }, repo);
                CreateOrUpdateOperation("Action", "SearchForm", ClaimTypes.ControllerAction, true, true,
                                        new [] { userPermission }, repo);
                CreateOrUpdateOperation("GoToActorForm", "SearchForm", ClaimTypes.ControllerAction, true, true,
                                        new [] { userPermission }, repo);
                CreateOrUpdateOperation("CountryDataSet", "SearchForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("BusinessFunctionDataSet", "SearchForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("BusinessTypeDataSet", "SearchForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("ActivitiesDataSet", "SearchForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("ViewMode", "SearchForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("AddressDataSet", "SearchForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("SectorTypeDataset", "SearchForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("ActorDataSet1", "SearchForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("MaterialDataSet", "SearchForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("SearchModeDataset", "SearchForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("ActorsInfoDataSet", "SearchForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ResultsForm", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Index", "ResultsForm", ClaimTypes.ControllerAction, true, true,
                                        new [] { userPermission }, repo);
                CreateOrUpdateOperation("CompanyDataSet", "ResultsForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ActorForm", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Add", "ActorForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { addActorsPermission }, repo);
                CreateOrUpdateOperation("Show", "ActorForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("Edit", "ActorForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { editOrganisationPermission }, repo);
                CreateOrUpdateOperation("SetNewGeolocation", "ActorForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("UpdateGeolocation", "ActorForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("Save", "ActorForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Delete", "ActorForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("SetSector", "ActorForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("Back", "ActorForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("SaveNewCluster", "ActorForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("AddNewCluster", "ActorForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("DigitalExpertiseDataset", "ActorForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("DigicircUserDataSource", "ActorForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("CountryDataset", "ActorForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("EntityTypeDataset", "ActorForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("DigicircUserDataset", "ActorForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("MapPoints", "ActorForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("SectorTypeDataSet", "ActorForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("ClustersDataset", "ActorForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "EntityTypeForm", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Add", "EntityTypeForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Edit", "EntityTypeForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Save", "EntityTypeForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Delete", "EntityTypeForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "CountryForm", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Add", "CountryForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Edit", "CountryForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Save", "CountryForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Delete", "CountryForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "CountryList", ClaimTypes.GenericAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("Index", "CountryList", ClaimTypes.ControllerAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("CountryDataSet", "CountryList", ClaimTypes.Dataset, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "EntityTypeList", ClaimTypes.GenericAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("Index", "EntityTypeList", ClaimTypes.ControllerAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("EntityTypeDataSet", "EntityTypeList", ClaimTypes.Dataset, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "BusinessFunctionForm", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Add", "BusinessFunctionForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Edit", "BusinessFunctionForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Save", "BusinessFunctionForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Delete", "BusinessFunctionForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "BusinessFunctionList", ClaimTypes.GenericAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("Index", "BusinessFunctionList", ClaimTypes.ControllerAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("BusinessFunctionDataSet", "BusinessFunctionList", ClaimTypes.Dataset, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "BusinessTypeForm", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Add", "BusinessTypeForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Edit", "BusinessTypeForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Save", "BusinessTypeForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Delete", "BusinessTypeForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "BusinessTypeList", ClaimTypes.GenericAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("Index", "BusinessTypeList", ClaimTypes.ControllerAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("BusinessTypeDataSet", "BusinessTypeList", ClaimTypes.Dataset, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ActivitiesForm", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Add", "ActivitiesForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Edit", "ActivitiesForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Save", "ActivitiesForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Delete", "ActivitiesForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ActivitiesList", ClaimTypes.GenericAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("Index", "ActivitiesList", ClaimTypes.ControllerAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("ActivitiesDataSet", "ActivitiesList", ClaimTypes.Dataset, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "Dashboard", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Index", "Dashboard", ClaimTypes.ControllerAction, true, false,
                                        new [] { userPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "EmptyMasterPage", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Index", "EmptyMasterPage", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "GraphQueryDebug", ClaimTypes.GenericAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("Index", "GraphQueryDebug", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("Search", "GraphQueryDebug", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("SearchExtend", "GraphQueryDebug", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("GetAllLinks", "GraphQueryDebug", ClaimTypes.Dataset, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("GetAllNodes", "GraphQueryDebug", ClaimTypes.Dataset, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("CountryDataSet", "GraphQueryDebug", ClaimTypes.Dataset, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "Bubble", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("RedirectToActorForm", "Bubble", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("Close", "Bubble", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "GraphCreateDebug", ClaimTypes.GenericAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("Index", "GraphCreateDebug", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("Save", "GraphCreateDebug", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "GraphExportForm", ClaimTypes.GenericAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("Index", "GraphExportForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("IntiGraph", "GraphExportForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("InitElastic", "GraphExportForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ExpertiseForm", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Add", "ExpertiseForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Edit", "ExpertiseForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Save", "ExpertiseForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Delete", "ExpertiseForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ExpertiseList", ClaimTypes.GenericAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("Index", "ExpertiseList", ClaimTypes.ControllerAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("ExpertiseDataSet", "ExpertiseList", ClaimTypes.Dataset, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "SectorTypeForm", ClaimTypes.GenericAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("Add", "SectorTypeForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("Edit", "SectorTypeForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("Save", "SectorTypeForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("Delete", "SectorTypeForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "SectorTypeList", ClaimTypes.GenericAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("Index", "SectorTypeList", ClaimTypes.ControllerAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("Delete", "SectorTypeList", ClaimTypes.ControllerAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("CleanDuplicates", "SectorTypeList", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("SectorTypeDataSet", "SectorTypeList", ClaimTypes.Dataset, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ServicesForm", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Add", "ServicesForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Edit", "ServicesForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Save", "ServicesForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Delete", "ServicesForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ServicesList", ClaimTypes.GenericAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("Index", "ServicesList", ClaimTypes.ControllerAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("ServicesDataSet", "ServicesList", ClaimTypes.Dataset, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ThematicExpertiseForm", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Add", "ThematicExpertiseForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Edit", "ThematicExpertiseForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Save", "ThematicExpertiseForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Delete", "ThematicExpertiseForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ThematicExpertiseList", ClaimTypes.GenericAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("Index", "ThematicExpertiseList", ClaimTypes.ControllerAction, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("ThematicExpertiseDataSet", "ThematicExpertiseList", ClaimTypes.Dataset, false, false,
                                        new [] { editValueListsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "CompanyList", ClaimTypes.GenericAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("Index", "CompanyList", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("Transform", "CompanyList", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("Delete", "CompanyList", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("CompanyDataSet", "CompanyList", ClaimTypes.Dataset, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("EntityTypeDataSet", "CompanyList", ClaimTypes.Dataset, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ActorViewForm", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("GoToWebsite", "ActorViewForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("Show", "ActorViewForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("Save", "ActorViewForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Delete", "ActorViewForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("SetSector", "ActorViewForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("Back", "ActorViewForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("DigitalExpertiseDataset", "ActorViewForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("DigicircUserDataSource", "ActorViewForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("CountryDataset", "ActorViewForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("EntityTypeDataset", "ActorViewForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("DigicircUserDataset", "ActorViewForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("BusinessFunctionDataset", "ActorViewForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("BusinessTypeDataset", "ActorViewForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("ActivitiesDataset", "ActorViewForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("MapPoints", "ActorViewForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("SectorTypeDataSet", "ActorViewForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ClusterList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission, manageRolesPermission, managePermissionsPermission, manageOperationsPermission }, repo);
                CreateOrUpdateOperation("Index", "ClusterList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission, manageRolesPermission, managePermissionsPermission, manageOperationsPermission }, repo);
                CreateOrUpdateOperation("ActorDataSet", "ClusterList", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission, manageRolesPermission, managePermissionsPermission, manageOperationsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ManageActors", ClaimTypes.GenericAction, false, false,
                                        new [] { manageActorsPermission }, repo);
                CreateOrUpdateOperation("Index", "ManageActors", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageActorsPermission }, repo);
                CreateOrUpdateOperation("EsSync", "ManageActors", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("KnowledgeSync", "ManageActors", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("SaveActor", "ManageActors", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageActorsPermission }, repo);
                CreateOrUpdateOperation("SelectUsers", "ManageActors", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageActorsPermission }, repo);
                CreateOrUpdateOperation("ActorDataSet", "ManageActors", ClaimTypes.Dataset, false, false,
                                        new [] { manageActorsPermission }, repo);
                CreateOrUpdateOperation("DigicircUserDataSet", "ManageActors", ClaimTypes.Dataset, false, false,
                                        new [] { manageActorsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ActorsToAdministrators", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Add", "ActorsToAdministrators", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("DigicircUserDataSet", "ActorsToAdministrators", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ClusterInitialization", ClaimTypes.GenericAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("Index", "ClusterInitialization", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("Save", "ClusterInitialization", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "MaterialForm", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Add", "MaterialForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Edit", "MaterialForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Save", "MaterialForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("DeleteConvertedByProcess", "MaterialForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("OpenEditConvertByProcess", "MaterialForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("OpenEditConvertedByProcess", "MaterialForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("DeleteConvertByProcess", "MaterialForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Delete", "MaterialForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("OpenNewConvertedByProcess", "MaterialForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("OpenNewConvertByProcess", "MaterialForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("AddNewProcess", "MaterialForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Materials", "MaterialForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("ProductTypeDataset", "MaterialForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("PhysicalFormDataset", "MaterialForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("UnitOfMeasurementDataset", "MaterialForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "MaterialList", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Index", "MaterialList", ClaimTypes.ControllerAction, true, false,
                                        new [] { manageSymbiosisPermission }, repo);
                CreateOrUpdateOperation("SendToGraph", "MaterialList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSymbiosisPermission, developerPermission }, repo);
                CreateOrUpdateOperation("ResetAll", "MaterialList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSymbiosisPermission, developerPermission }, repo);
                CreateOrUpdateOperation("MaterialDataSet", "MaterialList", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ProcessForm", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Add", "ProcessForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Edit", "ProcessForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Save", "ProcessForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Delete", "ProcessForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ProcessList", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Index", "ProcessList", ClaimTypes.ControllerAction, true, false,
                                        new [] { manageSymbiosisPermission }, repo);
                CreateOrUpdateOperation("SendToGraph", "ProcessList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSymbiosisPermission, developerPermission }, repo);
                CreateOrUpdateOperation("ShowDetails", "ProcessList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSymbiosisPermission, developerPermission }, repo);
                CreateOrUpdateOperation("ProcessDataSet", "ProcessList", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ProductTypeForm", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Add", "ProductTypeForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Edit", "ProductTypeForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Save", "ProductTypeForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Delete", "ProductTypeForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("DeleteSubType", "ProductTypeForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("ProductTypeDataSet", "ProductTypeForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ProductTypeList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageSymbiosisPermission }, repo);
                CreateOrUpdateOperation("Index", "ProductTypeList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSymbiosisPermission }, repo);
                CreateOrUpdateOperation("ProductTypeDataSet", "ProductTypeList", ClaimTypes.Dataset, false, false,
                                        new [] { manageSymbiosisPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ManageResources", ClaimTypes.GenericAction, false, false,
                                        new [] { editOrganisationPermission }, repo);
                CreateOrUpdateOperation("Index", "ManageResources", ClaimTypes.ControllerAction, false, false,
                                        new [] { editOrganisationPermission }, repo);
                CreateOrUpdateOperation("AddNewResource", "ManageResources", ClaimTypes.ControllerAction, false, false,
                                        new [] { editOrganisationPermission }, repo);
                CreateOrUpdateOperation("EditResource", "ManageResources", ClaimTypes.ControllerAction, false, false,
                                        new [] { editOrganisationPermission }, repo);
                CreateOrUpdateOperation("CloseModal", "ManageResources", ClaimTypes.ControllerAction, false, false,
                                        new [] { editOrganisationPermission }, repo);
                CreateOrUpdateOperation("DeleteResource", "ManageResources", ClaimTypes.ControllerAction, false, false,
                                        new [] { editOrganisationPermission }, repo);
                CreateOrUpdateOperation("Save", "ManageResources", ClaimTypes.ControllerAction, false, false,
                                        new [] { editOrganisationPermission }, repo);
                CreateOrUpdateOperation("RequestNewMaterial", "ManageResources", ClaimTypes.ControllerAction, false, false,
                                        new [] { editOrganisationPermission }, repo);
                CreateOrUpdateOperation("CloseMaterialModal", "ManageResources", ClaimTypes.ControllerAction, false, false,
                                        new [] { editOrganisationPermission }, repo);
                CreateOrUpdateOperation("Resources", "ManageResources", ClaimTypes.Dataset, false, false,
                                        new [] { editOrganisationPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ResourceForm", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("MaterialDataSet", "ResourceForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("ProductTypeDataSet", "ResourceForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("UnitOfMeasurementDataset", "ResourceForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("PhysicalFormDataset", "ResourceForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("AddressDataset", "ResourceForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "UnitOfMeasurementForm", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Add", "UnitOfMeasurementForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Edit", "UnitOfMeasurementForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Save", "UnitOfMeasurementForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Delete", "UnitOfMeasurementForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "UnitOfMeasurementList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageSymbiosisPermission }, repo);
                CreateOrUpdateOperation("Index", "UnitOfMeasurementList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSymbiosisPermission }, repo);
                CreateOrUpdateOperation("UnitOfMeasurementDataSet", "UnitOfMeasurementList", ClaimTypes.Dataset, false, false,
                                        new [] { manageSymbiosisPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "PhysicalFormForm", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Add", "PhysicalFormForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Edit", "PhysicalFormForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Save", "PhysicalFormForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Delete", "PhysicalFormForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "PhysicalFormList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageSymbiosisPermission }, repo);
                CreateOrUpdateOperation("Index", "PhysicalFormList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSymbiosisPermission }, repo);
                CreateOrUpdateOperation("PhysicalFormDataSet", "PhysicalFormList", ClaimTypes.Dataset, false, false,
                                        new [] { manageSymbiosisPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ForgotUsername", ClaimTypes.GenericAction, false, true, null, repo);
                CreateOrUpdateOperation("Render", "ForgotUsername", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("ResetPasswordRequest", "ForgotUsername", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "OportunitiesExplorer", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Index", "OportunitiesExplorer", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "UnderContructionPage", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Index", "UnderContructionPage", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "MatchBaseExplorer", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Index", "MatchBaseExplorer", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("FromBack", "MatchBaseExplorer", ClaimTypes.ControllerAction, true, true,
                                        new [] { userPermission }, repo);
                CreateOrUpdateOperation("ChangeMode", "MatchBaseExplorer", ClaimTypes.ControllerAction, true, true,
                                        new [] { userPermission }, repo);
                CreateOrUpdateOperation("Update", "MatchBaseExplorer", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GoToActorForm", "MatchBaseExplorer", ClaimTypes.ControllerAction, true, true,
                                        new [] { userPermission }, repo);
                CreateOrUpdateOperation("ActorDataset", "MatchBaseExplorer", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("SearchModeDataset", "MatchBaseExplorer", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("DesiredResourcesDataset", "MatchBaseExplorer", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("ResourcesDataset", "MatchBaseExplorer", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("DisplayModeDataset", "MatchBaseExplorer", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("ActorDataSet1", "MatchBaseExplorer", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("MatchDataSet", "MatchBaseExplorer", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "Matching", ClaimTypes.GenericAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("Index", "Matching", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("Match", "Matching", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "SymbiosisMasterPage", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "SymbiosisMasterPage", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("SignOut", "SymbiosisMasterPage", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "KnowledgeHub", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Index", "KnowledgeHub", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("Search", "KnowledgeHub", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("MaterialDataSet", "KnowledgeHub", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("ProductDataset", "KnowledgeHub", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "MyActors", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Index", "MyActors", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("ActorDataSet", "MyActors", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "About", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Index", "About", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("Step0", "QueryGeocoder", ClaimTypes.IDEF0Activity, true, true, null, repo);
                CreateOrUpdateOperation("Step0", "SuggestionsFlow", ClaimTypes.IDEF0Activity, true, true, null, repo);
                CreateOrUpdateOperation("AddResource", "ActorAPI", ClaimTypes.ExposedService, true, false, null, repo);
                #endregion
                #region Roles
                allRoles = new List<ApplicationRole>
                {
                    CreateOrUpdateRole("Administrator", "Administrator",
                    new [] { manageUsersPermission, manageRolesPermission, managePermissionsPermission, manageOperationsPermission, manageSettingsPermission, manageApplicationDataPermission, editValueListsPermission }, repo),
                    CreateOrUpdateRole("User", "",
                    new [] { userPermission, addActorsPermission, editOrganisationPermission }, repo),
                    CreateOrUpdateRole("Expert", "Expert",
                    new [] { manageSymbiosisPermission }, repo),
                    CreateOrUpdateRole("Moderator", "",
                    new [] { editValueListsPermission, editOrganisationPermission, manageActorsPermission }, repo),
                };
                #endregion
            });
            watch.Stop();
            log4net.LogManager.GetLogger(typeof(DatabaseSeeder)).Info($"Startup.Database finished in {watch.ElapsedMilliseconds}ms");
        }
    }
}
