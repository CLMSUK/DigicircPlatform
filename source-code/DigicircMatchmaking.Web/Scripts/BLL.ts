// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
namespace DigicircMatchmaking.BO {
export class Domain_LocalResourcesDefinition  {
    _originalTypeClassName = "DigicircMatchmaking.BO.Domain_LocalResourcesDefinition";
    Domain = DigicircMatchmaking.BO;
    constructor() {
    }
GeoLocation_Res_ASSOC_Country_Address_Country:
    any;
ValueList_Res_ASSOC_EntityType_Actor_EntityType:
    any;
}

export class GlobalResourcesDefinition  {
    _originalTypeClassName = "DigicircMatchmaking.BO.GlobalResourcesDefinition";
    Domain = DigicircMatchmaking.BO;
    constructor() {
    }
RES_SITE_ApplicationTitle:
    any;
RES_SITE_ApplicationDescription:
    any;
RES_SITE_WindowTitle:
    any;
RES_SITE_PREFS_CancelButtonText:
    any;
RES_SITE_PREFS_OKButtonText:
    any;
RES_SITE_Changesnotsaved:
    any;
RES_SITE_SessionExpiredErrorMessage:
    any;
RES_SITE_SessionRefreshMessage:
    any;
RES_SITE_SessionRefreshedMessage:
    any;
RES_SITE_ExitConfirmation:
    any;
RES_SITE_ExitConfirmationMessage:
    any;
RES_SITE_AreYouSure:
    any;
RES_SITE_Confirm:
    any;
RES_SITE_CloseChildList:
    any;
RES_SITE_Exit:
    any;
RES_SITE_NullValue:
    any;
RES_SITE_POPUP_BLOCKED_TITLE:
    any;
RES_SITE_POPUP_BLOCKED_MESSAGE:
    any;
RES_SITE_StaleObjectStateExceptionTitle:
    any;
RES_SITE_StaleObjectStateExceptionMessage:
    any;
RES_CONTROLLER_ACTION_TimeoutErrorTitle:
    any;
RES_CONTROLLER_ACTION_TimeoutErrorMessage:
    any;
RES_CONTROLLER_ACTION_AbortErrorTitle:
    any;
RES_CONTROLLER_ACTION_AbortErrorMessage:
    any;
RES_CONTROLLER_ACTION_GenericErrorTitle:
    any;
RES_CONTROLLER_ACTION_GenericErrorMessage:
    any;
RES_CONTROLLER_ACTION_ParserErrorTitle:
    any;
RES_CONTROLLER_ACTION_ParserErrorMessage:
    any;
RES_BO_PrimaryKeyNotSet:
    any;
RES_BO_CannotDeleteNewObject:
    any;
RES_BO_UpdateFailedDueToConcurrency:
    any;
RES_BO_DeleteFailedDueToConcurrency:
    any;
RES_BO_Overflow:
    any;
RES_BO_InvalidPassword:
    any;
RES_BO_InvalidPassword_CapitalLettersRequired:
    any;
RES_BO_InvalidPassword_MinPasswordLength:
    any;
RES_BO_InvalidPassword_MinRequiredNumericDigits:
    any;
RES_BO_InvalidPassword_MinRequiredNonAlphanumeric:
    any;
RES_BO_NewPass_And_OldPass_MustNotMatch:
    any;
RES_BO_BR_InvalidEmail:
    any;
RES_LIST_ERROR_ErrorTitle:
    any;
RES_LIST_ERROR_CannotRemoveLastView:
    any;
RES_LIST_TOOLBAR_ExportButtonTooltip:
    any;
RES_LIST_TOOLBAR_FilterButtonTooltip:
    any;
RES_LIST_TOOLBAR_PreferencesButtonTooltip:
    any;
RES_LIST_TOOLBAR_RefreshButtonTooltip:
    any;
RES_LIST_TOOLBAR_RefreshResetButtonTooltip:
    any;
RES_LIST_PAGER_PageSize:
    any;
RES_LIST_PAGER_Page:
    any;
RES_LIST_PAGER_Of:
    any;
RES_LIST_PAGER_FirstPage:
    any;
RES_LIST_PAGER_PreviousPage:
    any;
RES_LIST_PAGER_NextPage:
    any;
RES_LIST_PAGER_LastPage:
    any;
RES_LIST_PAGER_TotalRecords:
    any;
RES_LIST_AGGREGATE_Summation:
    any;
RES_LIST_AGGREGATE_Average:
    any;
RES_LIST_AGGREGATE_Count:
    any;
RES_LIST_PAGER_PageAggregateTooltip:
    any;
RES_LIST_PAGER_GrandAggregateTooltip:
    any;
RES_LIST_EXPORT_DialogTitle:
    any;
RES_LIST_EXPORT_ExportRange_CurrentPage:
    any;
RES_LIST_EXPORT_ExportRange_Top100Pages:
    any;
RES_LIST_EXPORT_ExportRange_AllPages_10000_Restriction:
    any;
RES_LIST_EXPORT_ExportRange_AllPages:
    any;
RES_LIST_EXPORT_PrintRange:
    any;
RES_LIST_EXPORT_IncludeGridLines:
    any;
RES_LIST_EXPORT_ExportOK:
    any;
RES_LIST_EXPORT_ExportCancel:
    any;
RES_LIST_FILTERS_DialogTitle:
    any;
RES_LIST_FILTERS_RowOperator_Header:
    any;
RES_LIST_FILTERS_RowOperatorTypes_None:
    any;
RES_LIST_FILTERS_RowOperatorTypes_And:
    any;
RES_LIST_FILTERS_RowOperatorTypes_Or:
    any;
RES_LIST_FILTERS_Column_Header:
    any;
RES_LIST_FILTERS_Column_None:
    any;
RES_LIST_FILTERS_Operators_Header:
    any;
RES_LIST_FILTERS_Operators_None:
    any;
RES_LIST_FILTERS_Operators_EqualTo:
    any;
RES_LIST_FILTERS_Operators_NotEqualTo:
    any;
RES_LIST_FILTERS_Operators_LessThan:
    any;
RES_LIST_FILTERS_Operators_LessThanOrEqualTo:
    any;
RES_LIST_FILTERS_Operators_GreaterThan:
    any;
RES_LIST_FILTERS_Operators_GreaterThanOrEqualTo:
    any;
RES_LIST_FILTERS_Operators_Like:
    any;
RES_LIST_FILTERS_Operators_IsNull:
    any;
RES_LIST_FILTERS_Operators_NotNull:
    any;
RES_LIST_FILTERS_Operators_HasΝοValue:
    any;
RES_LIST_FILTERS_SelectAll:
    any;
RES_LIST_FILTERS_FilterValue_Header:
    any;
RES_LIST_FILTERS_AddFilter:
    any;
RES_LIST_FILTERS_FilterOK:
    any;
RES_LIST_FILTERS_FilterCancel:
    any;
RES_LIST_PREFERENCES_DialogTitle:
    any;
RES_LIST_PREFERENCES_Column_Header:
    any;
RES_LIST_PREFERENCES_Visible:
    any;
RES_LIST_PREFERENCES_Sorting:
    any;
RES_LIST_PREFERENCES_SortingType_None:
    any;
RES_LIST_PREFERENCES_SortingType_ASC:
    any;
RES_LIST_PREFERENCES_SortingType_DESC:
    any;
RES_LIST_PREFERENCES_SortOrder:
    any;
RES_LIST_PREFERENCES_MoveUp:
    any;
RES_LIST_PREFERENCES_MoveDown:
    any;
RES_LIST_PREFERENCES_PreferencesOK:
    any;
RES_LIST_PREFERENCES_PreferencesCancel:
    any;
RES_LIST_SelectCheckBox_Tooltip:
    any;
RES_LIST_SelectAllCheckBox_Tooltip:
    any;
RES_LIST_TOOLBAR_MoreActionsButton_Text:
    any;
RES_LISTFORM_SUCCESS_SuccessMessage:
    any;
RES_LISTFORM_SUCCESS_SuccessTitle:
    any;
RES_LIST_PAGER_SelectedRecords:
    any;
RES_LISTFORM_NORESULTS_NoResults:
    any;
RES_LIST_ERROR_UseOnlyEqualLike:
    any;
RES_LIST_ERROR_MultipleNavigationActions:
    any;
RES_LIST_ShowOnlyGroups_Expand:
    any;
RES_LIST_ShowOnlyGroups_Collapse:
    any;
RES_LIST_FILTERS_NoFilterDefined:
    any;
RES_LIST_EXPORT_ExportOnlyGroups:
    any;
RES_LIST_EXPORT_ExportTo:
    any;
RES_LIST_VIEWS_RemovePrompt:
    any;
RES_LIST_VIEWS_SaveHeader:
    any;
RES_LIST_VIEWS_Name:
    any;
RES_LIST_VIEWS_Ok:
    any;
RES_LIST_VIEWS_Cancel:
    any;
RES_LIST_VIEWS_MakeDefault:
    any;
RES_LIST_VIEWS_Remove:
    any;
RES_LIST_VIEWS_Save:
    any;
RES_LIST_PAGER_Items:
    any;
RES_LIST_PAGER_PerPage:
    any;
RES_LIST_PAGE_Pages:
    any;
RES_LIST_PREFERENCES_Rearrange:
    any;
RES_LIST_TOOLBAR_HideQuickFilters:
    any;
RES_LIST_TOOLBAR_PredefinedView:
    any;
RES_LIST_TOOLBAR_Search:
    any;
RES_LIST_TOOLBAR_ShowQuickFilters:
    any;
RES_LIST_VIEWS_IsDefault:
    any;
RES_LISTFORM_FiltersApplied:
    any;
RES_LIST_AGGREGATORS_GrandAverage:
    any;
RES_LIST_AGGREGATORS_GrandCount:
    any;
RES_LIST_AGGREGATORS_GrandTotal:
    any;
RES_LIST_AGGREGATORS_PageAverage:
    any;
RES_LIST_AGGREGATORS_PageCount:
    any;
RES_LIST_AGGREGATORS_PageTotal:
    any;
RES_LIST_TOOLBAR_GroupingOrder:
    any;
RES_LIST_TOOLBAR_Page:
    any;
RES_LIST_SortASC_Tooltip:
    any;
RES_LIST_SortDESC_Tooltip:
    any;
RES_LIST_UnSort_Tooltip:
    any;
RES_LIST_FILTERS_Operators_Range:
    any;
RES_LIST_FILTERS_Operators_HasNoValue:
    any;
RES_LIST_FILTERS_Operators_HasValue:
    any;
RES_LIST_AGGREGATORS_CalculateAverage:
    any;
RES_LIST_AGGREGATORS_CalculateCount:
    any;
RES_LIST_AGGREGATORS_CalculateSum:
    any;
RES_LIST_TOOLBAR_CommonActions:
    any;
RES_LIST_MoveColumnLeft_Tooltip:
    any;
RES_LIST_MoveColumnRight_Tooltip:
    any;
RES_LIST_PREFERENCES_Order:
    any;
RES_LIST_FILTERS_False:
    any;
RES_LIST_FILTERS_True:
    any;
RES_LIST_FILTERS_Apply:
    any;
RES_LIST_FILTERS_ClearAll:
    any;
RES_LIST_RequiredFiltersMissingMessage:
    any;
RES_LIST_RequiredFiltersMissingTitle:
    any;
RES_LIST_FILTERS_ApplyQuickFilter:
    any;
RES_LIST_FILTERS_ClearQuickFilter:
    any;
RES_LISTFORM_SubGroups:
    any;
RES_LIST_EXPORT_FileName:
    any;
RES_LIST_EXPORT_PortraitOrientation:
    any;
RES_LIST_EXPORT_SumHeader:
    any;
RES_LIST_EXPORT_AverageHeader:
    any;
RES_LIST_EXPORT_Visible:
    any;
RES_LIST_EXPORT_Column:
    any;
RES_LIST_EXPORT_DisplayColumns:
    any;
RES_LIST_EXPORT_GroupColor:
    any;
RES_LIST_EXPORT_HeaderColor:
    any;
RES_LIST_EXPORT_EvenColor:
    any;
RES_LIST_EXPORT_OddColor:
    any;
RES_LIST_EXPORT_AggregateColor:
    any;
RES_LIST_EXPORT_CountHeader:
    any;
RES_LIST_EXPORT_TotalNonGroupCount:
    any;
RES_LISTFORM_GetGroupsClosed:
    any;
RES_LISTFORM_DisplayGroupItems:
    any;
RES_LISTFORM_PrevStateTooltip:
    any;
RES_LIST_AGGREGATORS_ClearAll:
    any;
RES_LIST_Import_DownloadCsv:
    any;
RES_LIST_Import_Import:
    any;
RES_LIST_Import_UploadCsv:
    any;
RES_LIST_Import_ErrorDescription:
    any;
RES_LIST_Import_ErrorDetails:
    any;
RES_LIST_Import_ErrorMessage:
    any;
RES_LIST_Import_FailedRecords:
    any;
RES_LIST_Import_ImportedRecords:
    any;
RES_LIST_Import_ImportResults:
    any;
RES_LIST_Import_RowNumber:
    any;
RES_LIST_Import_PreferedEncoding:
    any;
RES_LIST_VIEWS_Delete:
    any;
RES_LIST_TOOLBAR_ResetConfrmation:
    any;
RES_LIST_VIEWS_MakeDefaultConfirmation:
    any;
RES_LIST_VIEWS_Overwrite:
    any;
RES_LIST_VIEWS_NameAlert:
    any;
RES_LIST_DeselectAllRecordsPromptText:
    any;
RES_LIST_DeselectAllPageRecordsText:
    any;
RES_DATALIST_Actions:
    any;
RES_DATALIST_SelectionActions:
    any;
RES_DATALIST_ClearSearch:
    any;
RES_DATALIST_Search:
    any;
RES_DATALIST_NoResults:
    any;
RES_DATALIST_Info:
    any;
RES_DATALIST_PageSize:
    any;
RES_DATALIST_Records:
    any;
RES_DATALIST_All:
    any;
RES_DATALIST_Loading:
    any;
RES_DATALIST_Processing:
    any;
RES_DATALIST_PAGER_First:
    any;
RES_DATALIST_PAGER_Last:
    any;
RES_DATALIST_PAGER_Next:
    any;
RES_DATALIST_PAGER_Previous:
    any;
RES_DATALIST_FILTERS_True:
    any;
RES_DATALIST_FILTERS_False:
    any;
RES_DATALIST_AGGREGATORS_CalculateAverage:
    any;
RES_DATALIST_AGGREGATORS_CalculateCount:
    any;
RES_DATALIST_AGGREGATORS_CalculateSum:
    any;
RES_DATALIST_BUTTONS_ColumnVisibility:
    any;
RES_DATALIST_BUTTONS_Copy:
    any;
RES_DATALIST_BUTTONS_CopyTitle:
    any;
RES_DATALIST_BUTTONS_CopySuccessSingle:
    any;
RES_DATALIST_BUTTONS_CopySuccessMulti:
    any;
RES_DATALIST_AGGREGATORS_GrandAverage:
    any;
RES_DATALIST_AGGREGATORS_GrandCount:
    any;
RES_DATALIST_AGGREGATORS_GrandTotal:
    any;
RES_DATALIST_AGGREGATORS_PageAverage:
    any;
RES_DATALIST_AGGREGATORS_PageCount:
    any;
RES_DATALIST_AGGREGATORS_PageTotal:
    any;
RES_DATALIST_SelectAllRecordsText:
    any;
RES_DATALIST_SelectAllPageRecordsText:
    any;
RES_DATALIST_DeselectAllRecordsText:
    any;
RES_DATALIST_DeselectAllPageRecordsText:
    any;
RES_DATALIST_ExportTitle:
    any;
RES_DATALIST_OneRowSelected:
    any;
RES_DATALIST_MulitpleRowsSelected:
    any;
RES_DATALIST_EXPORT_DialogTitle:
    any;
RES_DATALIST_EXPORT_ExportRange_CurrentPage:
    any;
RES_DATALIST_EXPORT_ExportRange_Top100Pages:
    any;
RES_DATALIST_EXPORT_ExportRange_AllPages_10000_Restriction:
    any;
RES_DATALIST_EXPORT_ExportRange_AllPages:
    any;
RES_DATALIST_EXPORT_PrintRange:
    any;
RES_DATALIST_EXPORT_IncludeGridLines:
    any;
RES_DATALIST_EXPORT_ExportOK:
    any;
RES_DATALIST_EXPORT_ExportCancel:
    any;
RES_DATALIST_EXPORT_ExportOnlyGroups:
    any;
RES_DATALIST_EXPORT_ExportTo:
    any;
RES_DATALIST_EXPORT_FileName:
    any;
RES_DATALIST_EXPORT_PortraitOrientation:
    any;
RES_DATALIST_EXPORT_SumHeader:
    any;
RES_DATALIST_EXPORT_AverageHeader:
    any;
RES_DATALIST_EXPORT_Visible:
    any;
RES_DATALIST_EXPORT_Column:
    any;
RES_DATALIST_EXPORT_DisplayColumns:
    any;
RES_DATALIST_EXPORT_GroupColor:
    any;
RES_DATALIST_EXPORT_HeaderColor:
    any;
RES_DATALIST_EXPORT_EvenColor:
    any;
RES_DATALIST_EXPORT_OddColor:
    any;
RES_DATALIST_EXPORT_AggregateColor:
    any;
RES_DATALIST_EXPORT_CountHeader:
    any;
RES_DATALIST_EXPORT_TotalNonGroupCount:
    any;
RES_DATALIST_Grouping:
    any;
RES_DATALIST_GroupingOrder:
    any;
RES_DATALIST_Column:
    any;
RES_DATALIST_GetGroupsClosed:
    any;
RES_DATALIST_MergedGroupLevels:
    any;
RES_DATALIST_VIEWS_ViewName:
    any;
RES_DATALIST_VIEWS_View:
    any;
RES_DATALIST_VIEWS_Views:
    any;
RES_DATALIST_VIEWS_DeleteView:
    any;
RES_DATALIST_VIEWS_SaveView:
    any;
RES_DATALIST_VIEWS_InvalidViewName:
    any;
RES_DATALIST_VIEWS_IsViewDefault:
    any;
RES_DATALIST_VIEWS_DeleteConfirmation:
    any;
RES_DATALIST_QuickFilters:
    any;
RES_DATALIST_Import:
    any;
RES_DATALIST_DownloadImportTemplate:
    any;
RES_DATALIST_UploadImportFile:
    any;
RES_DATALIST_ImportDataEncoding:
    any;
RES_DATALIST_ImportResult:
    any;
RES_DATALIST_ImportResultSuccess:
    any;
RES_DATALIST_ImportResultErrors:
    any;
RES_DATALIST_ImportResultErrorList:
    any;
RES_DATALIST_MaxSelectedRowsLimitationTitle:
    any;
RES_DATALIST_MaxSelectedRowsLimitationMessage:
    any;
RES_DATALIST_Refresh:
    any;
RES_DATALIST_Reset:
    any;
RES_DATALIST_FILTERS_Ok:
    any;
RES_DATALIST_FILTERS_Cancel:
    any;
RES_DATALIST_FILTERS_ClearAll:
    any;
RES_DATALIST_FILTERS_RequiredFiltersMissingMessage:
    any;
RES_DATALIST_FILTERS_DialogTitle:
    any;
RES_DATALIST_FILTERS_AddFilter:
    any;
RES_DATALIST_FILTERS_Operators_Header:
    any;
RES_DATALIST_FILTERS_FilterValue_Header:
    any;
RES_DATALIST_FILTERS_RowOperator_Header:
    any;
RES_DATALIST_FILTERS_RowOperatorTypes_Or:
    any;
RES_DATALIST_FILTERS_RowOperatorTypes_And:
    any;
RES_DATALIST_FILTERS_Operators_HasNoValue:
    any;
RES_DATALIST_FILTERS_Operators_HasValue:
    any;
RES_DATALIST_FILTERS_Operators_Range:
    any;
RES_DATALIST_FILTERS_Operators_EqualTo:
    any;
RES_DATALIST_FILTERS_Operators_Like:
    any;
RES_DATALIST_FILTERS_Operators_NotEqualTo:
    any;
RES_DATALIST_FILTERS_Operators_GreaterThan:
    any;
RES_DATALIST_FILTERS_Operators_GreaterThanOrEqualTo:
    any;
RES_DATALIST_FILTERS_Operators_LessThan:
    any;
RES_DATALIST_FILTERS_Operators_LessThanOrEqualTo:
    any;
RES_DATALIST_VIEWS_ActiveView:
    any;
RES_DATALIST_EXPORTV2_Totals:
    any;
RES_DATALIST_EXPORTV2_Aggregator_Count:
    any;
RES_DATALIST_EXPORTV2_Aggregator_Sum:
    any;
RES_DATALIST_EXPORTV2_Aggregator_Average:
    any;
RES_DATALIST_EXPORTV2_Aggregator_TotalCount:
    any;
RES_DATALIST_EXPORTV2_Aggregator_TotalSum:
    any;
RES_DATALIST_EXPORTV2_Aggregator_TotalAverage:
    any;
RES_WEBFORM_PAGER_Records:
    any;
RES_WEBFORM_PAGER_To:
    any;
RES_WEBFORM_PAGER_FirstPage:
    any;
RES_WEBFORM_PAGER_PreviousPage:
    any;
RES_WEBFORM_PAGER_NextPage:
    any;
RES_WEBFORM_PAGER_LastPage:
    any;
RES_WEBFORM_PAGER_TotalRecords:
    any;
RES_WEBFORM_PAGER_RecordsPerPage:
    any;
RES_WEBFORM_GRID_AddRow:
    any;
RES_WEBFORM_GRID_DeleteRow:
    any;
RES_WEBFORM_GRID_NoData:
    any;
RES_WEBFORM_GRID_NoMatches:
    any;
RES_WEBFORM_GRID_NoMoreMatches:
    any;
RES_WEBFORM_GRID_Result:
    any;
RES_WEBFORM_GRID_From:
    any;
RES_WEBFORM_FIELD_Required:
    any;
RES_WEBFORM_FIELD_RequiredMissing:
    any;
RES_WEBFORM_ERROR_ErrorTitle:
    any;
RES_WEBFORM_SUCCESS_SuccessTitle:
    any;
RES_WEBFORM_SUCCESS_SuccessMessage:
    any;
RES_WEBFORM_DirtyMessage:
    any;
RES_WEBFORM_NoAction:
    any;
RES_WEBFORM_NotAuthorizedAction:
    any;
RES_WEBFORM_FieldOverflow:
    any;
RES_WEBFORM_UNAUTHORIZED_PageTitle:
    any;
RES_WEBFORM_DeleteFailedDueToIntegrity:
    any;
RES_WEBFORM_ObjectWithIdNotFound:
    any;
RES_WEBFORM_ObjectNotFound:
    any;
RES_WEBFORM_QuickFilters:
    any;
RES_WEBFORM_NoRecordsFound_MessageTitle:
    any;
RES_WEBFORM_FIELD_RequiredMissingTitle:
    any;
RES_WEBFORM_FIELD_InvalidBindingsTitle:
    any;
RES_WEBFORM_GenericErrorTitle:
    any;
RES_WEBFORM_GenericErrorDescription:
    any;
RES_WEBFORM_GenericConfirmationQuestion:
    any;
RES_WEBFORM_GenericFormatError:
    any;
RES_WEBFORM_dv_Title:
    any;
RES_CHECKBOX_FALSE:
    any;
RES_CHECKBOX_TRUE:
    any;
RES_WEBFORM_VALIDATIONS_Error:
    any;
RES_WEBFORM_VALIDATIONS_Ignore:
    any;
RES_WEBFORM_VALIDATIONS_IgnoreAll:
    any;
RES_WEBFORM_VALIDATIONS_Information:
    any;
RES_WEBFORM_VALIDATIONS_Messages:
    any;
RES_WEBFORM_VALIDATIONS_RequireYourAttention:
    any;
RES_WEBFORM_VALIDATIONS_ShowIgnoredWarnings:
    any;
RES_WEBFORM_VALIDATIONS_Warning:
    any;
RES_WEBFORM_VALIDATIONS_Cancel:
    any;
RES_WEBFORM_VALIDATIONS_Proceed:
    any;
RES_WEBFORM_VALIDATIONS_RequireYourAttentionSingular:
    any;
RES_WEBFORM_VALIDATIONS_WarningConfirmation:
    any;
RES_WEBFORM_REQUIRED_Legend:
    any;
RES_WEBFORM_FileUploadTitle:
    any;
RES_WEBFORM_FileUploadSuccess:
    any;
RES_WEBFORM_FileUploadError:
    any;
RES_WEBFORM_FileNotFound:
    any;
RES_WEBFORM_FileUploadLoading:
    any;
RES_WEBFORM_LoadingMessage:
    any;
RES_WEBFORM_Picklist_ClearAllConfirmation:
    any;
RES_AUTH_ERROR_TITLE:
    any;
RES_AUTH_ERROR_SUBTITLE:
    any;
RES_AUTH_ERROR_FOOTER:
    any;
RES_AUTH_NOT_CREATED:
    any;
RES_SECURITY_ERROR_TITLE:
    any;
RES_SECURITY_ERROR_SUBTITLE:
    any;
RES_SECURITY_ERROR_FOOTER:
    any;
RES_SITE_HeaderText:
    any;
RES_SITE_FooterTextLeft:
    any;
RES_SITE_FooterTextRight:
    any;
}

export class Actor  {
    _originalTypeClassName = "DigicircMatchmaking.BO.Actor";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.Actors = [];
        this.Administrators = [];
        this.Sites = [];
        this.SectorTypes = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Description:
    any;
ShortDescription:
    any;
Url:
    any;
Email:
    any;
SpecifiedEnityType:
    any;
MemberOfCluster:
    any;
GetCountOfClusterMembers:
    any;
ClusterName:
    any;
Keywords:
    any;
HasSites:
    any;
Address:
    any;
AddedBy:
    any;
CircularEconomyRequirements:
    any;
CircularEconomyProviderReport:
    any;
ActorLogo:
    any;
Cluster:
    any;
Actors:
    any;
Administrators:
    any;
Sites:
    any;
EntityType:
    any;
SectorTypes:
    any;
    static setAddress = ($this, value) => {
        var oldValue = $this.Address;
        $this.Address = value;
        if (value != null) {
        }
    }
    static setAddedBy = ($this, value) => {
        var oldValue = $this.AddedBy;
        $this.AddedBy = value;
        if (value != null) {
        }
    }
    static setCircularEconomyRequirements = ($this, value) => {
        var oldValue = $this.CircularEconomyRequirements;
        $this.CircularEconomyRequirements = value;
        if (value != null) {
        }
    }
    static setCircularEconomyProviderReport = ($this, value) => {
        var oldValue = $this.CircularEconomyProviderReport;
        $this.CircularEconomyProviderReport = value;
        if (value != null) {
        }
    }
    static setActorLogo = ($this, value) => {
        var oldValue = $this.ActorLogo;
        $this.ActorLogo = value;
        if (value != null) {
        }
    }
    static setCluster = ($this, value) => {
        var oldValue = $this.Cluster;
        $this.Cluster = value;
        if (value != null) {
            if (oldValue != null) {
                DigicircMatchmaking.BO.Actor.removeActors(oldValue, $this);
            }
            DigicircMatchmaking.BO.Actor.addActors(value, $this);
        }
    }
    static setActors = ($this, items) => {
        if (items == null) items = [];
        if ($this.Actors == null) $this.Actors = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Actors.length > 0) {
            DigicircMatchmaking.BO.Actor.removeActors($this, $this.Actors[0]);
        }

        DigicircMatchmaking.BO.Actor.addManyActors($this, copyItems);
    }
    static addManyActors = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.Actor.addActors($this, items[i]);
        }
    }
    static addActors = ($this, item) => {
        if ($this.Actors == null) $this.Actors = [];
        if (item == null || $this.Actors.indexOf(item) > -1) return;
        $this.Actors.push(item);
        if (item.Cluster != $this) {
            DigicircMatchmaking.BO.Actor.setCluster(item, $this);
        }
    }
    static addRangeActors = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.Actor.addActors($this, item));
    }
    static removeActors = ($this, item) => {
        if ($this == null || $this.Actors == null || $this.Actors.indexOf(item) === -1) return;
        var _index = $this.Actors.indexOf(item);
        $this.Actors.splice(_index, 1);
        item.Cluster = null;
    }
    static clearActors = ($this) => {
        $this.Actors = null;
    }
    static setAdministrators = ($this, items) => {
        if (items == null) items = [];
        if ($this.Administrators == null) $this.Administrators = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Administrators.length > 0) {
            DigicircMatchmaking.BO.Actor.removeAdministrators($this, $this.Administrators[0]);
        }

        DigicircMatchmaking.BO.Actor.addManyAdministrators($this, copyItems);
    }
    static addManyAdministrators = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.Actor.addAdministrators($this, items[i]);
        }
    }
    static addAdministrators = ($this, item) => {
        if ($this.Administrators == null) $this.Administrators = [];
        if (item == null || $this.Administrators.indexOf(item) > -1) return;
        $this.Administrators.push(item);
    }
    static addRangeAdministrators = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.Actor.addAdministrators($this, item));
    }
    static removeAdministrators = ($this, item) => {
        if ($this == null || $this.Administrators == null || $this.Administrators.indexOf(item) === -1) return;
        var _index = $this.Administrators.indexOf(item);
        $this.Administrators.splice(_index, 1);
    }
    static clearAdministrators = ($this) => {
        $this.Administrators = null;
    }
    static setSites = ($this, items) => {
        if (items == null) items = [];
        if ($this.Sites == null) $this.Sites = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Sites.length > 0) {
            DigicircMatchmaking.BO.Actor.removeSites($this, $this.Sites[0]);
        }

        DigicircMatchmaking.BO.Actor.addManySites($this, copyItems);
    }
    static addManySites = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.Actor.addSites($this, items[i]);
        }
    }
    static addSites = ($this, item) => {
        if ($this.Sites == null) $this.Sites = [];
        if (item == null || $this.Sites.indexOf(item) > -1) return;
        $this.Sites.push(item);
    }
    static addRangeSites = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.Actor.addSites($this, item));
    }
    static removeSites = ($this, item) => {
        if ($this == null || $this.Sites == null || $this.Sites.indexOf(item) === -1) return;
        var _index = $this.Sites.indexOf(item);
        $this.Sites.splice(_index, 1);
    }
    static clearSites = ($this) => {
        $this.Sites = null;
    }
    static setEntityType = ($this, value) => {
        var oldValue = $this.EntityType;
        $this.EntityType = value;
        if (value != null) {
        }
    }
    static setSectorTypes = ($this, items) => {
        if (items == null) items = [];
        if ($this.SectorTypes == null) $this.SectorTypes = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.SectorTypes.length > 0) {
            DigicircMatchmaking.BO.Actor.removeSectorTypes($this, $this.SectorTypes[0]);
        }

        DigicircMatchmaking.BO.Actor.addManySectorTypes($this, copyItems);
    }
    static addManySectorTypes = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.Actor.addSectorTypes($this, items[i]);
        }
    }
    static addSectorTypes = ($this, item) => {
        if ($this.SectorTypes == null) $this.SectorTypes = [];
        if (item == null || $this.SectorTypes.indexOf(item) > -1) return;
        $this.SectorTypes.push(item);
        SectorType.addActor(item, $this);
    }
    static addRangeSectorTypes = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.Actor.addSectorTypes($this, item));
    }
    static removeSectorTypes = ($this, item) => {
        if ($this == null || $this.SectorTypes == null || $this.SectorTypes.indexOf(item) === -1) return;
        var _index = $this.SectorTypes.indexOf(item);
        $this.SectorTypes.splice(_index, 1);
        SectorType.removeActor(item, $this);
    }
    static clearSectorTypes = ($this) => {
        $this.SectorTypes = null;
    }
    static GetActorNamesFromElasticResponse(response: any): any{let actorNames = [];

                let actors = Joove.Common.nullSafe<any>(() => response.Hits.Hits.linq.select((a) => Joove.Common.nullSafe<any>(() => a.Source.Name, "")).toArray(), null);

                for (let _iname = 0; _iname < (actors == null ? 0 : actors.length); _iname++) {
    var name = actors[_iname];
        let actorName = Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.ActorNames(), null);
        actorName.Name = name;
        Joove.Common.nullSafe<any>(() => actorNames.add(actorName), null);
    }

    return actorNames;

                                                               }
    static GetGetCountOfClusterMembers($this: any): any{if ((Joove.Common.nullSafe<any>(() => $this.EntityType.IsCluster, false))) {
    return Joove.Common.nullSafe<any>(() => $this.Actors.length, 0);
    }

    return 0;

                                                       }
    static GetShortDescription($this: any): any{let descLength = Joove.Common.nullSafe<any>(() => $this.Description.length, 0);

                if ((CLMS.Framework.Number.LessThan(() => descLength, () => 250))) {
    return Joove.Common.nullSafe<any>(() => $this.Description, "");
    }

    return Joove.Common.nullSafe<any>(() => $this.Description.substring(0, 250), "") + "...";

                                               }
    static Match($this: any): any{}
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export enum DigitalExpertise {
    None,
    Average,
    Medium,
    Sufficient,
    High,
}

export class CircularEconomyReport  {
    _originalTypeClassName = "DigicircMatchmaking.BO.CircularEconomyReport";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.DesiredThematicExpertises = [];
        this.DesiredGeographicalArea = [];
        this.Resources = [];
        this.DesiredResources = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ExperienceInCircularEconomy:
    any;
SpecifyExperienceInCircularEconomy:
    any;
DigitalExpertise:
    any;
DigitalProviredNeeded:
    any;
ThematicExpertiseNeeded:
    any;
GetExperienceInCircularEconomy:
    any;
DesiredThematicExpertises:
    any;
DesiredSMESector:
    any;
DesiredGeographicalArea:
    any;
Resources:
    any;
DesiredResources:
    any;
    static setDesiredThematicExpertises = ($this, items) => {
        if (items == null) items = [];
        if ($this.DesiredThematicExpertises == null) $this.DesiredThematicExpertises = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.DesiredThematicExpertises.length > 0) {
            DigicircMatchmaking.BO.CircularEconomyReport.removeDesiredThematicExpertises($this, $this.DesiredThematicExpertises[0]);
        }

        DigicircMatchmaking.BO.CircularEconomyReport.addManyDesiredThematicExpertises($this, copyItems);
    }
    static addManyDesiredThematicExpertises = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.CircularEconomyReport.addDesiredThematicExpertises($this, items[i]);
        }
    }
    static addDesiredThematicExpertises = ($this, item) => {
        if ($this.DesiredThematicExpertises == null) $this.DesiredThematicExpertises = [];
        if (item == null || $this.DesiredThematicExpertises.indexOf(item) > -1) return;
        $this.DesiredThematicExpertises.push(item);
    }
    static addRangeDesiredThematicExpertises = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.CircularEconomyReport.addDesiredThematicExpertises($this, item));
    }
    static removeDesiredThematicExpertises = ($this, item) => {
        if ($this == null || $this.DesiredThematicExpertises == null || $this.DesiredThematicExpertises.indexOf(item) === -1) return;
        var _index = $this.DesiredThematicExpertises.indexOf(item);
        $this.DesiredThematicExpertises.splice(_index, 1);
    }
    static clearDesiredThematicExpertises = ($this) => {
        $this.DesiredThematicExpertises = null;
    }
    static setDesiredSMESector = ($this, value) => {
        var oldValue = $this.DesiredSMESector;
        $this.DesiredSMESector = value;
        if (value != null) {
        }
    }
    static setDesiredGeographicalArea = ($this, items) => {
        if (items == null) items = [];
        if ($this.DesiredGeographicalArea == null) $this.DesiredGeographicalArea = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.DesiredGeographicalArea.length > 0) {
            DigicircMatchmaking.BO.CircularEconomyReport.removeDesiredGeographicalArea($this, $this.DesiredGeographicalArea[0]);
        }

        DigicircMatchmaking.BO.CircularEconomyReport.addManyDesiredGeographicalArea($this, copyItems);
    }
    static addManyDesiredGeographicalArea = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.CircularEconomyReport.addDesiredGeographicalArea($this, items[i]);
        }
    }
    static addDesiredGeographicalArea = ($this, item) => {
        if ($this.DesiredGeographicalArea == null) $this.DesiredGeographicalArea = [];
        if (item == null || $this.DesiredGeographicalArea.indexOf(item) > -1) return;
        $this.DesiredGeographicalArea.push(item);
    }
    static addRangeDesiredGeographicalArea = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.CircularEconomyReport.addDesiredGeographicalArea($this, item));
    }
    static removeDesiredGeographicalArea = ($this, item) => {
        if ($this == null || $this.DesiredGeographicalArea == null || $this.DesiredGeographicalArea.indexOf(item) === -1) return;
        var _index = $this.DesiredGeographicalArea.indexOf(item);
        $this.DesiredGeographicalArea.splice(_index, 1);
    }
    static clearDesiredGeographicalArea = ($this) => {
        $this.DesiredGeographicalArea = null;
    }
    static setResources = ($this, items) => {
        if (items == null) items = [];
        if ($this.Resources == null) $this.Resources = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Resources.length > 0) {
            DigicircMatchmaking.BO.CircularEconomyReport.removeResources($this, $this.Resources[0]);
        }

        DigicircMatchmaking.BO.CircularEconomyReport.addManyResources($this, copyItems);
    }
    static addManyResources = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.CircularEconomyReport.addResources($this, items[i]);
        }
    }
    static addResources = ($this, item) => {
        if ($this.Resources == null) $this.Resources = [];
        if (item == null || $this.Resources.indexOf(item) > -1) return;
        $this.Resources.push(item);
    }
    static addRangeResources = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.CircularEconomyReport.addResources($this, item));
    }
    static removeResources = ($this, item) => {
        if ($this == null || $this.Resources == null || $this.Resources.indexOf(item) === -1) return;
        var _index = $this.Resources.indexOf(item);
        $this.Resources.splice(_index, 1);
    }
    static clearResources = ($this) => {
        $this.Resources = null;
    }
    static setDesiredResources = ($this, items) => {
        if (items == null) items = [];
        if ($this.DesiredResources == null) $this.DesiredResources = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.DesiredResources.length > 0) {
            DigicircMatchmaking.BO.CircularEconomyReport.removeDesiredResources($this, $this.DesiredResources[0]);
        }

        DigicircMatchmaking.BO.CircularEconomyReport.addManyDesiredResources($this, copyItems);
    }
    static addManyDesiredResources = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.CircularEconomyReport.addDesiredResources($this, items[i]);
        }
    }
    static addDesiredResources = ($this, item) => {
        if ($this.DesiredResources == null) $this.DesiredResources = [];
        if (item == null || $this.DesiredResources.indexOf(item) > -1) return;
        $this.DesiredResources.push(item);
    }
    static addRangeDesiredResources = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.CircularEconomyReport.addDesiredResources($this, item));
    }
    static removeDesiredResources = ($this, item) => {
        if ($this == null || $this.DesiredResources == null || $this.DesiredResources.indexOf(item) === -1) return;
        var _index = $this.DesiredResources.indexOf(item);
        $this.DesiredResources.splice(_index, 1);
    }
    static clearDesiredResources = ($this) => {
        $this.DesiredResources = null;
    }
    static GetGetExperienceInCircularEconomy($this: any): any{return (Joove.Common.nullSafe<any>(() => $this.ExperienceInCircularEconomy, false) ? "yes" : "no");

                                                                 }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class CircularEconomyProviderReport  {
    _originalTypeClassName = "DigicircMatchmaking.BO.CircularEconomyProviderReport";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.PlaceOperates = [];
        this.ThematicExpertises = [];
        this.ServicesProvided = [];
        this.Expertises = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
AvailableTestingFacilities:
    any;
PlaceOperates:
    any;
ThematicExpertises:
    any;
ServicesProvided:
    any;
Expertises:
    any;
    static setPlaceOperates = ($this, items) => {
        if (items == null) items = [];
        if ($this.PlaceOperates == null) $this.PlaceOperates = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.PlaceOperates.length > 0) {
            DigicircMatchmaking.BO.CircularEconomyProviderReport.removePlaceOperates($this, $this.PlaceOperates[0]);
        }

        DigicircMatchmaking.BO.CircularEconomyProviderReport.addManyPlaceOperates($this, copyItems);
    }
    static addManyPlaceOperates = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.CircularEconomyProviderReport.addPlaceOperates($this, items[i]);
        }
    }
    static addPlaceOperates = ($this, item) => {
        if ($this.PlaceOperates == null) $this.PlaceOperates = [];
        if (item == null || $this.PlaceOperates.indexOf(item) > -1) return;
        $this.PlaceOperates.push(item);
    }
    static addRangePlaceOperates = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.CircularEconomyProviderReport.addPlaceOperates($this, item));
    }
    static removePlaceOperates = ($this, item) => {
        if ($this == null || $this.PlaceOperates == null || $this.PlaceOperates.indexOf(item) === -1) return;
        var _index = $this.PlaceOperates.indexOf(item);
        $this.PlaceOperates.splice(_index, 1);
    }
    static clearPlaceOperates = ($this) => {
        $this.PlaceOperates = null;
    }
    static setThematicExpertises = ($this, items) => {
        if (items == null) items = [];
        if ($this.ThematicExpertises == null) $this.ThematicExpertises = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ThematicExpertises.length > 0) {
            DigicircMatchmaking.BO.CircularEconomyProviderReport.removeThematicExpertises($this, $this.ThematicExpertises[0]);
        }

        DigicircMatchmaking.BO.CircularEconomyProviderReport.addManyThematicExpertises($this, copyItems);
    }
    static addManyThematicExpertises = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.CircularEconomyProviderReport.addThematicExpertises($this, items[i]);
        }
    }
    static addThematicExpertises = ($this, item) => {
        if ($this.ThematicExpertises == null) $this.ThematicExpertises = [];
        if (item == null || $this.ThematicExpertises.indexOf(item) > -1) return;
        $this.ThematicExpertises.push(item);
    }
    static addRangeThematicExpertises = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.CircularEconomyProviderReport.addThematicExpertises($this, item));
    }
    static removeThematicExpertises = ($this, item) => {
        if ($this == null || $this.ThematicExpertises == null || $this.ThematicExpertises.indexOf(item) === -1) return;
        var _index = $this.ThematicExpertises.indexOf(item);
        $this.ThematicExpertises.splice(_index, 1);
    }
    static clearThematicExpertises = ($this) => {
        $this.ThematicExpertises = null;
    }
    static setServicesProvided = ($this, items) => {
        if (items == null) items = [];
        if ($this.ServicesProvided == null) $this.ServicesProvided = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ServicesProvided.length > 0) {
            DigicircMatchmaking.BO.CircularEconomyProviderReport.removeServicesProvided($this, $this.ServicesProvided[0]);
        }

        DigicircMatchmaking.BO.CircularEconomyProviderReport.addManyServicesProvided($this, copyItems);
    }
    static addManyServicesProvided = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.CircularEconomyProviderReport.addServicesProvided($this, items[i]);
        }
    }
    static addServicesProvided = ($this, item) => {
        if ($this.ServicesProvided == null) $this.ServicesProvided = [];
        if (item == null || $this.ServicesProvided.indexOf(item) > -1) return;
        $this.ServicesProvided.push(item);
    }
    static addRangeServicesProvided = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.CircularEconomyProviderReport.addServicesProvided($this, item));
    }
    static removeServicesProvided = ($this, item) => {
        if ($this == null || $this.ServicesProvided == null || $this.ServicesProvided.indexOf(item) === -1) return;
        var _index = $this.ServicesProvided.indexOf(item);
        $this.ServicesProvided.splice(_index, 1);
    }
    static clearServicesProvided = ($this) => {
        $this.ServicesProvided = null;
    }
    static setExpertises = ($this, items) => {
        if (items == null) items = [];
        if ($this.Expertises == null) $this.Expertises = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Expertises.length > 0) {
            DigicircMatchmaking.BO.CircularEconomyProviderReport.removeExpertises($this, $this.Expertises[0]);
        }

        DigicircMatchmaking.BO.CircularEconomyProviderReport.addManyExpertises($this, copyItems);
    }
    static addManyExpertises = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.CircularEconomyProviderReport.addExpertises($this, items[i]);
        }
    }
    static addExpertises = ($this, item) => {
        if ($this.Expertises == null) $this.Expertises = [];
        if (item == null || $this.Expertises.indexOf(item) > -1) return;
        $this.Expertises.push(item);
    }
    static addRangeExpertises = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.CircularEconomyProviderReport.addExpertises($this, item));
    }
    static removeExpertises = ($this, item) => {
        if ($this == null || $this.Expertises == null || $this.Expertises.indexOf(item) === -1) return;
        var _index = $this.Expertises.indexOf(item);
        $this.Expertises.splice(_index, 1);
    }
    static clearExpertises = ($this) => {
        $this.Expertises = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Address  {
    _originalTypeClassName = "DigicircMatchmaking.BO.Address";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Latitude:
    any;
Longitude:
    any;
StreetName:
    any;
Number:
    any;
Town:
    any;
Zip:
    any;
FullAddress:
    any;
Alias:
    any;
Country:
    any;
    static setCountry = ($this, value) => {
        var oldValue = $this.Country;
        $this.Country = value;
        if (value != null) {
        }
    }
    static GetFullAddress($this: any): any{return Joove.Common.nullSafe<any>(() => $this.StreetName, "") + " " + Joove.Common.nullSafe<any>(() => $this.Number, "") + ",<br />" + Joove.Common.nullSafe<any>(() => $this.Town, "") + " " + Joove.Common.nullSafe<any>(() => $this.Zip, "") + "<br />" + Joove.Common.nullSafe<any>(() => $this.Country.Name, "");

                                              }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Country  {
    _originalTypeClassName = "DigicircMatchmaking.BO.Country";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
ShortName:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Geocoder  {
    _originalTypeClassName = "DigicircMatchmaking.BO.Geocoder";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.GeocoderKey = 0;
    }
GeocoderKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.GeocoderKey == null || $this.GeocoderKey == 0;
    }
}

export class GeographicalArea  {
    _originalTypeClassName = "DigicircMatchmaking.BO.GeographicalArea";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class BusinessFunction  {
    _originalTypeClassName = "DigicircMatchmaking.BO.BusinessFunction";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Value:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class BusinessType  {
    _originalTypeClassName = "DigicircMatchmaking.BO.BusinessType";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Value:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Activities  {
    _originalTypeClassName = "DigicircMatchmaking.BO.Activities";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Value:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SearchQuery  {
    _originalTypeClassName = "DigicircMatchmaking.BO.SearchQuery";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.ActorNames = [];
        this['_key'] = this.SearchQueryKey = 0;
    }
SearchTerm:
    any;
AdvanceSearch:
    any;
ExperienceInCircularEconomy:
    any;
SelectedMode:
    any;
ShowSavedPage:
    any;
ShowAllData:
    any;
GetSearchTerm:
    any;
MaterialSearchMode:
    any;
SelectedCountry:
    any;
SelectedSector:
    any;
ActorNames:
    any;
SelectedMaterial:
    any;
SearchQueryKey:
    any;
    static setSelectedCountry = ($this, value) => {
        var oldValue = $this.SelectedCountry;
        $this.SelectedCountry = value;
        if (value != null) {
        }
    }
    static setSelectedSector = ($this, value) => {
        var oldValue = $this.SelectedSector;
        $this.SelectedSector = value;
        if (value != null) {
        }
    }
    static setActorNames = ($this, items) => {
        if (items == null) items = [];
        if ($this.ActorNames == null) $this.ActorNames = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ActorNames.length > 0) {
            DigicircMatchmaking.BO.SearchQuery.removeActorNames($this, $this.ActorNames[0]);
        }

        DigicircMatchmaking.BO.SearchQuery.addManyActorNames($this, copyItems);
    }
    static addManyActorNames = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.SearchQuery.addActorNames($this, items[i]);
        }
    }
    static addActorNames = ($this, item) => {
        if ($this.ActorNames == null) $this.ActorNames = [];
        if (item == null || $this.ActorNames.indexOf(item) > -1) return;
        $this.ActorNames.push(item);
    }
    static addRangeActorNames = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.SearchQuery.addActorNames($this, item));
    }
    static removeActorNames = ($this, item) => {
        if ($this == null || $this.ActorNames == null || $this.ActorNames.indexOf(item) === -1) return;
        var _index = $this.ActorNames.indexOf(item);
        $this.ActorNames.splice(_index, 1);
    }
    static clearActorNames = ($this) => {
        $this.ActorNames = null;
    }
    static setSelectedMaterial = ($this, value) => {
        var oldValue = $this.SelectedMaterial;
        $this.SelectedMaterial = value;
        if (value != null) {
        }
    }
    static GetGetSearchTerm($this: any): any{return "list \"" + Joove.Common.nullSafe<any>(() => $this.SearchTerm, "") + "\"";

                                                }
        static Reset($this: any): any{$this.SearchTerm = "";

                                      DigicircMatchmaking.BO.SearchQuery.setSelectedCountry($this, Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.Country(), null));

                                      DigicircMatchmaking.BO.SearchQuery.setSelectedSector($this, Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.SectorType(), null));

                                      DigicircMatchmaking.BO.SearchQuery.setActorNames($this, null);

                                     }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.SearchQueryKey == null || $this.SearchQueryKey == 0;
    }
}

export class ActorNames  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ActorNames";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Name:
    any;
Id:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ValueType  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ValueType";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Value:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Company  {
    _originalTypeClassName = "DigicircMatchmaking.BO.Company";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
company_name:
    any;
url:
    any;
city:
    any;
country:
    any;
zip_code:
    any;
company_category:
    any;
description:
    any;
imported:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class DataHelper  {
    _originalTypeClassName = "DigicircMatchmaking.BO.DataHelper";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.DataHelperKey = 0;
    }
DataHelperKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.DataHelperKey == null || $this.DataHelperKey == 0;
    }
}

export class MaterialCreateRequest  {
    _originalTypeClassName = "DigicircMatchmaking.BO.MaterialCreateRequest";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.Statements = [];
        this['_key'] = this.MaterialCreateRequestKey = 0;
    }
Statements:
    any;
MaterialCreateRequestKey:
    any;
    static setStatements = ($this, items) => {
        if (items == null) items = [];
        if ($this.Statements == null) $this.Statements = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Statements.length > 0) {
            DigicircMatchmaking.BO.MaterialCreateRequest.removeStatements($this, $this.Statements[0]);
        }

        DigicircMatchmaking.BO.MaterialCreateRequest.addManyStatements($this, copyItems);
    }
    static addManyStatements = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.MaterialCreateRequest.addStatements($this, items[i]);
        }
    }
    static addStatements = ($this, item) => {
        if ($this.Statements == null) $this.Statements = [];
        if (item == null || $this.Statements.indexOf(item) > -1) return;
        $this.Statements.push(item);
    }
    static addRangeStatements = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.MaterialCreateRequest.addStatements($this, item));
    }
    static removeStatements = ($this, item) => {
        if ($this == null || $this.Statements == null || $this.Statements.indexOf(item) === -1) return;
        var _index = $this.Statements.indexOf(item);
        $this.Statements.splice(_index, 1);
    }
    static clearStatements = ($this) => {
        $this.Statements = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.MaterialCreateRequestKey == null || $this.MaterialCreateRequestKey == 0;
    }
}

export class MaterialCreateStatements  {
    _originalTypeClassName = "DigicircMatchmaking.BO.MaterialCreateStatements";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.MaterialCreateStatementsKey = 0;
    }
Statement:
    any;
Parameters:
    any;
MaterialCreateStatementsKey:
    any;
    static setParameters = ($this, value) => {
        var oldValue = $this.Parameters;
        $this.Parameters = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.MaterialCreateStatementsKey == null || $this.MaterialCreateStatementsKey == 0;
    }
}

export class MaterialCreateParameters  {
    _originalTypeClassName = "DigicircMatchmaking.BO.MaterialCreateParameters";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.MaterialCreateParametersKey = 0;
    }
Props:
    any;
MaterialCreateParametersKey:
    any;
    static setProps = ($this, value) => {
        var oldValue = $this.Props;
        $this.Props = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.MaterialCreateParametersKey == null || $this.MaterialCreateParametersKey == 0;
    }
}

export class MaterialCreateProps  {
    _originalTypeClassName = "DigicircMatchmaking.BO.MaterialCreateProps";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.MaterialCreatePropsKey = 0;
    }
Name:
    any;
Decription:
    any;
HsSpecific:
    any;
Id:
    any;
MaterialCreatePropsKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.MaterialCreatePropsKey == null || $this.MaterialCreatePropsKey == 0;
    }
}

export class KnowledgeBaseResult  {
    _originalTypeClassName = "DigicircMatchmaking.BO.KnowledgeBaseResult";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.Results = [];
        this['_key'] = this.KnowledgeBaseResultKey = 0;
    }
Results:
    any;
KnowledgeBaseResultKey:
    any;
    static setResults = ($this, items) => {
        if (items == null) items = [];
        if ($this.Results == null) $this.Results = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Results.length > 0) {
            DigicircMatchmaking.BO.KnowledgeBaseResult.removeResults($this, $this.Results[0]);
        }

        DigicircMatchmaking.BO.KnowledgeBaseResult.addManyResults($this, copyItems);
    }
    static addManyResults = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.KnowledgeBaseResult.addResults($this, items[i]);
        }
    }
    static addResults = ($this, item) => {
        if ($this.Results == null) $this.Results = [];
        if (item == null || $this.Results.indexOf(item) > -1) return;
        $this.Results.push(item);
    }
    static addRangeResults = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.KnowledgeBaseResult.addResults($this, item));
    }
    static removeResults = ($this, item) => {
        if ($this == null || $this.Results == null || $this.Results.indexOf(item) === -1) return;
        var _index = $this.Results.indexOf(item);
        $this.Results.splice(_index, 1);
    }
    static clearResults = ($this) => {
        $this.Results = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.KnowledgeBaseResultKey == null || $this.KnowledgeBaseResultKey == 0;
    }
}

export class KnowledgeBaseResults  {
    _originalTypeClassName = "DigicircMatchmaking.BO.KnowledgeBaseResults";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.Data = [];
        this['_key'] = this.KnowledgeBaseResultsKey = 0;
    }
Data:
    any;
KnowledgeBaseResultsKey:
    any;
    static setData = ($this, items) => {
        if (items == null) items = [];
        if ($this.Data == null) $this.Data = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Data.length > 0) {
            DigicircMatchmaking.BO.KnowledgeBaseResults.removeData($this, $this.Data[0]);
        }

        DigicircMatchmaking.BO.KnowledgeBaseResults.addManyData($this, copyItems);
    }
    static addManyData = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.KnowledgeBaseResults.addData($this, items[i]);
        }
    }
    static addData = ($this, item) => {
        if ($this.Data == null) $this.Data = [];
        if (item == null || $this.Data.indexOf(item) > -1) return;
        $this.Data.push(item);
    }
    static addRangeData = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.KnowledgeBaseResults.addData($this, item));
    }
    static removeData = ($this, item) => {
        if ($this == null || $this.Data == null || $this.Data.indexOf(item) === -1) return;
        var _index = $this.Data.indexOf(item);
        $this.Data.splice(_index, 1);
    }
    static clearData = ($this) => {
        $this.Data = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.KnowledgeBaseResultsKey == null || $this.KnowledgeBaseResultsKey == 0;
    }
}

export class KnowledgeBaseData  {
    _originalTypeClassName = "DigicircMatchmaking.BO.KnowledgeBaseData";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.Row = [];
        this.Meta = [];
        this['_key'] = this.KnowledgeBaseDataKey = 0;
    }
Row:
    any;
Meta:
    any;
KnowledgeBaseDataKey:
    any;
    static setRow = ($this, items) => {
        if (items == null) items = [];
        if ($this.Row == null) $this.Row = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Row.length > 0) {
            DigicircMatchmaking.BO.KnowledgeBaseData.removeRow($this, $this.Row[0]);
        }

        DigicircMatchmaking.BO.KnowledgeBaseData.addManyRow($this, copyItems);
    }
    static addManyRow = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.KnowledgeBaseData.addRow($this, items[i]);
        }
    }
    static addRow = ($this, item) => {
        if ($this.Row == null) $this.Row = [];
        if (item == null || $this.Row.indexOf(item) > -1) return;
        $this.Row.push(item);
    }
    static addRangeRow = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.KnowledgeBaseData.addRow($this, item));
    }
    static removeRow = ($this, item) => {
        if ($this == null || $this.Row == null || $this.Row.indexOf(item) === -1) return;
        var _index = $this.Row.indexOf(item);
        $this.Row.splice(_index, 1);
    }
    static clearRow = ($this) => {
        $this.Row = null;
    }
    static setMeta = ($this, items) => {
        if (items == null) items = [];
        if ($this.Meta == null) $this.Meta = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Meta.length > 0) {
            DigicircMatchmaking.BO.KnowledgeBaseData.removeMeta($this, $this.Meta[0]);
        }

        DigicircMatchmaking.BO.KnowledgeBaseData.addManyMeta($this, copyItems);
    }
    static addManyMeta = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.KnowledgeBaseData.addMeta($this, items[i]);
        }
    }
    static addMeta = ($this, item) => {
        if ($this.Meta == null) $this.Meta = [];
        if (item == null || $this.Meta.indexOf(item) > -1) return;
        $this.Meta.push(item);
    }
    static addRangeMeta = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.KnowledgeBaseData.addMeta($this, item));
    }
    static removeMeta = ($this, item) => {
        if ($this == null || $this.Meta == null || $this.Meta.indexOf(item) === -1) return;
        var _index = $this.Meta.indexOf(item);
        $this.Meta.splice(_index, 1);
    }
    static clearMeta = ($this) => {
        $this.Meta = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.KnowledgeBaseDataKey == null || $this.KnowledgeBaseDataKey == 0;
    }
}

export class KnowledgeBaseRow  {
    _originalTypeClassName = "DigicircMatchmaking.BO.KnowledgeBaseRow";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.KnowledgeBaseRowKey = 0;
    }
Decription:
    any;
Name:
    any;
KnowledgeBaseRowKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.KnowledgeBaseRowKey == null || $this.KnowledgeBaseRowKey == 0;
    }
}

export class KnowledgeBaseMeta  {
    _originalTypeClassName = "DigicircMatchmaking.BO.KnowledgeBaseMeta";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.KnowledgeBaseMetaKey = 0;
    }
Id:
    any;
Type:
    any;
Deleted:
    any;
KnowledgeBaseMetaKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.KnowledgeBaseMetaKey == null || $this.KnowledgeBaseMetaKey == 0;
    }
}

export class ProcessCreateRequest  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ProcessCreateRequest";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.Statements = [];
        this['_key'] = this.ProcessCreateRequestKey = 0;
    }
Statements:
    any;
ProcessCreateRequestKey:
    any;
    static setStatements = ($this, items) => {
        if (items == null) items = [];
        if ($this.Statements == null) $this.Statements = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Statements.length > 0) {
            DigicircMatchmaking.BO.ProcessCreateRequest.removeStatements($this, $this.Statements[0]);
        }

        DigicircMatchmaking.BO.ProcessCreateRequest.addManyStatements($this, copyItems);
    }
    static addManyStatements = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.ProcessCreateRequest.addStatements($this, items[i]);
        }
    }
    static addStatements = ($this, item) => {
        if ($this.Statements == null) $this.Statements = [];
        if (item == null || $this.Statements.indexOf(item) > -1) return;
        $this.Statements.push(item);
    }
    static addRangeStatements = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.ProcessCreateRequest.addStatements($this, item));
    }
    static removeStatements = ($this, item) => {
        if ($this == null || $this.Statements == null || $this.Statements.indexOf(item) === -1) return;
        var _index = $this.Statements.indexOf(item);
        $this.Statements.splice(_index, 1);
    }
    static clearStatements = ($this) => {
        $this.Statements = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ProcessCreateRequestKey == null || $this.ProcessCreateRequestKey == 0;
    }
}

export class ProcessCreateStatements  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ProcessCreateStatements";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ProcessCreateStatementsKey = 0;
    }
Statement:
    any;
Parameters:
    any;
ProcessCreateStatementsKey:
    any;
    static setParameters = ($this, value) => {
        var oldValue = $this.Parameters;
        $this.Parameters = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ProcessCreateStatementsKey == null || $this.ProcessCreateStatementsKey == 0;
    }
}

export class ProcessCreateParameters  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ProcessCreateParameters";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ProcessCreateParametersKey = 0;
    }
Props:
    any;
ProcessCreateParametersKey:
    any;
    static setProps = ($this, value) => {
        var oldValue = $this.Props;
        $this.Props = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ProcessCreateParametersKey == null || $this.ProcessCreateParametersKey == 0;
    }
}

export class ProcessCreateProps  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ProcessCreateProps";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ProcessCreatePropsKey = 0;
    }
Id:
    any;
Name:
    any;
Notes:
    any;
Ref:
    any;
SourceId:
    any;
ProductId:
    any;
ProcessCreatePropsKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ProcessCreatePropsKey == null || $this.ProcessCreatePropsKey == 0;
    }
}

export class Material  {
    _originalTypeClassName = "DigicircMatchmaking.BO.Material";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.ConvertedBy = [];
        this.ConvertBy = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Description:
    any;
HsSpecific:
    any;
PendingGraph:
    any;
IsHazardous:
    any;
ConvertedBy:
    any;
ConvertBy:
    any;
RequestedBy:
    any;
Type:
    any;
PhysicalForm:
    any;
UnitOfMeasurement:
    any;
    static setConvertedBy = ($this, items) => {
        if (items == null) items = [];
        if ($this.ConvertedBy == null) $this.ConvertedBy = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ConvertedBy.length > 0) {
            DigicircMatchmaking.BO.Material.removeConvertedBy($this, $this.ConvertedBy[0]);
        }

        DigicircMatchmaking.BO.Material.addManyConvertedBy($this, copyItems);
    }
    static addManyConvertedBy = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.Material.addConvertedBy($this, items[i]);
        }
    }
    static addConvertedBy = ($this, item) => {
        if ($this.ConvertedBy == null) $this.ConvertedBy = [];
        if (item == null || $this.ConvertedBy.indexOf(item) > -1) return;
        $this.ConvertedBy.push(item);
        Process.addProduct(item, $this);
    }
    static addRangeConvertedBy = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.Material.addConvertedBy($this, item));
    }
    static removeConvertedBy = ($this, item) => {
        if ($this == null || $this.ConvertedBy == null || $this.ConvertedBy.indexOf(item) === -1) return;
        var _index = $this.ConvertedBy.indexOf(item);
        $this.ConvertedBy.splice(_index, 1);
        Process.removeProduct(item, $this);
    }
    static clearConvertedBy = ($this) => {
        $this.ConvertedBy = null;
    }
    static setConvertBy = ($this, items) => {
        if (items == null) items = [];
        if ($this.ConvertBy == null) $this.ConvertBy = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ConvertBy.length > 0) {
            DigicircMatchmaking.BO.Material.removeConvertBy($this, $this.ConvertBy[0]);
        }

        DigicircMatchmaking.BO.Material.addManyConvertBy($this, copyItems);
    }
    static addManyConvertBy = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.Material.addConvertBy($this, items[i]);
        }
    }
    static addConvertBy = ($this, item) => {
        if ($this.ConvertBy == null) $this.ConvertBy = [];
        if (item == null || $this.ConvertBy.indexOf(item) > -1) return;
        $this.ConvertBy.push(item);
        Process.addSource(item, $this);
    }
    static addRangeConvertBy = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.Material.addConvertBy($this, item));
    }
    static removeConvertBy = ($this, item) => {
        if ($this == null || $this.ConvertBy == null || $this.ConvertBy.indexOf(item) === -1) return;
        var _index = $this.ConvertBy.indexOf(item);
        $this.ConvertBy.splice(_index, 1);
        Process.removeSource(item, $this);
    }
    static clearConvertBy = ($this) => {
        $this.ConvertBy = null;
    }
    static setRequestedBy = ($this, value) => {
        var oldValue = $this.RequestedBy;
        $this.RequestedBy = value;
        if (value != null) {
        }
    }
    static setType = ($this, value) => {
        var oldValue = $this.Type;
        $this.Type = value;
        if (value != null) {
        }
    }
    static setPhysicalForm = ($this, value) => {
        var oldValue = $this.PhysicalForm;
        $this.PhysicalForm = value;
        if (value != null) {
        }
    }
    static setUnitOfMeasurement = ($this, value) => {
        var oldValue = $this.UnitOfMeasurement;
        $this.UnitOfMeasurement = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Process  {
    _originalTypeClassName = "DigicircMatchmaking.BO.Process";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.Product = [];
        this.Source = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Notes:
    any;
Ref:
    any;
ProductName:
    any;
SourceName:
    any;
EnvironmentalEffects:
    any;
ShortEnvironmentalEffects:
    any;
Product:
    any;
Source:
    any;
    static setProduct = ($this, items) => {
        if (items == null) items = [];
        if ($this.Product == null) $this.Product = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Product.length > 0) {
            DigicircMatchmaking.BO.Process.removeProduct($this, $this.Product[0]);
        }

        DigicircMatchmaking.BO.Process.addManyProduct($this, copyItems);
    }
    static addManyProduct = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.Process.addProduct($this, items[i]);
        }
    }
    static addProduct = ($this, item) => {
        if ($this.Product == null) $this.Product = [];
        if (item == null || $this.Product.indexOf(item) > -1) return;
        $this.Product.push(item);
        Material.addConvertedBy(item, $this);
    }
    static addRangeProduct = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.Process.addProduct($this, item));
    }
    static removeProduct = ($this, item) => {
        if ($this == null || $this.Product == null || $this.Product.indexOf(item) === -1) return;
        var _index = $this.Product.indexOf(item);
        $this.Product.splice(_index, 1);
        Material.removeConvertedBy(item, $this);
    }
    static clearProduct = ($this) => {
        $this.Product = null;
    }
    static setSource = ($this, items) => {
        if (items == null) items = [];
        if ($this.Source == null) $this.Source = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Source.length > 0) {
            DigicircMatchmaking.BO.Process.removeSource($this, $this.Source[0]);
        }

        DigicircMatchmaking.BO.Process.addManySource($this, copyItems);
    }
    static addManySource = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.Process.addSource($this, items[i]);
        }
    }
    static addSource = ($this, item) => {
        if ($this.Source == null) $this.Source = [];
        if (item == null || $this.Source.indexOf(item) > -1) return;
        $this.Source.push(item);
        Material.addConvertBy(item, $this);
    }
    static addRangeSource = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.Process.addSource($this, item));
    }
    static removeSource = ($this, item) => {
        if ($this == null || $this.Source == null || $this.Source.indexOf(item) === -1) return;
        var _index = $this.Source.indexOf(item);
        $this.Source.splice(_index, 1);
        Material.removeConvertBy(item, $this);
    }
    static clearSource = ($this) => {
        $this.Source = null;
    }
    static GetEnvironmentalEffects($this: any): any{if ((CLMS.Framework.Number.LessThan(() => $this.EnvironmentalEffects.length, () => 50))) {
    return Joove.Common.nullSafe<any>(() => $this.EnvironmentalEffects, "");
    } else {return Joove.Common.nullSafe<any>(() => $this.EnvironmentalEffects.substring(0, 50), "") + "...";
    }

                                                   }
    static GetProductName($this: any): any{let productList = [];

                                               for (let _iproduct = 0; _iproduct < (Joove.Common.nullSafe<any>(() => $this.Product, null) == null ? 0 : Joove.Common.nullSafe<any>(() => $this.Product, null).length); _iproduct++) {
    var product = Joove.Common.nullSafe<any>(() => $this.Product, null)[_iproduct];
        Joove.Common.nullSafe<any>(() => productList.add(Joove.Common.nullSafe<any>(() => product.Name, "")), null);
    }

    return Joove.Common.nullSafe<any>(() => CLMS.Framework.String.Join(",", productList), "");

                                          }
    static GetSourceName($this: any): any{let productList = [];

                                              for (let _iproduct = 0; _iproduct < (Joove.Common.nullSafe<any>(() => $this.Source, null) == null ? 0 : Joove.Common.nullSafe<any>(() => $this.Source, null).length); _iproduct++) {
    var product = Joove.Common.nullSafe<any>(() => $this.Source, null)[_iproduct];
        Joove.Common.nullSafe<any>(() => productList.add(Joove.Common.nullSafe<any>(() => product.Name, "")), null);
    }

    return Joove.Common.nullSafe<any>(() => CLMS.Framework.String.Join(",", productList), "");

                                         }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class MaterialBackend  {
    _originalTypeClassName = "DigicircMatchmaking.BO.MaterialBackend";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.MaterialBackendKey = 0;
    }
MaterialBackendKey:
    any;
    static DeleteMaterialStatement(material: any): any{let stat = new DigicircMatchmaking.BO.MaterialCreateStatements();

                stat.Statement = "MATCH (n:Material {Id: $props.Id}) DETACH DELETE n";

                DigicircMatchmaking.BO.MaterialCreateStatements.setParameters(stat, Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.MaterialCreateParameters(), null));

                DigicircMatchmaking.BO.MaterialCreateParameters.setProps(stat.Parameters, Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.MaterialCreateProps(), null));

                stat.Parameters.Props.Id = Joove.Common.nullSafe<any>(() => material.Id, 0);

                return stat;

                                                          }
        static UpdateMaterialStatement(material: any): any{let stat = new DigicircMatchmaking.BO.MaterialCreateStatements();

                stat.Statement = "MATCH (m:Material {Id: $props.Id}) SET m = $props RETURN m";

                DigicircMatchmaking.BO.MaterialCreateStatements.setParameters(stat, Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.MaterialCreateParameters(), null));

                DigicircMatchmaking.BO.MaterialCreateParameters.setProps(stat.Parameters, Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.MaterialCreateProps(), null));

                stat.Parameters.Props.Id = Joove.Common.nullSafe<any>(() => material.Id, 0);

                stat.Parameters.Props.Name = Joove.Common.nullSafe<any>(() => material.Name, "");

                stat.Parameters.Props.Decription = Joove.Common.nullSafe<any>(() => material.Description, "");

                stat.Parameters.Props.HsSpecific = Joove.Common.nullSafe<any>(() => material.HsSpecific, "");

                return stat;

                                                          }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.MaterialBackendKey == null || $this.MaterialBackendKey == 0;
    }
}

export class ProcessBackend  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ProcessBackend";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ProcessBackendKey = 0;
    }
ProcessBackendKey:
    any;
    static CreateConvertByStatement(process: any,product: any): any{let stat = new DigicircMatchmaking.BO.ProcessCreateStatements();

                stat.Statement = "MATCH (m:Material {Id: $props.SourceId}) MATCH (p:Process {Id: $props.Id}) MERGE (m)-[rel:CONVERT_BY]->(p) RETURN m";

                DigicircMatchmaking.BO.ProcessCreateStatements.setParameters(stat, Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.ProcessCreateParameters(), null));

                DigicircMatchmaking.BO.ProcessCreateParameters.setProps(stat.Parameters, Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.ProcessCreateProps(), null));

                stat.Parameters.Props.Id = Joove.Common.nullSafe<any>(() => process.Id, 0);

                stat.Parameters.Props.SourceId = Joove.Common.nullSafe<any>(() => product.Id, 0);

                return stat;

                                                                       }
        static CreateConvertedByStatement(process: any,product: any): any{let stat = new DigicircMatchmaking.BO.ProcessCreateStatements();

                stat.Statement = "MATCH (m:Material {Id: $props.ProductId}) MATCH (p:Process {Id: $props.Id}) MERGE (p)-[rel:CONVERTED_BY]->(m) RETURN m";

                DigicircMatchmaking.BO.ProcessCreateStatements.setParameters(stat, Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.ProcessCreateParameters(), null));

                DigicircMatchmaking.BO.ProcessCreateParameters.setProps(stat.Parameters, Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.ProcessCreateProps(), null));

                stat.Parameters.Props.Id = Joove.Common.nullSafe<any>(() => process.Id, 0);

                stat.Parameters.Props.ProductId = Joove.Common.nullSafe<any>(() => product.Id, 0);

                return stat;

                                                                         }
        static CreateProcessStatement(process: any): any{let stat = new DigicircMatchmaking.BO.ProcessCreateStatements();

                stat.Statement = "CREATE (n:Process $props) RETURN n";

                DigicircMatchmaking.BO.ProcessCreateStatements.setParameters(stat, Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.ProcessCreateParameters(), null));

                DigicircMatchmaking.BO.ProcessCreateParameters.setProps(stat.Parameters, Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.ProcessCreateProps(), null));

                stat.Parameters.Props.Id = Joove.Common.nullSafe<any>(() => process.Id, 0);

                stat.Parameters.Props.Name = Joove.Common.nullSafe<any>(() => process.Name, "");

                stat.Parameters.Props.Notes = Joove.Common.nullSafe<any>(() => process.Notes, "");

                stat.Parameters.Props.Ref = Joove.Common.nullSafe<any>(() => process.Ref, "");

                return stat;

                                                        }
        static DeleteProcessStatement(process: any): any{let stat = new DigicircMatchmaking.BO.ProcessCreateStatements();

                stat.Statement = "MATCH (n:Process {Id: $props.Id}) DETACH DELETE n";

                DigicircMatchmaking.BO.ProcessCreateStatements.setParameters(stat, Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.ProcessCreateParameters(), null));

                DigicircMatchmaking.BO.ProcessCreateParameters.setProps(stat.Parameters, Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.ProcessCreateProps(), null));

                stat.Parameters.Props.Id = Joove.Common.nullSafe<any>(() => process.Id, 0);

                return stat;

                                                        }
        static UpdateProcessStatement(process: any): any{let stat = new DigicircMatchmaking.BO.ProcessCreateStatements();

                stat.Statement = "MATCH (m:Process {Id: $props.Id}) SET m = $props RETURN m";

                DigicircMatchmaking.BO.ProcessCreateStatements.setParameters(stat, Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.ProcessCreateParameters(), null));

                DigicircMatchmaking.BO.ProcessCreateParameters.setProps(stat.Parameters, Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.ProcessCreateProps(), null));

                stat.Parameters.Props.Id = Joove.Common.nullSafe<any>(() => process.Id, 0);

                stat.Parameters.Props.Name = Joove.Common.nullSafe<any>(() => process.Name, "");

                stat.Parameters.Props.Notes = Joove.Common.nullSafe<any>(() => process.Notes, "");

                stat.Parameters.Props.Ref = Joove.Common.nullSafe<any>(() => process.Ref, "");

                return stat;

                                                        }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ProcessBackendKey == null || $this.ProcessBackendKey == 0;
    }
}

export class ActorBackend  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ActorBackend";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ActorBackendKey = 0;
    }
ActorBackendKey:
    any;
    static PrepareDeleteKnowledgeActor(actor: any): any{let stat = new DigicircMatchmaking.BO.ActorCreateStatements();

                stat.Statement = "MATCH (n:Actor {Id: $props.Id}) DETACH DELETE n";

                DigicircMatchmaking.BO.ActorCreateStatements.setParameters(stat, Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.ActorCreateParameters(), null));

                DigicircMatchmaking.BO.ActorCreateParameters.setProps(stat.Parameters, Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.ActorCreateProps(), null));

                stat.Parameters.Props.Id = Joove.Common.nullSafe<any>(() => actor.Id, 0);

                stat.Parameters.Props.Name = Joove.Common.nullSafe<any>(() => actor.Name, "");

                return stat;

                                                           }
        static PrepareUpdateKnowledgeActor(actor: any): any{let stat = new DigicircMatchmaking.BO.ActorCreateStatements();

                stat.Statement = "MATCH (n:Actor {Id: $props.Id}) SET m = $props RETURN m";

                DigicircMatchmaking.BO.ActorCreateStatements.setParameters(stat, Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.ActorCreateParameters(), null));

                DigicircMatchmaking.BO.ActorCreateParameters.setProps(stat.Parameters, Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.ActorCreateProps(), null));

                stat.Parameters.Props.Id = Joove.Common.nullSafe<any>(() => actor.Id, 0);

                stat.Parameters.Props.Name = Joove.Common.nullSafe<any>(() => actor.Name, "");

                return stat;

                                                           }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ActorBackendKey == null || $this.ActorBackendKey == 0;
    }
}

export class TextSearch  {
    _originalTypeClassName = "DigicircMatchmaking.BO.TextSearch";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.TextSearchKey = 0;
    }
TextSearchKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.TextSearchKey == null || $this.TextSearchKey == 0;
    }
}

export class TextSearchRequest  {
    _originalTypeClassName = "DigicircMatchmaking.BO.TextSearchRequest";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Text = "";
    }
Text:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Text == null || $this.Text == "";
    }
}

export class TextSearchResponse  {
    _originalTypeClassName = "DigicircMatchmaking.BO.TextSearchResponse";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Tags = "";
    }
Tags:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Tags == null || $this.Tags == "";
    }
}

export class Product  {
    _originalTypeClassName = "DigicircMatchmaking.BO.Product";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Quantity:
    any;
ValidFrom:
    any;
ValidTo:
    any;
IsHazardous:
    any;
IsDesired:
    any;
Resource:
    any;
Type:
    any;
Site:
    any;
UnitOfMeasurement:
    any;
PhysicalForm:
    any;
    static setResource = ($this, value) => {
        var oldValue = $this.Resource;
        $this.Resource = value;
        if (value != null) {
        }
    }
    static setType = ($this, value) => {
        var oldValue = $this.Type;
        $this.Type = value;
        if (value != null) {
        }
    }
    static setSite = ($this, value) => {
        var oldValue = $this.Site;
        $this.Site = value;
        if (value != null) {
        }
    }
    static setUnitOfMeasurement = ($this, value) => {
        var oldValue = $this.UnitOfMeasurement;
        $this.UnitOfMeasurement = value;
        if (value != null) {
        }
    }
    static setPhysicalForm = ($this, value) => {
        var oldValue = $this.PhysicalForm;
        $this.PhysicalForm = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ProductType  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ProductType";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.ParentType = [];
        this.SybTypes = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
ParentType:
    any;
SybTypes:
    any;
    static setParentType = ($this, items) => {
        if (items == null) items = [];
        if ($this.ParentType == null) $this.ParentType = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ParentType.length > 0) {
            DigicircMatchmaking.BO.ProductType.removeParentType($this, $this.ParentType[0]);
        }

        DigicircMatchmaking.BO.ProductType.addManyParentType($this, copyItems);
    }
    static addManyParentType = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.ProductType.addParentType($this, items[i]);
        }
    }
    static addParentType = ($this, item) => {
        if ($this.ParentType == null) $this.ParentType = [];
        if (item == null || $this.ParentType.indexOf(item) > -1) return;
        $this.ParentType.push(item);
        ProductType.addSybTypes(item, $this);
    }
    static addRangeParentType = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.ProductType.addParentType($this, item));
    }
    static removeParentType = ($this, item) => {
        if ($this == null || $this.ParentType == null || $this.ParentType.indexOf(item) === -1) return;
        var _index = $this.ParentType.indexOf(item);
        $this.ParentType.splice(_index, 1);
        ProductType.removeSybTypes(item, $this);
    }
    static clearParentType = ($this) => {
        $this.ParentType = null;
    }
    static setSybTypes = ($this, items) => {
        if (items == null) items = [];
        if ($this.SybTypes == null) $this.SybTypes = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.SybTypes.length > 0) {
            DigicircMatchmaking.BO.ProductType.removeSybTypes($this, $this.SybTypes[0]);
        }

        DigicircMatchmaking.BO.ProductType.addManySybTypes($this, copyItems);
    }
    static addManySybTypes = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.ProductType.addSybTypes($this, items[i]);
        }
    }
    static addSybTypes = ($this, item) => {
        if ($this.SybTypes == null) $this.SybTypes = [];
        if (item == null || $this.SybTypes.indexOf(item) > -1) return;
        $this.SybTypes.push(item);
        ProductType.addParentType(item, $this);
    }
    static addRangeSybTypes = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.ProductType.addSybTypes($this, item));
    }
    static removeSybTypes = ($this, item) => {
        if ($this == null || $this.SybTypes == null || $this.SybTypes.indexOf(item) === -1) return;
        var _index = $this.SybTypes.indexOf(item);
        $this.SybTypes.splice(_index, 1);
        ProductType.removeParentType(item, $this);
    }
    static clearSybTypes = ($this) => {
        $this.SybTypes = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Response  {
    _originalTypeClassName = "DigicircMatchmaking.BO.Response";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ResponseKey = 0;
    }
Code:
    any;
Status:
    any;
ResponseKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ResponseKey == null || $this.ResponseKey == 0;
    }
}

export class ActorCreateProps  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ActorCreateProps";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ActorCreatePropsKey = 0;
    }
Id:
    any;
Name:
    any;
ActorCreatePropsKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ActorCreatePropsKey == null || $this.ActorCreatePropsKey == 0;
    }
}

export class ActorCreateParameters  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ActorCreateParameters";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ActorCreateParametersKey = 0;
    }
Props:
    any;
ActorCreateParametersKey:
    any;
    static setProps = ($this, value) => {
        var oldValue = $this.Props;
        $this.Props = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ActorCreateParametersKey == null || $this.ActorCreateParametersKey == 0;
    }
}

export class ActorCreateStatements  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ActorCreateStatements";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ActorCreateStatementsKey = 0;
    }
Statement:
    any;
Parameters:
    any;
ActorCreateStatementsKey:
    any;
    static setParameters = ($this, value) => {
        var oldValue = $this.Parameters;
        $this.Parameters = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ActorCreateStatementsKey == null || $this.ActorCreateStatementsKey == 0;
    }
}

export class ActorCreateRequest  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ActorCreateRequest";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.Statements = [];
        this['_key'] = this.ActorCreateRequestKey = 0;
    }
Statements:
    any;
ActorCreateRequestKey:
    any;
    static setStatements = ($this, items) => {
        if (items == null) items = [];
        if ($this.Statements == null) $this.Statements = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Statements.length > 0) {
            DigicircMatchmaking.BO.ActorCreateRequest.removeStatements($this, $this.Statements[0]);
        }

        DigicircMatchmaking.BO.ActorCreateRequest.addManyStatements($this, copyItems);
    }
    static addManyStatements = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.ActorCreateRequest.addStatements($this, items[i]);
        }
    }
    static addStatements = ($this, item) => {
        if ($this.Statements == null) $this.Statements = [];
        if (item == null || $this.Statements.indexOf(item) > -1) return;
        $this.Statements.push(item);
    }
    static addRangeStatements = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.ActorCreateRequest.addStatements($this, item));
    }
    static removeStatements = ($this, item) => {
        if ($this == null || $this.Statements == null || $this.Statements.indexOf(item) === -1) return;
        var _index = $this.Statements.indexOf(item);
        $this.Statements.splice(_index, 1);
    }
    static clearStatements = ($this) => {
        $this.Statements = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ActorCreateRequestKey == null || $this.ActorCreateRequestKey == 0;
    }
}

export class ConnectActorMaterialRequest  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ConnectActorMaterialRequest";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.Statements = [];
        this['_key'] = this.ConnectActorMaterialRequestKey = 0;
    }
Statements:
    any;
ConnectActorMaterialRequestKey:
    any;
    static setStatements = ($this, items) => {
        if (items == null) items = [];
        if ($this.Statements == null) $this.Statements = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Statements.length > 0) {
            DigicircMatchmaking.BO.ConnectActorMaterialRequest.removeStatements($this, $this.Statements[0]);
        }

        DigicircMatchmaking.BO.ConnectActorMaterialRequest.addManyStatements($this, copyItems);
    }
    static addManyStatements = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.ConnectActorMaterialRequest.addStatements($this, items[i]);
        }
    }
    static addStatements = ($this, item) => {
        if ($this.Statements == null) $this.Statements = [];
        if (item == null || $this.Statements.indexOf(item) > -1) return;
        $this.Statements.push(item);
    }
    static addRangeStatements = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.ConnectActorMaterialRequest.addStatements($this, item));
    }
    static removeStatements = ($this, item) => {
        if ($this == null || $this.Statements == null || $this.Statements.indexOf(item) === -1) return;
        var _index = $this.Statements.indexOf(item);
        $this.Statements.splice(_index, 1);
    }
    static clearStatements = ($this) => {
        $this.Statements = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ConnectActorMaterialRequestKey == null || $this.ConnectActorMaterialRequestKey == 0;
    }
}

export class ConnectActorMaterialStatements  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ConnectActorMaterialStatements";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ConnectActorMaterialStatementsKey = 0;
    }
Statement:
    any;
Parameters:
    any;
ConnectActorMaterialStatementsKey:
    any;
    static setParameters = ($this, value) => {
        var oldValue = $this.Parameters;
        $this.Parameters = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ConnectActorMaterialStatementsKey == null || $this.ConnectActorMaterialStatementsKey == 0;
    }
}

export class ConnectActorMaterialParameters  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ConnectActorMaterialParameters";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ConnectActorMaterialParametersKey = 0;
    }
Props:
    any;
ConnectActorMaterialParametersKey:
    any;
    static setProps = ($this, value) => {
        var oldValue = $this.Props;
        $this.Props = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ConnectActorMaterialParametersKey == null || $this.ConnectActorMaterialParametersKey == 0;
    }
}

export class ConnectActorMaterialProps  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ConnectActorMaterialProps";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ConnectActorMaterialPropsKey = 0;
    }
ActorId:
    any;
MaterialId:
    any;
ConnectActorMaterialPropsKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ConnectActorMaterialPropsKey == null || $this.ConnectActorMaterialPropsKey == 0;
    }
}

export class ElasticDoc  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ElasticDoc";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ElasticDocKey = 0;
    }
ElasticDocKey:
    any;
    static CreateActorDoc(actor: any): any{let actorDoc = new Object() as any;

                                               actorDoc.ID = Joove.Common.nullSafe<any>(() => actor.Id, 0);

                                               actorDoc.Name = Joove.Common.nullSafe<any>(() => actor.Name, "");

                                               actorDoc.Description = Joove.Common.nullSafe<any>(() => actor.Description, "");

                                               actorDoc.Tags = Joove.Common.nullSafe<any>(() => actor.Keywords, "");

                                               if ((Joove.Common.nullSafe<any>(() => actor.Address, null) != null && Joove.Common.nullSafe<any>(() => actor.Address.Country, null) != null)) {
    actorDoc.Country = Joove.Common.nullSafe<any>(() => actor.Address.Country.Name, "");
    }

    if ((CLMS.Framework.Number.NotEqual(() => actor.SectorTypes.length, () => 0))) {
    actorDoc.Sector = Joove.Common.nullSafe<any>(() => actor.SectorTypes[0].Value, "");
    }

    let material = [];

    if ((CLMS.Framework.Number.GreaterThan(() => actor.CircularEconomyRequirements.Resources.length, () => 0))) {
    Joove.Common.nullSafe<any>(() => material.addRange(Joove.Common.nullSafe<any>(() => actor.CircularEconomyRequirements.Resources.linq.select((m) => Joove.Common.nullSafe<any>(() => m.Resource.Name, "")).toArray(), null)), null);
    }

    actorDoc.Resources = material;

                         let requestedMaterial = [];

    if ((CLMS.Framework.Number.GreaterThan(() => actor.CircularEconomyRequirements.DesiredResources.length, () => 0))) {
    Joove.Common.nullSafe<any>(() => requestedMaterial.addRange(Joove.Common.nullSafe<any>(() => actor.CircularEconomyRequirements.DesiredResources.linq.select((m) => Joove.Common.nullSafe<any>(() => m.Resource.Name, "")).toArray(), null)), null);
    }

    actorDoc.RequestedResources = requestedMaterial;

                                  return actorDoc;

                                          }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ElasticDocKey == null || $this.ElasticDocKey == 0;
    }
}

export class ElasticConsumer  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ElasticConsumer";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ElasticConsumerKey = 0;
    }
ElasticConsumerKey:
    any;
    static Filters(modelQuery: any,filterResource: any): any{let mustCollection = [];

                if ((Joove.Common.nullSafe<any>(() => modelQuery.SelectedCountry.Name, "") != null)) {
    let must = new Object() as any;
        let match = new Object() as any;
        match.Query = Joove.Common.nullSafe<any>(() => modelQuery.SelectedCountry.Name, "");
        match.Fields = ["Country"];
        must.MultiMatch = match;
        Joove.Common.nullSafe<any>(() => mustCollection.add(must), null);
    }

    if ((Joove.Common.nullSafe<any>(() => modelQuery.SelectedSector.Value, "") != null)) {
    let must = new Object() as any;
        let match = new Object() as any;
        match.Query = Joove.Common.nullSafe<any>(() => modelQuery.SelectedSector.Value, "");
        match.Fields = ["Sector"];
        must.MultiMatch = match;
        Joove.Common.nullSafe<any>(() => mustCollection.add(must), null);
    }

    if ((filterResource && Joove.Common.nullSafe<any>(() => modelQuery.SelectedMaterial.Name, "") != null)) {
    let mustSearchTerm = new Object() as any;
        let matchSearchTerm = new Object() as any;
        matchSearchTerm.Query = Joove.Common.nullSafe<any>(() => modelQuery.SelectedMaterial.Name, "");
        let materialSearchMode = "";
        switch (Joove.Common.nullSafe<any>(() => modelQuery.MaterialSearchMode, "")) {
        case "offers": {
            materialSearchMode = "Resources";
            break;
        }
        case "requests": {
            materialSearchMode = "RequestedResources";
            break;
        }
        }
        matchSearchTerm.Fields = [materialSearchMode];
        mustSearchTerm.MultiMatch = matchSearchTerm;
        Joove.Common.nullSafe<any>(() => mustCollection.add(mustSearchTerm), null);
    }

    return mustCollection;

                                                            }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ElasticConsumerKey == null || $this.ElasticConsumerKey == 0;
    }
}

export class SearchResponse  {
    _originalTypeClassName = "DigicircMatchmaking.BO.SearchResponse";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class GraphDebugResult  {
    _originalTypeClassName = "DigicircMatchmaking.BO.GraphDebugResult";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.GraphDebugResultKey = 0;
    }
Query:
    any;
RawResult:
    any;
Result:
    any;
GraphDebugResultKey:
    any;
    static setResult = ($this, value) => {
        var oldValue = $this.Result;
        $this.Result = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.GraphDebugResultKey == null || $this.GraphDebugResultKey == 0;
    }
}

export class GraphBackendResponse  {
    _originalTypeClassName = "DigicircMatchmaking.BO.GraphBackendResponse";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.Nodes = [];
        this.Links = [];
        this['_key'] = this.GraphBackendResponseKey = 0;
    }
Metadata:
    any;
Nodes:
    any;
Links:
    any;
GraphBackendResponseKey:
    any;
    static setMetadata = ($this, value) => {
        var oldValue = $this.Metadata;
        $this.Metadata = value;
        if (value != null) {
        }
    }
    static setNodes = ($this, items) => {
        if (items == null) items = [];
        if ($this.Nodes == null) $this.Nodes = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Nodes.length > 0) {
            DigicircMatchmaking.BO.GraphBackendResponse.removeNodes($this, $this.Nodes[0]);
        }

        DigicircMatchmaking.BO.GraphBackendResponse.addManyNodes($this, copyItems);
    }
    static addManyNodes = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.GraphBackendResponse.addNodes($this, items[i]);
        }
    }
    static addNodes = ($this, item) => {
        if ($this.Nodes == null) $this.Nodes = [];
        if (item == null || $this.Nodes.indexOf(item) > -1) return;
        $this.Nodes.push(item);
    }
    static addRangeNodes = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.GraphBackendResponse.addNodes($this, item));
    }
    static removeNodes = ($this, item) => {
        if ($this == null || $this.Nodes == null || $this.Nodes.indexOf(item) === -1) return;
        var _index = $this.Nodes.indexOf(item);
        $this.Nodes.splice(_index, 1);
    }
    static clearNodes = ($this) => {
        $this.Nodes = null;
    }
    static setLinks = ($this, items) => {
        if (items == null) items = [];
        if ($this.Links == null) $this.Links = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Links.length > 0) {
            DigicircMatchmaking.BO.GraphBackendResponse.removeLinks($this, $this.Links[0]);
        }

        DigicircMatchmaking.BO.GraphBackendResponse.addManyLinks($this, copyItems);
    }
    static addManyLinks = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.GraphBackendResponse.addLinks($this, items[i]);
        }
    }
    static addLinks = ($this, item) => {
        if ($this.Links == null) $this.Links = [];
        if (item == null || $this.Links.indexOf(item) > -1) return;
        $this.Links.push(item);
    }
    static addRangeLinks = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.GraphBackendResponse.addLinks($this, item));
    }
    static removeLinks = ($this, item) => {
        if ($this == null || $this.Links == null || $this.Links.indexOf(item) === -1) return;
        var _index = $this.Links.indexOf(item);
        $this.Links.splice(_index, 1);
    }
    static clearLinks = ($this) => {
        $this.Links = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.GraphBackendResponseKey == null || $this.GraphBackendResponseKey == 0;
    }
}

export class Metadata  {
    _originalTypeClassName = "DigicircMatchmaking.BO.Metadata";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.MetadataKey = 0;
    }
ExportDataAsJson:
    any;
Pages:
    any;
PageSize:
    any;
QueryElapsedTime:
    any;
TotalResponseElementsWithPositiveRelevanceLevel:
    any;
Elements:
    any;
Relations:
    any;
ExportType:
    any;
MetadataKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.MetadataKey == null || $this.MetadataKey == 0;
    }
}

export class Nodes  {
    _originalTypeClassName = "DigicircMatchmaking.BO.Nodes";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.NodesKey = 0;
    }
Name:
    any;
Label:
    any;
LabelType:
    any;
Id:
    any;
Graphid:
    any;
CC:
    any;
SL:
    any;
CL:
    any;
RL:
    any;
IA:
    any;
AL:
    any;
AC:
    any;
Attr:
    any;
NodesKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.NodesKey == null || $this.NodesKey == 0;
    }
}

export class Links  {
    _originalTypeClassName = "DigicircMatchmaking.BO.Links";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.LinksKey = 0;
    }
Source:
    any;
Target:
    any;
Type:
    any;
TypeRel:
    any;
Sid:
    any;
Tid:
    any;
Weight:
    any;
CL:
    any;
RL:
    any;
IA:
    any;
AL:
    any;
AC:
    any;
Attr:
    any;
LinksKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.LinksKey == null || $this.LinksKey == 0;
    }
}

export class GraphMetadata  {
    _originalTypeClassName = "DigicircMatchmaking.BO.GraphMetadata";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.GraphMetadataKey = 0;
    }
Name:
    any;
Elements:
    any;
Relations:
    any;
GraphMetadataKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.GraphMetadataKey == null || $this.GraphMetadataKey == 0;
    }
}

export class Query  {
    _originalTypeClassName = "DigicircMatchmaking.BO.Query";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.QueryKey = 0;
    }
GraphContext:
    any;
MessageType:
    any;
GraphSubContext:
    any;
SearchText:
    any;
QueryKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.QueryKey == null || $this.QueryKey == 0;
    }
}

export class QueryExtended  {
    _originalTypeClassName = "DigicircMatchmaking.BO.QueryExtended";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.Elements = [];
        this.Relations = [];
        this['_key'] = this.QueryExtendedKey = 0;
    }
GraphContext:
    any;
GraphSubContext:
    any;
MessageType:
    any;
Elements:
    any;
Relations:
    any;
MessageSearchData:
    any;
QueryExtendedKey:
    any;
    static setElements = ($this, items) => {
        if (items == null) items = [];
        if ($this.Elements == null) $this.Elements = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Elements.length > 0) {
            DigicircMatchmaking.BO.QueryExtended.removeElements($this, $this.Elements[0]);
        }

        DigicircMatchmaking.BO.QueryExtended.addManyElements($this, copyItems);
    }
    static addManyElements = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.QueryExtended.addElements($this, items[i]);
        }
    }
    static addElements = ($this, item) => {
        if ($this.Elements == null) $this.Elements = [];
        if (item == null || $this.Elements.indexOf(item) > -1) return;
        $this.Elements.push(item);
    }
    static addRangeElements = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.QueryExtended.addElements($this, item));
    }
    static removeElements = ($this, item) => {
        if ($this == null || $this.Elements == null || $this.Elements.indexOf(item) === -1) return;
        var _index = $this.Elements.indexOf(item);
        $this.Elements.splice(_index, 1);
    }
    static clearElements = ($this) => {
        $this.Elements = null;
    }
    static setRelations = ($this, items) => {
        if (items == null) items = [];
        if ($this.Relations == null) $this.Relations = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Relations.length > 0) {
            DigicircMatchmaking.BO.QueryExtended.removeRelations($this, $this.Relations[0]);
        }

        DigicircMatchmaking.BO.QueryExtended.addManyRelations($this, copyItems);
    }
    static addManyRelations = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.QueryExtended.addRelations($this, items[i]);
        }
    }
    static addRelations = ($this, item) => {
        if ($this.Relations == null) $this.Relations = [];
        if (item == null || $this.Relations.indexOf(item) > -1) return;
        $this.Relations.push(item);
    }
    static addRangeRelations = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.QueryExtended.addRelations($this, item));
    }
    static removeRelations = ($this, item) => {
        if ($this == null || $this.Relations == null || $this.Relations.indexOf(item) === -1) return;
        var _index = $this.Relations.indexOf(item);
        $this.Relations.splice(_index, 1);
    }
    static clearRelations = ($this) => {
        $this.Relations = null;
    }
    static setMessageSearchData = ($this, value) => {
        var oldValue = $this.MessageSearchData;
        $this.MessageSearchData = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.QueryExtendedKey == null || $this.QueryExtendedKey == 0;
    }
}

export class ExElements  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ExElements";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ExElementsKey = 0;
    }
Type:
    any;
Name:
    any;
Category:
    any;
Data:
    any;
ExElementsKey:
    any;
    static PrepareRalationNodesTypeText(element: any,textIsInSource: any): any{let sourceElement = new Object() as any;

                sourceElement.Name = Joove.Common.nullSafe<any>(() => element.SourceNodeName, "");

                sourceElement.Type = Joove.Common.nullSafe<any>(() => element.SourceNodeType, "");

                if ((textIsInSource)) {
    sourceElement.Category = "Text";
}

let destinationElement = new Object() as any;

destinationElement.Name = Joove.Common.nullSafe<any>(() => element.DestinationNodeName, "");

destinationElement.Type = Joove.Common.nullSafe<any>(() => element.DestinationNodeType, "");

if ((!(textIsInSource))) {
    destinationElement.Category = "Text";
}

return [sourceElement, destinationElement];

                                                                          }
static PrepareRelationNodes(element: any): any{let sourceElement = new Object() as any;

                sourceElement.Name = Joove.Common.nullSafe<any>(() => element.SourceNodeName, "");

                sourceElement.Type = Joove.Common.nullSafe<any>(() => element.SourceNodeType, "");

                let destinationElement = new Object() as any;

                destinationElement.Name = Joove.Common.nullSafe<any>(() => element.DestinationNodeName, "");

                destinationElement.Type = Joove.Common.nullSafe<any>(() => element.DestinationNodeType, "");

                return [sourceElement, destinationElement];

                                                      }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ExElementsKey == null || $this.ExElementsKey == 0;
    }
}

export class ExRelations  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ExRelations";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ExRelationsKey = 0;
    }
Type:
    any;
ExRelationsKey:
    any;
    static GetDefaults(): any{let relations = [];

                                  let relation = new Object() as any;

                                  relation.Type = "*";

                                  Joove.Common.nullSafe<any>(() => relations.add(relation), null);

                                  return relations;

                                 }
        static GetRelationType(name: any): any{let relations = [];

                                               let relation = new Object() as any;

                                               relation.Type = name;

                                               Joove.Common.nullSafe<any>(() => relations.add(relation), null);

                                               return relations;

                                              }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ExRelationsKey == null || $this.ExRelationsKey == 0;
    }
}

export class ExMessageSearchData  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ExMessageSearchData";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ExMessageSearchDataKey = 0;
    }
LabelSearchType:
    any;
DepthSearchLevel:
    any;
AlgorithmName:
    any;
JsonResponseFormat:
    any;
FindPathTypes:
    any;
AlgorithmOptimalPathParameters:
    any;
ExSecurity:
    any;
ExMessageSearchDataKey:
    any;
    static setExSecurity = ($this, value) => {
        var oldValue = $this.ExSecurity;
        $this.ExSecurity = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ExMessageSearchDataKey == null || $this.ExMessageSearchDataKey == 0;
    }
}

export class ExSecurity  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ExSecurity";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ExSecurityKey = 0;
    }
ExAuthorization:
    any;
UserName:
    any;
Passwd:
    any;
ExSecurityKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ExSecurityKey == null || $this.ExSecurityKey == 0;
    }
}

export class GraphQueries  {
    _originalTypeClassName = "DigicircMatchmaking.BO.GraphQueries";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.GraphQueriesKey = 0;
    }
GraphQueriesKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.GraphQueriesKey == null || $this.GraphQueriesKey == 0;
    }
}

export class GraphUpdate  {
    _originalTypeClassName = "DigicircMatchmaking.BO.GraphUpdate";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.GraphUpdateKey = 0;
    }
GraphUpdateKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.GraphUpdateKey == null || $this.GraphUpdateKey == 0;
    }
}

export class UpdateResponse  {
    _originalTypeClassName = "DigicircMatchmaking.BO.UpdateResponse";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.UpdateResponseKey = 0;
    }
Type:
    any;
Desc:
    any;
UpdateResponseKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UpdateResponseKey == null || $this.UpdateResponseKey == 0;
    }
}

export class GraphUpdateElement  {
    _originalTypeClassName = "DigicircMatchmaking.BO.GraphUpdateElement";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.GraphUpdateElementKey = 0;
    }
RelationType:
    any;
SourceNodeName:
    any;
SourceNodeType:
    any;
DestinationNodeName:
    any;
DestinationNodeType:
    any;
GraphUpdateElementKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.GraphUpdateElementKey == null || $this.GraphUpdateElementKey == 0;
    }
}

export class ListProducersMaterialParameters  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ListProducersMaterialParameters";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ListProducersMaterialParametersKey = 0;
    }
Properties:
    any;
ListProducersMaterialParametersKey:
    any;
    static setProperties = ($this, value) => {
        var oldValue = $this.Properties;
        $this.Properties = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ListProducersMaterialParametersKey == null || $this.ListProducersMaterialParametersKey == 0;
    }
}

export class ListProducersMaterialStatements  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ListProducersMaterialStatements";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ListProducersMaterialStatementsKey = 0;
    }
Statement:
    any;
Parameters:
    any;
ListProducersMaterialStatementsKey:
    any;
    static setParameters = ($this, value) => {
        var oldValue = $this.Parameters;
        $this.Parameters = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ListProducersMaterialStatementsKey == null || $this.ListProducersMaterialStatementsKey == 0;
    }
}

export class ListProducersMaterialProps  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ListProducersMaterialProps";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ListProducersMaterialPropsKey = 0;
    }
ActorId:
    any;
MaterialId:
    any;
ListProducersMaterialPropsKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ListProducersMaterialPropsKey == null || $this.ListProducersMaterialPropsKey == 0;
    }
}

export class ListProducersMaterialRequest  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ListProducersMaterialRequest";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.Statements = [];
        this['_key'] = this.ListProducersMaterialRequestKey = 0;
    }
Statements:
    any;
ListProducersMaterialRequestKey:
    any;
    static setStatements = ($this, items) => {
        if (items == null) items = [];
        if ($this.Statements == null) $this.Statements = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Statements.length > 0) {
            DigicircMatchmaking.BO.ListProducersMaterialRequest.removeStatements($this, $this.Statements[0]);
        }

        DigicircMatchmaking.BO.ListProducersMaterialRequest.addManyStatements($this, copyItems);
    }
    static addManyStatements = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.ListProducersMaterialRequest.addStatements($this, items[i]);
        }
    }
    static addStatements = ($this, item) => {
        if ($this.Statements == null) $this.Statements = [];
        if (item == null || $this.Statements.indexOf(item) > -1) return;
        $this.Statements.push(item);
    }
    static addRangeStatements = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.ListProducersMaterialRequest.addStatements($this, item));
    }
    static removeStatements = ($this, item) => {
        if ($this == null || $this.Statements == null || $this.Statements.indexOf(item) === -1) return;
        var _index = $this.Statements.indexOf(item);
        $this.Statements.splice(_index, 1);
    }
    static clearStatements = ($this) => {
        $this.Statements = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ListProducersMaterialRequestKey == null || $this.ListProducersMaterialRequestKey == 0;
    }
}

export class GraphQuery  {
    _originalTypeClassName = "DigicircMatchmaking.BO.GraphQuery";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.ActorNames = [];
        this['_key'] = this.GraphQueryKey = 0;
    }
SearchMode:
    any;
DisplayMode:
    any;
SelectedActor:
    any;
ActorNames:
    any;
DesiredProduct:
    any;
ResourceProduct:
    any;
GraphQueryKey:
    any;
    static setSelectedActor = ($this, value) => {
        var oldValue = $this.SelectedActor;
        $this.SelectedActor = value;
        if (value != null) {
        }
    }
    static setActorNames = ($this, items) => {
        if (items == null) items = [];
        if ($this.ActorNames == null) $this.ActorNames = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ActorNames.length > 0) {
            DigicircMatchmaking.BO.GraphQuery.removeActorNames($this, $this.ActorNames[0]);
        }

        DigicircMatchmaking.BO.GraphQuery.addManyActorNames($this, copyItems);
    }
    static addManyActorNames = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.GraphQuery.addActorNames($this, items[i]);
        }
    }
    static addActorNames = ($this, item) => {
        if ($this.ActorNames == null) $this.ActorNames = [];
        if (item == null || $this.ActorNames.indexOf(item) > -1) return;
        $this.ActorNames.push(item);
    }
    static addRangeActorNames = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.GraphQuery.addActorNames($this, item));
    }
    static removeActorNames = ($this, item) => {
        if ($this == null || $this.ActorNames == null || $this.ActorNames.indexOf(item) === -1) return;
        var _index = $this.ActorNames.indexOf(item);
        $this.ActorNames.splice(_index, 1);
    }
    static clearActorNames = ($this) => {
        $this.ActorNames = null;
    }
    static setDesiredProduct = ($this, value) => {
        var oldValue = $this.DesiredProduct;
        $this.DesiredProduct = value;
        if (value != null) {
        }
    }
    static setResourceProduct = ($this, value) => {
        var oldValue = $this.ResourceProduct;
        $this.ResourceProduct = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.GraphQueryKey == null || $this.GraphQueryKey == 0;
    }
}

export class Match  {
    _originalTypeClassName = "DigicircMatchmaking.BO.Match";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ValidFrom:
    any;
ValidTo:
    any;
QuantityLack:
    any;
ActorOffer:
    any;
ActorRequest:
    any;
Resource:
    any;
    static setActorOffer = ($this, value) => {
        var oldValue = $this.ActorOffer;
        $this.ActorOffer = value;
        if (value != null) {
        }
    }
    static setActorRequest = ($this, value) => {
        var oldValue = $this.ActorRequest;
        $this.ActorRequest = value;
        if (value != null) {
        }
    }
    static setResource = ($this, value) => {
        var oldValue = $this.Resource;
        $this.Resource = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ActorsInfo  {
    _originalTypeClassName = "DigicircMatchmaking.BO.ActorsInfo";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.ActorsInfoKey = 0;
    }
Display:
    any;
Count:
    any;
ActorsInfoKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ActorsInfoKey == null || $this.ActorsInfoKey == 0;
    }
}

export class ApplicationUserAction  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
UserName:
    any;
ActiveRoles:
    any;
ActivePermissions:
    any;
Action:
    any;
Controller:
    any;
Date:
    any;
ErrorMessage:
    any;
Success:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserExternalProfile  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Gender:
    any;
Name:
    any;
Surname:
    any;
DisplayName:
    any;
Email:
    any;
Provider:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationSetting  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Key:
    any;
Value:
    any;
IsCustom:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUser  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUser";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.Permissions = [];
        this.Roles = [];
        this.Clients = [];
        this.Logins = [];
        this.Claims = [];
        this['_key'] = this.UserName = "";
    }
UserName:
    any;
PasswordHash:
    any;
SecurityStamp:
    any;
EmailConfirmed:
    any;
LockoutEnabled:
    any;
PhoneNumberConfirmed:
    any;
TwoFactorEnabled:
    any;
AccessFailedCount:
    any;
Name:
    any;
Email:
    any;
PhoneNumber:
    any;
LockoutEndDate:
    any;
Permissions:
    any;
Roles:
    any;
Clients:
    any;
Logins:
    any;
Claims:
    any;
Profile:
    any;
    static setPermissions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Permissions == null) $this.Permissions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Permissions.length > 0) {
            DigicircMatchmaking.BO.ApplicationUser.removePermissions($this, $this.Permissions[0]);
        }

        DigicircMatchmaking.BO.ApplicationUser.addManyPermissions($this, copyItems);
    }
    static addManyPermissions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.ApplicationUser.addPermissions($this, items[i]);
        }
    }
    static addPermissions = ($this, item) => {
        if ($this.Permissions == null) $this.Permissions = [];
        if (item == null || $this.Permissions.indexOf(item) > -1) return;
        $this.Permissions.push(item);
        ApplicationPermission.addUsers(item, $this);
    }
    static addRangePermissions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.ApplicationUser.addPermissions($this, item));
    }
    static removePermissions = ($this, item) => {
        if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1) return;
        var _index = $this.Permissions.indexOf(item);
        $this.Permissions.splice(_index, 1);
        ApplicationPermission.removeUsers(item, $this);
    }
    static clearPermissions = ($this) => {
        $this.Permissions = null;
    }
    static setRoles = ($this, items) => {
        if (items == null) items = [];
        if ($this.Roles == null) $this.Roles = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Roles.length > 0) {
            DigicircMatchmaking.BO.ApplicationUser.removeRoles($this, $this.Roles[0]);
        }

        DigicircMatchmaking.BO.ApplicationUser.addManyRoles($this, copyItems);
    }
    static addManyRoles = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.ApplicationUser.addRoles($this, items[i]);
        }
    }
    static addRoles = ($this, item) => {
        if ($this.Roles == null) $this.Roles = [];
        if (item == null || $this.Roles.indexOf(item) > -1) return;
        $this.Roles.push(item);
        ApplicationRole.addUsers(item, $this);
    }
    static addRangeRoles = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.ApplicationUser.addRoles($this, item));
    }
    static removeRoles = ($this, item) => {
        if ($this == null || $this.Roles == null || $this.Roles.indexOf(item) === -1) return;
        var _index = $this.Roles.indexOf(item);
        $this.Roles.splice(_index, 1);
        ApplicationRole.removeUsers(item, $this);
    }
    static clearRoles = ($this) => {
        $this.Roles = null;
    }
    static setClients = ($this, items) => {
        if (items == null) items = [];
        if ($this.Clients == null) $this.Clients = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Clients.length > 0) {
            DigicircMatchmaking.BO.ApplicationUser.removeClients($this, $this.Clients[0]);
        }

        DigicircMatchmaking.BO.ApplicationUser.addManyClients($this, copyItems);
    }
    static addManyClients = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.ApplicationUser.addClients($this, items[i]);
        }
    }
    static addClients = ($this, item) => {
        if ($this.Clients == null) $this.Clients = [];
        if (item == null || $this.Clients.indexOf(item) > -1) return;
        $this.Clients.push(item);
        if (item.User != $this) {
            DigicircMatchmaking.BO.ApplicationClient.setUser(item, $this);
        }
    }
    static addRangeClients = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.ApplicationUser.addClients($this, item));
    }
    static removeClients = ($this, item) => {
        if ($this == null || $this.Clients == null || $this.Clients.indexOf(item) === -1) return;
        var _index = $this.Clients.indexOf(item);
        $this.Clients.splice(_index, 1);
        item.User = null;
    }
    static clearClients = ($this) => {
        $this.Clients = null;
    }
    static setLogins = ($this, items) => {
        if (items == null) items = [];
        if ($this.Logins == null) $this.Logins = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Logins.length > 0) {
            DigicircMatchmaking.BO.ApplicationUser.removeLogins($this, $this.Logins[0]);
        }

        DigicircMatchmaking.BO.ApplicationUser.addManyLogins($this, copyItems);
    }
    static addManyLogins = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.ApplicationUser.addLogins($this, items[i]);
        }
    }
    static addLogins = ($this, item) => {
        if ($this.Logins == null) $this.Logins = [];
        if (item == null || $this.Logins.indexOf(item) > -1) return;
        $this.Logins.push(item);
        if (item.User != $this) {
            DigicircMatchmaking.BO.ApplicationUserLogin.setUser(item, $this);
        }
    }
    static addRangeLogins = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.ApplicationUser.addLogins($this, item));
    }
    static removeLogins = ($this, item) => {
        if ($this == null || $this.Logins == null || $this.Logins.indexOf(item) === -1) return;
        var _index = $this.Logins.indexOf(item);
        $this.Logins.splice(_index, 1);
        item.User = null;
    }
    static clearLogins = ($this) => {
        $this.Logins = null;
    }
    static setClaims = ($this, items) => {
        if (items == null) items = [];
        if ($this.Claims == null) $this.Claims = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Claims.length > 0) {
            DigicircMatchmaking.BO.ApplicationUser.removeClaims($this, $this.Claims[0]);
        }

        DigicircMatchmaking.BO.ApplicationUser.addManyClaims($this, copyItems);
    }
    static addManyClaims = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.ApplicationUser.addClaims($this, items[i]);
        }
    }
    static addClaims = ($this, item) => {
        if ($this.Claims == null) $this.Claims = [];
        if (item == null || $this.Claims.indexOf(item) > -1) return;
        $this.Claims.push(item);
        if (item.User != $this) {
            DigicircMatchmaking.BO.ApplicationUserClaim.setUser(item, $this);
        }
    }
    static addRangeClaims = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.ApplicationUser.addClaims($this, item));
    }
    static removeClaims = ($this, item) => {
        if ($this == null || $this.Claims == null || $this.Claims.indexOf(item) === -1) return;
        var _index = $this.Claims.indexOf(item);
        $this.Claims.splice(_index, 1);
        item.User = null;
    }
    static clearClaims = ($this) => {
        $this.Claims = null;
    }
    static setProfile = ($this, value) => {
        var oldValue = $this.Profile;
        $this.Profile = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UserName == null || $this.UserName == "";
    }
}

export class ApplicationRole  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationRole";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.Users = [];
        this.Permissions = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Description:
    any;
IsCustom:
    any;
Users:
    any;
Permissions:
    any;
    static setUsers = ($this, items) => {
        if (items == null) items = [];
        if ($this.Users == null) $this.Users = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Users.length > 0) {
            DigicircMatchmaking.BO.ApplicationRole.removeUsers($this, $this.Users[0]);
        }

        DigicircMatchmaking.BO.ApplicationRole.addManyUsers($this, copyItems);
    }
    static addManyUsers = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.ApplicationRole.addUsers($this, items[i]);
        }
    }
    static addUsers = ($this, item) => {
        if ($this.Users == null) $this.Users = [];
        if (item == null || $this.Users.indexOf(item) > -1) return;
        $this.Users.push(item);
        ApplicationUser.addRoles(item, $this);
    }
    static addRangeUsers = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.ApplicationRole.addUsers($this, item));
    }
    static removeUsers = ($this, item) => {
        if ($this == null || $this.Users == null || $this.Users.indexOf(item) === -1) return;
        var _index = $this.Users.indexOf(item);
        $this.Users.splice(_index, 1);
        ApplicationUser.removeRoles(item, $this);
    }
    static clearUsers = ($this) => {
        $this.Users = null;
    }
    static setPermissions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Permissions == null) $this.Permissions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Permissions.length > 0) {
            DigicircMatchmaking.BO.ApplicationRole.removePermissions($this, $this.Permissions[0]);
        }

        DigicircMatchmaking.BO.ApplicationRole.addManyPermissions($this, copyItems);
    }
    static addManyPermissions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.ApplicationRole.addPermissions($this, items[i]);
        }
    }
    static addPermissions = ($this, item) => {
        if ($this.Permissions == null) $this.Permissions = [];
        if (item == null || $this.Permissions.indexOf(item) > -1) return;
        $this.Permissions.push(item);
        ApplicationPermission.addRoles(item, $this);
    }
    static addRangePermissions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.ApplicationRole.addPermissions($this, item));
    }
    static removePermissions = ($this, item) => {
        if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1) return;
        var _index = $this.Permissions.indexOf(item);
        $this.Permissions.splice(_index, 1);
        ApplicationPermission.removeRoles(item, $this);
    }
    static clearPermissions = ($this) => {
        $this.Permissions = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationOperation  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.Permissions = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
ParentControllerName:
    any;
Type:
    any;
IsAvailableToAnonymous:
    any;
IsAvailableToAllAuthorizedUsers:
    any;
Permissions:
    any;
    static setPermissions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Permissions == null) $this.Permissions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Permissions.length > 0) {
            DigicircMatchmaking.BO.ApplicationOperation.removePermissions($this, $this.Permissions[0]);
        }

        DigicircMatchmaking.BO.ApplicationOperation.addManyPermissions($this, copyItems);
    }
    static addManyPermissions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.ApplicationOperation.addPermissions($this, items[i]);
        }
    }
    static addPermissions = ($this, item) => {
        if ($this.Permissions == null) $this.Permissions = [];
        if (item == null || $this.Permissions.indexOf(item) > -1) return;
        $this.Permissions.push(item);
        ApplicationPermission.addOperations(item, $this);
    }
    static addRangePermissions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.ApplicationOperation.addPermissions($this, item));
    }
    static removePermissions = ($this, item) => {
        if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1) return;
        var _index = $this.Permissions.indexOf(item);
        $this.Permissions.splice(_index, 1);
        ApplicationPermission.removeOperations(item, $this);
    }
    static clearPermissions = ($this) => {
        $this.Permissions = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationPermission  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.Users = [];
        this.Roles = [];
        this.Operations = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Description:
    any;
IsCustom:
    any;
Users:
    any;
Roles:
    any;
Operations:
    any;
    static setUsers = ($this, items) => {
        if (items == null) items = [];
        if ($this.Users == null) $this.Users = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Users.length > 0) {
            DigicircMatchmaking.BO.ApplicationPermission.removeUsers($this, $this.Users[0]);
        }

        DigicircMatchmaking.BO.ApplicationPermission.addManyUsers($this, copyItems);
    }
    static addManyUsers = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.ApplicationPermission.addUsers($this, items[i]);
        }
    }
    static addUsers = ($this, item) => {
        if ($this.Users == null) $this.Users = [];
        if (item == null || $this.Users.indexOf(item) > -1) return;
        $this.Users.push(item);
        ApplicationUser.addPermissions(item, $this);
    }
    static addRangeUsers = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.ApplicationPermission.addUsers($this, item));
    }
    static removeUsers = ($this, item) => {
        if ($this == null || $this.Users == null || $this.Users.indexOf(item) === -1) return;
        var _index = $this.Users.indexOf(item);
        $this.Users.splice(_index, 1);
        ApplicationUser.removePermissions(item, $this);
    }
    static clearUsers = ($this) => {
        $this.Users = null;
    }
    static setRoles = ($this, items) => {
        if (items == null) items = [];
        if ($this.Roles == null) $this.Roles = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Roles.length > 0) {
            DigicircMatchmaking.BO.ApplicationPermission.removeRoles($this, $this.Roles[0]);
        }

        DigicircMatchmaking.BO.ApplicationPermission.addManyRoles($this, copyItems);
    }
    static addManyRoles = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.ApplicationPermission.addRoles($this, items[i]);
        }
    }
    static addRoles = ($this, item) => {
        if ($this.Roles == null) $this.Roles = [];
        if (item == null || $this.Roles.indexOf(item) > -1) return;
        $this.Roles.push(item);
        ApplicationRole.addPermissions(item, $this);
    }
    static addRangeRoles = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.ApplicationPermission.addRoles($this, item));
    }
    static removeRoles = ($this, item) => {
        if ($this == null || $this.Roles == null || $this.Roles.indexOf(item) === -1) return;
        var _index = $this.Roles.indexOf(item);
        $this.Roles.splice(_index, 1);
        ApplicationRole.removePermissions(item, $this);
    }
    static clearRoles = ($this) => {
        $this.Roles = null;
    }
    static setOperations = ($this, items) => {
        if (items == null) items = [];
        if ($this.Operations == null) $this.Operations = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Operations.length > 0) {
            DigicircMatchmaking.BO.ApplicationPermission.removeOperations($this, $this.Operations[0]);
        }

        DigicircMatchmaking.BO.ApplicationPermission.addManyOperations($this, copyItems);
    }
    static addManyOperations = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.ApplicationPermission.addOperations($this, items[i]);
        }
    }
    static addOperations = ($this, item) => {
        if ($this.Operations == null) $this.Operations = [];
        if (item == null || $this.Operations.indexOf(item) > -1) return;
        $this.Operations.push(item);
        ApplicationOperation.addPermissions(item, $this);
    }
    static addRangeOperations = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.ApplicationPermission.addOperations($this, item));
    }
    static removeOperations = ($this, item) => {
        if ($this == null || $this.Operations == null || $this.Operations.indexOf(item) === -1) return;
        var _index = $this.Operations.indexOf(item);
        $this.Operations.splice(_index, 1);
        ApplicationOperation.removePermissions(item, $this);
    }
    static clearOperations = ($this) => {
        $this.Operations = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationClient  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationClient";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.User = new this.Domain.ApplicationUser();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ClientKey:
    any;
IPAddress:
    any;
SessionId:
    any;
ConnectedOn:
    any;
User:
    any;
    static setUser = ($this, value) => {
        var oldValue = $this.User;
        $this.User = value;
        if (value != null) {
            if (oldValue != null) {
                DigicircMatchmaking.BO.ApplicationUser.removeClients(oldValue, $this);
            }
            DigicircMatchmaking.BO.ApplicationUser.addClients(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserLogin  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.User = new this.Domain.ApplicationUser();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LoginProvider:
    any;
ProviderKey:
    any;
User:
    any;
    static setUser = ($this, value) => {
        var oldValue = $this.User;
        $this.User = value;
        if (value != null) {
            if (oldValue != null) {
                DigicircMatchmaking.BO.ApplicationUser.removeLogins(oldValue, $this);
            }
            DigicircMatchmaking.BO.ApplicationUser.addLogins(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserClaim  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.User = new this.Domain.ApplicationUser();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ClaimType:
    any;
ClaimValue:
    any;
ClaimValueType:
    any;
Issuer:
    any;
OriginalIssuer:
    any;
User:
    any;
    static setUser = ($this, value) => {
        var oldValue = $this.User;
        $this.User = value;
        if (value != null) {
            if (oldValue != null) {
                DigicircMatchmaking.BO.ApplicationUser.removeClaims(oldValue, $this);
            }
            DigicircMatchmaking.BO.ApplicationUser.addClaims(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ProfileSetting  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ProfileSetting";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Key:
    any;
Value:
    any;
ParentProfile:
    any;
    static setParentProfile = ($this, value) => {
        var oldValue = $this.ParentProfile;
        $this.ParentProfile = value;
        if (value != null) {
            if (oldValue != null) {
                DigicircMatchmaking.BO.Profile.removeSettings(oldValue, $this);
            }
            DigicircMatchmaking.BO.Profile.addSettings(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Profile  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.Profile";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.Settings = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LanguageLCID:
    any;
LocaleLCID:
    any;
TimezoneInfoID:
    any;
Theme:
    any;
Settings:
    any;
    static setSettings = ($this, items) => {
        if (items == null) items = [];
        if ($this.Settings == null) $this.Settings = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Settings.length > 0) {
            DigicircMatchmaking.BO.Profile.removeSettings($this, $this.Settings[0]);
        }

        DigicircMatchmaking.BO.Profile.addManySettings($this, copyItems);
    }
    static addManySettings = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.Profile.addSettings($this, items[i]);
        }
    }
    static addSettings = ($this, item) => {
        if ($this.Settings == null) $this.Settings = [];
        if (item == null || $this.Settings.indexOf(item) > -1) return;
        $this.Settings.push(item);
        if (item.ParentProfile != $this) {
            DigicircMatchmaking.BO.ProfileSetting.setParentProfile(item, $this);
        }
    }
    static addRangeSettings = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.Profile.addSettings($this, item));
    }
    static removeSettings = ($this, item) => {
        if ($this == null || $this.Settings == null || $this.Settings.indexOf(item) === -1) return;
        var _index = $this.Settings.indexOf(item);
        $this.Settings.splice(_index, 1);
        item.ParentProfile = null;
    }
    static clearSettings = ($this) => {
        $this.Settings = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationLanguage  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Code:
    any;
Icon:
    any;
DateTimeFormat:
    any;
    static setDateTimeFormat = ($this, value) => {
        var oldValue = $this.DateTimeFormat;
        $this.DateTimeFormat = value;
        if (value != null) {
            if (oldValue != null && oldValue.ApplicationLanguage != null) {
                oldValue.ApplicationLanguage = null;
            }
            if ($this.DateTimeFormat.ApplicationLanguage !== $this) {
                DigicircMatchmaking.BO.DateTimeFormat.setApplicationLanguage(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationTimezoneInfo  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationTimezoneInfo";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = "";
    }
Id:
    any;
DisplayName:
    any;
StandardName:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == "";
    }
}

export class DateTimeFormat  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.ApplicationLanguage = new this.Domain.ApplicationLanguage();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LongDatePattern:
    any;
LongTimePattern:
    any;
MonthDayPattern:
    any;
RFC1123Pattern:
    any;
ShortDatePattern:
    any;
ShortTimePattern:
    any;
YearMonthPattern:
    any;
ApplicationLanguage:
    any;
    static setApplicationLanguage = ($this, value) => {
        var oldValue = $this.ApplicationLanguage;
        $this.ApplicationLanguage = value;
        if (value != null) {
            if (oldValue != null && oldValue.DateTimeFormat != null) {
                oldValue.DateTimeFormat = null;
            }
            if ($this.ApplicationLanguage.DateTimeFormat !== $this) {
                DigicircMatchmaking.BO.ApplicationLanguage.setDateTimeFormat(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationTheme  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Description:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class FileData  {
    _originalTypeClassName = "DigicircMatchmaking.BO.FileData";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
    }
Id:
    any;
FileName:
    any;
FolderPath:
    any;
MaxFileSize:
    any;
AllowedExtensions:
    any;
Blob:
    any;
StorageMedium:
    any;
UploadedBy:
    any;
UploadDateTime:
    any;
Description:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
    }
}

export enum StorageMedium {
    FileSystem,
    DataBase,
}

export class AuditEntityConfiguration  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.Properties = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
FullName:
    any;
ShortName:
    any;
Properties:
    any;
    static setProperties = ($this, items) => {
        if (items == null) items = [];
        if ($this.Properties == null) $this.Properties = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Properties.length > 0) {
            DigicircMatchmaking.BO.AuditEntityConfiguration.removeProperties($this, $this.Properties[0]);
        }

        DigicircMatchmaking.BO.AuditEntityConfiguration.addManyProperties($this, copyItems);
    }
    static addManyProperties = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.AuditEntityConfiguration.addProperties($this, items[i]);
        }
    }
    static addProperties = ($this, item) => {
        if ($this.Properties == null) $this.Properties = [];
        if (item == null || $this.Properties.indexOf(item) > -1) return;
        $this.Properties.push(item);
        if (item.Entity != $this) {
            DigicircMatchmaking.BO.AuditPropertyConfiguration.setEntity(item, $this);
        }
    }
    static addRangeProperties = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.AuditEntityConfiguration.addProperties($this, item));
    }
    static removeProperties = ($this, item) => {
        if ($this == null || $this.Properties == null || $this.Properties.indexOf(item) === -1) return;
        var _index = $this.Properties.indexOf(item);
        $this.Properties.splice(_index, 1);
        item.Entity = null;
    }
    static clearProperties = ($this) => {
        $this.Properties = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditPropertyConfiguration  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this.Entity = new this.Domain.AuditEntityConfiguration();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
DataType:
    any;
IsAuditable:
    any;
IsComplex:
    any;
IsCollection:
    any;
Entity:
    any;
    static setEntity = ($this, value) => {
        var oldValue = $this.Entity;
        $this.Entity = value;
        if (value != null) {
            if (oldValue != null) {
                DigicircMatchmaking.BO.AuditEntityConfiguration.removeProperties(oldValue, $this);
            }
            DigicircMatchmaking.BO.AuditEntityConfiguration.addProperties(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditLogEntry  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
UserName:
    any;
IPAddress:
    any;
EntityFullName:
    any;
EntityShortName:
    any;
EntityId:
    any;
Timestamp:
    any;
EntryTypeId:
    any;
ActionTypeId:
    any;
OldValue:
    any;
NewValue:
    any;
PropertyName:
    any;
ExtraField1:
    any;
ExtraField2:
    any;
ExtraField3:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditLogEntryType  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Name:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditLogPropertyActionType  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Name:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export enum WorkflowStatus {
    None,
    Completed,
    Pending,
    Expired,
    Cancelled,
    Failed,
    StepToContinueNotFound,
}

export class WorkflowExecutionResult  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowExecutionResult";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.WorkflowExecutionResultKey = 0;
    }
Status:
    any;
Context:
    any;
WorkflowExecutionResultKey:
    any;
    static setContext = ($this, value) => {
        var oldValue = $this.Context;
        $this.Context = value;
        if (value != null) {
            if (oldValue != null && oldValue.Result != null) {
                oldValue.Result = null;
            }
            if ($this.Context.Result !== $this) {
                DigicircMatchmaking.BO.WorkflowContextBase.setResult(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.WorkflowExecutionResultKey == null || $this.WorkflowExecutionResultKey == 0;
    }
}

export class WorkflowContextBase  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowContextBase";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
    }
Name:
    any;
Error:
    any;
Expires:
    any;
ExpirationDateTime:
    any;
PendingSince:
    any;
PendingJobCreatedBy:
    any;
PendingStep:
    any;
Id:
    any;
Status:
    any;
Result:
    any;
    static setResult = ($this, value) => {
        var oldValue = $this.Result;
        $this.Result = value;
        if (value != null) {
            if (oldValue != null && oldValue.Context != null) {
                oldValue.Context = null;
            }
            if ($this.Result.Context !== $this) {
                DigicircMatchmaking.BO.WorkflowExecutionResult.setContext(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
    }
}

export class WorkflowSchedule  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowSchedule";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        this['_key'] = this.Workflow = "";
    }
Workflow:
    any;
Description:
    any;
StartDateTime:
    any;
ExpireOn:
    any;
CronExpression:
    any;
LastExecution:
    any;
LastExecutionMessage:
    any;
IsLastExecutionSuccess:
    any;
Active:
    any;
HumanReadableExpression:
    any;
NextExecutionTime:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Workflow == null || $this.Workflow == "";
    }
}

export class DigicircUser extends ApplicationUser {
    _originalTypeClassName = "DigicircMatchmaking.BO.DigicircUser";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        super();
        this['_key'] = this.UserName = "";
    }
FirstName:
    any;
LastName:
    any;
SubscribeToNewsLetter:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UserName == null || $this.UserName == "";
    }
}

export class SectorType extends ValueType {
    _originalTypeClassName = "DigicircMatchmaking.BO.SectorType";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        super();
        this.Actor = [];
        this['_key'] = this.Id = 0;
    }
Actor:
    any;
    static setActor = ($this, items) => {
        if (items == null) items = [];
        if ($this.Actor == null) $this.Actor = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Actor.length > 0) {
            DigicircMatchmaking.BO.SectorType.removeActor($this, $this.Actor[0]);
        }

        DigicircMatchmaking.BO.SectorType.addManyActor($this, copyItems);
    }
    static addManyActor = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DigicircMatchmaking.BO.SectorType.addActor($this, items[i]);
        }
    }
    static addActor = ($this, item) => {
        if ($this.Actor == null) $this.Actor = [];
        if (item == null || $this.Actor.indexOf(item) > -1) return;
        $this.Actor.push(item);
        Actor.addSectorTypes(item, $this);
    }
    static addRangeActor = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DigicircMatchmaking.BO.SectorType.addActor($this, item));
    }
    static removeActor = ($this, item) => {
        if ($this == null || $this.Actor == null || $this.Actor.indexOf(item) === -1) return;
        var _index = $this.Actor.indexOf(item);
        $this.Actor.splice(_index, 1);
        Actor.removeSectorTypes(item, $this);
    }
    static clearActor = ($this) => {
        $this.Actor = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class EntityType extends ValueType {
    _originalTypeClassName = "DigicircMatchmaking.BO.EntityType";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        super();
        this.IsProvider = false;
        this['_key'] = this.Id = 0;
    }
IsProvider:
    any;
IsCluster:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ThematicExpertise extends ValueType {
    _originalTypeClassName = "DigicircMatchmaking.BO.ThematicExpertise";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        super();
        this['_key'] = this.Id = 0;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Services extends ValueType {
    _originalTypeClassName = "DigicircMatchmaking.BO.Services";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        super();
        this['_key'] = this.Id = 0;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Expertise extends ValueType {
    _originalTypeClassName = "DigicircMatchmaking.BO.Expertise";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        super();
        this['_key'] = this.Id = 0;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class PhysicalForm extends ValueType {
    _originalTypeClassName = "DigicircMatchmaking.BO.PhysicalForm";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        super();
        this['_key'] = this.Id = 0;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class UnitOfMeasurement extends ValueType {
    _originalTypeClassName = "DigicircMatchmaking.BO.UnitOfMeasurement";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        super();
        this['_key'] = this.Id = 0;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class QueryGeocoderContext extends WorkflowContextBase {
    _originalTypeClassName = "DigicircMatchmaking.BO.QueryGeocoderContext";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        super();
        this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
    }
}

export class SuggestionsFlowContext extends WorkflowContextBase {
    _originalTypeClassName = "DigicircMatchmaking.BO.SuggestionsFlowContext";
    Domain = DigicircMatchmaking.BO;
    constructor() {
        super();
        this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
    }
}

}
var _appDomain = DigicircMatchmaking.BO;
window.$domain = _appDomain;
