// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
namespace DigicircMatchmaking.ViewModels.ProcessList {
export class ProcessListViewModel extends DigicircMatchmaking.ViewModels.SymbiosisMasterPage.SymbiosisMasterPageViewModel {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.SelectedProcess != null)
            instance.SelectedProcess = SelectedProcess_ProcessViewModel._lightCast(instance.SelectedProcess);
        return instance;
    }

    public static _initializeFrom(original: ProcessListViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): ProcessListViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        ProcessListViewModel = new ProcessListViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateProcessListViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateProcessListViewModel(original: ProcessListViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;

        this._hydrateSymbiosisMasterPageViewModel(original, ignoreReadOnlyProperties, context);

        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;


        if(original.SelectedProcess !== undefined) this.SelectedProcess = SelectedProcess_ProcessViewModel._initializeFrom(original.SelectedProcess, ignoreReadOnlyProperties, context);
        this.ProcessListSelectedItemKeys = original.ProcessListSelectedItemKeys;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = ProcessListViewModel._initializeFrom(this, ignoreReadOnlyProperties);
            ProcessListViewModel._deleteDropDownInitialValues(reduced);
            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): ProcessListViewModel {
        var reduced = ProcessListViewModel._initializeFrom(this, ignoreReadOnlyProperties);
        ProcessListViewModel._deleteDropDownInitialValues(reduced);
        return reduced;
    }

    public static _deleteDropDownInitialValues(reduced: ProcessListViewModel) {
        if (reduced == null) return;


        DigicircMatchmaking.ViewModels.SymbiosisMasterPage.SymbiosisMasterPageViewModel._deleteDropDownInitialValues(reduced);
    }
public SelectedProcess:
    any;
public ProcessListSelectedItemKeys:
    any[];
}

export class SelectedProcess_ProcessViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: SelectedProcess_ProcessViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): SelectedProcess_ProcessViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        SelectedProcess_ProcessViewModel = new SelectedProcess_ProcessViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateSelectedProcess_ProcessViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateSelectedProcess_ProcessViewModel(original: SelectedProcess_ProcessViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;
        if(original.Notes !== undefined) this.Notes = original.Notes;
        if(original.Ref !== undefined) this.Ref = original.Ref;
        if(original.ProductName !== undefined) this.ProductName = original.ProductName;
        if(original.SourceName !== undefined) this.SourceName = original.SourceName;
        if(original.EnvironmentalEffects !== undefined) this.EnvironmentalEffects = original.EnvironmentalEffects;
        if(original.ShortEnvironmentalEffects !== undefined) this.ShortEnvironmentalEffects = original.ShortEnvironmentalEffects;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = SelectedProcess_ProcessViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): SelectedProcess_ProcessViewModel {
        var reduced = SelectedProcess_ProcessViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Id:
    any;
public Name:
    any;
public Notes:
    any;
public Ref:
    any;
public ProductName:
    any;
public SourceName:
    any;
public EnvironmentalEffects:
    any;
public ShortEnvironmentalEffects:
    any;
    public _versionTimestamp?: string;
}

}
