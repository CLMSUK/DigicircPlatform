// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
namespace DigicircMatchmaking.ViewModels.ManagePermission {
export class ManagePermissionViewModel extends DigicircMatchmaking.ViewModels.MasterPageForSlide.MasterPageForSlideViewModel {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.ApplicationPermission != null)
            instance.ApplicationPermission = ApplicationPermission_ApplicationPermissionViewModel._lightCast(instance.ApplicationPermission);
        return instance;
    }

    public static _initializeFrom(original: ManagePermissionViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): ManagePermissionViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        ManagePermissionViewModel = new ManagePermissionViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateManagePermissionViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateManagePermissionViewModel(original: ManagePermissionViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;

        this._hydrateMasterPageForSlideViewModel(original, ignoreReadOnlyProperties, context);

        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;


        if(original.ApplicationPermission !== undefined) this.ApplicationPermission = ApplicationPermission_ApplicationPermissionViewModel._initializeFrom(original.ApplicationPermission, ignoreReadOnlyProperties, context);
        this.Button4SelectedItemKeys = original.Button4SelectedItemKeys;
        this.Button41SelectedItemKeys = original.Button41SelectedItemKeys;
        this.Button5SelectedItemKeys = original.Button5SelectedItemKeys;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = ManagePermissionViewModel._initializeFrom(this, ignoreReadOnlyProperties);
            ManagePermissionViewModel._deleteDropDownInitialValues(reduced);
            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): ManagePermissionViewModel {
        var reduced = ManagePermissionViewModel._initializeFrom(this, ignoreReadOnlyProperties);
        ManagePermissionViewModel._deleteDropDownInitialValues(reduced);
        return reduced;
    }

    public static _deleteDropDownInitialValues(reduced: ManagePermissionViewModel) {
        if (reduced == null) return;


        DigicircMatchmaking.ViewModels.MasterPageForSlide.MasterPageForSlideViewModel._deleteDropDownInitialValues(reduced);
    }
public ApplicationPermission:
    any;
public Button4SelectedItemKeys:
    any[];
public Button41SelectedItemKeys:
    any[];
public Button5SelectedItemKeys:
    any[];
}

export class ApplicationPermission_ApplicationPermissionViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this.Operations = new Array<any>();
        this.Roles = new Array<any>();
        this.Users = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;


        if(instance.Operations != null) {
            for(let i = 0; i < instance.Operations.length; i++) {
                instance.Operations[i] = ApplicationPermission_ApplicationPermission_Operations_ApplicationOperationViewModel._lightCast(instance.Operations[i]);

            }
        }

        if(instance.Roles != null) {
            for(let i = 0; i < instance.Roles.length; i++) {
                instance.Roles[i] = ApplicationPermission_ApplicationPermission_Roles_ApplicationRoleViewModel._lightCast(instance.Roles[i]);

            }
        }

        if(instance.Users != null) {
            for(let i = 0; i < instance.Users.length; i++) {
                instance.Users[i] = ApplicationPermission_ApplicationPermission_Users_ApplicationUserViewModel._lightCast(instance.Users[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: ApplicationPermission_ApplicationPermissionViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): ApplicationPermission_ApplicationPermissionViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        ApplicationPermission_ApplicationPermissionViewModel = new ApplicationPermission_ApplicationPermissionViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateApplicationPermission_ApplicationPermissionViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateApplicationPermission_ApplicationPermissionViewModel(original: ApplicationPermission_ApplicationPermissionViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;

        if(original.Operations != null) {
            for(let i = 0; i < original.Operations.length; i++) {
                this.Operations.push(ApplicationPermission_ApplicationPermission_Operations_ApplicationOperationViewModel._initializeFrom(original.Operations[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.Roles != null) {
            for(let i = 0; i < original.Roles.length; i++) {
                this.Roles.push(ApplicationPermission_ApplicationPermission_Roles_ApplicationRoleViewModel._initializeFrom(original.Roles[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.Users != null) {
            for(let i = 0; i < original.Users.length; i++) {
                this.Users.push(ApplicationPermission_ApplicationPermission_Users_ApplicationUserViewModel._initializeFrom(original.Users[i], ignoreReadOnlyProperties, context));
            }
        }

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = ApplicationPermission_ApplicationPermissionViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): ApplicationPermission_ApplicationPermissionViewModel {
        var reduced = ApplicationPermission_ApplicationPermissionViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Description:
    any;
public Id:
    any;
public Name:
    any;
public Operations:
    Array<any>;
public Roles:
    Array<any>;
public Users:
    Array<any>;
    public _versionTimestamp?: string;
}

export class ApplicationPermission_ApplicationPermission_Operations_ApplicationOperationViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: ApplicationPermission_ApplicationPermission_Operations_ApplicationOperationViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): ApplicationPermission_ApplicationPermission_Operations_ApplicationOperationViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        ApplicationPermission_ApplicationPermission_Operations_ApplicationOperationViewModel = new ApplicationPermission_ApplicationPermission_Operations_ApplicationOperationViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateApplicationPermission_ApplicationPermission_Operations_ApplicationOperationViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateApplicationPermission_ApplicationPermission_Operations_ApplicationOperationViewModel(original: ApplicationPermission_ApplicationPermission_Operations_ApplicationOperationViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.Id !== undefined) this.Id = original.Id;

        if(ignoreReadOnlyProperties !== true) {
            if(original.IsAvailableToAllAuthorizedUsers !== undefined) this.IsAvailableToAllAuthorizedUsers = original.IsAvailableToAllAuthorizedUsers;
        } else{
            delete this['IsAvailableToAllAuthorizedUsers'];
        }


        if(ignoreReadOnlyProperties !== true) {
            if(original.IsAvailableToAnonymous !== undefined) this.IsAvailableToAnonymous = original.IsAvailableToAnonymous;
        } else{
            delete this['IsAvailableToAnonymous'];
        }


        if(ignoreReadOnlyProperties !== true) {
            if(original.Name !== undefined) this.Name = original.Name;
        } else{
            delete this['Name'];
        }


        if(ignoreReadOnlyProperties !== true) {
            if(original.ParentControllerName !== undefined) this.ParentControllerName = original.ParentControllerName;
        } else{
            delete this['ParentControllerName'];
        }


        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = ApplicationPermission_ApplicationPermission_Operations_ApplicationOperationViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): ApplicationPermission_ApplicationPermission_Operations_ApplicationOperationViewModel {
        var reduced = ApplicationPermission_ApplicationPermission_Operations_ApplicationOperationViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Id:
    any;
public IsAvailableToAllAuthorizedUsers:
    any;
public IsAvailableToAnonymous:
    any;
public Name:
    any;
public ParentControllerName:
    any;
}

export class ApplicationPermission_ApplicationPermission_Roles_ApplicationRoleViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: ApplicationPermission_ApplicationPermission_Roles_ApplicationRoleViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): ApplicationPermission_ApplicationPermission_Roles_ApplicationRoleViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        ApplicationPermission_ApplicationPermission_Roles_ApplicationRoleViewModel = new ApplicationPermission_ApplicationPermission_Roles_ApplicationRoleViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateApplicationPermission_ApplicationPermission_Roles_ApplicationRoleViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateApplicationPermission_ApplicationPermission_Roles_ApplicationRoleViewModel(original: ApplicationPermission_ApplicationPermission_Roles_ApplicationRoleViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;


        if(ignoreReadOnlyProperties !== true) {
            if(original.Description !== undefined) this.Description = original.Description;
        } else{
            delete this['Description'];
        }

        if(original.Id !== undefined) this.Id = original.Id;

        if(ignoreReadOnlyProperties !== true) {
            if(original.Name !== undefined) this.Name = original.Name;
        } else{
            delete this['Name'];
        }


        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = ApplicationPermission_ApplicationPermission_Roles_ApplicationRoleViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): ApplicationPermission_ApplicationPermission_Roles_ApplicationRoleViewModel {
        var reduced = ApplicationPermission_ApplicationPermission_Roles_ApplicationRoleViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Description:
    any;
public Id:
    any;
public Name:
    any;
}

export class ApplicationPermission_ApplicationPermission_Users_ApplicationUserViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: ApplicationPermission_ApplicationPermission_Users_ApplicationUserViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): ApplicationPermission_ApplicationPermission_Users_ApplicationUserViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        ApplicationPermission_ApplicationPermission_Users_ApplicationUserViewModel = new ApplicationPermission_ApplicationPermission_Users_ApplicationUserViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateApplicationPermission_ApplicationPermission_Users_ApplicationUserViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateApplicationPermission_ApplicationPermission_Users_ApplicationUserViewModel(original: ApplicationPermission_ApplicationPermission_Users_ApplicationUserViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;


        if(ignoreReadOnlyProperties !== true) {
            if(original.Email !== undefined) this.Email = original.Email;
        } else{
            delete this['Email'];
        }

        if(original.UserName !== undefined) this.UserName = original.UserName;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = ApplicationPermission_ApplicationPermission_Users_ApplicationUserViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): ApplicationPermission_ApplicationPermission_Users_ApplicationUserViewModel {
        var reduced = ApplicationPermission_ApplicationPermission_Users_ApplicationUserViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Email:
    any;
public UserName:
    any;
}

}
