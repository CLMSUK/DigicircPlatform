// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
namespace DigicircMatchmaking.ViewModels.MaterialForm {
export class MaterialFormViewModel extends DigicircMatchmaking.ViewModels.SymbiosisMasterPage.SymbiosisMasterPageViewModel {
    public constructor() {
        super();
        this.NewProcesses = new Array<any>();
        this.DeleteProcesses = new Array<any>();
        this.EditedProcesses = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.Material != null)
            instance.Material = Material_MaterialViewModel._lightCast(instance.Material);
        if(instance.NewProcess != null)
            instance.NewProcess = NewProcess_ProcessViewModel._lightCast(instance.NewProcess);

        if(instance.NewProcesses != null) {
            for(let i = 0; i < instance.NewProcesses.length; i++) {
                instance.NewProcesses[i] = NewProcesses_ProcessViewModel._lightCast(instance.NewProcesses[i]);

            }
        }

        if(instance.DeleteProcesses != null) {
            for(let i = 0; i < instance.DeleteProcesses.length; i++) {
                instance.DeleteProcesses[i] = DeleteProcesses_ProcessViewModel._lightCast(instance.DeleteProcesses[i]);

            }
        }

        if(instance.EditedProcesses != null) {
            for(let i = 0; i < instance.EditedProcesses.length; i++) {
                instance.EditedProcesses[i] = EditedProcesses_ProcessViewModel._lightCast(instance.EditedProcesses[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: MaterialFormViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): MaterialFormViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        MaterialFormViewModel = new MaterialFormViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateMaterialFormViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateMaterialFormViewModel(original: MaterialFormViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;

        this._hydrateSymbiosisMasterPageViewModel(original, ignoreReadOnlyProperties, context);

        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;


        if(original.Material !== undefined) this.Material = Material_MaterialViewModel._initializeFrom(original.Material, ignoreReadOnlyProperties, context);

        if(original.NewProcess !== undefined) this.NewProcess = NewProcess_ProcessViewModel._initializeFrom(original.NewProcess, ignoreReadOnlyProperties, context);
        if(original.ConvertBy !== undefined) this.ConvertBy = original.ConvertBy;

        if(original.NewProcesses != null) {
            for(let i = 0; i < original.NewProcesses.length; i++) {
                this.NewProcesses.push(NewProcesses_ProcessViewModel._initializeFrom(original.NewProcesses[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.DeleteProcesses != null) {
            for(let i = 0; i < original.DeleteProcesses.length; i++) {
                this.DeleteProcesses.push(DeleteProcesses_ProcessViewModel._initializeFrom(original.DeleteProcesses[i], ignoreReadOnlyProperties, context));
            }
        }
        if(original.Edited !== undefined) this.Edited = original.Edited;

        if(original.EditedProcesses != null) {
            for(let i = 0; i < original.EditedProcesses.length; i++) {
                this.EditedProcesses.push(EditedProcesses_ProcessViewModel._initializeFrom(original.EditedProcesses[i], ignoreReadOnlyProperties, context));
            }
        }
        if (original.DropdownBox__InitialSelection !== undefined) this.DropdownBox__InitialSelection = original.DropdownBox__InitialSelection;
        if (original.DropdownBox1__InitialSelection !== undefined) this.DropdownBox1__InitialSelection = original.DropdownBox1__InitialSelection;
        if (original.DropdownBox2__InitialSelection !== undefined) this.DropdownBox2__InitialSelection = original.DropdownBox2__InitialSelection;
        this.DropdownBoxSelectedItemKeys = original.DropdownBoxSelectedItemKeys;
        this.DropdownBox1SelectedItemKeys = original.DropdownBox1SelectedItemKeys;
        this.DropdownBox2SelectedItemKeys = original.DropdownBox2SelectedItemKeys;
        this.PickList1SelectedItemKeys = original.PickList1SelectedItemKeys;
        this.PickListSelectedItemKeys = original.PickListSelectedItemKeys;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = MaterialFormViewModel._initializeFrom(this, ignoreReadOnlyProperties);
            MaterialFormViewModel._deleteDropDownInitialValues(reduced);
            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): MaterialFormViewModel {
        var reduced = MaterialFormViewModel._initializeFrom(this, ignoreReadOnlyProperties);
        MaterialFormViewModel._deleteDropDownInitialValues(reduced);
        return reduced;
    }

    public static _deleteDropDownInitialValues(reduced: MaterialFormViewModel) {
        if (reduced == null) return;

        delete reduced.DropdownBox__InitialSelection;
        delete reduced.DropdownBox1__InitialSelection;
        delete reduced.DropdownBox2__InitialSelection;

        DigicircMatchmaking.ViewModels.SymbiosisMasterPage.SymbiosisMasterPageViewModel._deleteDropDownInitialValues(reduced);
    }
public Material:
    any;
public NewProcess:
    any;
public ConvertBy:
    any;
public NewProcesses:
    Array<any>;
public DeleteProcesses:
    Array<any>;
public Edited:
    any;
public EditedProcesses:
    Array<any>;
public DropdownBox__InitialSelection:
    any;
public DropdownBox1__InitialSelection:
    any;
public DropdownBox2__InitialSelection:
    any;
public DropdownBoxSelectedItemKeys:
    any[];
public DropdownBox1SelectedItemKeys:
    any[];
public DropdownBox2SelectedItemKeys:
    any[];
public PickList1SelectedItemKeys:
    any[];
public PickListSelectedItemKeys:
    any[];
}

export class Material_MaterialViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this.ConvertedBy = new Array<any>();
        this.ConvertBy = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;


        if(instance.ConvertedBy != null) {
            for(let i = 0; i < instance.ConvertedBy.length; i++) {
                instance.ConvertedBy[i] = Material_Material_ConvertedBy_ProcessViewModel._lightCast(instance.ConvertedBy[i]);

            }
        }

        if(instance.ConvertBy != null) {
            for(let i = 0; i < instance.ConvertBy.length; i++) {
                instance.ConvertBy[i] = Material_Material_ConvertBy_ProcessViewModel._lightCast(instance.ConvertBy[i]);

            }
        }
        if(instance.Type != null)
            instance.Type = Material_Material_Type_ProductTypeViewModel._lightCast(instance.Type);
        if(instance.PhysicalForm != null)
            instance.PhysicalForm = Material_Material_PhysicalForm_PhysicalFormViewModel._lightCast(instance.PhysicalForm);
        if(instance.UnitOfMeasurement != null)
            instance.UnitOfMeasurement = Material_Material_UnitOfMeasurement_UnitOfMeasurementViewModel._lightCast(instance.UnitOfMeasurement);
        return instance;
    }

    public static _initializeFrom(original: Material_MaterialViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Material_MaterialViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Material_MaterialViewModel = new Material_MaterialViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateMaterial_MaterialViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateMaterial_MaterialViewModel(original: Material_MaterialViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.IsHazardous !== undefined) this.IsHazardous = original.IsHazardous;
        if(original.Name !== undefined) this.Name = original.Name;

        if(original.ConvertedBy != null) {
            for(let i = 0; i < original.ConvertedBy.length; i++) {
                this.ConvertedBy.push(Material_Material_ConvertedBy_ProcessViewModel._initializeFrom(original.ConvertedBy[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.ConvertBy != null) {
            for(let i = 0; i < original.ConvertBy.length; i++) {
                this.ConvertBy.push(Material_Material_ConvertBy_ProcessViewModel._initializeFrom(original.ConvertBy[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.Type !== undefined) this.Type = Material_Material_Type_ProductTypeViewModel._initializeFrom(original.Type, ignoreReadOnlyProperties, context);

        if(original.PhysicalForm !== undefined) this.PhysicalForm = Material_Material_PhysicalForm_PhysicalFormViewModel._initializeFrom(original.PhysicalForm, ignoreReadOnlyProperties, context);

        if(original.UnitOfMeasurement !== undefined) this.UnitOfMeasurement = Material_Material_UnitOfMeasurement_UnitOfMeasurementViewModel._initializeFrom(original.UnitOfMeasurement, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Material_MaterialViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Material_MaterialViewModel {
        var reduced = Material_MaterialViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Description:
    any;
public Id:
    any;
public IsHazardous:
    any;
public Name:
    any;
public ConvertedBy:
    Array<any>;
public ConvertBy:
    Array<any>;
public Type:
    any;
public PhysicalForm:
    any;
public UnitOfMeasurement:
    any;
    public _versionTimestamp?: string;
}

export class Material_Material_ConvertedBy_ProcessViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this.Product = new Array<any>();
        this.Source = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;


        if(instance.Product != null) {
            for(let i = 0; i < instance.Product.length; i++) {
                instance.Product[i] = Material_Material_ConvertedBy_Process_Product_MaterialViewModel._lightCast(instance.Product[i]);

            }
        }

        if(instance.Source != null) {
            for(let i = 0; i < instance.Source.length; i++) {
                instance.Source[i] = Material_Material_ConvertedBy_Process_Source_MaterialViewModel._lightCast(instance.Source[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: Material_Material_ConvertedBy_ProcessViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Material_Material_ConvertedBy_ProcessViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Material_Material_ConvertedBy_ProcessViewModel = new Material_Material_ConvertedBy_ProcessViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateMaterial_Material_ConvertedBy_ProcessViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateMaterial_Material_ConvertedBy_ProcessViewModel(original: Material_Material_ConvertedBy_ProcessViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;
        if(original.Notes !== undefined) this.Notes = original.Notes;
        if(original.Ref !== undefined) this.Ref = original.Ref;
        if(original.SourceName !== undefined) this.SourceName = original.SourceName;

        if(original.Product != null) {
            for(let i = 0; i < original.Product.length; i++) {
                this.Product.push(Material_Material_ConvertedBy_Process_Product_MaterialViewModel._initializeFrom(original.Product[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.Source != null) {
            for(let i = 0; i < original.Source.length; i++) {
                this.Source.push(Material_Material_ConvertedBy_Process_Source_MaterialViewModel._initializeFrom(original.Source[i], ignoreReadOnlyProperties, context));
            }
        }

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Material_Material_ConvertedBy_ProcessViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Material_Material_ConvertedBy_ProcessViewModel {
        var reduced = Material_Material_ConvertedBy_ProcessViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Id:
    any;
public Name:
    any;
public Notes:
    any;
public Ref:
    any;
public SourceName:
    any;
public Product:
    Array<any>;
public Source:
    Array<any>;
    public _versionTimestamp?: string;
}

export class Material_Material_ConvertedBy_Process_Product_MaterialViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Material_Material_ConvertedBy_Process_Product_MaterialViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Material_Material_ConvertedBy_Process_Product_MaterialViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Material_Material_ConvertedBy_Process_Product_MaterialViewModel = new Material_Material_ConvertedBy_Process_Product_MaterialViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateMaterial_Material_ConvertedBy_Process_Product_MaterialViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateMaterial_Material_ConvertedBy_Process_Product_MaterialViewModel(original: Material_Material_ConvertedBy_Process_Product_MaterialViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.HsSpecific !== undefined) this.HsSpecific = original.HsSpecific;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Material_Material_ConvertedBy_Process_Product_MaterialViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Material_Material_ConvertedBy_Process_Product_MaterialViewModel {
        var reduced = Material_Material_ConvertedBy_Process_Product_MaterialViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Description:
    any;
public HsSpecific:
    any;
public Id:
    any;
public Name:
    any;
    public _versionTimestamp?: string;
}

export class Material_Material_ConvertedBy_Process_Source_MaterialViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Material_Material_ConvertedBy_Process_Source_MaterialViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Material_Material_ConvertedBy_Process_Source_MaterialViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Material_Material_ConvertedBy_Process_Source_MaterialViewModel = new Material_Material_ConvertedBy_Process_Source_MaterialViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateMaterial_Material_ConvertedBy_Process_Source_MaterialViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateMaterial_Material_ConvertedBy_Process_Source_MaterialViewModel(original: Material_Material_ConvertedBy_Process_Source_MaterialViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.HsSpecific !== undefined) this.HsSpecific = original.HsSpecific;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Material_Material_ConvertedBy_Process_Source_MaterialViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Material_Material_ConvertedBy_Process_Source_MaterialViewModel {
        var reduced = Material_Material_ConvertedBy_Process_Source_MaterialViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Description:
    any;
public HsSpecific:
    any;
public Id:
    any;
public Name:
    any;
    public _versionTimestamp?: string;
}

export class Material_Material_ConvertBy_ProcessViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this.Source = new Array<any>();
        this.Product = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;


        if(instance.Source != null) {
            for(let i = 0; i < instance.Source.length; i++) {
                instance.Source[i] = Material_Material_ConvertBy_Process_Source_MaterialViewModel._lightCast(instance.Source[i]);

            }
        }

        if(instance.Product != null) {
            for(let i = 0; i < instance.Product.length; i++) {
                instance.Product[i] = Material_Material_ConvertBy_Process_Product_MaterialViewModel._lightCast(instance.Product[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: Material_Material_ConvertBy_ProcessViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Material_Material_ConvertBy_ProcessViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Material_Material_ConvertBy_ProcessViewModel = new Material_Material_ConvertBy_ProcessViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateMaterial_Material_ConvertBy_ProcessViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateMaterial_Material_ConvertBy_ProcessViewModel(original: Material_Material_ConvertBy_ProcessViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;
        if(original.Notes !== undefined) this.Notes = original.Notes;
        if(original.ProductName !== undefined) this.ProductName = original.ProductName;
        if(original.Ref !== undefined) this.Ref = original.Ref;

        if(original.Source != null) {
            for(let i = 0; i < original.Source.length; i++) {
                this.Source.push(Material_Material_ConvertBy_Process_Source_MaterialViewModel._initializeFrom(original.Source[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.Product != null) {
            for(let i = 0; i < original.Product.length; i++) {
                this.Product.push(Material_Material_ConvertBy_Process_Product_MaterialViewModel._initializeFrom(original.Product[i], ignoreReadOnlyProperties, context));
            }
        }

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Material_Material_ConvertBy_ProcessViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Material_Material_ConvertBy_ProcessViewModel {
        var reduced = Material_Material_ConvertBy_ProcessViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Id:
    any;
public Name:
    any;
public Notes:
    any;
public ProductName:
    any;
public Ref:
    any;
public Source:
    Array<any>;
public Product:
    Array<any>;
    public _versionTimestamp?: string;
}

export class Material_Material_ConvertBy_Process_Source_MaterialViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Material_Material_ConvertBy_Process_Source_MaterialViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Material_Material_ConvertBy_Process_Source_MaterialViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Material_Material_ConvertBy_Process_Source_MaterialViewModel = new Material_Material_ConvertBy_Process_Source_MaterialViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateMaterial_Material_ConvertBy_Process_Source_MaterialViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateMaterial_Material_ConvertBy_Process_Source_MaterialViewModel(original: Material_Material_ConvertBy_Process_Source_MaterialViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.HsSpecific !== undefined) this.HsSpecific = original.HsSpecific;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Material_Material_ConvertBy_Process_Source_MaterialViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Material_Material_ConvertBy_Process_Source_MaterialViewModel {
        var reduced = Material_Material_ConvertBy_Process_Source_MaterialViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Description:
    any;
public HsSpecific:
    any;
public Id:
    any;
public Name:
    any;
    public _versionTimestamp?: string;
}

export class Material_Material_ConvertBy_Process_Product_MaterialViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Material_Material_ConvertBy_Process_Product_MaterialViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Material_Material_ConvertBy_Process_Product_MaterialViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Material_Material_ConvertBy_Process_Product_MaterialViewModel = new Material_Material_ConvertBy_Process_Product_MaterialViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateMaterial_Material_ConvertBy_Process_Product_MaterialViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateMaterial_Material_ConvertBy_Process_Product_MaterialViewModel(original: Material_Material_ConvertBy_Process_Product_MaterialViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.HsSpecific !== undefined) this.HsSpecific = original.HsSpecific;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Material_Material_ConvertBy_Process_Product_MaterialViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Material_Material_ConvertBy_Process_Product_MaterialViewModel {
        var reduced = Material_Material_ConvertBy_Process_Product_MaterialViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Description:
    any;
public HsSpecific:
    any;
public Id:
    any;
public Name:
    any;
    public _versionTimestamp?: string;
}

export class Material_Material_Type_ProductTypeViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Material_Material_Type_ProductTypeViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Material_Material_Type_ProductTypeViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Material_Material_Type_ProductTypeViewModel = new Material_Material_Type_ProductTypeViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateMaterial_Material_Type_ProductTypeViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateMaterial_Material_Type_ProductTypeViewModel(original: Material_Material_Type_ProductTypeViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Material_Material_Type_ProductTypeViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Material_Material_Type_ProductTypeViewModel {
        var reduced = Material_Material_Type_ProductTypeViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Id:
    any;
public Name:
    any;
    public _versionTimestamp?: string;
}

export class Material_Material_PhysicalForm_PhysicalFormViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Material_Material_PhysicalForm_PhysicalFormViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Material_Material_PhysicalForm_PhysicalFormViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Material_Material_PhysicalForm_PhysicalFormViewModel = new Material_Material_PhysicalForm_PhysicalFormViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateMaterial_Material_PhysicalForm_PhysicalFormViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateMaterial_Material_PhysicalForm_PhysicalFormViewModel(original: Material_Material_PhysicalForm_PhysicalFormViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.Code !== undefined) this.Code = original.Code;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Value !== undefined) this.Value = original.Value;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Material_Material_PhysicalForm_PhysicalFormViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Material_Material_PhysicalForm_PhysicalFormViewModel {
        var reduced = Material_Material_PhysicalForm_PhysicalFormViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Code:
    any;
public Id:
    any;
public Value:
    any;
}

export class Material_Material_UnitOfMeasurement_UnitOfMeasurementViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Material_Material_UnitOfMeasurement_UnitOfMeasurementViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Material_Material_UnitOfMeasurement_UnitOfMeasurementViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Material_Material_UnitOfMeasurement_UnitOfMeasurementViewModel = new Material_Material_UnitOfMeasurement_UnitOfMeasurementViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateMaterial_Material_UnitOfMeasurement_UnitOfMeasurementViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateMaterial_Material_UnitOfMeasurement_UnitOfMeasurementViewModel(original: Material_Material_UnitOfMeasurement_UnitOfMeasurementViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.Code !== undefined) this.Code = original.Code;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Value !== undefined) this.Value = original.Value;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Material_Material_UnitOfMeasurement_UnitOfMeasurementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Material_Material_UnitOfMeasurement_UnitOfMeasurementViewModel {
        var reduced = Material_Material_UnitOfMeasurement_UnitOfMeasurementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Code:
    any;
public Id:
    any;
public Value:
    any;
}

export class NewProcess_ProcessViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this.Product = new Array<any>();
        this.Source = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;


        if(instance.Product != null) {
            for(let i = 0; i < instance.Product.length; i++) {
                instance.Product[i] = NewProcess_Process_Product_MaterialViewModel._lightCast(instance.Product[i]);

            }
        }

        if(instance.Source != null) {
            for(let i = 0; i < instance.Source.length; i++) {
                instance.Source[i] = NewProcess_Process_Source_MaterialViewModel._lightCast(instance.Source[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: NewProcess_ProcessViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): NewProcess_ProcessViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        NewProcess_ProcessViewModel = new NewProcess_ProcessViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateNewProcess_ProcessViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateNewProcess_ProcessViewModel(original: NewProcess_ProcessViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;
        if(original.Notes !== undefined) this.Notes = original.Notes;
        if(original.Ref !== undefined) this.Ref = original.Ref;

        if(original.Product != null) {
            for(let i = 0; i < original.Product.length; i++) {
                this.Product.push(NewProcess_Process_Product_MaterialViewModel._initializeFrom(original.Product[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.Source != null) {
            for(let i = 0; i < original.Source.length; i++) {
                this.Source.push(NewProcess_Process_Source_MaterialViewModel._initializeFrom(original.Source[i], ignoreReadOnlyProperties, context));
            }
        }

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = NewProcess_ProcessViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): NewProcess_ProcessViewModel {
        var reduced = NewProcess_ProcessViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Id:
    any;
public Name:
    any;
public Notes:
    any;
public Ref:
    any;
public Product:
    Array<any>;
public Source:
    Array<any>;
    public _versionTimestamp?: string;
}

export class NewProcess_Process_Product_MaterialViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: NewProcess_Process_Product_MaterialViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): NewProcess_Process_Product_MaterialViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        NewProcess_Process_Product_MaterialViewModel = new NewProcess_Process_Product_MaterialViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateNewProcess_Process_Product_MaterialViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateNewProcess_Process_Product_MaterialViewModel(original: NewProcess_Process_Product_MaterialViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.HsSpecific !== undefined) this.HsSpecific = original.HsSpecific;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = NewProcess_Process_Product_MaterialViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): NewProcess_Process_Product_MaterialViewModel {
        var reduced = NewProcess_Process_Product_MaterialViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Description:
    any;
public HsSpecific:
    any;
public Id:
    any;
public Name:
    any;
    public _versionTimestamp?: string;
}

export class NewProcess_Process_Source_MaterialViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: NewProcess_Process_Source_MaterialViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): NewProcess_Process_Source_MaterialViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        NewProcess_Process_Source_MaterialViewModel = new NewProcess_Process_Source_MaterialViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateNewProcess_Process_Source_MaterialViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateNewProcess_Process_Source_MaterialViewModel(original: NewProcess_Process_Source_MaterialViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.HsSpecific !== undefined) this.HsSpecific = original.HsSpecific;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = NewProcess_Process_Source_MaterialViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): NewProcess_Process_Source_MaterialViewModel {
        var reduced = NewProcess_Process_Source_MaterialViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Description:
    any;
public HsSpecific:
    any;
public Id:
    any;
public Name:
    any;
    public _versionTimestamp?: string;
}

export class NewProcesses_ProcessViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: NewProcesses_ProcessViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): NewProcesses_ProcessViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        NewProcesses_ProcessViewModel = new NewProcesses_ProcessViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateNewProcesses_ProcessViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateNewProcesses_ProcessViewModel(original: NewProcesses_ProcessViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;
        if(original.Notes !== undefined) this.Notes = original.Notes;
        if(original.Ref !== undefined) this.Ref = original.Ref;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = NewProcesses_ProcessViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): NewProcesses_ProcessViewModel {
        var reduced = NewProcesses_ProcessViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Id:
    any;
public Name:
    any;
public Notes:
    any;
public Ref:
    any;
    public _versionTimestamp?: string;
}

export class DeleteProcesses_ProcessViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: DeleteProcesses_ProcessViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): DeleteProcesses_ProcessViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        DeleteProcesses_ProcessViewModel = new DeleteProcesses_ProcessViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateDeleteProcesses_ProcessViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateDeleteProcesses_ProcessViewModel(original: DeleteProcesses_ProcessViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;
        if(original.Notes !== undefined) this.Notes = original.Notes;
        if(original.Ref !== undefined) this.Ref = original.Ref;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = DeleteProcesses_ProcessViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): DeleteProcesses_ProcessViewModel {
        var reduced = DeleteProcesses_ProcessViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Id:
    any;
public Name:
    any;
public Notes:
    any;
public Ref:
    any;
    public _versionTimestamp?: string;
}

export class EditedProcesses_ProcessViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: EditedProcesses_ProcessViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): EditedProcesses_ProcessViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        EditedProcesses_ProcessViewModel = new EditedProcesses_ProcessViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateEditedProcesses_ProcessViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateEditedProcesses_ProcessViewModel(original: EditedProcesses_ProcessViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;
        if(original.Notes !== undefined) this.Notes = original.Notes;
        if(original.Ref !== undefined) this.Ref = original.Ref;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = EditedProcesses_ProcessViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): EditedProcesses_ProcessViewModel {
        var reduced = EditedProcesses_ProcessViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Id:
    any;
public Name:
    any;
public Notes:
    any;
public Ref:
    any;
    public _versionTimestamp?: string;
}

}
