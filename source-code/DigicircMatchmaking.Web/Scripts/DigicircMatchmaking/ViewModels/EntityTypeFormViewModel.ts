// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
namespace DigicircMatchmaking.ViewModels.EntityTypeForm {
export class EntityTypeFormViewModel extends DigicircMatchmaking.ViewModels.MasterPage.MasterPageViewModel {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.EntityType != null)
            instance.EntityType = EntityType_EntityTypeViewModel._lightCast(instance.EntityType);
        return instance;
    }

    public static _initializeFrom(original: EntityTypeFormViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): EntityTypeFormViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        EntityTypeFormViewModel = new EntityTypeFormViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateEntityTypeFormViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateEntityTypeFormViewModel(original: EntityTypeFormViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;

        this._hydrateMasterPageViewModel(original, ignoreReadOnlyProperties, context);

        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;


        if(original.EntityType !== undefined) this.EntityType = EntityType_EntityTypeViewModel._initializeFrom(original.EntityType, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = EntityTypeFormViewModel._initializeFrom(this, ignoreReadOnlyProperties);
            EntityTypeFormViewModel._deleteDropDownInitialValues(reduced);
            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): EntityTypeFormViewModel {
        var reduced = EntityTypeFormViewModel._initializeFrom(this, ignoreReadOnlyProperties);
        EntityTypeFormViewModel._deleteDropDownInitialValues(reduced);
        return reduced;
    }

    public static _deleteDropDownInitialValues(reduced: EntityTypeFormViewModel) {
        if (reduced == null) return;


        DigicircMatchmaking.ViewModels.MasterPage.MasterPageViewModel._deleteDropDownInitialValues(reduced);
    }
public EntityType:
    any;
}

export class EntityType_EntityTypeViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: EntityType_EntityTypeViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): EntityType_EntityTypeViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        EntityType_EntityTypeViewModel = new EntityType_EntityTypeViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateEntityType_EntityTypeViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateEntityType_EntityTypeViewModel(original: EntityType_EntityTypeViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.Code !== undefined) this.Code = original.Code;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.IsCluster !== undefined) this.IsCluster = original.IsCluster;
        if(original.IsProvider !== undefined) this.IsProvider = original.IsProvider;
        if(original.Value !== undefined) this.Value = original.Value;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = EntityType_EntityTypeViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): EntityType_EntityTypeViewModel {
        var reduced = EntityType_EntityTypeViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Code:
    any;
public Id:
    any;
public IsCluster:
    any;
public IsProvider:
    any;
public Value:
    any;
}

}
