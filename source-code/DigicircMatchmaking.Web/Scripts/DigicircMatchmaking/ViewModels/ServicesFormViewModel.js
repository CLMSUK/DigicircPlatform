var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
var DigicircMatchmaking;
(function (DigicircMatchmaking) {
    var ViewModels;
    (function (ViewModels) {
        var ServicesForm;
        (function (ServicesForm) {
            var ServicesFormViewModel = /** @class */ (function (_super) {
                __extends(ServicesFormViewModel, _super);
                function ServicesFormViewModel() {
                    return _super.call(this) || this;
                }
                ServicesFormViewModel._lightCast = function (instance) {
                    if (instance == null)
                        return;
                    if (instance.Services != null)
                        instance.Services = Services_ServicesViewModel._lightCast(instance.Services);
                    return instance;
                };
                ServicesFormViewModel._initializeFrom = function (original, ignoreReadOnlyProperties, context) {
                    if (ignoreReadOnlyProperties === void 0) { ignoreReadOnlyProperties = false; }
                    if (context === void 0) { context = new Joove.DTOHelper(); }
                    if (original == null)
                        return null;
                    // if (context.Has(original)) {
                    //    return context.Get(original);
                    // }
                    var result = new ServicesFormViewModel();
                    if (context != null && context.fillDb == true) {
                        context.addToDb(original);
                    }
                    result._hydrateServicesFormViewModel(original, ignoreReadOnlyProperties, context);
                    // context.Add(original, result);
                    return result;
                };
                ServicesFormViewModel.prototype._hydrateServicesFormViewModel = function (original, ignoreReadOnlyProperties, context) {
                    if (context === void 0) { context = new Joove.DTOHelper(); }
                    if (original == null)
                        return;
                    this._hydrateMasterPageViewModel(original, ignoreReadOnlyProperties, context);
                    if (original._key !== undefined)
                        this._key = original._key;
                    if (original._clientKey !== undefined)
                        this._clientKey = original._clientKey;
                    if (original._originalTypeClassName !== undefined)
                        this._originalTypeClassName = original._originalTypeClassName;
                    if (original._typeHash !== undefined)
                        this._typeHash = original._typeHash;
                    if (original.Services !== undefined)
                        this.Services = Services_ServicesViewModel._initializeFrom(original.Services, ignoreReadOnlyProperties, context);
                    this._reduceData = function (ignoreReadOnlyProperties) {
                        var reduced = ServicesFormViewModel._initializeFrom(this, ignoreReadOnlyProperties);
                        ServicesFormViewModel._deleteDropDownInitialValues(reduced);
                        return reduced;
                    };
                }; /* end _initializeFrom() */
                ServicesFormViewModel.prototype._reduceData = function (ignoreReadOnlyProperties) {
                    var reduced = ServicesFormViewModel._initializeFrom(this, ignoreReadOnlyProperties);
                    ServicesFormViewModel._deleteDropDownInitialValues(reduced);
                    return reduced;
                };
                ServicesFormViewModel._deleteDropDownInitialValues = function (reduced) {
                    if (reduced == null)
                        return;
                    DigicircMatchmaking.ViewModels.MasterPage.MasterPageViewModel._deleteDropDownInitialValues(reduced);
                };
                return ServicesFormViewModel;
            }(DigicircMatchmaking.ViewModels.MasterPage.MasterPageViewModel));
            ServicesForm.ServicesFormViewModel = ServicesFormViewModel;
            var Services_ServicesViewModel = /** @class */ (function (_super) {
                __extends(Services_ServicesViewModel, _super);
                function Services_ServicesViewModel() {
                    return _super.call(this) || this;
                }
                Services_ServicesViewModel._lightCast = function (instance) {
                    if (instance == null)
                        return;
                    return instance;
                };
                Services_ServicesViewModel._initializeFrom = function (original, ignoreReadOnlyProperties, context) {
                    if (ignoreReadOnlyProperties === void 0) { ignoreReadOnlyProperties = false; }
                    if (context === void 0) { context = new Joove.DTOHelper(); }
                    if (original == null)
                        return null;
                    // if (context.Has(original)) {
                    //    return context.Get(original);
                    // }
                    var result = new Services_ServicesViewModel();
                    if (context != null && context.fillDb == true) {
                        context.addToDb(original);
                    }
                    result._hydrateServices_ServicesViewModel(original, ignoreReadOnlyProperties, context);
                    // context.Add(original, result);
                    return result;
                };
                Services_ServicesViewModel.prototype._hydrateServices_ServicesViewModel = function (original, ignoreReadOnlyProperties, context) {
                    if (context === void 0) { context = new Joove.DTOHelper(); }
                    if (original == null)
                        return;
                    if (original._key !== undefined)
                        this._key = original._key;
                    if (original._clientKey !== undefined)
                        this._clientKey = original._clientKey;
                    if (original._originalTypeClassName !== undefined)
                        this._originalTypeClassName = original._originalTypeClassName;
                    if (original._typeHash !== undefined)
                        this._typeHash = original._typeHash;
                    if (original.Id !== undefined)
                        this.Id = original.Id;
                    if (original.Code !== undefined)
                        this.Code = original.Code;
                    if (original.Value !== undefined)
                        this.Value = original.Value;
                    this._reduceData = function (ignoreReadOnlyProperties) {
                        var reduced = Services_ServicesViewModel._initializeFrom(this, ignoreReadOnlyProperties);
                        return reduced;
                    };
                }; /* end _initializeFrom() */
                Services_ServicesViewModel.prototype._reduceData = function (ignoreReadOnlyProperties) {
                    var reduced = Services_ServicesViewModel._initializeFrom(this, ignoreReadOnlyProperties);
                    return reduced;
                };
                return Services_ServicesViewModel;
            }(BaseClass.ViewModel));
            ServicesForm.Services_ServicesViewModel = Services_ServicesViewModel;
        })(ServicesForm = ViewModels.ServicesForm || (ViewModels.ServicesForm = {}));
    })(ViewModels = DigicircMatchmaking.ViewModels || (DigicircMatchmaking.ViewModels = {}));
})(DigicircMatchmaking || (DigicircMatchmaking = {}));
