// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
namespace DigicircMatchmaking.ViewModels.ProcessForm {
export class ProcessFormViewModel extends DigicircMatchmaking.ViewModels.SymbiosisMasterPage.SymbiosisMasterPageViewModel {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.Process != null)
            instance.Process = Process_ProcessViewModel._lightCast(instance.Process);
        return instance;
    }

    public static _initializeFrom(original: ProcessFormViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): ProcessFormViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        ProcessFormViewModel = new ProcessFormViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateProcessFormViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateProcessFormViewModel(original: ProcessFormViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;

        this._hydrateSymbiosisMasterPageViewModel(original, ignoreReadOnlyProperties, context);

        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;


        if(original.Process !== undefined) this.Process = Process_ProcessViewModel._initializeFrom(original.Process, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = ProcessFormViewModel._initializeFrom(this, ignoreReadOnlyProperties);
            ProcessFormViewModel._deleteDropDownInitialValues(reduced);
            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): ProcessFormViewModel {
        var reduced = ProcessFormViewModel._initializeFrom(this, ignoreReadOnlyProperties);
        ProcessFormViewModel._deleteDropDownInitialValues(reduced);
        return reduced;
    }

    public static _deleteDropDownInitialValues(reduced: ProcessFormViewModel) {
        if (reduced == null) return;


        DigicircMatchmaking.ViewModels.SymbiosisMasterPage.SymbiosisMasterPageViewModel._deleteDropDownInitialValues(reduced);
    }
public Process:
    any;
}

export class Process_ProcessViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this.Product = new Array<any>();
        this.Source = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;


        if(instance.Product != null) {
            for(let i = 0; i < instance.Product.length; i++) {
                instance.Product[i] = Process_Process_Product_MaterialViewModel._lightCast(instance.Product[i]);

            }
        }

        if(instance.Source != null) {
            for(let i = 0; i < instance.Source.length; i++) {
                instance.Source[i] = Process_Process_Source_MaterialViewModel._lightCast(instance.Source[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: Process_ProcessViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Process_ProcessViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Process_ProcessViewModel = new Process_ProcessViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateProcess_ProcessViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateProcess_ProcessViewModel(original: Process_ProcessViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.EnvironmentalEffects !== undefined) this.EnvironmentalEffects = original.EnvironmentalEffects;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;
        if(original.Notes !== undefined) this.Notes = original.Notes;
        if(original.Ref !== undefined) this.Ref = original.Ref;

        if(original.Product != null) {
            for(let i = 0; i < original.Product.length; i++) {
                this.Product.push(Process_Process_Product_MaterialViewModel._initializeFrom(original.Product[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.Source != null) {
            for(let i = 0; i < original.Source.length; i++) {
                this.Source.push(Process_Process_Source_MaterialViewModel._initializeFrom(original.Source[i], ignoreReadOnlyProperties, context));
            }
        }

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Process_ProcessViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Process_ProcessViewModel {
        var reduced = Process_ProcessViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public EnvironmentalEffects:
    any;
public Id:
    any;
public Name:
    any;
public Notes:
    any;
public Ref:
    any;
public Product:
    Array<any>;
public Source:
    Array<any>;
    public _versionTimestamp?: string;
}

export class Process_Process_Product_MaterialViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Process_Process_Product_MaterialViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Process_Process_Product_MaterialViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Process_Process_Product_MaterialViewModel = new Process_Process_Product_MaterialViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateProcess_Process_Product_MaterialViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateProcess_Process_Product_MaterialViewModel(original: Process_Process_Product_MaterialViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Process_Process_Product_MaterialViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Process_Process_Product_MaterialViewModel {
        var reduced = Process_Process_Product_MaterialViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Description:
    any;
public Id:
    any;
public Name:
    any;
    public _versionTimestamp?: string;
}

export class Process_Process_Source_MaterialViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Process_Process_Source_MaterialViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Process_Process_Source_MaterialViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Process_Process_Source_MaterialViewModel = new Process_Process_Source_MaterialViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateProcess_Process_Source_MaterialViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateProcess_Process_Source_MaterialViewModel(original: Process_Process_Source_MaterialViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.Name !== undefined) this.Name = original.Name;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Process_Process_Source_MaterialViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Process_Process_Source_MaterialViewModel {
        var reduced = Process_Process_Source_MaterialViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }
public Description:
    any;
public Id:
    any;
public Name:
    any;
    public _versionTimestamp?: string;
}

}
