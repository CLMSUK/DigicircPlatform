// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
interface Window { scope_ActorsToAdministrators: DigicircMatchmaking.Controllers.IActorsToAdministratorsScope; }
namespace DigicircMatchmaking.Controllers {
const ActorsToAdministratorsConditionalFormattings = (controlName?: string): Array<Joove.JbRule> => {
    return [
           ];
};
const ActorsToAdministratorsDataValidations = (controlName?: string): Array<Joove.JbRule> => {
    return [
           ];
};
const ActorsToAdministratorsCalculatedExpressions = (controlName?: string): Array<Joove.JbRule> => {
    return [
           ];
};

// Datasets Column Info
var ActorsToAdministrators_PickList_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "UserName",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "UserName", true, "ActorsToAdministrators"),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 255,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Name",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "Name", true, "ActorsToAdministrators"),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 256,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Email",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "Email", true, "ActorsToAdministrators"),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 255,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
Joove.Core.registerPartialColumnInfo('ActorsToAdministrators', 'PickList', ActorsToAdministrators_PickList_ColumnInfo);

// Datasets Projection Shemas
window["PickList_ProjectionScema"] = {};

export interface IActorsToAdministratorsScope extends Joove.IWebPageScope {
model:
    any;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

export interface IActorsToAdministratorsPartialModelStructure {
Actor:
    any;
}


export class ActorsToAdministratorsController {

private _normalToPartialModelMappingStructure:
    any;

    constructor( normalToPartialModelMappingStructure: {
                     [partialControlName: string] :
                     IActorsToAdministratorsPartialModelStructure
                 } ) {
        this._normalToPartialModelMappingStructure = normalToPartialModelMappingStructure;
    }


    IncludePartialMethods ($scope: any, controls: Array<string>, $timeout: ng.ITimeoutService): void {
        window["scope_ActorsToAdministrators"] = $scope;

        if($scope._partialModelStructure == null) {
            $scope._partialModelStructure = {};
        }

        for (let key in this._normalToPartialModelMappingStructure) {
            let value = this._normalToPartialModelMappingStructure[key];
            $scope._partialModelStructure[key] = value;
        }

        //$scope._partialModelStructure = this._normalToPartialModelMappingStructure;






        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
// Events
        $scope.eventCallbacks.ActorsToAdministrators = {
        };

// Rules
        window._ruleEngine.addDataValidations(Joove.JbRule.createRulesForPartialControls(controls, ActorsToAdministratorsDataValidations));
        window._ruleEngine.addConditionalFormattings(Joove.JbRule.createRulesForPartialControls(controls, ActorsToAdministratorsConditionalFormattings));
        window._ruleEngine.addCalculatedExpressions(Joove.JbRule.createRulesForPartialControls(controls, ActorsToAdministratorsCalculatedExpressions));

    }
};
angular.module("Application").controller("ActorsToAdministratorsController", ["$scope", "$timeout", ActorsToAdministratorsController] as Array<string>);
}
