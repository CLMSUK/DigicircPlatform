// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
interface Window { scope_MatchBaseExplorer: DigicircMatchmaking.Controllers.IMatchBaseExplorerScope; }
namespace DigicircMatchmaking.Controllers {
const MatchBaseExplorerConditionalFormattings = [
new Joove.JbRule({
name: "SearchModeConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_MatchBaseExplorer"].model.Query.SearchMode, "") == "offers";

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "DispalyModeConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_MatchBaseExplorer"].model.Query.DisplayMode, "") == "graph";

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
        ];
const MatchBaseExplorerDataValidations = [
        ];
const MatchBaseExplorerCalculatedExpressions = [
        ];
// Manual Data for OptionButton
window["dataForOptionButton"] = [ {
_key: "offers",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('SearchModeDataset', '0', false , null),
_default: true
}, {
_key: "requests",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('SearchModeDataset', '1', false , null),
_default: false
} ]
// Manual Data for OptionButton1
window["dataForOptionButton1"] = [ {
_key: "graph",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('DisplayModeDataset', '0', false , null),
_default: true
}, {
_key: "list",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('DisplayModeDataset', '1', false , null),
_default: false
} ]

// Datasets Column Info
export var ActorDataset_ColumnInfo = [new Joove.ColumnInfo("Name", "string", null, false),
                                      new Joove.ColumnInfo("original", "Actor", null, false)];
window["ActorDataset_ColumnInfo"] = ActorDataset_ColumnInfo;
export var SearchModeDataset_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null,  true)];
window["SearchModeDataset_ColumnInfo"] = SearchModeDataset_ColumnInfo;
export var DesiredResourcesDataset_ColumnInfo = [new Joove.ColumnInfo("Resource.Name", "string", null, false),
           new Joove.ColumnInfo("original", "Product", null, false)];
window["DesiredResourcesDataset_ColumnInfo"] = DesiredResourcesDataset_ColumnInfo;
export var ResourcesDataset_ColumnInfo = [new Joove.ColumnInfo("Resource.Name", "string", null, false),
           new Joove.ColumnInfo("original", "Product", null, false)];
window["ResourcesDataset_ColumnInfo"] = ResourcesDataset_ColumnInfo;
export var DisplayModeDataset_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null,  true)];
window["DisplayModeDataset_ColumnInfo"] = DisplayModeDataset_ColumnInfo;
export var ActorDataSet1_ColumnInfo = [new Joove.ColumnInfo("ActorLogo", "FileData", null, false),
                                       new Joove.ColumnInfo("Name", "string", null, false),
                                       new Joove.ColumnInfo("ShortDescription", "string", null, false),
                                       new Joove.ColumnInfo("EntityType.Value", "string", null, false),
                                       new Joove.ColumnInfo("Address.Country.Name", "string", null, false)];
window["ActorDataSet1_ColumnInfo"] = ActorDataSet1_ColumnInfo;
var List_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "int",
dataTypeIsEnum: false,
name: "Id",
caption: window._resourcesManager.getDataListColumnCaption("List", "Id", false),
groupable: true,
searchable: true,
visible: false,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Resource.Name",
caption: window._resourcesManager.getDataListColumnCaption("List", "Resource.Name", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 2147483647,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "ActorOffer.Name",
caption: window._resourcesManager.getDataListColumnCaption("List", "ActorOffer.Name", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 255,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "ActorRequest.Name",
caption: window._resourcesManager.getDataListColumnCaption("List", "ActorRequest.Name", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 255,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "DateTime",
dataTypeIsEnum: false,
name: "ValidFrom",
caption: window._resourcesManager.getDataListColumnCaption("List", "ValidFrom", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: { 'dateFormat': 'DD/MM/YYYY', 'backEndFormatting': 'dd/MM/yyyy' , 'excelFormat': 'dd/MM/yyyy' },
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "DateTime",
dataTypeIsEnum: false,
name: "ValidTo",
caption: window._resourcesManager.getDataListColumnCaption("List", "ValidTo", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: { 'dateFormat': 'DD/MM/YYYY', 'backEndFormatting': 'dd/MM/yyyy' , 'excelFormat': 'dd/MM/yyyy' },
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "int",
dataTypeIsEnum: false,
name: "QuantityLack",
caption: window._resourcesManager.getDataListColumnCaption("List", "QuantityLack", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["List_ColumnInfo"] = List_ColumnInfo;

export class MatchBaseExplorerDesiredResourcesDatasetViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        items = items.orderBy($this => $this.Resource.Name)
        ;
        return items;

    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.Query.SelectedActor.CircularEconomyRequirements.DesiredResources;
    }


}



export class MatchBaseExplorerResourcesDatasetViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        items = items.orderBy($this => $this.Resource.Name)
        ;
        return items;

    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.Query.SelectedActor.CircularEconomyRequirements.Resources;
    }


}



// Datasets Projection Shemas
window["DropdownBox_ProjectionScema"] = {};




window["Table_ProjectionScema"] = {Query:
                                   {GraphQueryKey: ''
                                    , ActorNames:
                                    {Id: ''
                                     , Name:
                                     {}
                                    }
                                   }
                                  };
window["List_ProjectionScema"] = {Query:
                                  {GraphQueryKey: ''
                                   , SelectedActor:
                                   {Id:
                                    {}
                                   }
                                   , ResourceProduct:
                                   {Id: ''
                                    , Resource:
                                    {Id:
                                     {}
                                    }
                                   }
                                   , DesiredProduct:
                                   {Id: ''
                                    , Resource:
                                    {Id:
                                     {}
                                    }
                                   }
                                   , SearchMode:
                                   {}
                                  }
                                 };


export interface IMatchBaseExplorerScope extends Joove.IWebPageScope {
model:
    DigicircMatchmaking.ViewModels.MatchBaseExplorer.MatchBaseExplorerViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class MatchBaseExplorerController {
private timeoutDelayLockButtonClicked:
    any;
private timeoutDelayLockOptionButtonOnChange:
    any;
private timeoutDelayLockOptionButton1OnChange:
    any;
private timeoutDelayLockRow11Clicked:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_MatchBaseExplorer.model = window.scope_MatchBaseExplorer.dehydrate();
        //window.scope_MasterPage.model = window.scope_MatchBaseExplorer.model;
        DigicircMatchmaking.ViewModels.MatchBaseExplorer.MatchBaseExplorerViewModel._lightCast(window.scope_MatchBaseExplorer.model);
        // Joove.Common.applyScope(window.scope_MatchBaseExplorer);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IMatchBaseExplorerScope, $timeout: ng.ITimeoutService) {
        window.scope_MatchBaseExplorer = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DigicircMatchmaking.ViewModels.MatchBaseExplorer.MatchBaseExplorerViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_MasterPage._validations;
        $scope._validations = { summary:
                                [],
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: IMatchBaseExplorerScope, $timeout: ng.ITimeoutService) {


        $scope.model = DigicircMatchmaking.ViewModels.MatchBaseExplorer.MatchBaseExplorerViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_MasterPage.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);




        //}

        $.connection['eventsHub'].on('__connectedEvent', () => { });

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start().then(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
        }
// Dataset Handler
        $scope.datasets = {

DesiredResourcesDataset:
            (partialViewControlName: string = null) => {
                return new DigicircMatchmaking.Controllers.MatchBaseExplorerDesiredResourcesDatasetViewModelDataset($scope.model, partialViewControlName);
            },

ResourcesDataset:
            (partialViewControlName: string = null) => {
                return new DigicircMatchmaking.Controllers.MatchBaseExplorerResourcesDatasetViewModelDataset($scope.model, partialViewControlName);
            },
        };
// Controller actions
        $scope.actions = {
Index:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("MatchBaseExplorer", "Index", "GET", [], {}, _modalOptions);
            },
FromBack:
            async (id, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("MatchBaseExplorer", "FromBack", "GET", [id], {}, _modalOptions);
            },
ChangeMode:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'MatchBaseExplorer', action: 'ChangeMode',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
Update:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'MatchBaseExplorer', action: 'Update',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
GoToActorForm:
            async (id, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    eval("_commander.gridSaveState(['Table']);");

                    Joove.Common.nullSafe<any>(() => Joove.Core.executeRedirectControllerAction("ActorViewForm", "Show", "GET", [id, true], {}, _modalOptions), null);


                    // Joove.Common.applyScope(window.scope_MatchBaseExplorer);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
        };
// Events
        $scope.eventCallbacks = {
ButtonClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButtonClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButtonClicked);
                }

                this.timeoutDelayLockButtonClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Update(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

OptionButtonOnChange:
            (e, DataItem, _parents) => {



                if (this.timeoutDelayLockOptionButtonOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLockOptionButtonOnChange);
                }

                this.timeoutDelayLockOptionButtonOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.ChangeMode(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

OptionButton1OnChange:
            (e, DataItem, _parents) => {



                if (this.timeoutDelayLockOptionButton1OnChange != null) {
                    $timeout.cancel(this.timeoutDelayLockOptionButton1OnChange);
                }

                this.timeoutDelayLockOptionButton1OnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.ChangeMode(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Row11Clicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockRow11Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockRow11Clicked);
                }

                this.timeoutDelayLockRow11Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.GoToActorForm(Joove.Common.nullSafe<any>(() => _parents[0].Id, 0), null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(MatchBaseExplorerDataValidations);
        window._ruleEngine.addConditionalFormattings(MatchBaseExplorerConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(MatchBaseExplorerCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_MasterPage as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("MatchBaseExplorerController", ["$scope", "$timeout", MatchBaseExplorerController] as Array<string>);
}
