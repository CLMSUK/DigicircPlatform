// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
interface Window { scope_MasterPage: DigicircMatchmaking.Controllers.IMasterPageScope; }
namespace DigicircMatchmaking.Controllers {
var _treeNodesConfiguration = { };
const MasterPageConditionalFormattings = [
        ];
const MasterPageDataValidations = [
                                  ];
const MasterPageCalculatedExpressions = [
                                        ];

// Datasets Column Info

// Datasets Projection Shemas


export interface IMasterPageScope extends Joove.IWebPageScope {
model:
    DigicircMatchmaking.ViewModels.MasterPage.MasterPageViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class MasterPageController {
private timeoutDelayLockMainMenuHeaderMenuItemPressed:
    any;
private timeoutDelayLockClusterListMenuItemMenuItemPressed:
    any;
private timeoutDelayLockCountryListMenuItemMenuItemPressed:
    any;
private timeoutDelayLockEntityTypeListMenuItemMenuItemPressed:
    any;
private timeoutDelayLockSectorTypeMenuItemMenuItemPressed:
    any;
private timeoutDelayLockExpertiseListMenuItemMenuItemPressed:
    any;
private timeoutDelayLockThematicExpertiseListMenuItemMenuItemPressed:
    any;
private timeoutDelayLockCompanyListImportMenuItemPressed:
    any;
private timeoutDelayLockClusterInitMenuItemMenuItemPressed:
    any;
private timeoutDelayLockGraphQueryOperationsMenuItemMenuItemPressed:
    any;
private timeoutDelayLockGraphCreateOperationsMenuItemMenuItemPressed:
    any;
private timeoutDelayLockGraphExportOperationsMenuItemMenuItemPressed:
    any;
private timeoutDelayLockManageUsersMenuItemPressed:
    any;
private timeoutDelayLockManagePermissionsMenuItemPressed:
    any;
private timeoutDelayLockManageRolesMenuItemPressed:
    any;
private timeoutDelayLockManageOperationsMenuItemPressed:
    any;
private timeoutDelayLockManageSettingsMenuItemPressed:
    any;
private timeoutDelayLockManageActorsMenuItemPressed:
    any;
private timeoutDelayLockDebugMatchingMenuItemPressed:
    any;
private timeoutDelayLockMyActorsItemMenuItemPressed:
    any;
private timeoutDelayLockMasterChangePasswordMenuItemPressed:
    any;
private timeoutDelayLockMasterPreferencesMenuItemPressed:
    any;
private timeoutDelayLockMasterSignOutMenuItemPressed:
    any;
private timeoutDelayLockMasterSignInMenuItemPressed:
    any;
private timeoutDelayLockMasterRegisterMenuItemPressed:
    any;
private timeoutDelayLockOrganizationMenuItemPressed:
    any;
private timeoutDelayLockSearchFormMenuItemPressed:
    any;
private timeoutDelayLockMatchBaseExplorerMenuItemPressed:
    any;
private timeoutDelayLockKnowledgeBaseExplorerMenuItemMenuItemPressed:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_MasterPage.model = window.scope_MasterPage.dehydrate();
        //
        DigicircMatchmaking.ViewModels.MasterPage.MasterPageViewModel._lightCast(window.scope_MasterPage.model);
        // Joove.Common.applyScope(window.scope_MasterPage);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IMasterPageScope, $timeout: ng.ITimeoutService) {
        window.scope_MasterPage = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope._ready = false;
        window._context.currentMasterPageObject = this;
        $scope.dehydrate = (context = null) => DigicircMatchmaking.ViewModels.MasterPage.MasterPageViewModel._initializeFrom($scope.model, context);
        $scope._validations = { summary:
                                [],
                              };

        let onSuccess = (data: any, textStatus: string, jqXhr: JQueryXHR)  => {
            Joove.Core.checkAppVersion();
            Joove.Core.handleServerResponse("MasterPage", data);
            this.init($scope, $timeout);
            //Joove.Common.applyScope($scope);
            //window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {
            $scope._ready = true;
            CLMS.Framework.Utilities.FocusOnFirstInputElementOfModal();
            //});
        }; //end onSuccess()

        window._backEndInfoAggregator.get(false, { success: onSuccess });

    }

    init($scope: IMasterPageScope, $timeout: ng.ITimeoutService) {


        $scope.trackObject = obj => Joove.Common.trackObject(obj);




        //}

        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
        }
// Dataset Handler
        $scope.datasets = {
        };
// Controller actions
        $scope.actions = {
Render:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("MasterPage", "Render", "GET", [], {}, _modalOptions);
            },
SignOut:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'MasterPage', action: 'SignOut',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
        };
// Events
        $scope.eventCallbacks = {
MainMenuHeaderMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMainMenuHeaderMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMainMenuHeaderMenuItemPressed);
                }

                this.timeoutDelayLockMainMenuHeaderMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("SearchForm", "Index", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ClusterListMenuItemMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockClusterListMenuItemMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockClusterListMenuItemMenuItemPressed);
                }

                this.timeoutDelayLockClusterListMenuItemMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("ClusterList", "", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

CountryListMenuItemMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockCountryListMenuItemMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockCountryListMenuItemMenuItemPressed);
                }

                this.timeoutDelayLockCountryListMenuItemMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("CountryList", "", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

EntityTypeListMenuItemMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockEntityTypeListMenuItemMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockEntityTypeListMenuItemMenuItemPressed);
                }

                this.timeoutDelayLockEntityTypeListMenuItemMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("EntityTypeList", "", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

SectorTypeMenuItemMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockSectorTypeMenuItemMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockSectorTypeMenuItemMenuItemPressed);
                }

                this.timeoutDelayLockSectorTypeMenuItemMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("SectorTypeList", "", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ExpertiseListMenuItemMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockExpertiseListMenuItemMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockExpertiseListMenuItemMenuItemPressed);
                }

                this.timeoutDelayLockExpertiseListMenuItemMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("ExpertiseList", "", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ThematicExpertiseListMenuItemMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockThematicExpertiseListMenuItemMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockThematicExpertiseListMenuItemMenuItemPressed);
                }

                this.timeoutDelayLockThematicExpertiseListMenuItemMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("ThematicExpertiseList", "", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

CompanyListImportMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockCompanyListImportMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockCompanyListImportMenuItemPressed);
                }

                this.timeoutDelayLockCompanyListImportMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("CompanyList", "", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ClusterInitMenuItemMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockClusterInitMenuItemMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockClusterInitMenuItemMenuItemPressed);
                }

                this.timeoutDelayLockClusterInitMenuItemMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("ClusterInitialization", "Index", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

GraphQueryOperationsMenuItemMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockGraphQueryOperationsMenuItemMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockGraphQueryOperationsMenuItemMenuItemPressed);
                }

                this.timeoutDelayLockGraphQueryOperationsMenuItemMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("GraphQueryDebug", "Index", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

GraphCreateOperationsMenuItemMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockGraphCreateOperationsMenuItemMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockGraphCreateOperationsMenuItemMenuItemPressed);
                }

                this.timeoutDelayLockGraphCreateOperationsMenuItemMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("GraphCreateDebug", "Index", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

GraphExportOperationsMenuItemMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockGraphExportOperationsMenuItemMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockGraphExportOperationsMenuItemMenuItemPressed);
                }

                this.timeoutDelayLockGraphExportOperationsMenuItemMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("GraphExportForm", "Index", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ManageUsersMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockManageUsersMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockManageUsersMenuItemPressed);
                }

                this.timeoutDelayLockManageUsersMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("UsersList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ManagePermissionsMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockManagePermissionsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockManagePermissionsMenuItemPressed);
                }

                this.timeoutDelayLockManagePermissionsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("PermissionsList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ManageRolesMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockManageRolesMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockManageRolesMenuItemPressed);
                }

                this.timeoutDelayLockManageRolesMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("RolesList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ManageOperationsMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockManageOperationsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockManageOperationsMenuItemPressed);
                }

                this.timeoutDelayLockManageOperationsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("OperationsList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ManageSettingsMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockManageSettingsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockManageSettingsMenuItemPressed);
                }

                this.timeoutDelayLockManageSettingsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("ApplicationSettingsList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ManageActorsMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockManageActorsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockManageActorsMenuItemPressed);
                }

                this.timeoutDelayLockManageActorsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("ManageActors", "Index", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

DebugMatchingMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockDebugMatchingMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockDebugMatchingMenuItemPressed);
                }

                this.timeoutDelayLockDebugMatchingMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("Matching", "Index", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MyActorsItemMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMyActorsItemMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMyActorsItemMenuItemPressed);
                }

                this.timeoutDelayLockMyActorsItemMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("MyActors", "Index", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MasterChangePasswordMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMasterChangePasswordMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMasterChangePasswordMenuItemPressed);
                }

                this.timeoutDelayLockMasterChangePasswordMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("ChangePassword", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MasterPreferencesMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMasterPreferencesMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMasterPreferencesMenuItemPressed);
                }

                this.timeoutDelayLockMasterPreferencesMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("UserPreferences", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MasterSignOutMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMasterSignOutMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMasterSignOutMenuItemPressed);
                }

                this.timeoutDelayLockMasterSignOutMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("SignOutPage", "SignOut", "GET", [true], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MasterSignInMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMasterSignInMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMasterSignInMenuItemPressed);
                }

                this.timeoutDelayLockMasterSignInMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("SignInPage", "Load", "GET", [true], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MasterRegisterMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMasterRegisterMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMasterRegisterMenuItemPressed);
                }

                this.timeoutDelayLockMasterRegisterMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("RegisterForm", "Index", "GET", [true], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

OrganizationMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockOrganizationMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockOrganizationMenuItemPressed);
                }

                this.timeoutDelayLockOrganizationMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("ActorForm", "Add", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

SearchFormMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockSearchFormMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockSearchFormMenuItemPressed);
                }

                this.timeoutDelayLockSearchFormMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("SearchForm", "Index", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MatchBaseExplorerMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMatchBaseExplorerMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMatchBaseExplorerMenuItemPressed);
                }

                this.timeoutDelayLockMatchBaseExplorerMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("MatchBaseExplorer", "Index", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

KnowledgeBaseExplorerMenuItemMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockKnowledgeBaseExplorerMenuItemMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockKnowledgeBaseExplorerMenuItemMenuItemPressed);
                }

                this.timeoutDelayLockKnowledgeBaseExplorerMenuItemMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("KnowledgeHub", "Index", "GET", [], {}, null, true);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(MasterPageDataValidations);
        window._ruleEngine.addConditionalFormattings(MasterPageConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(MasterPageCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];
    }
}
angular.module("Application").controller("MasterPageController", ["$scope", "$timeout", MasterPageController] as Array<string>);
}
