// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
window.onbeforeunload = (e) => {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg;     // Gecko, Trident, Chrome 34+
        return msg;
    }
};
interface Window { scope_ManageActors: DigicircMatchmaking.Controllers.IManageActorsScope; }
namespace DigicircMatchmaking.Controllers {
const ManageActorsConditionalFormattings = [
new Joove.JbRule({
name: "HideEmptyTitleConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe(function () {
            return Joove.Common.nullSafe<any>(() => window["scope_ManageActors"].model.Title, "").trim();
        }, "")), false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "PendingChangesConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return window._context.isDirty;

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
        ];
const ManageActorsDataValidations = [
                                    ];
const ManageActorsCalculatedExpressions = [
        ];

// Datasets Column Info
export var ActorDataSet_ColumnInfo = [new Joove.ColumnInfo("Name", "string", null, false)];
window["ActorDataSet_ColumnInfo"] = ActorDataSet_ColumnInfo;

// Datasets Projection Shemas
window["Table_ProjectionScema"] = {};
class PartialViewPartialModelStructure implements IActorsToAdministratorsPartialModelStructure {
private _name:
    string;
    constructor($scope, name: string) {
        this._name = name;
    }
    get Actor(): any { return window["scope_ActorsToAdministrators"].model.SelectedActor };
        set Actor(__val: any) {
        window["scope_ActorsToAdministrators"].model.SelectedActor = __val;
    };

}//end class PartialViewPartialModelStructure


export interface IManageActorsScope extends Joove.IWebPageScope {
model:
    DigicircMatchmaking.ViewModels.ManageActors.ManageActorsViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class ManageActorsController {
private timeoutDelayLockcmdExitClicked:
    any;
private timeoutDelayLockEsSyncButtonClicked:
    any;
private timeoutDelayLockKnowledgeSyncButtonClicked:
    any;
private timeoutDelayLockiconClearClicked:
    any;
private timeoutDelayLocklblNameClicked:
    any;
private timeoutDelayLockAddButtonClicked:
    any;
private timeoutDelayLockIconClicked:
    any;
private timeoutDelayLockButtonClicked:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_ManageActors.model = window.scope_ManageActors.dehydrate();
        //window.scope_MasterPage.model = window.scope_ManageActors.model;
        DigicircMatchmaking.ViewModels.ManageActors.ManageActorsViewModel._lightCast(window.scope_ManageActors.model);
        // Joove.Common.applyScope(window.scope_ManageActors);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IManageActorsScope, $timeout: ng.ITimeoutService) {
        window.scope_ManageActors = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DigicircMatchmaking.ViewModels.ManageActors.ManageActorsViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_MasterPage._validations;
        $scope._validations = { summary:
                                [],
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: IManageActorsScope, $timeout: ng.ITimeoutService) {


        $scope.model = DigicircMatchmaking.ViewModels.ManageActors.ManageActorsViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_MasterPage.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);




        //}

        $.connection['eventsHub'].on('__connectedEvent', () => { });

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start().then(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
        }
// Dataset Handler
        $scope.datasets = {
        };
// Controller actions
        $scope.actions = {
Index:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("ManageActors", "Index", "GET", [], {}, _modalOptions);
            },
EsSync:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'ManageActors', action: 'EsSync',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
KnowledgeSync:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'ManageActors', action: 'KnowledgeSync',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
SaveActor:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'ManageActors', action: 'SaveActor',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
SelectUsers:
            async (actor, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'ManageActors', action: 'SelectUsers',
queryData: [], postData: {'model': $scope.model, 'actor': actor},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
        };
//Partial ActorsToAdministrators Event Listeners
        $scope.events.ActorsToAdministrators = {
        };
        $scope.expressions.ActorsToAdministrators = {
        }
// Partial ActorsToAdministrators Dataset Handler
        $scope.datasets.ActorsToAdministrators = {
        };
//Partial ActorsToAdministrators actions
        $scope.actions.ActorsToAdministrators = {
Add:
            async (_partialControlName, user, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {

                    // Joove.Common.applyScope(window.scope_ManageActors);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
        };
// Events
        $scope.eventCallbacks = {
cmdExitClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                Joove.Common.setControlKeyPressed(e, 0);
                window._commander.closeForm();
            },

EsSyncButtonClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockEsSyncButtonClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockEsSyncButtonClicked);
                }

                this.timeoutDelayLockEsSyncButtonClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.EsSync(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

KnowledgeSyncButtonClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockKnowledgeSyncButtonClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockKnowledgeSyncButtonClicked);
                }

                this.timeoutDelayLockKnowledgeSyncButtonClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.KnowledgeSync(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

iconClearClicked:
            (e: any): any => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                Joove.DatasourceManager.clearFiltersToControlsBoundToDataSet('ActorDataSet', e);
            },

lblNameClicked:
            (e: any): any => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                var $element = $(e.target);
                var targetProp = $element.attr('joove-ds-sort-OnClick');

                Joove.DatasourceManager.sortControlsBoundToDataSet('ActorDataSet', targetProp, e);
            },

AddButtonClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockAddButtonClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockAddButtonClicked);
                }

                this.timeoutDelayLockAddButtonClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.SelectUsers(_parents[0], null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

IconClicked:
            (e: any): any => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }
                const name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                window._commander.hideModal(name + 'Modal');
            },

ButtonClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButtonClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButtonClicked);
                }

                this.timeoutDelayLockButtonClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.SaveActor(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(ManageActorsDataValidations);
        window._ruleEngine.addConditionalFormattings(ManageActorsConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(ManageActorsCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];
        new DigicircMatchmaking.Controllers.ActorsToAdministratorsController({
'PartialView': new PartialViewPartialModelStructure($scope, 'PartialView'),

        }).IncludePartialMethods($scope, ["PartialView"], $timeout);

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_MasterPage as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("ManageActorsController", ["$scope", "$timeout", ManageActorsController] as Array<string>);
}
