// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
interface Window { scope_ResourceForm: DigicircMatchmaking.Controllers.IResourceFormScope; }
namespace DigicircMatchmaking.Controllers {
const ResourceFormConditionalFormattings = (controlName?: string): Array<Joove.JbRule> => {
    return [
           ];
};
const ResourceFormDataValidations = (controlName?: string): Array<Joove.JbRule> => {
    return [
           ];
};
const ResourceFormCalculatedExpressions = (controlName?: string): Array<Joove.JbRule> => {
    return [
           ];
};

// Datasets Column Info
export var AddressDataset_ColumnInfo = [new Joove.ColumnInfo("Alias", "string", null, false),
                                        new Joove.ColumnInfo("original", "Address", null, false)];
window["AddressDataset_ColumnInfo"] = AddressDataset_ColumnInfo;
export var MaterialDataSet_ColumnInfo = [new Joove.ColumnInfo("Name", "string", null, false),
           new Joove.ColumnInfo("original", "Material", null, false)];
window["MaterialDataSet_ColumnInfo"] = MaterialDataSet_ColumnInfo;

// Datasets Projection Shemas

window["DropdownBox_ProjectionScema"] = {};

export interface IResourceFormScope extends Joove.IWebPageScope {
model:
    any;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

export interface IResourceFormPartialModelStructure {
Product:
    any;
ActorId:
    any;
}


export class ResourceFormController {

private _normalToPartialModelMappingStructure:
    any;

    constructor( normalToPartialModelMappingStructure: {
                     [partialControlName: string] :
                     IResourceFormPartialModelStructure
                 } ) {
        this._normalToPartialModelMappingStructure = normalToPartialModelMappingStructure;
    }


    IncludePartialMethods ($scope: any, controls: Array<string>, $timeout: ng.ITimeoutService): void {
        window["scope_ResourceForm"] = $scope;

        if($scope._partialModelStructure == null) {
            $scope._partialModelStructure = {};
        }

        for (let key in this._normalToPartialModelMappingStructure) {
            let value = this._normalToPartialModelMappingStructure[key];
            $scope._partialModelStructure[key] = value;
        }

        //$scope._partialModelStructure = this._normalToPartialModelMappingStructure;






        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
// Events
        $scope.eventCallbacks.ResourceForm = {
        };

// Rules
        window._ruleEngine.addDataValidations(Joove.JbRule.createRulesForPartialControls(controls, ResourceFormDataValidations));
        window._ruleEngine.addConditionalFormattings(Joove.JbRule.createRulesForPartialControls(controls, ResourceFormConditionalFormattings));
        window._ruleEngine.addCalculatedExpressions(Joove.JbRule.createRulesForPartialControls(controls, ResourceFormCalculatedExpressions));

    }
};
angular.module("Application").controller("ResourceFormController", ["$scope", "$timeout", ResourceFormController] as Array<string>);
}
