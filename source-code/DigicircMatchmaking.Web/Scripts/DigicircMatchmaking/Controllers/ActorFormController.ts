// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
window.onbeforeunload = (e) => {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg;     // Gecko, Trident, Chrome 34+
        return msg;
    }
};
interface Window { scope_ActorForm: DigicircMatchmaking.Controllers.IActorFormScope; }
namespace DigicircMatchmaking.Controllers {
const ActorFormConditionalFormattings = [
new Joove.JbRule({
name: "HideIfNewConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentAction == "Add", false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "HideForProvidersConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_ActorForm"].model.Actor.EntityType.IsProvider, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "ReadOnlyConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentAction == "Show", false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "HideEmptyTitleConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe(function () {
            return Joove.Common.nullSafe<any>(() => window["scope_ActorForm"].model.Title, "").trim();
        }, "")), false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "PendingChangesConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return window._context.isDirty;

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "ShowOnEditConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentAction == "Show", false) && Joove.Common.nullSafe<any>(() => window["scope_ActorForm"].model.SignInUser, null) == Joove.Common.nullSafe<any>(() => window["scope_ActorForm"].model.Actor.AddedBy, null);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "SpecifyEnityIfOtherConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_ActorForm"].model.Actor.EntityType.Code, "") == "Other";

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "SpecifyExperienceInCircularEconomyConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_ActorForm"].model.Actor.CircularEconomyRequirements.ExperienceInCircularEconomy, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "HideSelectIfIsClusterConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_ActorForm"].model.Actor.EntityType.IsCluster, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "ShowSpecifyClusterConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_ActorForm"].model.Actor.MemberOfCluster, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "HasSitesConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_ActorForm"].model.Actor.HasSites, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
                                        ];
const ActorFormDataValidations = [
                                 ];
const ActorFormCalculatedExpressions = [
                                       ];
// Manual Data for DropdownDigitalExpertiseDataset
window["dataForDropdownDigitalExpertiseDataset"] = [ {
    _key: 0,
_text: window._resourcesManager.getComboBoxManualValueDisplay('DigitalExpertiseDataset', '0', false , null),
_default: true
}, {
    _key: 1,
_text: window._resourcesManager.getComboBoxManualValueDisplay('DigitalExpertiseDataset', '1', false , null),
_default: false
}, {
    _key: 2,
_text: window._resourcesManager.getComboBoxManualValueDisplay('DigitalExpertiseDataset', '2', false , null),
_default: false
}, {
    _key: 3,
_text: window._resourcesManager.getComboBoxManualValueDisplay('DigitalExpertiseDataset', '3', false , null),
_default: false
}, {
    _key: 4,
_text: window._resourcesManager.getComboBoxManualValueDisplay('DigitalExpertiseDataset', '4', false , null),
_default: false
} ]

// Datasets Column Info
export var EntityTypeDataset_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null, false),
           new Joove.ColumnInfo("original", "EntityType", null, false)];
window["EntityTypeDataset_ColumnInfo"] = EntityTypeDataset_ColumnInfo;
export var ClustersDataset_ColumnInfo = [new Joove.ColumnInfo("Name", "string", null, false),
           new Joove.ColumnInfo("original", "Actor", null, false)];
window["ClustersDataset_ColumnInfo"] = ClustersDataset_ColumnInfo;
export var SectorTypeDataSet_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null, false),
           new Joove.ColumnInfo("original", "SectorType", null, false)];
window["SectorTypeDataSet_ColumnInfo"] = SectorTypeDataSet_ColumnInfo;
export var DigitalExpertiseDataset_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null,  true)];
window["DigitalExpertiseDataset_ColumnInfo"] = DigitalExpertiseDataset_ColumnInfo;
export var CountryDataset_ColumnInfo = [new Joove.ColumnInfo("Name", "string", null, false),
                                        new Joove.ColumnInfo("original", "Country", null, false)];
window["CountryDataset_ColumnInfo"] = CountryDataset_ColumnInfo;
export var MapPoints_ColumnInfo = [new Joove.ColumnInfo("Address.Latitude", "double", null, false),
                                   new Joove.ColumnInfo("Address.Longitude", "double", null, false)];
window["MapPoints_ColumnInfo"] = MapPoints_ColumnInfo;

export class ActorFormMapPointsViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.Points;
    }


}



// Datasets Projection Shemas
window["DropdownBox1_ProjectionScema"] = {};
window["DropdownBox3_ProjectionScema"] = {};
window["TextBox_ProjectionScema"] = {};

window["DropdownBox2_ProjectionScema"] = {};
window["DropdownBox_ProjectionScema"] = {};
window["DropdownBox4_ProjectionScema"] = {};

window["ImageBox_ProjectionScema"] = {Actor:
                                      {Id: ''
                                       ,  _key: ''
                                       , ActorLogo:
                                       {Id: ''
                                        ,  _key: ''
                                        , Description:
                                        {}
                                        , FileName:
                                        {}
                                        , StorageMedium:
                                        {}
                                        , FolderPath:
                                        {}
                                        , UploadDateTime:
                                        {}
                                        , UploadedBy:
                                        {}
                                       }
                                      }
                                     };


export interface IActorFormScope extends Joove.IWebPageScope {
model:
    DigicircMatchmaking.ViewModels.ActorForm.ActorFormViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class ActorFormController {
private timeoutDelayLockcmdExitClicked:
    any;
private timeoutDelayLockcmdDeleteCompanyClicked:
    any;
private timeoutDelayLockEditButtonClicked:
    any;
private timeoutDelayLockcmdCompanySaveClicked:
    any;
private timeoutDelayLockButton1Clicked:
    any;
private timeoutDelayLockTextBoxOnChange:
    any;
private timeoutDelayLockLabel18Clicked:
    any;
private timeoutDelayLockIcon2Clicked:
    any;
private timeoutDelayLockButton2Clicked:
    any;
private timeoutDelayLockTextBox4OnChange:
    any;
private timeoutDelayLockTextBox5OnChange:
    any;
private timeoutDelayLockIcon1Clicked:
    any;
private timeoutDelayLockButtonClicked:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_ActorForm.model = window.scope_ActorForm.dehydrate();
        //window.scope_MasterPage.model = window.scope_ActorForm.model;
        DigicircMatchmaking.ViewModels.ActorForm.ActorFormViewModel._lightCast(window.scope_ActorForm.model);
        // Joove.Common.applyScope(window.scope_ActorForm);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IActorFormScope, $timeout: ng.ITimeoutService) {
        window.scope_ActorForm = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DigicircMatchmaking.ViewModels.ActorForm.ActorFormViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_MasterPage._validations;
        $scope._validations = { summary:
                                [],
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: IActorFormScope, $timeout: ng.ITimeoutService) {


        $scope.model = DigicircMatchmaking.ViewModels.ActorForm.ActorFormViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_MasterPage.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);




        //}

        $.connection['eventsHub'].on('__connectedEvent', () => { });

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start().then(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
        }
// Dataset Handler
        $scope.datasets = {

MapPoints:
            (partialViewControlName: string = null) => {
                return new DigicircMatchmaking.Controllers.ActorFormMapPointsViewModelDataset($scope.model, partialViewControlName);
            },
        };
// Controller actions
        $scope.actions = {
Add:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("ActorForm", "Add", "GET", [], {}, _modalOptions);
            },
Show:
            async (id, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("ActorForm", "Show", "GET", [id], {}, _modalOptions);
            },
Edit:
            async (id, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("ActorForm", "Edit", "GET", [id], {}, _modalOptions);
            },
SetNewGeolocation:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    window["scope_ActorForm"].model.ManuallySetGeolocation = true;

                    Joove.Common.nullSafe<any>(() => window._commander.hideModal("ChooseMapPositionPoint"), null);


                    // Joove.Common.applyScope(window.scope_ActorForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
UpdateGeolocation:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    Joove.Common.nullSafe<any>(() => window["scope_ActorForm"].model.Points.clear(), null);

                    Joove.Common.nullSafe<any>(() => window["scope_ActorForm"].model.Points.add(Joove.Common.nullSafe<any>(() => window["scope_ActorForm"].model.Actor, null)), null);

                    Joove.Common.nullSafe<any>(() => window._commander.mapRefresh(["NewMap1"]), null);


                    // Joove.Common.applyScope(window.scope_ActorForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
Save:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'ActorForm', action: 'Save',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
Delete:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'ActorForm', action: 'Delete',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
SetSector:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    Joove.Common.nullSafe<any>(() => window["scope_ActorForm"].model.Actor.SectorTypes.clear(), null);

                    Joove.Common.nullSafe<any>(() => window["scope_ActorForm"].model.Actor.SectorTypes.add(Joove.Common.nullSafe<any>(() => window["scope_ActorForm"].model.SelectedSector, null)), null);


                    // Joove.Common.applyScope(window.scope_ActorForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
Back:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    Joove.Common.nullSafe<any>(() => Joove.Core.executeRedirectControllerAction("SearchForm", "FromBack", "GET", [Joove.Common.nullSafe<any>(() => window["scope_ActorForm"].model.Actor.Id, 0)], {}, _modalOptions), null);


                    // Joove.Common.applyScope(window.scope_ActorForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
SaveNewCluster:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'ActorForm', action: 'SaveNewCluster',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
AddNewCluster:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    Joove.Common.nullSafe<any>(() => window._commander.showModal("Modal"), null);


                    // Joove.Common.applyScope(window.scope_ActorForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
        };
// Events
        $scope.eventCallbacks = {
cmdExitClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockcmdExitClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockcmdExitClicked);
                }

                this.timeoutDelayLockcmdExitClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Back(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

cmdDeleteCompanyClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockcmdDeleteCompanyClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockcmdDeleteCompanyClicked);
                }

                this.timeoutDelayLockcmdDeleteCompanyClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);
                    window._popUpManager.question(window._resourcesManager.getGlobalResource("RES_WEBFORM_GenericConfirmationQuestion"),
                    window._resourcesManager.getEventConfirmation("cmdDeleteCompany", false), (isConfirm) => {
                        if (!isConfirm) return;

                        setTimeout(() => {

                            Joove.Validation.Manager.validateFormAndExecute(() => {
                                $scope.actions.Delete(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 1000);
                    });
                }, 0);
            },

EditButtonClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockEditButtonClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockEditButtonClicked);
                }

                this.timeoutDelayLockEditButtonClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Edit(Joove.Common.nullSafe<any>(() => window["scope_ActorForm"].model.Actor.Id, 0), null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

cmdCompanySaveClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockcmdCompanySaveClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockcmdCompanySaveClicked);
                }

                this.timeoutDelayLockcmdCompanySaveClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Save(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

Button1Clicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton1Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton1Clicked);
                }

                this.timeoutDelayLockButton1Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.AddNewCluster(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

TextBoxOnChange:
            (e, DataItem, _parents) => {



                if (this.timeoutDelayLockTextBoxOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLockTextBoxOnChange);
                }

                this.timeoutDelayLockTextBoxOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.SetSector(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Label18Clicked:
            (e: any): any => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }
                const name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                window._commander.showModal(name + 'ChooseMapPositionPoint');
            },

Icon2Clicked:
            (e: any): any => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }
                const name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                window._commander.hideModal(name + 'ChooseMapPositionPoint');
            },

Button2Clicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton2Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton2Clicked);
                }

                this.timeoutDelayLockButton2Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.SetNewGeolocation(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

TextBox4OnChange:
            (e, DataItem, _parents) => {



                if (this.timeoutDelayLockTextBox4OnChange != null) {
                    $timeout.cancel(this.timeoutDelayLockTextBox4OnChange);
                }

                this.timeoutDelayLockTextBox4OnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.UpdateGeolocation(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 200);
            },

TextBox5OnChange:
            (e, DataItem, _parents) => {



                if (this.timeoutDelayLockTextBox5OnChange != null) {
                    $timeout.cancel(this.timeoutDelayLockTextBox5OnChange);
                }

                this.timeoutDelayLockTextBox5OnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.UpdateGeolocation(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 200);
            },

Icon1Clicked:
            (e: any): any => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }
                const name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                window._commander.hideModal(name + 'Modal');
            },

ButtonClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButtonClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButtonClicked);
                }

                this.timeoutDelayLockButtonClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.SaveNewCluster(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(ActorFormDataValidations);
        window._ruleEngine.addConditionalFormattings(ActorFormConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(ActorFormCalculatedExpressions);

        $scope.onRichTextBlur = (e, editor) => {
            Joove.Core.onChange(e.target, $(e.target).val());
        }


        $scope.SetReadOnIfNeeded = (e, editor) => {
            var isReadonly = e.currentTarget.classList.contains('jb-readonly');
            if (isReadonly === true) {
                e.currentTarget.contentEditable = false;
            }
        }
        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_MasterPage as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("ActorFormController", ["$scope", "$timeout", ActorFormController] as Array<string>);
}
