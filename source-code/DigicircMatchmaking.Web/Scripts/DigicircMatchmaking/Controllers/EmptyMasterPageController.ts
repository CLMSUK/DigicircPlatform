// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
interface Window { scope_EmptyMasterPage: DigicircMatchmaking.Controllers.IEmptyMasterPageScope; }
namespace DigicircMatchmaking.Controllers {
var _treeNodesConfiguration = { };
const EmptyMasterPageConditionalFormattings = [
        ];
const EmptyMasterPageDataValidations = [
                                       ];
const EmptyMasterPageCalculatedExpressions = [
        ];

// Datasets Column Info

// Datasets Projection Shemas


export interface IEmptyMasterPageScope extends Joove.IWebPageScope {
model:
    DigicircMatchmaking.ViewModels.EmptyMasterPage.EmptyMasterPageViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class EmptyMasterPageController {
private timeoutDelayLockMasterPageMenuHeaderMenuItemPressed:
    any;
private timeoutDelayLockRegisterMenuItemPressed:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_EmptyMasterPage.model = window.scope_EmptyMasterPage.dehydrate();
        //
        DigicircMatchmaking.ViewModels.EmptyMasterPage.EmptyMasterPageViewModel._lightCast(window.scope_EmptyMasterPage.model);
        // Joove.Common.applyScope(window.scope_EmptyMasterPage);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IEmptyMasterPageScope, $timeout: ng.ITimeoutService) {
        window.scope_EmptyMasterPage = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope._ready = false;
        window._context.currentMasterPageObject = this;
        $scope.dehydrate = (context = null) => DigicircMatchmaking.ViewModels.EmptyMasterPage.EmptyMasterPageViewModel._initializeFrom($scope.model, context);
        $scope._validations = { summary:
                                [],
                              };

        let onSuccess = (data: any, textStatus: string, jqXhr: JQueryXHR)  => {
            Joove.Core.checkAppVersion();
            Joove.Core.handleServerResponse("EmptyMasterPage", data);
            this.init($scope, $timeout);
            //Joove.Common.applyScope($scope);
            //window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {
            $scope._ready = true;
            CLMS.Framework.Utilities.FocusOnFirstInputElementOfModal();
            //});
        }; //end onSuccess()

        window._backEndInfoAggregator.get(false, { success: onSuccess });

    }

    init($scope: IEmptyMasterPageScope, $timeout: ng.ITimeoutService) {


        $scope.trackObject = obj => Joove.Common.trackObject(obj);




        //}

        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
        }
// Dataset Handler
        $scope.datasets = {
        };
// Controller actions
        $scope.actions = {
Index:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("EmptyMasterPage", "Index", "GET", [], {}, _modalOptions);
            },
        };
// Events
        $scope.eventCallbacks = {
MasterPageMenuHeaderMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMasterPageMenuHeaderMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMasterPageMenuHeaderMenuItemPressed);
                }

                this.timeoutDelayLockMasterPageMenuHeaderMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("SearchForm", "Index", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

RegisterMenuItemPressed:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockRegisterMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockRegisterMenuItemPressed);
                }

                this.timeoutDelayLockRegisterMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("RegisterForm", "Index", "GET", [true], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(EmptyMasterPageDataValidations);
        window._ruleEngine.addConditionalFormattings(EmptyMasterPageConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(EmptyMasterPageCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];
    }
}
angular.module("Application").controller("EmptyMasterPageController", ["$scope", "$timeout", EmptyMasterPageController] as Array<string>);
}
