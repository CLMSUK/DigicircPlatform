// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
window.onbeforeunload = (e) => {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg;     // Gecko, Trident, Chrome 34+
        return msg;
    }
};
interface Window { scope_RegisterForm: DigicircMatchmaking.Controllers.IRegisterFormScope; }
namespace DigicircMatchmaking.Controllers {
const RegisterFormConditionalFormattings = [
new Joove.JbRule({
name: "TermsAreAcceptedConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_RegisterForm"].model.AcceptTerms, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
        ];
const RegisterFormDataValidations = [
new Joove.JbRule({
name: "EmptyUsernameValidation",
type: Joove.RuleTypes.DataValidation,
evaluatedAtServer: false,
isDataSetRule: false,
group: "",



condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_RegisterForm"].model.UserName.trim(), "") == "";


    },
expression: async function(_parents) {
        return Joove.Common.nullSafe<any>(() => window._resourcesManager.getLocalResource("RES_DATAVALIDATION_MESSAGE_EmptyUsername", false), "");
    },
dataValidationMessageType:  Joove.DataValidationMessageType.ERROR,
evaluationTimes: [Joove.EvaluationTimes.OnSubmit],
originalName: 'EmptyUsername',
fromMasterPage: false
}),
new Joove.JbRule({
name: "PasswordsMatchValidation",
type: Joove.RuleTypes.DataValidation,
evaluatedAtServer: false,
isDataSetRule: false,
group: "",



condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe<any>(() => window["scope_RegisterForm"].model.Password, "")), false) && Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe<any>(() => window["scope_RegisterForm"].model.RetypePassword, "")), false) && Joove.Common.nullSafe<any>(() => window["scope_RegisterForm"].model.Password.trim(), "") != Joove.Common.nullSafe<any>(() => window["scope_RegisterForm"].model.RetypePassword.trim(), "");


    },
expression: async function(_parents) {
        return Joove.Common.nullSafe<any>(() => window._resourcesManager.getLocalResource("RES_DATAVALIDATION_MESSAGE_PasswordsMatch", false), "");
    },
dataValidationMessageType:  Joove.DataValidationMessageType.ERROR,
evaluationTimes: [Joove.EvaluationTimes.OnSubmit],
originalName: 'PasswordsMatch',
fromMasterPage: false
}),
                                    ];
const RegisterFormCalculatedExpressions = [
        ];

// Datasets Column Info

// Datasets Projection Shemas


export interface IRegisterFormScope extends Joove.IWebPageScope {
model:
    DigicircMatchmaking.ViewModels.RegisterForm.RegisterFormViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,
EmptyUsername: Joove.Validation.BindingEntry,PasswordsMatch: Joove.Validation.BindingEntry,txtUserName: Joove.Validation.BindingEntry,txtPassword: Joove.Validation.BindingEntry,txtRetypePassword: Joove.Validation.BindingEntry,
    },
    _masterValidations?: any;
}

class RegisterFormController {
private timeoutDelayLockButton1Clicked:
    any;
private timeoutDelayLockButtonClicked:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_RegisterForm.model = window.scope_RegisterForm.dehydrate();
        //window.scope_MasterPageSignIn.model = window.scope_RegisterForm.model;
        DigicircMatchmaking.ViewModels.RegisterForm.RegisterFormViewModel._lightCast(window.scope_RegisterForm.model);
        // Joove.Common.applyScope(window.scope_RegisterForm);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IRegisterFormScope, $timeout: ng.ITimeoutService) {
        window.scope_RegisterForm = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DigicircMatchmaking.ViewModels.RegisterForm.RegisterFormViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_MasterPageSignIn._validations;
        $scope._validations = { summary:
                                [],
                                EmptyUsername:
                                { rule: RegisterFormDataValidations[0], group: RegisterFormDataValidations[0].group },
                                PasswordsMatch:
                                { rule: RegisterFormDataValidations[1], group: RegisterFormDataValidations[1].group },
                                txtUserName:
                                { requiredControlId: 'txtUserName', group: null },
                                txtPassword:
                                { requiredControlId: 'txtPassword', group: null },
                                txtRetypePassword:
                                { requiredControlId: 'txtRetypePassword', group: null },
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: IRegisterFormScope, $timeout: ng.ITimeoutService) {


        $scope.model = DigicircMatchmaking.ViewModels.RegisterForm.RegisterFormViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_MasterPageSignIn.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);




        //}

        $.connection['eventsHub'].on('__connectedEvent', () => { });

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start().then(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
        }
// Dataset Handler
        $scope.datasets = {
        };
// Controller actions
        $scope.actions = {
Index:
            async (fromMatching, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("RegisterForm", "Index", "GET", [fromMatching], {}, _modalOptions);
            },
Register:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'RegisterForm', action: 'Register',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
        };
// Events
        $scope.eventCallbacks = {
Button1Clicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton1Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton1Clicked);
                }

                this.timeoutDelayLockButton1Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("SignInPage", "Load", "GET", [Joove.Common.nullSafe<any>(() => window["scope_RegisterForm"].model.FromMatching, false)], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ButtonClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButtonClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButtonClicked);
                }

                this.timeoutDelayLockButtonClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Register(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(RegisterFormDataValidations);
        window._ruleEngine.addConditionalFormattings(RegisterFormConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(RegisterFormCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_MasterPageSignIn as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("RegisterFormController", ["$scope", "$timeout", RegisterFormController] as Array<string>);
}
