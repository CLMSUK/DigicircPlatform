// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
window.onbeforeunload = (e) => {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg;     // Gecko, Trident, Chrome 34+
        return msg;
    }
};
interface Window { scope_ActorViewForm: DigicircMatchmaking.Controllers.IActorViewFormScope; }
namespace DigicircMatchmaking.Controllers {
const ActorViewFormConditionalFormattings = [
new Joove.JbRule({
name: "HideForProvidersConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_ActorViewForm"].model.Actor.EntityType.IsProvider, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "ReadOnlyConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentAction == "Show", false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "HideEmptyTitleConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe(function () {
            return Joove.Common.nullSafe<any>(() => window["scope_ActorViewForm"].model.Title, "").trim();
        }, "")), false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "ShowOnEditConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentAction == "Show", false) && (Joove.Common.nullSafe<any>(() => window["scope_ActorViewForm"].model.SignInUser, null) == Joove.Common.nullSafe<any>(() => window["scope_ActorViewForm"].model.Actor.AddedBy, null) || Joove.Common.nullSafe<any>(() => window["scope_ActorViewForm"].model.Actor.Administrators.linq.any((a) => Joove.Common.nullSafe<any>(() => a.UserName, "") == Joove.Common.nullSafe<any>(() => window["scope_ActorViewForm"].model.SignInUser.UserName, "")), false)) && !(Joove.Common.nullSafe<any>(() => window["scope_ActorViewForm"].model.Actor.EntityType.IsCluster, false));

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "SpecifyEnityIfOtherConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_ActorViewForm"].model.Actor.EntityType.Code, "") == "Other";

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "SpecifyExperienceInCircularEconomyConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_ActorViewForm"].model.Actor.CircularEconomyRequirements.ExperienceInCircularEconomy, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "ShowForProvidersConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_ActorViewForm"].model.Actor.EntityType.IsProvider, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "HideIfNotMemberOfClusterConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_ActorViewForm"].model.Actor.MemberOfCluster, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "ShowSpecifiedClusterNameConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_ActorViewForm"].model.Actor.MemberOfCluster, false) && Joove.Common.nullSafe<any>(() => window["scope_ActorViewForm"].model.Actor.Cluster, null) == null;

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
        ];
const ActorViewFormDataValidations = [
                                     ];
const ActorViewFormCalculatedExpressions = [
        ];

// Datasets Column Info
export var SectorTypeDataSet_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null, false),
           new Joove.ColumnInfo("original", "SectorType", null, false)];
window["SectorTypeDataSet_ColumnInfo"] = SectorTypeDataSet_ColumnInfo;
export var MapPoints_ColumnInfo = [new Joove.ColumnInfo("Address.Latitude", "double", null, false),
                                   new Joove.ColumnInfo("Address.Longitude", "double", null, false)];
window["MapPoints_ColumnInfo"] = MapPoints_ColumnInfo;

export class ActorViewFormMapPointsViewModelDataset extends Joove.IViewModelDataset<any> {


    constructor(model, partialViewControlName: string = null) {
        super(model, partialViewControlName);
        this.limit = 0;
    }

    Filter(inputs: any): (DataItem: any, index: number, items: Array<any>) => boolean {
        var $scope = { model: this.model };

        return (DataItem, index, items) => {
            return true;


        };
    }

    PackInputs($control: JQuery): any {
        return Joove.DatasourceManager.getDatasetControlInputs($control);
    }

    Sort(items: Joove.ViewModelCollection): Joove.ViewModelCollection {
        return items;
    }

    GetSource(parents: number[]): Joove.ViewModelCollection {
        return this.model.Points;
    }


}



// Datasets Projection Shemas
window["DropdownBox2_ProjectionScema"] = {};

window["ImageBox1_ProjectionScema"] = {Actor:
                                       {Id: ''
                                        ,  _key: ''
                                        , ActorLogo:
                                        {Id: ''
                                                ,  _key: ''
                                                , Description:
                                                {}
                                                , FileName:
                                                {}
                                                , StorageMedium:
                                                {}
                                                , FolderPath:
                                                {}
                                                , UploadDateTime:
                                                {}
                                                , UploadedBy:
                                                {}
                                        }
                                       }
                                      };


export interface IActorViewFormScope extends Joove.IWebPageScope {
model:
    DigicircMatchmaking.ViewModels.ActorViewForm.ActorViewFormViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class ActorViewFormController {
private timeoutDelayLockcmdExitClicked:
    any;
private timeoutDelayLockcmdDeleteCompanyClicked:
    any;
private timeoutDelayLockResourceManagementButtonClicked:
    any;
private timeoutDelayLockEditButtonClicked:
    any;
private timeoutDelayLockHyperLinkClicked:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_ActorViewForm.model = window.scope_ActorViewForm.dehydrate();
        //window.scope_MasterPage.model = window.scope_ActorViewForm.model;
        DigicircMatchmaking.ViewModels.ActorViewForm.ActorViewFormViewModel._lightCast(window.scope_ActorViewForm.model);
        // Joove.Common.applyScope(window.scope_ActorViewForm);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IActorViewFormScope, $timeout: ng.ITimeoutService) {
        window.scope_ActorViewForm = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DigicircMatchmaking.ViewModels.ActorViewForm.ActorViewFormViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_MasterPage._validations;
        $scope._validations = { summary:
                                [],
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: IActorViewFormScope, $timeout: ng.ITimeoutService) {


        $scope.model = DigicircMatchmaking.ViewModels.ActorViewForm.ActorViewFormViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_MasterPage.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);




        //}

        $.connection['eventsHub'].on('__connectedEvent', () => { });

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start().then(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
        }
// Dataset Handler
        $scope.datasets = {

MapPoints:
            (partialViewControlName: string = null) => {
                return new DigicircMatchmaking.Controllers.ActorViewFormMapPointsViewModelDataset($scope.model, partialViewControlName);
            },
        };
// Controller actions
        $scope.actions = {
GoToWebsite:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'ActorViewForm', action: 'GoToWebsite',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
Show:
            async (id, fromGraph, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("ActorViewForm", "Show", "GET", [id, fromGraph], {}, _modalOptions);
            },
Save:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'ActorViewForm', action: 'Save',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
Delete:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'ActorViewForm', action: 'Delete',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
SetSector:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    Joove.Common.nullSafe<any>(() => window["scope_ActorViewForm"].model.Actor.SectorTypes.clear(), null);

                    Joove.Common.nullSafe<any>(() => window["scope_ActorViewForm"].model.Actor.SectorTypes.add(Joove.Common.nullSafe<any>(() => window["scope_ActorViewForm"].model.SelectedSector, null)), null);


                    // Joove.Common.applyScope(window.scope_ActorViewForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
Back:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    if ((Joove.Common.nullSafe<any>(() => window["scope_ActorViewForm"].model.FromGraph, false))) {
                        Joove.Common.nullSafe<any>(() => Joove.Core.executeRedirectControllerAction("MatchBaseExplorer", "FromBack", "GET", [Joove.Common.nullSafe<any>(() => window["scope_ActorViewForm"].model.Actor.Id, 0)], {}, _modalOptions), null);
                    } else {Joove.Common.nullSafe<any>(() => Joove.Core.executeRedirectControllerAction("SearchForm", "FromBack", "GET", [Joove.Common.nullSafe<any>(() => window["scope_ActorViewForm"].model.Actor.Id, 0)], {}, _modalOptions), null);
                    }


                    // Joove.Common.applyScope(window.scope_ActorViewForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
        };
// Events
        $scope.eventCallbacks = {
cmdExitClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockcmdExitClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockcmdExitClicked);
                }

                this.timeoutDelayLockcmdExitClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Back(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

cmdDeleteCompanyClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockcmdDeleteCompanyClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockcmdDeleteCompanyClicked);
                }

                this.timeoutDelayLockcmdDeleteCompanyClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);
                    window._popUpManager.question(window._resourcesManager.getGlobalResource("RES_WEBFORM_GenericConfirmationQuestion"),
                    window._resourcesManager.getEventConfirmation("cmdDeleteCompany", false), (isConfirm) => {
                        if (!isConfirm) return;

                        setTimeout(() => {

                            Joove.Validation.Manager.validateFormAndExecute(() => {
                                $scope.actions.Delete(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 1000);
                    });
                }, 0);
            },

ResourceManagementButtonClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockResourceManagementButtonClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockResourceManagementButtonClicked);
                }

                this.timeoutDelayLockResourceManagementButtonClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("ManageResources", "Index", "GET", [Joove.Common.nullSafe<any>(() => window["scope_ActorViewForm"].model.Actor.Id, 0)], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

EditButtonClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockEditButtonClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockEditButtonClicked);
                }

                this.timeoutDelayLockEditButtonClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("ActorForm", "Edit", "GET", [Joove.Common.nullSafe<any>(() => window["scope_ActorViewForm"].model.Actor.Id, 0)], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

HyperLinkClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockHyperLinkClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockHyperLinkClicked);
                }

                this.timeoutDelayLockHyperLinkClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.GoToWebsite(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(ActorViewFormDataValidations);
        window._ruleEngine.addConditionalFormattings(ActorViewFormConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(ActorViewFormCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_MasterPage as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("ActorViewFormController", ["$scope", "$timeout", ActorViewFormController] as Array<string>);
}
