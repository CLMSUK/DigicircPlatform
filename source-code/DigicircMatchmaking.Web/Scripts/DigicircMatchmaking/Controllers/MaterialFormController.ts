// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
window.onbeforeunload = (e) => {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg;     // Gecko, Trident, Chrome 34+
        return msg;
    }
};
interface Window { scope_MaterialForm: DigicircMatchmaking.Controllers.IMaterialFormScope; }
namespace DigicircMatchmaking.Controllers {
const MaterialFormConditionalFormattings = [
new Joove.JbRule({
name: "HideIfNewConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentAction == "Add", false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "HideEmptyTitleConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe(function () {
            return Joove.Common.nullSafe<any>(() => window["scope_MaterialForm"].model.Title, "").trim();
        }, "")), false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "PendingChangesConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return window._context.isDirty;

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "ConditionalFormattingConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return !(Joove.Common.nullSafe<any>(() => window["scope_MaterialForm"].model.ConvertBy, false));

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
        ];
const MaterialFormDataValidations = [
                                    ];
const MaterialFormCalculatedExpressions = [
        ];

// Datasets Column Info
export var ProductTypeDataset_ColumnInfo = [new Joove.ColumnInfo("Name", "string", null, false),
           new Joove.ColumnInfo("original", "ProductType", null, false)];
window["ProductTypeDataset_ColumnInfo"] = ProductTypeDataset_ColumnInfo;
export var PhysicalFormDataset_ColumnInfo = [new Joove.ColumnInfo("Code", "string", null, false),
           new Joove.ColumnInfo("original", "PhysicalForm", null, false)];
window["PhysicalFormDataset_ColumnInfo"] = PhysicalFormDataset_ColumnInfo;
export var UnitOfMeasurementDataset_ColumnInfo = [new Joove.ColumnInfo("Code", "string", null, false),
           new Joove.ColumnInfo("original", "UnitOfMeasurement", null, false)];
window["UnitOfMeasurementDataset_ColumnInfo"] = UnitOfMeasurementDataset_ColumnInfo;
var PickList1_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Name",
caption: window._resourcesManager.getDataListColumnCaption("PickList1", "Name", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 2147483647,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Description",
caption: window._resourcesManager.getDataListColumnCaption("PickList1", "Description", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 2147483647,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "HsSpecific",
caption: window._resourcesManager.getDataListColumnCaption("PickList1", "HsSpecific", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 2147483647,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["PickList1_ColumnInfo"] = PickList1_ColumnInfo;
var PickList_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Name",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "Name", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 2147483647,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Description",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "Description", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 2147483647,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "HsSpecific",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "HsSpecific", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 2147483647,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["PickList_ColumnInfo"] = PickList_ColumnInfo;

// Datasets Projection Shemas
window["DropdownBox_ProjectionScema"] = {};
window["DropdownBox1_ProjectionScema"] = {};
window["DropdownBox2_ProjectionScema"] = {};
window["PickList1_ProjectionScema"] = {};
window["PickList_ProjectionScema"] = {};


export interface IMaterialFormScope extends Joove.IWebPageScope {
model:
    DigicircMatchmaking.ViewModels.MaterialForm.MaterialFormViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class MaterialFormController {
private timeoutDelayLockcmdExit1Clicked:
    any;
private timeoutDelayLockcmdDeleteCompanyClicked:
    any;
private timeoutDelayLockcmdCompanySaveClicked:
    any;
private timeoutDelayLockButton1Clicked:
    any;
private timeoutDelayLockIcon31Clicked:
    any;
private timeoutDelayLockIcon4Clicked:
    any;
private timeoutDelayLockButton11Clicked:
    any;
private timeoutDelayLockIcon3Clicked:
    any;
private timeoutDelayLockIcon5Clicked:
    any;
private timeoutDelayLockIcon1Clicked:
    any;
private timeoutDelayLockButtonClicked:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_MaterialForm.model = window.scope_MaterialForm.dehydrate();
        //window.scope_SymbiosisMasterPage.model = window.scope_MaterialForm.model;
        DigicircMatchmaking.ViewModels.MaterialForm.MaterialFormViewModel._lightCast(window.scope_MaterialForm.model);
        // Joove.Common.applyScope(window.scope_MaterialForm);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IMaterialFormScope, $timeout: ng.ITimeoutService) {
        window.scope_MaterialForm = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DigicircMatchmaking.ViewModels.MaterialForm.MaterialFormViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_SymbiosisMasterPage._validations;
        $scope._validations = { summary:
                                [],
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: IMaterialFormScope, $timeout: ng.ITimeoutService) {


        $scope.model = DigicircMatchmaking.ViewModels.MaterialForm.MaterialFormViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_SymbiosisMasterPage.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);




        //}

        $.connection['eventsHub'].on('__connectedEvent', () => { });

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start().then(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
        }
// Dataset Handler
        $scope.datasets = {
        };
// Controller actions
        $scope.actions = {
Add:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("MaterialForm", "Add", "GET", [], {}, _modalOptions);
            },
Edit:
            async (id, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("MaterialForm", "Edit", "GET", [id], {}, _modalOptions);
            },
Save:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'MaterialForm', action: 'Save',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
DeleteConvertedByProcess:
            async (process, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    Joove.Common.nullSafe<any>(() => window["scope_MaterialForm"].model.Material.ConvertedBy.remove(process), null);

                    Joove.Common.nullSafe<any>(() => window["scope_MaterialForm"].model.DeleteProcesses.add(process), null);


                    // Joove.Common.applyScope(window.scope_MaterialForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
OpenEditConvertByProcess:
            async (process, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    window["scope_MaterialForm"].model.Edited = true;

                    window["scope_MaterialForm"].model.ConvertBy = true;

                    window["scope_MaterialForm"].model.NewProcess = process;

                    Joove.Common.nullSafe<any>(() => window._commander.showModal("ProcessModal"), null);


                    // Joove.Common.applyScope(window.scope_MaterialForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
OpenEditConvertedByProcess:
            async (process, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    window["scope_MaterialForm"].model.Edited = true;

                    window["scope_MaterialForm"].model.ConvertBy = false;

                    window["scope_MaterialForm"].model.NewProcess = process;

                    Joove.Common.nullSafe<any>(() => window._commander.showModal("ProcessModal"), null);


                    // Joove.Common.applyScope(window.scope_MaterialForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
DeleteConvertByProcess:
            async (process, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    Joove.Common.nullSafe<any>(() => window["scope_MaterialForm"].model.Material.ConvertBy.remove(process), null);

                    Joove.Common.nullSafe<any>(() => window["scope_MaterialForm"].model.DeleteProcesses.add(process), null);


                    // Joove.Common.applyScope(window.scope_MaterialForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
Delete:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'MaterialForm', action: 'Delete',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
OpenNewConvertedByProcess:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    window["scope_MaterialForm"].model.ConvertBy = false;

                    window["scope_MaterialForm"].model.Edited = false;

                    window["scope_MaterialForm"].model.NewProcess = Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.Process(), null);

                    Joove.Common.nullSafe<any>(() => window["scope_MaterialForm"].model.NewProcess.Product.add(Joove.Common.nullSafe<any>(() => window["scope_MaterialForm"].model.Material, null)), null);

                    Joove.Common.nullSafe<any>(() => window._commander.showModal("ProcessModal"), null);


                    // Joove.Common.applyScope(window.scope_MaterialForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
OpenNewConvertByProcess:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    window["scope_MaterialForm"].model.ConvertBy = true;

                    window["scope_MaterialForm"].model.Edited = false;

                    window["scope_MaterialForm"].model.NewProcess = Joove.Common.nullSafe<any>(() => new DigicircMatchmaking.BO.Process(), null);

                    Joove.Common.nullSafe<any>(() => window["scope_MaterialForm"].model.NewProcess.Source.add(Joove.Common.nullSafe<any>(() => window["scope_MaterialForm"].model.Material, null)), null);

                    Joove.Common.nullSafe<any>(() => window._commander.showModal("ProcessModal"), null);


                    // Joove.Common.applyScope(window.scope_MaterialForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
AddNewProcess:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    if ((Joove.Common.nullSafe<any>(() => window["scope_MaterialForm"].model.Edited, false))) {
                        Joove.Common.nullSafe<any>(() => window["scope_MaterialForm"].model.EditedProcesses.add(Joove.Common.nullSafe<any>(() => window["scope_MaterialForm"].model.NewProcess, null)), null);
                        if ((Joove.Common.nullSafe<any>(() => window["scope_MaterialForm"].model.ConvertBy, false))) {
                            Joove.Common.nullSafe<any>(() => window._commander.gridRefresh(["Table"]), null);
                        } else {
                            Joove.Common.nullSafe<any>(() => window._commander.gridRefresh(["Table1"]), null);
                        }
                    } else {if ((Joove.Common.nullSafe<any>(() => window["scope_MaterialForm"].model.ConvertBy, false))) {
                            Joove.Common.nullSafe<any>(() => window["scope_MaterialForm"].model.Material.ConvertBy.add(Joove.Common.nullSafe<any>(() => window["scope_MaterialForm"].model.NewProcess, null)), null);
                        } else {Joove.Common.nullSafe<any>(() => window["scope_MaterialForm"].model.Material.ConvertedBy.add(Joove.Common.nullSafe<any>(() => window["scope_MaterialForm"].model.NewProcess, null)), null);
                        }
                        Joove.Common.nullSafe<any>(() => window["scope_MaterialForm"].model.NewProcesses.add(Joove.Common.nullSafe<any>(() => window["scope_MaterialForm"].model.NewProcess, null)), null);
                    }

                    Joove.Common.nullSafe<any>(() => window._commander.hideModal("ProcessModal"), null);


                    // Joove.Common.applyScope(window.scope_MaterialForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
        };
// Events
        $scope.eventCallbacks = {
cmdExit1Clicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                Joove.Common.setControlKeyPressed(e, 0);
                window._commander.closeForm();
            },

cmdDeleteCompanyClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockcmdDeleteCompanyClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockcmdDeleteCompanyClicked);
                }

                this.timeoutDelayLockcmdDeleteCompanyClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);
                    window._popUpManager.question(window._resourcesManager.getGlobalResource("RES_WEBFORM_GenericConfirmationQuestion"),
                    window._resourcesManager.getEventConfirmation("cmdDeleteCompany", false), (isConfirm) => {
                        if (!isConfirm) return;

                        setTimeout(() => {

                            Joove.Validation.Manager.validateFormAndExecute(() => {
                                $scope.actions.Delete(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 1000);
                    });
                }, 0);
            },

cmdCompanySaveClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockcmdCompanySaveClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockcmdCompanySaveClicked);
                }

                this.timeoutDelayLockcmdCompanySaveClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Save(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

Button1Clicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton1Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton1Clicked);
                }

                this.timeoutDelayLockButton1Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.OpenNewConvertByProcess(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Icon31Clicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockIcon31Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockIcon31Clicked);
                }

                this.timeoutDelayLockIcon31Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.DeleteConvertByProcess(_parents[0], null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Icon4Clicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockIcon4Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockIcon4Clicked);
                }

                this.timeoutDelayLockIcon4Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.OpenEditConvertByProcess(_parents[0], null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Button11Clicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton11Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton11Clicked);
                }

                this.timeoutDelayLockButton11Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.OpenNewConvertedByProcess(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Icon3Clicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockIcon3Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockIcon3Clicked);
                }

                this.timeoutDelayLockIcon3Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.DeleteConvertedByProcess(_parents[0], null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Icon5Clicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockIcon5Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockIcon5Clicked);
                }

                this.timeoutDelayLockIcon5Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.OpenEditConvertedByProcess(_parents[0], null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Icon1Clicked:
            (e: any): any => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }
                const name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                window._commander.hideModal(name + 'ProcessModal');
            },

ButtonClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButtonClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButtonClicked);
                }

                this.timeoutDelayLockButtonClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.AddNewProcess(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(MaterialFormDataValidations);
        window._ruleEngine.addConditionalFormattings(MaterialFormConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(MaterialFormCalculatedExpressions);

        $scope.onRichTextBlur = (e, editor) => {
            Joove.Core.onChange(e.target, $(e.target).val());
        }


        $scope.SetReadOnIfNeeded = (e, editor) => {
            var isReadonly = e.currentTarget.classList.contains('jb-readonly');
            if (isReadonly === true) {
                e.currentTarget.contentEditable = false;
            }
        }
        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_SymbiosisMasterPage as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("MaterialFormController", ["$scope", "$timeout", MaterialFormController] as Array<string>);
}
