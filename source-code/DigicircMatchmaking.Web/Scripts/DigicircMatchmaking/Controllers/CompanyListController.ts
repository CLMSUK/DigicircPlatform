// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
$(document).keyup((e) => {
    if (e.which === 13 && Joove.Common.eventPreventsDefaultFormAction(e as JQueryEventObject) === false && !$(e.target).parent().hasClass("search-element")) {
        window._popUpManager.previouslyFocusedElement = document.activeElement;
        $(":focus").blur();
        Joove.Core.getScope().eventCallbacks.cmdCompanySaveClicked(e);
    }
});
window.onbeforeunload = (e) => {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg;     // Gecko, Trident, Chrome 34+
        return msg;
    }
};
interface Window { scope_CompanyList: DigicircMatchmaking.Controllers.ICompanyListScope; }
namespace DigicircMatchmaking.Controllers {
const CompanyListConditionalFormattings = [
        ];
const CompanyListDataValidations = [
                                   ];
const CompanyListCalculatedExpressions = [
        ];

// Datasets Column Info
export var EntityTypeDataSet_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null, false),
           new Joove.ColumnInfo("original", "EntityType", null, false)];
window["EntityTypeDataSet_ColumnInfo"] = EntityTypeDataSet_ColumnInfo;
var CompanyList_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "company_name",
caption: window._resourcesManager.getDataListColumnCaption("CompanyList", "company_name", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: true,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "url",
caption: window._resourcesManager.getDataListColumnCaption("CompanyList", "url", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: true,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "city",
caption: window._resourcesManager.getDataListColumnCaption("CompanyList", "city", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: true,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "country",
caption: window._resourcesManager.getDataListColumnCaption("CompanyList", "country", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: true,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "zip_code",
caption: window._resourcesManager.getDataListColumnCaption("CompanyList", "zip_code", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: true,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "company_category",
caption: window._resourcesManager.getDataListColumnCaption("CompanyList", "company_category", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: true,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "description",
caption: window._resourcesManager.getDataListColumnCaption("CompanyList", "description", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: true,
supportsAggregators: true,
    length: 2147483647,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["CompanyList_ColumnInfo"] = CompanyList_ColumnInfo;

// Datasets Projection Shemas
window["DropdownBox_ProjectionScema"] = {};
window["CompanyList_ProjectionScema"] = {};


export interface ICompanyListScope extends Joove.IWebPageScope {
model:
    DigicircMatchmaking.ViewModels.CompanyList.CompanyListViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,
DropdownBox: Joove.Validation.BindingEntry,
    },
    _masterValidations?: any;
}

class CompanyListController {
private timeoutDelayLockcmdCompanySaveClicked:
    any;
private timeoutDelayLockDeleteClicked:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_CompanyList.model = window.scope_CompanyList.dehydrate();
        //window.scope_MasterPage.model = window.scope_CompanyList.model;
        DigicircMatchmaking.ViewModels.CompanyList.CompanyListViewModel._lightCast(window.scope_CompanyList.model);
        // Joove.Common.applyScope(window.scope_CompanyList);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: ICompanyListScope, $timeout: ng.ITimeoutService) {
        window.scope_CompanyList = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DigicircMatchmaking.ViewModels.CompanyList.CompanyListViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_MasterPage._validations;
        $scope._validations = { summary:
                                [],
                                DropdownBox:
                                { requiredControlId: 'DropdownBox', group: null },
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: ICompanyListScope, $timeout: ng.ITimeoutService) {


        $scope.model = DigicircMatchmaking.ViewModels.CompanyList.CompanyListViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_MasterPage.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);




        //}

        $.connection['eventsHub'].on('__connectedEvent', () => { });

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start().then(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
        }
// Dataset Handler
        $scope.datasets = {
        };
// Controller actions
        $scope.actions = {
Index:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("CompanyList", "", "GET", [], {}, _modalOptions);
            },
Transform:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);


                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'CompanyList', action: 'Transform',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
Delete:
            async (companies, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'CompanyList', action: 'Delete',
queryData: [], postData: {'model': $scope.model, 'companies': companies},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
        };
// Events
        $scope.eventCallbacks = {
cmdCompanySaveClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockcmdCompanySaveClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockcmdCompanySaveClicked);
                }

                this.timeoutDelayLockcmdCompanySaveClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Transform(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

DeleteClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockDeleteClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockDeleteClicked);
                }

                this.timeoutDelayLockDeleteClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {

                        var p_FormControls_CompanyList_FormControlsDefinition_CompanyList_ListControl_SelectedItems_CompanyViewModel = Joove.Common.nullSafe<any>(() => Joove.DatasourceManager.getSelectedItems($("[jb-id='CompanyList']"), e), null);
                        if( eval(`DigicircMatchmaking.ViewModels.CompanyList.FormControls_CompanyList_FormControlsDefinition_CompanyList_ListControl_SelectedItems_CompanyViewModel`) != null && eval(`DigicircMatchmaking.ViewModels.CompanyList.FormControls_CompanyList_FormControlsDefinition_CompanyList_ListControl_SelectedItems_CompanyViewModel._initializeFrom`) != null ) {
                            var _initial = p_FormControls_CompanyList_FormControlsDefinition_CompanyList_ListControl_SelectedItems_CompanyViewModel;
                            p_FormControls_CompanyList_FormControlsDefinition_CompanyList_ListControl_SelectedItems_CompanyViewModel = [];
                            for(var _i = 0; _i < _initial.length; _i++) {
                                var _temp = eval(`DigicircMatchmaking.ViewModels.CompanyList.FormControls_CompanyList_FormControlsDefinition_CompanyList_ListControl_SelectedItems_CompanyViewModel._initializeFrom(_initial[_i])`);
                                p_FormControls_CompanyList_FormControlsDefinition_CompanyList_ListControl_SelectedItems_CompanyViewModel.push(_temp);

                            }
                        }
                        $scope.actions.Delete(p_FormControls_CompanyList_FormControlsDefinition_CompanyList_ListControl_SelectedItems_CompanyViewModel, null, null, e);
                    }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(CompanyListDataValidations);
        window._ruleEngine.addConditionalFormattings(CompanyListConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(CompanyListCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_MasterPage as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("CompanyListController", ["$scope", "$timeout", CompanyListController] as Array<string>);
}
