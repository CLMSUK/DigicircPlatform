// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
$(document).keyup((e) => {
    if (e.which === 13 && Joove.Common.eventPreventsDefaultFormAction(e as JQueryEventObject) === false && !$(e.target).parent().hasClass("search-element")) {
        window._popUpManager.previouslyFocusedElement = document.activeElement;
        $(":focus").blur();
        Joove.Core.getScope().eventCallbacks.ButtonClicked(e);
    }
});
var directiveScopeReadyCounter_NewMap = 1;

var directiveScopeReadyInterval_NewMap = setInterval(() => {
    if (Joove.Common.directiveScopeIsReady($("[jb-id='NewMap']"))) {
        var mapNewMap = Joove.Common.getDirectiveScope($("[jb-id='NewMap']")).map;
        mapNewMap.addMapDataLayerEvent(Joove.Widgets.MapDataLayerEvents.Click,
        "NewMap_Click", (event) => {
            var boundObject = event.feature.getProperty("boundObject");
            window.$actions.TestBubble(boundObject);
            mapNewMap.showRelatedPartialView(event.latLng.lat(), event.latLng.lng());
        });
        clearInterval(directiveScopeReadyInterval_NewMap);
    }

    if (directiveScopeReadyCounter_NewMap > directiveScopeReadyLimit) {
        clearInterval(directiveScopeReadyInterval_NewMap);
    }
    directiveScopeReadyCounter_NewMap++;

}, directiveScopeReadyTimeout);


interface Window { scope_SearchForm: DigicircMatchmaking.Controllers.ISearchFormScope; }
namespace DigicircMatchmaking.Controllers {
const SearchFormConditionalFormattings = [
new Joove.JbRule({
name: "ViewModeConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_SearchForm"].model.Query.SelectedMode, "") == "map";

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "HideOnSimpleSearchConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_SearchForm"].model.Query.AdvanceSearch, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "HideIfCountryIsEmptyConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: true,
evaluatedAtServer: false,
contextControlName: 'Table',

getContext: (indexes) => { var model = window["scope_SearchForm"].model; var parents = []; try { parents.push(Joove.Common.getDirectiveScope($("[jb-id='Table']")).$collection); } catch(e) {
            parents.push({});
        } return parents;
    },
condition: async (_parents) => { return Joove.Common.nullSafe<any>(() => _parents[0].Address, null) != null || Joove.Common.nullSafe<any>(() => _parents[0].Address.Country, null) != null;

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
        ];
const SearchFormDataValidations = [
                                  ];
const SearchFormCalculatedExpressions = [
                                        ];
// Manual Data for SelectedModeOptionButton
window["dataForSelectedModeOptionButton"] = [ {
_key: "offers",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('SearchModeDataset', '0', false , null),
_default: true
}, {
_key: "requests",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('SearchModeDataset', '1', false , null),
_default: false
} ]
// Manual Data for OptionButton
window["dataForOptionButton"] = [ {
_key: "list",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('ViewMode', '1', false , null),
_default: true
}, {
_key: "map",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('ViewMode', '0', false , null),
_default: false
} ]

// Datasets Column Info
export var CountryDataSet_ColumnInfo = [new Joove.ColumnInfo("Name", "string", null, false),
                                        new Joove.ColumnInfo("original", "Country", null, false)];
window["CountryDataSet_ColumnInfo"] = CountryDataSet_ColumnInfo;
export var SectorTypeDataset_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null, false),
           new Joove.ColumnInfo("original", "SectorType", null, false)];
window["SectorTypeDataset_ColumnInfo"] = SectorTypeDataset_ColumnInfo;
export var SearchModeDataset_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null,  true)];
window["SearchModeDataset_ColumnInfo"] = SearchModeDataset_ColumnInfo;
export var MaterialDataSet_ColumnInfo = [new Joove.ColumnInfo("Name", "string", null, false),
           new Joove.ColumnInfo("original", "Material", null, false)];
window["MaterialDataSet_ColumnInfo"] = MaterialDataSet_ColumnInfo;
export var ViewMode_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null,  true)];
window["ViewMode_ColumnInfo"] = ViewMode_ColumnInfo;
export var ActorDataSet1_ColumnInfo = [new Joove.ColumnInfo("Address.Latitude", "double", null, false),
                                       new Joove.ColumnInfo("Address.Longitude", "double", null, false),
                                       new Joove.ColumnInfo("ActorLogo", "FileData", null, false),
                                       new Joove.ColumnInfo("Name", "string", null, false),
                                       new Joove.ColumnInfo("ShortDescription", "string", null, false),
                                       new Joove.ColumnInfo("EntityType.Value", "string", null, false),
                                       new Joove.ColumnInfo("Address.Country.Name", "string", null, false)];
window["ActorDataSet1_ColumnInfo"] = ActorDataSet1_ColumnInfo;
export var ActorsInfoDataSet_ColumnInfo = [new Joove.ColumnInfo("Display", "string", null, false),
           new Joove.ColumnInfo("Count", "int", null, false)];
window["ActorsInfoDataSet_ColumnInfo"] = ActorsInfoDataSet_ColumnInfo;

// Datasets Projection Shemas
window["DropdownCountryDataSet_ProjectionScema"] = {};
window["DropdownBox_ProjectionScema"] = {};

window["TextBox1_ProjectionScema"] = {};

window["NewMap_ProjectionScema"] = {Query:
                                    {SearchQueryKey: ''
                                     , ActorNames:
                                     {Id: ''
                                      , Name:
                                      {}
                                     }
                                     , ShowAllData:
                                     {}
                                    }
                                   };
window["Table_ProjectionScema"] = {Query:
                                   {SearchQueryKey: ''
                                    , ActorNames:
                                    {Id: ''
                                     , Name:
                                     {}
                                    }
                                    , ShowAllData:
                                    {}
                                   }
                                  };
window["Table1_ProjectionScema"] = {};
class PartialViewPartialModelStructure implements IBubblePartialModelStructure {
private _name:
    string;
    constructor($scope, name: string) {
        this._name = name;
    }
    get Actor(): any { return window["scope_Bubble"].model.SelectedActor };
        set Actor(__val: any) {
        window["scope_Bubble"].model.SelectedActor = __val;
    };

}//end class PartialViewPartialModelStructure


export interface ISearchFormScope extends Joove.IWebPageScope {
model:
    DigicircMatchmaking.ViewModels.SearchForm.SearchFormViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class SearchFormController {
private timeoutDelayLockButtonClicked:
    any;
private timeoutDelayLockButton2Clicked:
    any;
private timeoutDelayLockDropdownCountryDataSetOnChange:
    any;
private timeoutDelayLockDropdownBoxOnChange:
    any;
private timeoutDelayLockTextBox1OnChange:
    any;
private timeoutDelayLockOptionButtonOnChange:
    any;
private timeoutDelayLockNewMapClicked:
    any;
private timeoutDelayLockRow11Clicked:
    any;
private timeoutDelayLockIcon1Clicked:
    any;
private timeoutDelayLockIconClicked:
    any;
private timeoutDelayLocklblDisplayClicked:
    any;
private timeoutDelayLocklblCountClicked:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_SearchForm.model = window.scope_SearchForm.dehydrate();
        //window.scope_MasterPage.model = window.scope_SearchForm.model;
        DigicircMatchmaking.ViewModels.SearchForm.SearchFormViewModel._lightCast(window.scope_SearchForm.model);
        // Joove.Common.applyScope(window.scope_SearchForm);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: ISearchFormScope, $timeout: ng.ITimeoutService) {
        window.scope_SearchForm = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DigicircMatchmaking.ViewModels.SearchForm.SearchFormViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_MasterPage._validations;
        $scope._validations = { summary:
                                [],
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: ISearchFormScope, $timeout: ng.ITimeoutService) {


        $scope.model = DigicircMatchmaking.ViewModels.SearchForm.SearchFormViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_MasterPage.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);




        //}

        $.connection['eventsHub'].on('__connectedEvent', () => { });

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start().then(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
        }
// Dataset Handler
        $scope.datasets = {
        };
// Controller actions
        $scope.actions = {
Index:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("SearchForm", "Index", "GET", [], {}, _modalOptions);
            },
FromBack:
            async (id, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("SearchForm", "FromBack", "GET", [id], {}, _modalOptions);
            },
ChangeMode:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'SearchForm', action: 'ChangeMode',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
TestBubble:
            async (actor, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    window["scope_SearchForm"].model.SelectedActor = actor;


                    // Joove.Common.applyScope(window.scope_SearchForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
Search:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'SearchForm', action: 'Search',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
SearchGraph:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'SearchForm', action: 'SearchGraph',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
NewSearch:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'SearchForm', action: 'NewSearch',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
Refresh:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    Joove.Common.nullSafe<any>(() => window._commander.gridRefresh(["Table"]), null);

                    eval("setTimeout(function(){_commander.gridGotoFirstPage(['Table']);},50);");

                    eval("setTimeout(function(){ window._commander.imageRefresh(['lblLogods']) }, 200);");


                    // Joove.Common.applyScope(window.scope_SearchForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
Reset:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'SearchForm', action: 'Reset',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
Action:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {

                    // Joove.Common.applyScope(window.scope_SearchForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
GoToActorForm:
            async (id, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    eval("_commander.gridSaveState(['Table']);");

                    Joove.Common.nullSafe<any>(() => Joove.Core.executeRedirectControllerAction("ActorViewForm", "Show", "GET", [id, false], {}, _modalOptions), null);


                    // Joove.Common.applyScope(window.scope_SearchForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
        };
//Partial Bubble Event Listeners
        $scope.events.Bubble = {
        };
        $scope.expressions.Bubble = {
        }
// Partial Bubble Dataset Handler
        $scope.datasets.Bubble = {
        };
//Partial Bubble actions
        $scope.actions.Bubble = {
RedirectToActorForm:
            async (_partialControlName, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    Joove.Common.nullSafe<any>(() => Joove.Core.executeRedirectControllerAction("ActorViewForm", "Show", "GET", [Joove.Common.nullSafe<any>(() => window["scope_Bubble"]._partialModelStructure[_partialControlName].Actor.Id, 0), false], {}, _modalOptions), null);


                    // Joove.Common.applyScope(window.scope_SearchForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(true);
            },
Close:
            async (_partialControlName, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    eval("$(\"[jb-type='PartialView'][jb-partial-name='Bubble']\").hide()");


                    // Joove.Common.applyScope(window.scope_SearchForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(false);
            },
        };
// Events
        $scope.eventCallbacks = {
ButtonClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButtonClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButtonClicked);
                }

                this.timeoutDelayLockButtonClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.NewSearch(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Button2Clicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton2Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton2Clicked);
                }

                this.timeoutDelayLockButton2Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Reset(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

DropdownCountryDataSetOnChange:
            (e, DataItem, _parents) => {



                if (this.timeoutDelayLockDropdownCountryDataSetOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLockDropdownCountryDataSetOnChange);
                }

                this.timeoutDelayLockDropdownCountryDataSetOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, true);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, true);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.NewSearch(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

DropdownBoxOnChange:
            (e, DataItem, _parents) => {



                if (this.timeoutDelayLockDropdownBoxOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLockDropdownBoxOnChange);
                }

                this.timeoutDelayLockDropdownBoxOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, true);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, true);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.NewSearch(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

TextBox1OnChange:
            (e, DataItem, _parents) => {



                if (this.timeoutDelayLockTextBox1OnChange != null) {
                    $timeout.cancel(this.timeoutDelayLockTextBox1OnChange);
                }

                this.timeoutDelayLockTextBox1OnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.NewSearch(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

OptionButtonOnChange:
            (e, DataItem, _parents) => {



                if (this.timeoutDelayLockOptionButtonOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLockOptionButtonOnChange);
                }

                this.timeoutDelayLockOptionButtonOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, true);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, true);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.ChangeMode(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },


Row11Clicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockRow11Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockRow11Clicked);
                }

                this.timeoutDelayLockRow11Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.GoToActorForm(Joove.Common.nullSafe<any>(() => _parents[0].Id, 0), null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Icon1Clicked:
            (e: any): any => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }
                const name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                window._commander.showModal(name + 'ActorsDataModal');
            },

IconClicked:
            (e: any): any => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }
                const name = Joove.Core.getPartialOwnerControlElementId($(e.currentTarget)) || '';
                window._commander.hideModal(name + 'ActorsDataModal');
            },

lblDisplayClicked:
            (e: any): any => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                var $element = $(e.target);
                var targetProp = $element.attr('joove-ds-sort-OnClick');

                Joove.DatasourceManager.sortControlsBoundToDataSet('ActorsInfoDataSet', targetProp, e);
            },

lblCountClicked:
            (e: any): any => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                var $element = $(e.target);
                var targetProp = $element.attr('joove-ds-sort-OnClick');

                Joove.DatasourceManager.sortControlsBoundToDataSet('ActorsInfoDataSet', targetProp, e);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(SearchFormDataValidations);
        window._ruleEngine.addConditionalFormattings(SearchFormConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(SearchFormCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];
        new DigicircMatchmaking.Controllers.BubbleController({
'PartialView': new PartialViewPartialModelStructure($scope, 'PartialView'),

        }).IncludePartialMethods($scope, ["PartialView"], $timeout);

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_MasterPage as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("SearchFormController", ["$scope", "$timeout", SearchFormController] as Array<string>);
}
