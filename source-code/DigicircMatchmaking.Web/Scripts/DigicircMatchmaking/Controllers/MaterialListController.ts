// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
window.onbeforeunload = (e) => {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg;     // Gecko, Trident, Chrome 34+
        return msg;
    }
};
interface Window { scope_MaterialList: DigicircMatchmaking.Controllers.IMaterialListScope; }
namespace DigicircMatchmaking.Controllers {
const MaterialListConditionalFormattings = [
        ];
export var MaterialList_MaterialList_ConditionalFormattings = {
ConditionalFormattingConditional:
    {
'forRow':
        {
'whenTrue':
['ApplyCssClass|not-commited'], 'whenFalse':
            ['ApplyCssClass|commited']
        },
'forColumns':
        {

        }
    },
};
const MaterialListDataValidations = [
                                    ];
const MaterialListCalculatedExpressions = [
        ];

// Datasets Column Info
var MaterialList_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Name",
caption: window._resourcesManager.getDataListColumnCaption("MaterialList", "Name", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 2147483647,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Type.Name",
caption: window._resourcesManager.getDataListColumnCaption("MaterialList", "Type.Name", false),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "bool",
dataTypeIsEnum: false,
name: "PendingGraph",
caption: window._resourcesManager.getDataListColumnCaption("MaterialList", "PendingGraph", false),
groupable: true,
searchable: true,
visible: false,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "int",
dataTypeIsEnum: false,
name: "Id",
caption: window._resourcesManager.getDataListColumnCaption("MaterialList", "Id", false),
groupable: true,
searchable: true,
visible: false,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "bool",
dataTypeIsEnum: false,
name: "IsHazardous",
caption: window._resourcesManager.getDataListColumnCaption("MaterialList", "IsHazardous", false),
groupable: true,
searchable: true,
visible: false,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Description",
caption: window._resourcesManager.getDataListColumnCaption("MaterialList", "Description", false),
groupable: true,
searchable: true,
visible: false,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 2147483647,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "HsSpecific",
caption: window._resourcesManager.getDataListColumnCaption("MaterialList", "HsSpecific", false),
groupable: true,
searchable: true,
visible: false,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 2147483647,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["MaterialList_ColumnInfo"] = MaterialList_ColumnInfo;

// Datasets Projection Shemas
window["MaterialList_ProjectionScema"] = {};


export interface IMaterialListScope extends Joove.IWebPageScope {
model:
    DigicircMatchmaking.ViewModels.MaterialList.MaterialListViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class MaterialListController {
private timeoutDelayLockAddNewClicked:
    any;
private timeoutDelayLockModifyClicked:
    any;
private timeoutDelayLockSendToGraphClicked:
    any;
private timeoutDelayLockResetAllMenuItemClicked:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_MaterialList.model = window.scope_MaterialList.dehydrate();
        //window.scope_SymbiosisMasterPage.model = window.scope_MaterialList.model;
        DigicircMatchmaking.ViewModels.MaterialList.MaterialListViewModel._lightCast(window.scope_MaterialList.model);
        // Joove.Common.applyScope(window.scope_MaterialList);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IMaterialListScope, $timeout: ng.ITimeoutService) {
        window.scope_MaterialList = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DigicircMatchmaking.ViewModels.MaterialList.MaterialListViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_SymbiosisMasterPage._validations;
        $scope._validations = { summary:
                                [],
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: IMaterialListScope, $timeout: ng.ITimeoutService) {


        $scope.model = DigicircMatchmaking.ViewModels.MaterialList.MaterialListViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_SymbiosisMasterPage.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);




        //}

        $.connection['eventsHub'].on('__connectedEvent', () => { });

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start().then(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
        }
// Dataset Handler
        $scope.datasets = {
        };
// Controller actions
        $scope.actions = {
Index:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("MaterialList", "", "GET", [], {}, _modalOptions);
            },
SendToGraph:
            async (materials, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'MaterialList', action: 'SendToGraph',
queryData: [], postData: {'model': $scope.model, 'materials': materials},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
ResetAll:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'MaterialList', action: 'ResetAll',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
        };
// Events
        $scope.eventCallbacks = {
AddNewClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockAddNewClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockAddNewClicked);
                }

                this.timeoutDelayLockAddNewClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("MaterialForm", "Add", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ModifyClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockModifyClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockModifyClicked);
                }

                this.timeoutDelayLockModifyClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("MaterialForm", "Edit", "GET", [Joove.Common.nullSafe<any>(() => Joove.DatasourceManager.getSelectedItem($("[jb-id='MaterialList']"), e).Id, 0)], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

SendToGraphClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockSendToGraphClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockSendToGraphClicked);
                }

                this.timeoutDelayLockSendToGraphClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {

                        var p_FormControls_MaterialList_FormControlsDefinition_MaterialList_ListControl_SelectedItems_MaterialViewModel = Joove.Common.nullSafe<any>(() => Joove.DatasourceManager.getSelectedItems($("[jb-id='MaterialList']"), e), null);
                        if( eval(`DigicircMatchmaking.ViewModels.MaterialList.FormControls_MaterialList_FormControlsDefinition_MaterialList_ListControl_SelectedItems_MaterialViewModel`) != null && eval(`DigicircMatchmaking.ViewModels.MaterialList.FormControls_MaterialList_FormControlsDefinition_MaterialList_ListControl_SelectedItems_MaterialViewModel._initializeFrom`) != null ) {
                            var _initial = p_FormControls_MaterialList_FormControlsDefinition_MaterialList_ListControl_SelectedItems_MaterialViewModel;
                            p_FormControls_MaterialList_FormControlsDefinition_MaterialList_ListControl_SelectedItems_MaterialViewModel = [];
                            for(var _i = 0; _i < _initial.length; _i++) {
                                var _temp = eval(`DigicircMatchmaking.ViewModels.MaterialList.FormControls_MaterialList_FormControlsDefinition_MaterialList_ListControl_SelectedItems_MaterialViewModel._initializeFrom(_initial[_i])`);
                                p_FormControls_MaterialList_FormControlsDefinition_MaterialList_ListControl_SelectedItems_MaterialViewModel.push(_temp);

                            }
                        }
                        $scope.actions.SendToGraph(p_FormControls_MaterialList_FormControlsDefinition_MaterialList_ListControl_SelectedItems_MaterialViewModel, null, null, e);
                    }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ResetAllMenuItemClicked:
            (e, DataItem, _parents) => {


                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockResetAllMenuItemClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockResetAllMenuItemClicked);
                }

                this.timeoutDelayLockResetAllMenuItemClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.ResetAll(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(MaterialListDataValidations);
        window._ruleEngine.addConditionalFormattings(MaterialListConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(MaterialListCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_SymbiosisMasterPage as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("MaterialListController", ["$scope", "$timeout", MaterialListController] as Array<string>);
}
