// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using AppCode;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.DAL.Queries;
using DigicircMatchmaking.UI.ViewModels.ManageActors;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DigicircMatchmaking.UI.Controllers.ManageActors
{

    [RoutePrefix("ManageActors")]
    public class ManageActorsController : ControllerBase<ManageActorsViewModel, ManageActorsViewModelDTO>
    {

        /*<Form:ManageActors:0/>*/
        public ManageActorsController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(ManageActorsController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DigicircMatchmaking.UI.ViewModels.MasterPage.MasterPageViewModel
            {
                Title = model.Title, AnalyticsId = model.AnalyticsId
            };
            _parentController = new MasterPage.MasterPageController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public ManageActorsController SetModel(ManageActorsViewModel m)
        {
            @model = m;
            return this;
        }


        public override void CommitAllFiles()
        {
            GetPartialController("PartialView")?.CommitAllFiles();
            FileHelper.PendingUploadInstance.CommitAllFilesNew("ManageActors", @model);
        }

        public override void CommitAllFilesLegacy()
        {
            GetPartialController("PartialView")?.CommitAllFilesLegacy();
        }

        public override void ClearPendingFiles()
        {
            GetPartialController("PartialView")?.ClearPendingFiles();
            FileHelper.PendingUploadInstance.Clear("ManageActors");
        }




        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(ManageActorsViewModel),new [] { typeof(ManageActorsViewModel),typeof(ViewModels.ActorsToAdministrators.ActorsToAdministratorsViewModel) });
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }

        [HttpGet]
        [Route("DownloadFile")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "DownloadFile")]
        public FileContentResult DownloadFile(string id)
        {
            return FileHelper.PendingDownloadInstance.DownloadByKey("ManageActors", id);
        }

        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "DownloadFileByPath")]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }




        protected override CustomControllerBase GetPartialController(string partialControlName)
        {
            var _ActorsToAdministrators = GetActorsToAdministratorsController(partialControlName, false);
            if (_ActorsToAdministrators != null) return _ActorsToAdministrators;
            return null;
        }
        private ActorsToAdministrators.ActorsToAdministratorsController GetActorsToAdministratorsController(string partialControlName, bool throwIfNotFound = true)
        {
            ViewModels.ActorsToAdministrators.ActorsToAdministratorsViewModel partialsModel = null;
            switch (partialControlName)
            {
            case "PartialView":
                partialsModel = new ViewModels.ActorsToAdministrators.ActorsToAdministratorsViewModel
                {
                    Actor = @model.SelectedActor,
                    PickListSelectedItems = @model.PartialViewPickListSelectedItems
                };
                break;
            default:
                if (throwIfNotFound) throw new Exception($"Partial control '{partialControlName}' not found");
                return null;
            }
            var partialController = new ActorsToAdministrators.ActorsToAdministratorsController();
            partialController.__PartialControlName = partialControlName;
            partialController.SetModel(partialsModel);
            partialController.ControllerContext = this.ControllerContext;
            return partialController;
        }
        private Action<ManageActorsViewModel, ViewModels.ActorsToAdministrators.ActorsToAdministratorsViewModel> GetActorsToAdministratorsTransformer(string partialControlName, bool throwIfNotFound = true)
        {
            switch (partialControlName)
            {
            case "PartialView":
                return (model, partial_model) =>
                {
                    model.SelectedActor = partial_model.Actor;
                };
                break;
            default:
                if (throwIfNotFound) throw new Exception($"Partial control '{partialControlName}' not found");
                return null;
            }
        }
        #region Partial Views Actions
        [CustomControllerActionFilter(ActionName="ActorsToAdministrators", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("_API_ActorsToAdministrators")]
        public ActionResult _API_ActorsToAdministrators(string controlName, string actionName)

        {
            var _data = _LoadViewModel();
            if (!_redirectionFromSameController)
            {
                controlName = DeserializeViewModelProperty<string>(_data["controlName"] as Newtonsoft.Json.Linq.JValue);
                actionName = DeserializeViewModelProperty<string>(_data["actionName"] as Newtonsoft.Json.Linq.JValue);
            }
            var partialController = GetActorsToAdministratorsController(controlName);
            ActionResult redirectInfo = null;
            switch (actionName)
            {
            case "Add":
            {
                var user = DeserializeViewModelProperty<DigicircMatchmaking.BO.DigicircUser, UI.ViewModels.ActorsToAdministrators.DigicircUserDTO>(_data["user"].ToString());
                redirectInfo = partialController.ExecuteAdd(user);
            }
            break;
            default:
                throw new Exception($"Partial view 'ActorsToAdministrators' does not have an action named '{actionName}'");
            }
            viewDTO.ClientCommands = partialController.viewDTO.ClientCommands;
            var copyTo = GetActorsToAdministratorsTransformer(controlName);
            copyTo?.Invoke(model, partialController.GetModel());
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="ActorsToAdministrators", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("ActorsToAdministrators")]
        public ActionResult ActorsToAdministrators(string controlName, string actionName)

        {
            var _data = _LoadViewModel();
            if (!_redirectionFromSameController)
            {
                controlName = DeserializeViewModelProperty<string>(_data["controlName"] as Newtonsoft.Json.Linq.JValue);
                actionName = DeserializeViewModelProperty<string>(_data["actionName"] as Newtonsoft.Json.Linq.JValue);
            }
            var partialController = GetActorsToAdministratorsController(controlName);
            ActionResult redirectInfo = null;
            switch (actionName)
            {
            case "Add":
            {
                var user = DeserializeViewModelProperty<DigicircMatchmaking.BO.DigicircUser, UI.ViewModels.ActorsToAdministrators.DigicircUserDTO>(_data["user"].ToString());
                redirectInfo = partialController.ExecuteAdd(user);
            }
            break;
            default:
                throw new Exception($"Partial view 'ActorsToAdministrators' does not have an action named '{actionName}'");
            }
            viewDTO.ClientCommands = partialController.viewDTO.ClientCommands;
            var copyTo = GetActorsToAdministratorsTransformer(controlName);
            copyTo?.Invoke(model, partialController.GetModel());
            return redirectInfo;
        }

        #endregion
        #region Controller Actions
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="Index", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("Index")]
        public ActionResult Index()

        {
            @model = new ManageActorsViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_ManageActors"] = "Index";
            FileHelper.PendingUploadInstance.Clear("ManageActors");
            FileHelper.PendingDownloadInstance.Clear("ManageActors");
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="Index", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_Index")]
        public ActionResult _API_Index()

        {
            @model = new ManageActorsViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_ManageActors"] = "Index";
            PushToHistory();
            FileHelper.PendingUploadInstance.Clear("ManageActors");
            FileHelper.PendingDownloadInstance.Clear("ManageActors");
            var _masterController = new DigicircMatchmaking.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteIndex();
            return redirectInfo;
        }


        [CustomControllerActionFilter(ActionName="EsSync", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("EsSync")]
        public ActionResult EsSync()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteEsSync();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="KnowledgeSync", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("KnowledgeSync")]
        public ActionResult KnowledgeSync()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteKnowledgeSync();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="SaveActor", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SaveActor")]
        public ActionResult SaveActor()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteSaveActor();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="SelectUsers", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SelectUsers")]
        public ActionResult SelectUsers(DigicircMatchmaking.BO.Actor actor)

        {
            var _data = _LoadViewModel();
            if (!_redirectionFromSameController)
            {
                actor = DeserializeViewModelProperty<DigicircMatchmaking.BO.Actor, ViewModels.ManageActors.ActorDTO>(_data["actor"].ToString());
            }
            var redirectInfo = ExecuteSelectUsers(actor);
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:Index:1/>*/
        public ActionResult ExecuteIndex()
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DigicircMatchmaking.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = BaseViewPage<string>.GetResourceValue("ManageActors", "RES_PAGETITLE_Index").ToString();
            return _result;
        }
        /*<ControllerActionImplementation:EsSync:1/>*/
        public ActionResult ExecuteEsSync()
        {
            ActionResult _result = null;
            System.Collections.Generic.List<DigicircMatchmaking.BO.Actor> actors = new DigicircMatchmaking.DAL.Repository().GetAll<DigicircMatchmaking.BO.Actor>();
            try
            {
                foreach (var actor in actors ?? Enumerable.Empty<DigicircMatchmaking.BO.Actor>())
                {
                    string response = DigicircMatchmaking.BO.ElasticDocExtensions.SendActorDoc(actor);
                    zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "ManageActors", DigicircMatchmaking.Hubs.EventsHub.RaiseDebugMessage, "response elastic " + response);
                }
                ClientCommand(ClientCommands.SHOW_MESSAGE, "Successfully synchronized actors");
            }
            catch (System.Exception x)
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Error, "ManageActors", DigicircMatchmaking.Hubs.EventsHub.RaiseDebugMessage, x);
                ClientCommand(ClientCommands.SHOW_MESSAGE, "Something went wrong.", MessageType.Error);
                return null;
            }
            return _result;
        }
        /*<ControllerActionImplementation:KnowledgeSync:1/>*/
        public ActionResult ExecuteKnowledgeSync()
        {
            ActionResult _result = null;
            System.Collections.Generic.List<DigicircMatchmaking.BO.Actor> actors = new DigicircMatchmaking.DAL.Repository().GetAll<DigicircMatchmaking.BO.Actor>();
            try
            {
                foreach (var actor in actors ?? Enumerable.Empty<DigicircMatchmaking.BO.Actor>())
                {
                    DigicircMatchmaking.BO.ActorBackendExtensions.CreateKnowledgeActor(actor);
                }
                ClientCommand(ClientCommands.SHOW_MESSAGE, "Successfully synchronized actors");
            }
            catch (System.Exception x)
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Error, "ManageActors", DigicircMatchmaking.Hubs.EventsHub.RaiseDebugMessage, x);
                ClientCommand(ClientCommands.SHOW_MESSAGE, "Something went wrong.", MessageType.Error);
                return null;
            }
            return _result;
        }
        /*<ControllerActionImplementation:SaveActor:1/>*/
        public ActionResult ExecuteSaveActor()
        {
            ActionResult _result = null;
            System.Collections.Generic.List<DigicircMatchmaking.BO.DigicircUser> adminlist = @model.SelectedActor?.Administrators;
            DigicircMatchmaking.BO.Actor dbActor = @model.SelectedActor;
            zAppDev.DotNet.Framework.Data.MiniSessionManager.Instance.Session.Refresh(dbActor);
            dbActor.Administrators = adminlist.ToList();
            new DigicircMatchmaking.DAL.Repository().Save<DigicircMatchmaking.BO.Actor>(dbActor);
            ClientCommand(ClientCommands.HIDE_MODAL, $"Modal");
            return _result;
        }
        /*<ControllerActionImplementation:SelectUsers:1/>*/
        public ActionResult ExecuteSelectUsers(DigicircMatchmaking.BO.Actor actor)
        {
            ActionResult _result = null;
            zAppDev.DotNet.Framework.Data.MiniSessionManager.Instance.Session.Refresh(actor);
            @model.SelectedActor = actor;
            ClientCommand(ClientCommands.SHOW_MODAL, $"Modal");
            return _result;
        }
        #endregion
        #region Datasource controls
        /*<Datasource:Table:1/>*/
        /*<DataSourceFilter:Table:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Actor> Get_Table_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_Table_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Actor> Get_Table_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Actor>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:Table:1/>*/

        [HttpPost]
        [Route("Table_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult Table_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_Table_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ActorDataSet_ActorDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ManageActorsViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "Table");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:Table:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("Table_Datasource")]
        public JsonResult Table_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_Table_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_Table_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_Table_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_Table_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.ToList().Select(i => new ActorDataSet_ActorDTO(i, true)).ToList();
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ActorDataSet"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ActorDataSet", response.Data);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ActorDataSet", response.Data);
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:ManageActors_ActorDataSet:1/>*/
        /*<DataSourceFilter:ManageActors_ActorDataSet:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Actor> Get_ManageActors_ActorDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ManageActors_ActorDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Actor> Get_ManageActors_ActorDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Actor>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:ManageActors_ActorDataSet:1/>*/

        [HttpPost]
        [Route("ManageActors_ActorDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ManageActors_ActorDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ManageActors_ActorDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ActorDataSet_ActorDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ManageActorsViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "ManageActors_ActorDataSet");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ManageActors_ActorDataSet:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("ManageActors_ActorDataSet_Datasource")]
        public JsonResult ManageActors_ActorDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ManageActors_ActorDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ManageActors_ActorDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ManageActors_ActorDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ManageActors_ActorDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.Actor>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:ManageActors_DigicircUserDataSet:1/>*/
        /*<DataSourceFilter:ManageActors_DigicircUserDataSet:2/>*/
        public IQueryable<DigicircMatchmaking.BO.DigicircUser> Get_ManageActors_DigicircUserDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ManageActors_DigicircUserDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.DigicircUser> Get_ManageActors_DigicircUserDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.DigicircUser>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:ManageActors_DigicircUserDataSet:1/>*/

        [HttpPost]
        [Route("ManageActors_DigicircUserDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "DigicircUserDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ManageActors_DigicircUserDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ManageActors_DigicircUserDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new DigicircUserDataSet_DigicircUserDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ManageActorsViewModel), dataType, items.Select(i => i.UserName.ToString()).ToList(), "ManageActors_DigicircUserDataSet");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ManageActors_DigicircUserDataSet:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "DigicircUserDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("ManageActors_DigicircUserDataSet_Datasource")]
        public JsonResult ManageActors_DigicircUserDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ManageActors_DigicircUserDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ManageActors_DigicircUserDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ManageActors_DigicircUserDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ManageActors_DigicircUserDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.DigicircUser>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.UserName, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        #endregion

        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new ManageActorsViewModelDTO(@model);
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("ManageActors");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult(List<string> groupsToCheck = null)
        {
            try
            {
                RunDataValidations(groupsToCheck);
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: ManageActors, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations(List<string> groupsToCheck = null)
        {
            var masterPageDataValidations = (_parentController as Controllers.MasterPage.MasterPageController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }

        #endregion
    }
}
