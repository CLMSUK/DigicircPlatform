// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using AppCode;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.DAL.Queries;
using DigicircMatchmaking.UI.ViewModels.GraphQueryDebug;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DigicircMatchmaking.UI.Controllers.GraphQueryDebug
{

    [RoutePrefix("GraphQueryDebug")]
    public class GraphQueryDebugController : ControllerBase<GraphQueryDebugViewModel, GraphQueryDebugViewModelDTO>
    {

        /*<Form:GraphQueryDebug:0/>*/
        public GraphQueryDebugController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(GraphQueryDebugController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DigicircMatchmaking.UI.ViewModels.MasterPage.MasterPageViewModel
            {
                Title = model.Title, AnalyticsId = model.AnalyticsId
            };
            _parentController = new MasterPage.MasterPageController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public GraphQueryDebugController SetModel(GraphQueryDebugViewModel m)
        {
            @model = m;
            return this;
        }


        public override void CommitAllFiles()
        {
        }

        public override void CommitAllFilesLegacy()
        {
        }

        public override void ClearPendingFiles()
        {
        }




        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(GraphQueryDebugViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }

        [HttpGet]
        [Route("DownloadFile")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "DownloadFile")]
        public FileContentResult DownloadFile(string id)
        {
            return FileHelper.PendingDownloadInstance.DownloadByKey("GraphQueryDebug", id);
        }

        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "DownloadFileByPath")]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }


        [Route("SaveListView")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult SaveListView()
        {
            var postedData = _ParsePostedData();
            return SaveListView(postedData, "GraphQueryDebug");
        }


        [Route("DeleteListView")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult DeleteListView()
        {
            var postedData = _ParsePostedData();
            return DeleteListView(postedData, "GraphQueryDebug");
        }


        [Route("LoadListViews")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult LoadListViews()
        {
            var postedData = _ParsePostedData();
            return LoadListViews(postedData, "GraphQueryDebug");
        }



        #region Controller Actions
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="Index", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("Index")]
        public ActionResult Index()

        {
            @model = new GraphQueryDebugViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_GraphQueryDebug"] = "Index";
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="Index", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_Index")]
        public ActionResult _API_Index()

        {
            @model = new GraphQueryDebugViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_GraphQueryDebug"] = "Index";
            PushToHistory();
            var _masterController = new DigicircMatchmaking.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteIndex();
            return redirectInfo;
        }


        [CustomControllerActionFilter(ActionName="Search", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Search")]
        public ActionResult Search()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteSearch();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="SearchExtend", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SearchExtend")]
        public ActionResult SearchExtend()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteSearchExtend();
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:Index:1/>*/
        public ActionResult ExecuteIndex()
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DigicircMatchmaking.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = BaseViewPage<string>.GetResourceValue("GraphQueryDebug", "RES_PAGETITLE_Index").ToString();
            @model.Info.Query = "Germany";
            @model.Info.Result = new DigicircMatchmaking.BO.GraphBackendResponse();
            @model.Info.RawResult = "Click search...";
            _result = this.ExecuteSearch();
            return _result;
        }
        /*<ControllerActionImplementation:Search:1/>*/
        public ActionResult ExecuteSearch()
        {
            ActionResult _result = null;
            DigicircMatchmaking.BO.GraphBackendResponse response = DigicircMatchmaking.BO.GraphQueriesExtensions.Query((@model.Info?.Query ?? ""));
            if ((response != null))
            {
                @model.Info.Result = response;
            }
            @model.Info.RawResult = DigicircMatchmaking.BO.GraphQueriesExtensions.RawQuery((@model.Info?.Query ?? ""));
            ClientCommand(ClientCommands.DATALIST_REFRESH, "ListLinks");
            ClientCommand(ClientCommands.DATALIST_REFRESH, "ListNodes");
            return _result;
        }
        /*<ControllerActionImplementation:SearchExtend:1/>*/
        public ActionResult ExecuteSearchExtend()
        {
            ActionResult _result = null;
            System.Collections.Generic.List<DigicircMatchmaking.BO.ExElements> q = new System.Collections.Generic.List<DigicircMatchmaking.BO.ExElements>();
            DigicircMatchmaking.BO.ExElements countryClause = new DigicircMatchmaking.BO.ExElements();
            countryClause.Type = "Country";
            countryClause.Name = @model.CountryName;
            DigicircMatchmaking.BO.ExElements clause = new DigicircMatchmaking.BO.ExElements();
            clause.Type = "*";
            clause.Name = (@model.Info?.Query ?? "");
            q?.Add(countryClause);
            q?.Add(clause);
            DigicircMatchmaking.BO.GraphBackendResponse response = DigicircMatchmaking.BO.GraphQueriesExtensions.ExtenedQuery(q);
            if ((response != null))
            {
                @model.Info.Result = response;
            }
            @model.Info.RawResult = DigicircMatchmaking.BO.GraphQueriesExtensions.RawExtenedQuery(q);
            ClientCommand(ClientCommands.DATALIST_REFRESH, "ListLinks");
            ClientCommand(ClientCommands.DATALIST_REFRESH, "ListNodes");
            return _result;
        }
        #endregion
        #region Datasource controls
        /*<Datasource:TextBox1:1/>*/
        /*<DataSourceFilter:TextBox1:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Country> Get_TextBox1_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_TextBox1_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Country> Get_TextBox1_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Country>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:TextBox1:1/>*/

        [HttpPost]
        [Route("TextBox1_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "CountryDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult TextBox1_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_TextBox1_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new CountryDataSet_CountryDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(GraphQueryDebugViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "TextBox1");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:TextBox1:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "CountryDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("TextBox1_Datasource")]
        public JsonResult TextBox1_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_TextBox1_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_TextBox1_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_TextBox1_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_TextBox1_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.ToList().Select(i => new CountryDataSet_CountryDTO(i, true)).ToList();
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:ListNodes:1/>*/
        /*<DataSourceFilter:ListNodes:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Nodes> Get_ListNodes_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ListNodes_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Nodes> Get_ListNodes_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.Info?.Result?.Nodes?.AsQueryable();
            if (__items == null) return new List<DigicircMatchmaking.BO.Nodes>().AsQueryable();
            return __items.Where(@this => @this.RL >= 0);
        }


        /*<DataSourceGetFullRecordset:ListNodes:1/>*/

        [HttpPost]
        [Route("ListNodes_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GetAllNodes", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ListNodes_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ListNodes_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new GetAllNodes_NodesDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(GraphQueryDebugViewModel), dataType, items.Select(i => i.NodesKey.ToString()).ToList(), "ListNodes");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ListNodes:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GetAllNodes", ClaimType = ClaimTypes.Dataset)]
        [Route("ListNodes_Datasource")]
        public JsonResult ListNodes_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ListNodes_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ListNodes_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ListNodes_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ListNodes_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.NodesKey, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => new GetAllNodes_NodesDTO(i, true)).ToList();
                response.Groups = groups;
                ListNodes_GetClientKeysAsGroupIDs(groups);
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => new GetAllNodes_NodesDTO(i, true)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        private void ListNodes_GetClientKeysAsGroupIDs(GroupTree<DigicircMatchmaking.BO.Nodes> group)
        {
            if (group.UniqueItemKeys?.Any() == true)
            {
                group.UniqueItemKeys = new List<object>();
                foreach (var item in group.Items)
                {
                    var foundItem = new GetAllNodes_NodesDTO(item, true);
                    group.UniqueItemKeys.Add(foundItem._key);
                }
            }
            foreach (var subGroup in group.SubGroups)
                ListNodes_GetClientKeysAsGroupIDs(subGroup);
        }

        /*<DataSourceAggregators:ListNodes:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GetAllNodes", ClaimType = ClaimTypes.Dataset)]
        [Route("ListNodes_DatasourceAggregators")]
        public JsonResult ListNodes_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ListNodes_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var comparer = StringComparer.InvariantCultureIgnoreCase;
            var formattings = new Dictionary<string, string>(comparer);
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.NodesKey, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DigicircMatchmaking.BO.Nodes>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            string __data = Serialize(aggregatorsResponse);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }




        [Route("ListNodes_ExportV2")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult ListNodes_ExportV2()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var exportOptions = Utilities.Deserialize<ExportOptionsV2>(postedData["exportData"]?.ToString());
            var aggregatorsInfo = DeserializeAggregatorsRequest<DigicircMatchmaking.BO.Nodes>(postedData["aggregatorsRequest"]?.ToString());
            var downloadKey = ListNodes_ExportV2Implementation(datasourceRequest, exportOptions, aggregatorsInfo);
            string __data = downloadKey;
            var __result = Json(new
            {
                Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        [NonAction]
        public string ListNodes_ExportV2Implementation(DatasourceRequest datasourceRequest,
                ExportOptionsV2 exportOptions, List<AggregatorInfo<DigicircMatchmaking.BO.Nodes>> aggregatorsInfo,
                Func<MigraDoc.DocumentObjectModel.Document, MigraDoc.DocumentObjectModel.Tables.Table, object> _pdfOvverideFunction = null,
                Func<OfficeOpenXml.ExcelPackage, object> _excelOverrideFunction = null)
        {
            var watch = System.Diagnostics.Stopwatch.StartNew();
            long elapsedMilliseconds = 0;
            switch (exportOptions.Range)
            {
            case ExportHelper.Range.ALL:
                datasourceRequest.StartRow = 0;
                datasourceRequest.PageSize = int.MaxValue;
                break;
            case ExportHelper.Range.TOP100:
                datasourceRequest.StartRow = 0;
                datasourceRequest.PageSize = 100;
                break;
            }
            var queryable = Get_ListNodes_DatasourceQueryable(datasourceRequest);
            var comparer = StringComparer.InvariantCultureIgnoreCase;
            var formattings = new Dictionary<string, string>(comparer);
            var path = "";
            var exportHelper = new ExportHelperV2<DigicircMatchmaking.BO.Nodes>(exportOptions, new Dictionary<string, Func<DigicircMatchmaking.BO.Nodes, object>>
            {
                {"Name" , item => item?.Name }, {"LabelType" , item => item?.LabelType }, {"Label" , item => item?.Label }, {"CC" , item => item?.CC }, {"IA" , item => item?.IA }, {"Attr" , item => item?.Attr }, {"Id" , item => item?.Id }, {"Graphid" , item => item?.Graphid }, {"SL" , item => item?.SL }, {"AL" , item => item?.AL }, {"CL" , item => item?.CL }, {"RL" , item => item?.RL }, {"AC" , item => item?.AC },
            });
            if (exportHelper.Options.ColumnInfo == null)
            {
                exportHelper.Options.ColumnInfo = new List<ColumnOptionsV2>
                {
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListNodes_COLUMN_Name"), Formatting = "", Name = "Name", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListNodes_COLUMN_LabelType"), Formatting = "", Name = "LabelType", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListNodes_COLUMN_Label"), Formatting = "", Name = "Label", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListNodes_COLUMN_CC"), Formatting = "", Name = "CC", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListNodes_COLUMN_IA"), Formatting = "", Name = "IA", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListNodes_COLUMN_Attr"), Formatting = "", Name = "Attr", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListNodes_COLUMN_Id"), Formatting = "", Name = "Id", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListNodes_COLUMN_Graphid"), Formatting = "", Name = "Graphid", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListNodes_COLUMN_SL"), Formatting = "", Name = "SL", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListNodes_COLUMN_AL"), Formatting = "", Name = "AL", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListNodes_COLUMN_CL"), Formatting = "", Name = "CL", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListNodes_COLUMN_RL"), Formatting = "", Name = "RL", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListNodes_COLUMN_AC"), Formatting = "", Name = "AC", ExcelFormat = @"" },

                };
            }
            if (string.IsNullOrWhiteSpace(exportHelper.Options.Filename))
            {
                exportHelper.Options.Filename = "ListNodes";
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.NodesKey, aggregatorsInfo);
                var aggregators = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.NodesKey, aggregatorsInfo, true);
                GroupsHelper.FormatGroupedAggregators(aggregators, formattings);
                watch.Stop();
                elapsedMilliseconds = watch.ElapsedMilliseconds;
                _logger.Info($"ExportV2 Performance: ListNodes export query with grouping and range {exportOptions.Range} took {elapsedMilliseconds}ms");
                watch.Restart();
                path = exportHelper.Export(groups, aggregators, null, _pdfOvverideFunction, _excelOverrideFunction);
                watch.Stop();
                elapsedMilliseconds += watch.ElapsedMilliseconds;
                _logger.Info($"ExportV2 Performance: ListNodes export to excel with grouping and range {exportOptions.Range} took {watch.ElapsedMilliseconds}ms");
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                var loadedItems = items.ToList();
                watch.Stop();
                elapsedMilliseconds = watch.ElapsedMilliseconds;
                _logger.Info($"ExportV2 Performance: ListNodes export query with range {exportOptions.Range} took {elapsedMilliseconds}ms");
                watch.Restart();
                path = exportHelper.Export(loadedItems, aggregators, _pdfOvverideFunction, _excelOverrideFunction);
                watch.Stop();
                elapsedMilliseconds += watch.ElapsedMilliseconds;
                _logger.Info($"ExportV2 Performance: ListNodes export to excel with range {exportOptions.Range} took {elapsedMilliseconds}ms");
            }
            var content = System.IO.File.ReadAllBytes(Path.Combine(Path.GetTempPath(), path));
            var fileName = Path.GetFileName(path);
            var downloadKey = FileHelper.PendingDownloadInstance.Add("GraphQueryDebug", content, fileName);
            _logger.Info($"ExportV2 Performance: Total export time for ListNodes: {elapsedMilliseconds}ms");
            return downloadKey;
        }



        /*<Datasource:ListLinks:1/>*/
        /*<DataSourceFilter:ListLinks:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Links> Get_ListLinks_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ListLinks_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Links> Get_ListLinks_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.Info?.Result?.Links?.AsQueryable();
            if (__items == null) return new List<DigicircMatchmaking.BO.Links>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:ListLinks:1/>*/

        [HttpPost]
        [Route("ListLinks_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GetAllLinks", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ListLinks_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ListLinks_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new GetAllLinks_LinksDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(GraphQueryDebugViewModel), dataType, items.Select(i => i.LinksKey.ToString()).ToList(), "ListLinks");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ListLinks:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GetAllLinks", ClaimType = ClaimTypes.Dataset)]
        [Route("ListLinks_Datasource")]
        public JsonResult ListLinks_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ListLinks_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ListLinks_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ListLinks_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ListLinks_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.LinksKey, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => new GetAllLinks_LinksDTO(i, true)).ToList();
                response.Groups = groups;
                ListLinks_GetClientKeysAsGroupIDs(groups);
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => new GetAllLinks_LinksDTO(i, true)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        private void ListLinks_GetClientKeysAsGroupIDs(GroupTree<DigicircMatchmaking.BO.Links> group)
        {
            if (group.UniqueItemKeys?.Any() == true)
            {
                group.UniqueItemKeys = new List<object>();
                foreach (var item in group.Items)
                {
                    var foundItem = new GetAllLinks_LinksDTO(item, true);
                    group.UniqueItemKeys.Add(foundItem._key);
                }
            }
            foreach (var subGroup in group.SubGroups)
                ListLinks_GetClientKeysAsGroupIDs(subGroup);
        }

        /*<DataSourceAggregators:ListLinks:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GetAllLinks", ClaimType = ClaimTypes.Dataset)]
        [Route("ListLinks_DatasourceAggregators")]
        public JsonResult ListLinks_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ListLinks_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var comparer = StringComparer.InvariantCultureIgnoreCase;
            var formattings = new Dictionary<string, string>(comparer);
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.LinksKey, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DigicircMatchmaking.BO.Links>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            string __data = Serialize(aggregatorsResponse);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }




        [Route("ListLinks_ExportV2")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult ListLinks_ExportV2()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var exportOptions = Utilities.Deserialize<ExportOptionsV2>(postedData["exportData"]?.ToString());
            var aggregatorsInfo = DeserializeAggregatorsRequest<DigicircMatchmaking.BO.Links>(postedData["aggregatorsRequest"]?.ToString());
            var downloadKey = ListLinks_ExportV2Implementation(datasourceRequest, exportOptions, aggregatorsInfo);
            string __data = downloadKey;
            var __result = Json(new
            {
                Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        [NonAction]
        public string ListLinks_ExportV2Implementation(DatasourceRequest datasourceRequest,
                ExportOptionsV2 exportOptions, List<AggregatorInfo<DigicircMatchmaking.BO.Links>> aggregatorsInfo,
                Func<MigraDoc.DocumentObjectModel.Document, MigraDoc.DocumentObjectModel.Tables.Table, object> _pdfOvverideFunction = null,
                Func<OfficeOpenXml.ExcelPackage, object> _excelOverrideFunction = null)
        {
            var watch = System.Diagnostics.Stopwatch.StartNew();
            long elapsedMilliseconds = 0;
            switch (exportOptions.Range)
            {
            case ExportHelper.Range.ALL:
                datasourceRequest.StartRow = 0;
                datasourceRequest.PageSize = int.MaxValue;
                break;
            case ExportHelper.Range.TOP100:
                datasourceRequest.StartRow = 0;
                datasourceRequest.PageSize = 100;
                break;
            }
            var queryable = Get_ListLinks_DatasourceQueryable(datasourceRequest);
            var comparer = StringComparer.InvariantCultureIgnoreCase;
            var formattings = new Dictionary<string, string>(comparer);
            var path = "";
            var exportHelper = new ExportHelperV2<DigicircMatchmaking.BO.Links>(exportOptions, new Dictionary<string, Func<DigicircMatchmaking.BO.Links, object>>
            {
                {"Source" , item => item?.Source }, {"Target" , item => item?.Target }, {"Sid" , item => item?.Sid }, {"Tid" , item => item?.Tid }, {"IA" , item => item?.IA }, {"AL" , item => item?.AL }, {"Attr" , item => item?.Attr }, {"Weight" , item => item?.Weight }, {"CL" , item => item?.CL }, {"RL" , item => item?.RL }, {"AC" , item => item?.AC }, {"Type" , item => item?.Type }, {"TypeRel" , item => item?.TypeRel },
            });
            if (exportHelper.Options.ColumnInfo == null)
            {
                exportHelper.Options.ColumnInfo = new List<ColumnOptionsV2>
                {
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListLinks_COLUMN_Source"), Formatting = "", Name = "Source", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListLinks_COLUMN_Target"), Formatting = "", Name = "Target", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListLinks_COLUMN_Sid"), Formatting = "", Name = "Sid", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListLinks_COLUMN_Tid"), Formatting = "", Name = "Tid", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListLinks_COLUMN_IA"), Formatting = "", Name = "IA", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListLinks_COLUMN_AL"), Formatting = "", Name = "AL", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListLinks_COLUMN_Attr"), Formatting = "", Name = "Attr", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListLinks_COLUMN_Weight"), Formatting = "", Name = "Weight", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListLinks_COLUMN_CL"), Formatting = "", Name = "CL", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListLinks_COLUMN_RL"), Formatting = "", Name = "RL", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListLinks_COLUMN_AC"), Formatting = "", Name = "AC", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListLinks_COLUMN_Type"), Formatting = "", Name = "Type", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("GraphQueryDebug", "RES_LIST_ListLinks_COLUMN_TypeRel"), Formatting = "", Name = "TypeRel", ExcelFormat = @"" },

                };
            }
            if (string.IsNullOrWhiteSpace(exportHelper.Options.Filename))
            {
                exportHelper.Options.Filename = "ListLinks";
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.LinksKey, aggregatorsInfo);
                var aggregators = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.LinksKey, aggregatorsInfo, true);
                GroupsHelper.FormatGroupedAggregators(aggregators, formattings);
                watch.Stop();
                elapsedMilliseconds = watch.ElapsedMilliseconds;
                _logger.Info($"ExportV2 Performance: ListLinks export query with grouping and range {exportOptions.Range} took {elapsedMilliseconds}ms");
                watch.Restart();
                path = exportHelper.Export(groups, aggregators, null, _pdfOvverideFunction, _excelOverrideFunction);
                watch.Stop();
                elapsedMilliseconds += watch.ElapsedMilliseconds;
                _logger.Info($"ExportV2 Performance: ListLinks export to excel with grouping and range {exportOptions.Range} took {watch.ElapsedMilliseconds}ms");
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                var loadedItems = items.ToList();
                watch.Stop();
                elapsedMilliseconds = watch.ElapsedMilliseconds;
                _logger.Info($"ExportV2 Performance: ListLinks export query with range {exportOptions.Range} took {elapsedMilliseconds}ms");
                watch.Restart();
                path = exportHelper.Export(loadedItems, aggregators, _pdfOvverideFunction, _excelOverrideFunction);
                watch.Stop();
                elapsedMilliseconds += watch.ElapsedMilliseconds;
                _logger.Info($"ExportV2 Performance: ListLinks export to excel with range {exportOptions.Range} took {elapsedMilliseconds}ms");
            }
            var content = System.IO.File.ReadAllBytes(Path.Combine(Path.GetTempPath(), path));
            var fileName = Path.GetFileName(path);
            var downloadKey = FileHelper.PendingDownloadInstance.Add("GraphQueryDebug", content, fileName);
            _logger.Info($"ExportV2 Performance: Total export time for ListLinks: {elapsedMilliseconds}ms");
            return downloadKey;
        }



        /*<Datasource:GraphQueryDebug_GetAllLinks:1/>*/
        /*<DataSourceFilter:GraphQueryDebug_GetAllLinks:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Links> Get_GraphQueryDebug_GetAllLinks_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_GraphQueryDebug_GetAllLinks_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Links> Get_GraphQueryDebug_GetAllLinks_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.Info?.Result?.Links?.AsQueryable();
            if (__items == null) return new List<DigicircMatchmaking.BO.Links>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:GraphQueryDebug_GetAllLinks:1/>*/

        [HttpPost]
        [Route("GraphQueryDebug_GetAllLinks_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GetAllLinks", ClaimType = ClaimTypes.Dataset)]
        public JsonResult GraphQueryDebug_GetAllLinks_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_GraphQueryDebug_GetAllLinks_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new GetAllLinks_LinksDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(GraphQueryDebugViewModel), dataType, items.Select(i => i.LinksKey.ToString()).ToList(), "GraphQueryDebug_GetAllLinks");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:GraphQueryDebug_GetAllLinks:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GetAllLinks", ClaimType = ClaimTypes.Dataset)]
        [Route("GraphQueryDebug_GetAllLinks_Datasource")]
        public JsonResult GraphQueryDebug_GetAllLinks_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_GraphQueryDebug_GetAllLinks_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_GraphQueryDebug_GetAllLinks_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_GraphQueryDebug_GetAllLinks_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_GraphQueryDebug_GetAllLinks_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.Links>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.LinksKey, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
                GraphQueryDebug_GetAllLinks_GetClientKeysAsGroupIDs(groups);
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        private void GraphQueryDebug_GetAllLinks_GetClientKeysAsGroupIDs(GroupTree<DigicircMatchmaking.BO.Links> group)
        {
            if (group.UniqueItemKeys?.Any() == true)
            {
                group.UniqueItemKeys = new List<object>();
                foreach (var item in group.Items)
                {
                    var foundItem = new GetAllLinks_LinksDTO(item, true);
                    group.UniqueItemKeys.Add(foundItem._key);
                }
            }
            foreach (var subGroup in group.SubGroups)
                GraphQueryDebug_GetAllLinks_GetClientKeysAsGroupIDs(subGroup);
        }


        /*<Datasource:GraphQueryDebug_GetAllNodes:1/>*/
        /*<DataSourceFilter:GraphQueryDebug_GetAllNodes:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Nodes> Get_GraphQueryDebug_GetAllNodes_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_GraphQueryDebug_GetAllNodes_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Nodes> Get_GraphQueryDebug_GetAllNodes_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.Info?.Result?.Nodes?.AsQueryable();
            if (__items == null) return new List<DigicircMatchmaking.BO.Nodes>().AsQueryable();
            return __items.Where(@this => @this.RL >= 0);
        }


        /*<DataSourceGetFullRecordset:GraphQueryDebug_GetAllNodes:1/>*/

        [HttpPost]
        [Route("GraphQueryDebug_GetAllNodes_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GetAllNodes", ClaimType = ClaimTypes.Dataset)]
        public JsonResult GraphQueryDebug_GetAllNodes_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_GraphQueryDebug_GetAllNodes_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new GetAllNodes_NodesDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(GraphQueryDebugViewModel), dataType, items.Select(i => i.NodesKey.ToString()).ToList(), "GraphQueryDebug_GetAllNodes");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:GraphQueryDebug_GetAllNodes:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GetAllNodes", ClaimType = ClaimTypes.Dataset)]
        [Route("GraphQueryDebug_GetAllNodes_Datasource")]
        public JsonResult GraphQueryDebug_GetAllNodes_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_GraphQueryDebug_GetAllNodes_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_GraphQueryDebug_GetAllNodes_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_GraphQueryDebug_GetAllNodes_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_GraphQueryDebug_GetAllNodes_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.Nodes>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.NodesKey, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
                GraphQueryDebug_GetAllNodes_GetClientKeysAsGroupIDs(groups);
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        private void GraphQueryDebug_GetAllNodes_GetClientKeysAsGroupIDs(GroupTree<DigicircMatchmaking.BO.Nodes> group)
        {
            if (group.UniqueItemKeys?.Any() == true)
            {
                group.UniqueItemKeys = new List<object>();
                foreach (var item in group.Items)
                {
                    var foundItem = new GetAllNodes_NodesDTO(item, true);
                    group.UniqueItemKeys.Add(foundItem._key);
                }
            }
            foreach (var subGroup in group.SubGroups)
                GraphQueryDebug_GetAllNodes_GetClientKeysAsGroupIDs(subGroup);
        }


        /*<Datasource:GraphQueryDebug_CountryDataSet:1/>*/
        /*<DataSourceFilter:GraphQueryDebug_CountryDataSet:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Country> Get_GraphQueryDebug_CountryDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_GraphQueryDebug_CountryDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Country> Get_GraphQueryDebug_CountryDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Country>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:GraphQueryDebug_CountryDataSet:1/>*/

        [HttpPost]
        [Route("GraphQueryDebug_CountryDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "CountryDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult GraphQueryDebug_CountryDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_GraphQueryDebug_CountryDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new CountryDataSet_CountryDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(GraphQueryDebugViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "GraphQueryDebug_CountryDataSet");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:GraphQueryDebug_CountryDataSet:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "CountryDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("GraphQueryDebug_CountryDataSet_Datasource")]
        public JsonResult GraphQueryDebug_CountryDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_GraphQueryDebug_CountryDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_GraphQueryDebug_CountryDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_GraphQueryDebug_CountryDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_GraphQueryDebug_CountryDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.Country>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        #endregion

        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new GraphQueryDebugViewModelDTO(@model);
                if (fillDropDownInitialValues)
                {
                    _modelDTO.FillDropDownsInitialValues(@model, this);
                }
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("GraphQueryDebug");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult(List<string> groupsToCheck = null)
        {
            try
            {
                RunDataValidations(groupsToCheck);
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: GraphQueryDebug, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations(List<string> groupsToCheck = null)
        {
            var masterPageDataValidations = (_parentController as Controllers.MasterPage.MasterPageController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }

        #endregion
    }
}
