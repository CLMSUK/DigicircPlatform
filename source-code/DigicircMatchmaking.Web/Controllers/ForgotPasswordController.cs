// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using AppCode;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.DAL.Queries;
using DigicircMatchmaking.UI.ViewModels.ForgotPassword;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DigicircMatchmaking.UI.Controllers.ForgotPassword
{

    [RoutePrefix("ForgotPassword")]
    public class ForgotPasswordController : ControllerBase<ForgotPasswordViewModel, ForgotPasswordViewModelDTO>
    {

        /*<Form:ForgotPassword:0/>*/
        public ForgotPasswordController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(ForgotPasswordController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DigicircMatchmaking.UI.ViewModels.MasterPageSignIn.MasterPageSignInViewModel
            {

            };
            _parentController = new MasterPageSignIn.MasterPageSignInController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public ForgotPasswordController SetModel(ForgotPasswordViewModel m)
        {
            @model = m;
            return this;
        }


        public override void CommitAllFiles()
        {
        }

        public override void CommitAllFilesLegacy()
        {
        }

        public override void ClearPendingFiles()
        {
        }




        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(ForgotPasswordViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }


        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "DownloadFileByPath")]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }




        #region Controller Actions
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="Render", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("Render/{*fromMatching:bool?}")]
        public ActionResult Render(bool fromMatching = false)

        {
            @model = new ForgotPasswordViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_ForgotPassword"] = "Render";
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="Render", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_Render/{*fromMatching:bool?}")]
        public ActionResult _API_Render(bool fromMatching = false)

        {
            @model = new ForgotPasswordViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_ForgotPassword"] = "Render";
            PushToHistory();
            var _masterController = new DigicircMatchmaking.UI.Controllers.MasterPageSignIn.MasterPageSignInController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteRender(fromMatching);
            return redirectInfo;
        }


        [CustomControllerActionFilter(CausesValidation=true, ActionName="ResetPasswordRequest", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("ResetPasswordRequest")]
        public ActionResult ResetPasswordRequest()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteResetPasswordRequest();
            return redirectInfo;
        }

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="ResetPassword", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("ResetPassword/{fromMatching:bool?}/{username?}/{*key?}")]
        public ActionResult ResetPassword(string username, string key, bool fromMatching = false)

        {
            @model = new ForgotPasswordViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_ForgotPassword"] = "ResetPassword";
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="ResetPassword", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_ResetPassword/{fromMatching:bool?}/{username?}/{*key?}")]
        public ActionResult _API_ResetPassword(string username, string key, bool fromMatching = false)

        {
            @model = new ForgotPasswordViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_ForgotPassword"] = "ResetPassword";
            PushToHistory();
            var _masterController = new DigicircMatchmaking.UI.Controllers.MasterPageSignIn.MasterPageSignInController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteResetPassword(fromMatching,username,key);
            return redirectInfo;
        }


        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:Render:1/>*/
        public ActionResult ExecuteRender(bool fromMatching)
        {
            if (_parentController == null) _parentController = new MasterPageSignIn.MasterPageSignInController(new  DigicircMatchmaking.UI.ViewModels.MasterPageSignIn.MasterPageSignInViewModel());
            ((MasterPageSignIn.MasterPageSignInController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.FromMatching = fromMatching;
            return _result;
        }
        /*<ControllerActionImplementation:ResetPasswordRequest:1/>*/
        public ActionResult ExecuteResetPasswordRequest()
        {
            ActionResult _result = null;
            zAppDev.DotNet.Framework.Identity.Model.ApplicationUser user =  new DigicircMatchmaking.DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(@model.txtUsername);
            if (user == null)
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, BaseViewPage<string>.GetResourceValue("ForgotPassword", "RES_CUSTOM_NotFound").ToString(), MessageType.Error);
                return null;
            }
            if (((user?.Email ?? "") == null || (user?.Email ?? "").Trim() == "") || ((((user?.Email ?? "") == null ? false : CSharpVerbalExpressions.VerbalExpressions.DefaultExpression.Add(CSharpVerbalExpressions.CommonRegex.Email).Test((user?.Email ?? "")))) == false))
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, BaseViewPage<string>.GetResourceValue("ForgotPassword", "RES_CUSTOM_NoMail").ToString(), MessageType.Error);
                return null;
            }
            string key = zAppDev.DotNet.Framework.Identity.IdentityHelper.GetUserManager().GeneratePasswordResetTokenAsync(user.UserName).Result;
            string resetUrl = (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings["ServerExternalPath"]) ?
                               System.Configuration.ConfigurationManager.AppSettings["ServerExternalPath"] : zAppDev.DotNet.Framework.Utilities.Web.GetApplicationPathUri(false)) +
                              "/ForgotPassword/ResetPassword"+ "?fromMatching=" + (@model.FromMatching)+ "&username=" + System.Web.HttpUtility.UrlEncode((user?.UserName ?? ""))+ "&key=" + System.Web.HttpUtility.UrlEncode(System.Web.HttpUtility.UrlEncode(key));
            zAppDev.DotNet.Framework.Utilities.EMailMessage mail = new zAppDev.DotNet.Framework.Utilities.EMailMessage();
            System.Collections.Generic.List<string> recipients = new System.Collections.Generic.List<string>();
            recipients.Add((user?.Email ?? ""));
            mail.To = recipients.ToList();
            mail.IsBodyHtml = true;
            mail.Subject = BaseViewPage<string>.GetResourceValue("ForgotPassword", "RES_CUSTOM_ResetPasswordLink").ToString() + " " + "DigicircMatchmaking";
            mail.Body = "<h3>" + BaseViewPage<string>.GetResourceValue("ForgotPassword", "RES_CUSTOM_ClickToReset").ToString() + "</h3>" + "<a href='" + resetUrl + "'>" + BaseViewPage<string>.GetResourceValue("ForgotPassword", "RES_CUSTOM_ResetPassword").ToString() + "</a>" + "<h3>" + BaseViewPage<string>.GetResourceValue("ForgotPassword", "RES_CUSTOM_CopyPaste").ToString() + "</h3><p>" + resetUrl + "</p>";
            zAppDev.DotNet.Framework.Utilities.Email.SendMail(mail);
            string signInUrl = (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings["ServerExternalPath"]) ?
                                System.Configuration.ConfigurationManager.AppSettings["ServerExternalPath"] : zAppDev.DotNet.Framework.Utilities.Web.GetApplicationPathUri(false)) +
                               "/SignInPage/Load"+ "?fromMatching=" + (@model.FromMatching);
            ClientCommand(ClientCommands.SHOW_MESSAGE, BaseViewPage<string>.GetResourceValue("ForgotPassword", "RES_CUSTOM_MailSoon").ToString(), MessageType.Success, signInUrl);
            return _result;
        }
        /*<ControllerActionImplementation:ResetPassword:1/>*/
        public ActionResult ExecuteResetPassword(bool fromMatching, string username, string key)
        {
            if (_parentController == null) _parentController = new MasterPageSignIn.MasterPageSignInController(new  DigicircMatchmaking.UI.ViewModels.MasterPageSignIn.MasterPageSignInViewModel());
            ((MasterPageSignIn.MasterPageSignInController) _parentController).ExecuteRender();
            ActionResult _result = null;
            if (((username == null || username.Trim() == "")))
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, BaseViewPage<string>.GetResourceValue("ForgotPassword", "RES_CUSTOM_InvalidLink").ToString(), MessageType.Error);
                return null;
            }
            zAppDev.DotNet.Framework.Identity.Model.ApplicationUser user =  new DigicircMatchmaking.DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(username);
            if (user == null)
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, BaseViewPage<string>.GetResourceValue("ForgotPassword", "RES_CUSTOM_NotFound").ToString(), MessageType.Error);
                return null;
            }
            string newPassword = "Pa55!" + Guid.NewGuid().ToString().ToLower().Replace("-", "").Substring(0, 10);
            bool success = zAppDev.DotNet.Framework.Identity.IdentityHelper.GetUserManager().ResetPasswordAsync(user.UserName, key, newPassword).Result.Succeeded;
            if (((success) == false))
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, BaseViewPage<string>.GetResourceValue("ForgotPassword", "RES_CUSTOM_InvalidLink").ToString(), MessageType.Error);
                return null;
            }
            string signInUrl = (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings["ServerExternalPath"]) ?
                                System.Configuration.ConfigurationManager.AppSettings["ServerExternalPath"] : zAppDev.DotNet.Framework.Utilities.Web.GetApplicationPathUri(false)) +
                               "/SignInPage/Load"+ "?fromMatching=" + (@model.FromMatching);
            ClientCommand(ClientCommands.SHOW_MESSAGE, BaseViewPage<string>.GetResourceValue("ForgotPassword", "RES_CUSTOM_YourNewPass").ToString() + " " + newPassword, MessageType.Success, signInUrl);
            return _result;
        }
        #endregion

        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new ForgotPasswordViewModelDTO(@model);
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("ForgotPassword");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult(List<string> groupsToCheck = null)
        {
            try
            {
                RunDataValidations(groupsToCheck);
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: ForgotPassword, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations(List<string> groupsToCheck = null)
        {
            viewDTO.RuleEvaluations.DataValidations.Add(UsernameIsEmptyValidation(groupsToCheck));
            var masterPageDataValidations = (_parentController as Controllers.MasterPageSignIn.MasterPageSignInController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }


        /*<DataValidation:UsernameIsEmptyValidation:1/>*/
        [zAppDev.DotNet.Framework.Mvc.Rule(RuleType.DataValidation, EvalTime.OnSubmit)]
        public RuleResult UsernameIsEmptyValidation(List<string> groupsToCheck = null)
        {
            var __evaluations = new List<RuleEvaluation>();
            Func<int[], bool> __evaluation = (indexes) =>
            {
                /*<DataValidationCondition:UsernameIsEmptyValidation:2/>*/
                return (@model.txtUsername == null || @model.txtUsername.Trim() == "");
            };
            Func<string> __message = () =>
            {
                /*<DataValidationMesage:UsernameIsEmptyValidation:2/>*/
                return BaseViewPage<string>.GetResourceValue("ForgotPassword", "RES_DATAVALIDATION_MESSAGE_UsernameIsEmpty").ToString();
            };
            var __indexes = new int[] {};
            var __status = __evaluation.Invoke(__indexes);
            var __messageToSend = __status == true ? __message.Invoke() : null;
            __evaluations.Add(new RuleEvaluation
            {
                Status = __status,
                Expression = __messageToSend,
                Indexes = __indexes,
                DataValidationMessageType = DataValidationMessageType.ERROR
            });
            return new RuleResult
            {
                Name = "UsernameIsEmptyValidation",
                Evaluations = __evaluations
            };
        }

        #endregion
    }
}
