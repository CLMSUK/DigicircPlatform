// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using AppCode;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.DAL.Queries;
using DigicircMatchmaking.UI.ViewModels.SearchForm;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DigicircMatchmaking.UI.Controllers.SearchForm
{

    [RoutePrefix("SearchForm")]
    public class SearchFormController : ControllerBase<SearchFormViewModel, SearchFormViewModelDTO>
    {

        /*<Form:SearchForm:0/>*/
        public SearchFormController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(SearchFormController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DigicircMatchmaking.UI.ViewModels.MasterPage.MasterPageViewModel
            {
                Title = model.Title, AnalyticsId = model.AnalyticsId
            };
            _parentController = new MasterPage.MasterPageController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public SearchFormController SetModel(SearchFormViewModel m)
        {
            @model = m;
            return this;
        }


        public override void CommitAllFiles()
        {
            GetPartialController("PartialView")?.CommitAllFiles();
            FileHelper.PendingUploadInstance.CommitAllFilesNew("SearchForm", @model);
        }

        public override void CommitAllFilesLegacy()
        {
            GetPartialController("PartialView")?.CommitAllFilesLegacy();
        }

        public override void ClearPendingFiles()
        {
            GetPartialController("PartialView")?.ClearPendingFiles();
            FileHelper.PendingUploadInstance.Clear("SearchForm");
        }




        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(SearchFormViewModel),new [] { typeof(SearchFormViewModel),typeof(ViewModels.Bubble.BubbleViewModel) });
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }

        [HttpGet]
        [Route("DownloadFile")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "DownloadFile")]
        public FileContentResult DownloadFile(string id)
        {
            return FileHelper.PendingDownloadInstance.DownloadByKey("SearchForm", id);
        }

        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "DownloadFileByPath")]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }




        protected override CustomControllerBase GetPartialController(string partialControlName)
        {
            var _Bubble = GetBubbleController(partialControlName, false);
            if (_Bubble != null) return _Bubble;
            return null;
        }
        private Bubble.BubbleController GetBubbleController(string partialControlName, bool throwIfNotFound = true)
        {
            ViewModels.Bubble.BubbleViewModel partialsModel = null;
            switch (partialControlName)
            {
            case "PartialView":
                partialsModel = new ViewModels.Bubble.BubbleViewModel
                {
                    Actor = @model.SelectedActor
                };
                break;
            default:
                if (throwIfNotFound) throw new Exception($"Partial control '{partialControlName}' not found");
                return null;
            }
            var partialController = new Bubble.BubbleController();
            partialController.__PartialControlName = partialControlName;
            partialController.SetModel(partialsModel);
            partialController.ControllerContext = this.ControllerContext;
            return partialController;
        }
        private Action<SearchFormViewModel, ViewModels.Bubble.BubbleViewModel> GetBubbleTransformer(string partialControlName, bool throwIfNotFound = true)
        {
            switch (partialControlName)
            {
            case "PartialView":
                return (model, partial_model) =>
                {
                    model.SelectedActor = partial_model.Actor;
                };
                break;
            default:
                if (throwIfNotFound) throw new Exception($"Partial control '{partialControlName}' not found");
                return null;
            }
        }
        #region Partial Views Actions
        [CustomControllerActionFilter(ActionName="Bubble", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("_API_Bubble")]
        public ActionResult _API_Bubble(string controlName, string actionName)

        {
            var _data = _LoadViewModel();
            if (!_redirectionFromSameController)
            {
                controlName = DeserializeViewModelProperty<string>(_data["controlName"] as Newtonsoft.Json.Linq.JValue);
                actionName = DeserializeViewModelProperty<string>(_data["actionName"] as Newtonsoft.Json.Linq.JValue);
            }
            var partialController = GetBubbleController(controlName);
            ActionResult redirectInfo = null;
            switch (actionName)
            {
            case "RedirectToActorForm":
            {
                redirectInfo = partialController.ExecuteRedirectToActorForm();
            }
            break;
            case "Close":
            {
                redirectInfo = partialController.ExecuteClose();
            }
            break;
            default:
                throw new Exception($"Partial view 'Bubble' does not have an action named '{actionName}'");
            }
            viewDTO.ClientCommands = partialController.viewDTO.ClientCommands;
            var copyTo = GetBubbleTransformer(controlName);
            copyTo?.Invoke(model, partialController.GetModel());
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="Bubble", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Bubble")]
        public ActionResult Bubble(string controlName, string actionName)

        {
            var _data = _LoadViewModel();
            if (!_redirectionFromSameController)
            {
                controlName = DeserializeViewModelProperty<string>(_data["controlName"] as Newtonsoft.Json.Linq.JValue);
                actionName = DeserializeViewModelProperty<string>(_data["actionName"] as Newtonsoft.Json.Linq.JValue);
            }
            var partialController = GetBubbleController(controlName);
            ActionResult redirectInfo = null;
            switch (actionName)
            {
            case "RedirectToActorForm":
            {
                redirectInfo = partialController.ExecuteRedirectToActorForm();
            }
            break;
            case "Close":
            {
                redirectInfo = partialController.ExecuteClose();
            }
            break;
            default:
                throw new Exception($"Partial view 'Bubble' does not have an action named '{actionName}'");
            }
            viewDTO.ClientCommands = partialController.viewDTO.ClientCommands;
            var copyTo = GetBubbleTransformer(controlName);
            copyTo?.Invoke(model, partialController.GetModel());
            return redirectInfo;
        }

        #endregion
        #region Controller Actions
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="Index", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("Index")]
        [Route("~/", Name = "default")]


        public ActionResult Index()

        {
            @model = new SearchFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_SearchForm"] = "Index";
            FileHelper.PendingUploadInstance.Clear("SearchForm");
            FileHelper.PendingDownloadInstance.Clear("SearchForm");
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="Index", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_Index")]
        public ActionResult _API_Index()

        {
            @model = new SearchFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_SearchForm"] = "Index";
            PushToHistory();
            FileHelper.PendingUploadInstance.Clear("SearchForm");
            FileHelper.PendingDownloadInstance.Clear("SearchForm");
            var _masterController = new DigicircMatchmaking.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteIndex();
            return redirectInfo;
        }


        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="FromBack", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("FromBack/{*id:int?}")]
        public ActionResult FromBack(int? id)

        {
            @model = new SearchFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_SearchForm"] = "FromBack";
            FileHelper.PendingUploadInstance.Clear("SearchForm");
            FileHelper.PendingDownloadInstance.Clear("SearchForm");
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="FromBack", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_FromBack/{*id:int?}")]
        public ActionResult _API_FromBack(int? id)

        {
            @model = new SearchFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_SearchForm"] = "FromBack";
            PushToHistory();
            FileHelper.PendingUploadInstance.Clear("SearchForm");
            FileHelper.PendingDownloadInstance.Clear("SearchForm");
            var _masterController = new DigicircMatchmaking.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteFromBack(id);
            return redirectInfo;
        }


        [CustomControllerActionFilter(ActionName="ChangeMode", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("ChangeMode")]
        public ActionResult ChangeMode()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteChangeMode();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="TestBubble", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("TestBubble")]
        public ActionResult TestBubble(DigicircMatchmaking.BO.Actor actor)

        {
            var _data = _LoadViewModel();
            if (!_redirectionFromSameController)
            {
                actor = DeserializeViewModelProperty<DigicircMatchmaking.BO.Actor, ViewModels.SearchForm.ActorDTO>(_data["actor"].ToString());
            }
            var redirectInfo = ExecuteTestBubble(actor);
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="Search", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Search")]
        public ActionResult Search()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteSearch();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, ActionName="SearchGraph", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SearchGraph")]
        public ActionResult SearchGraph()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteSearchGraph();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="NewSearch", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("NewSearch")]
        public ActionResult NewSearch()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteNewSearch();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="Refresh", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Refresh")]
        public ActionResult Refresh()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteRefresh();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, ActionName="Reset", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Reset")]
        public ActionResult Reset()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteReset();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="Action", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Action")]
        public ActionResult Action()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteAction();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="GoToActorForm", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("GoToActorForm")]
        public ActionResult GoToActorForm(int? id)

        {
            var _data = _LoadViewModel();
            if (!_redirectionFromSameController)
            {
                var parsedid = 0;
                if (!(int.TryParse(DeserializeViewModelProperty<object>(_data["id"] as Newtonsoft.Json.Linq.JValue)?.ToString(), out parsedid)))
                {
                    throw new ApplicationException("Supplied value cannot be parsed to Datatype 'int' of parameter 'id'");
                }
                id = parsedid;
            }
            var redirectInfo = ExecuteGoToActorForm(id);
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:Index:1/>*/
        public ActionResult ExecuteIndex()
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DigicircMatchmaking.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = "";
            @model.Query.ShowAllData = true;
            @model.Query.MaterialSearchMode = "offers";
            @model.Query.SelectedMode = "list";
            @model.Query.AdvanceSearch = false;
            return _result;
        }
        /*<ControllerActionImplementation:FromBack:1/>*/
        public ActionResult ExecuteFromBack(int? id)
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DigicircMatchmaking.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = "";
            @model.Query.MaterialSearchMode = "offers";
            DigicircMatchmaking.BO.SearchQuery cachedQuery = zAppDev.DotNet.Framework.Utilities.Common.SafeCast<DigicircMatchmaking.BO.SearchQuery>(System.Web.HttpContext.Current.Session["results"]);
            if ((cachedQuery != null))
            {
                @model.Query = cachedQuery;
            }
            else
            {
                @model.Query.SelectedMode = "list";
                @model.Query.AdvanceSearch = false;
                @model.Query.ShowAllData = true;
            }
            if ((@model.Query?.SelectedMode == "list"))
            {
                ClientCommand(ClientCommands.EXECUTE_JS, "setTimeout(function(){ window._commander.gridGoToSavedPage(['Table'])}, 200);");
                ClientCommand(ClientCommands.EXECUTE_JS, "setTimeout(function(){ $(\"[data-key='" + id.GetValueOrDefault(0) + "']\")[0].scrollIntoView({ behavior: \"smooth\", block: \"start\" })}, 1500);");
            }
            return _result;
        }
        /*<ControllerActionImplementation:ChangeMode:1/>*/
        public ActionResult ExecuteChangeMode()
        {
            ActionResult _result = null;
            System.Web.HttpContext.Current.Session.Add("results", @model.Query);
            return _result;
        }
        /*<ControllerActionImplementation:TestBubble:1/>*/
        public ActionResult ExecuteTestBubble(DigicircMatchmaking.BO.Actor actor)
        {
            ActionResult _result = null;
            @model.SelectedActor = actor;
            return _result;
        }
        /*<ControllerActionImplementation:Search:1/>*/
        public ActionResult ExecuteSearch()
        {
            ActionResult _result = null;
            int? countryId = @model.Query?.SelectedCountry == null ? 0 : (@model.Query?.SelectedCountry?.Id ?? 0);
            System.Collections.Generic.List<DigicircMatchmaking.BO.Actor> searchActors = new System.Collections.Generic.List<DigicircMatchmaking.BO.Actor>();
            if ((countryId == 0 && ((@model.Query?.SearchTerm ?? "") == null || (@model.Query?.SearchTerm ?? "") == "")))
            {
                searchActors = new DigicircMatchmaking.DAL.Repository().GetAll<DigicircMatchmaking.BO.Actor>().ToList();
            }
            else
            {
                if ((((((@model.Query?.SearchTerm ?? "") == null || (@model.Query?.SearchTerm ?? "") == "")) == false)))
                {
                    if (((@model.Query?.SearchTerm?.Trim().StartsWith("\"") ?? false) && (@model.Query?.SearchTerm?.EndsWith("\"") ?? false)))
                    {
                        searchActors = new DigicircMatchmaking.DAL.Repository().GetAll<DigicircMatchmaking.BO.Actor>().ToList();
                    }
                    else
                    {
                        string[] terms = @model.Query?.SearchTerm?.SplitExtended(' ', false);
                        foreach (var term in terms ?? Enumerable.Empty<string>())
                        {
                            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SearchForm", DigicircMatchmaking.Hubs.EventsHub.RaiseDebugMessage, term);
                            searchActors?.AddRange(new DigicircMatchmaking.DAL.Repository().Get<DigicircMatchmaking.BO.Actor>((a) => a.Description.Contains(term)));
                        }
                    }
                }
                else
                {
                    searchActors = new DigicircMatchmaking.DAL.Repository().GetAll<DigicircMatchmaking.BO.Actor>().ToList();
                }
                if ((countryId != 0))
                {
                    searchActors = searchActors?.Where((a) => a.Address.Country.Id == countryId).ToList().ToList();
                }
            }
            System.Web.HttpContext.Current.Session.Add("results", @model.Query);
            ClientCommand(ClientCommands.MAP_REFRESH, "NewMap");
            _result = this.ExecuteRefresh();
            return _result;
        }
        /*<ControllerActionImplementation:SearchGraph:1/>*/
        public ActionResult ExecuteSearchGraph()
        {
            ActionResult _result = null;
            @model.Query.ShowAllData = false;
            System.Collections.Generic.List<DigicircMatchmaking.BO.ExElements> q = new System.Collections.Generic.List<DigicircMatchmaking.BO.ExElements>();
            if ((((((@model.Query?.SelectedCountry?.Name ?? "") == null || (@model.Query?.SelectedCountry?.Name ?? "") == "")) == false)))
            {
                DigicircMatchmaking.BO.ExElements countryClause = new DigicircMatchmaking.BO.ExElements();
                countryClause.Type = "Country";
                countryClause.Name = (@model.Query?.SelectedCountry?.Name ?? "");
                q?.Add(countryClause);
            }
            if ((((((@model.Query?.SelectedSector?.Value ?? "") == null || (@model.Query?.SelectedSector?.Value ?? "") == "")) == false)))
            {
                DigicircMatchmaking.BO.ExElements sectorClause = new DigicircMatchmaking.BO.ExElements();
                sectorClause.Type = "Sector";
                sectorClause.Name = (@model.Query?.SelectedSector?.Value ?? "");
                q?.Add(sectorClause);
            }
            DigicircMatchmaking.BO.ExElements clause = new DigicircMatchmaking.BO.ExElements();
            clause.Type = "*";
            clause.Name = (@model.Query?.GetSearchTerm ?? "");
            q?.Add(clause);
            DigicircMatchmaking.BO.GraphBackendResponse response = new DigicircMatchmaking.BO.GraphBackendResponse();
            if ((((@model.Query?.SelectedCountry?.Name ?? "") == null || (@model.Query?.SelectedCountry?.Name ?? "") == "") && ((@model.Query?.SelectedSector?.Value ?? "") == null || (@model.Query?.SelectedSector?.Value ?? "") == "")))
            {
                response = DigicircMatchmaking.BO.GraphQueriesExtensions.Query((@model.Query?.GetSearchTerm ?? ""));
            }
            else
            {
                response = DigicircMatchmaking.BO.GraphQueriesExtensions.ExtenedQuery(q);
            }
            DigicircMatchmaking.ExternalStructs.ElasticSearch.SearchResponse responseElastic = DigicircMatchmaking.BO.ElasticConsumerExtensions.Search(@model.Query);
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SearchForm", DigicircMatchmaking.Hubs.EventsHub.RaiseDebugMessage, response);
            System.Collections.Generic.List<DigicircMatchmaking.BO.ActorNames> actorNames = DigicircMatchmaking.BO.ActorExtensions.GetActorNamesFromElasticResponse(responseElastic);
            @model.Query.ActorNames = actorNames.ToList();
            System.Web.HttpContext.Current.Session.Add("results", @model.Query);
            ClientCommand(ClientCommands.MAP_REFRESH, "NewMap");
            ClientCommand(ClientCommands.EXECUTE_JS, "setTimeout(function(){_commander.gridGotoFirstPage(['Table']);},50);");
            return _result;
        }
        /*<ControllerActionImplementation:NewSearch:1/>*/
        public ActionResult ExecuteNewSearch()
        {
            ActionResult _result = null;
            if ((((@model.Query?.SearchTerm ?? "") == null || (@model.Query?.SearchTerm ?? "") == "") && @model.Query?.SelectedCountry == null && @model.Query?.SelectedSector == null && @model.Query?.SelectedMaterial == null))
            {
                @model.Query.ShowAllData = true;
                @model.Query?.Reset();
                System.Web.HttpContext.Current.Session.Remove("results");
                ClientCommand(ClientCommands.MAP_REFRESH, "NewMap");
            }
            else
            {
                @model.Query.ShowAllData = false;
                DigicircMatchmaking.ExternalStructs.ElasticSearch.SearchResponse responseElastic = DigicircMatchmaking.BO.ElasticConsumerExtensions.Search(@model.Query);
                System.Collections.Generic.List<DigicircMatchmaking.BO.ActorNames> actorNames = DigicircMatchmaking.BO.ActorExtensions.GetActorNamesFromElasticResponse(responseElastic);
                @model.Query.ActorNames = actorNames.ToList();
                System.Web.HttpContext.Current.Session.Add("results", @model.Query);
                ClientCommand(ClientCommands.MAP_REFRESH, "NewMap");
                ClientCommand(ClientCommands.EXECUTE_JS, "setTimeout(function(){_commander.gridGotoFirstPage(['Table']);},50);");
            }
            return _result;
        }
        /*<ControllerActionImplementation:Refresh:1/>*/
        public ActionResult ExecuteRefresh()
        {
            ActionResult _result = null;
            ClientCommand(ClientCommands.GRID_REFRESH, "Table");
            ClientCommand(ClientCommands.EXECUTE_JS, "setTimeout(function(){_commander.gridGotoFirstPage(['Table']);},50);");
            ClientCommand(ClientCommands.EXECUTE_JS, "setTimeout(function(){ window._commander.imageRefresh(['lblLogods']) }, 200);");
            return _result;
        }
        /*<ControllerActionImplementation:Reset:1/>*/
        public ActionResult ExecuteReset()
        {
            ActionResult _result = null;
            @model.Query?.Reset();
            @model.Query.ShowAllData = true;
            System.Web.HttpContext.Current.Session.Remove("results");
            ClientCommand(ClientCommands.MAP_REFRESH, "NewMap");
            ClientCommand(ClientCommands.EXECUTE_JS, "setTimeout(function(){_commander.gridGotoFirstPage(['Table']);},50);");
            ClientCommand(ClientCommands.EXECUTE_JS, "setTimeout(function(){_commander.gridClearState(['Table']);},50);");
            return _result;
        }
        /*<ControllerActionImplementation:Action:1/>*/
        public ActionResult ExecuteAction()
        {
            ActionResult _result = null;
            return _result;
        }
        /*<ControllerActionImplementation:GoToActorForm:1/>*/
        public ActionResult ExecuteGoToActorForm(int? id)
        {
            ActionResult _result = null;
            ClientCommand(ClientCommands.EXECUTE_JS, "_commander.gridSaveState(['Table']);");
            _result = GetRedirectInfo("ActorViewForm", "Show", new  RouteValueDictionary(new { id = id, fromGraph = false }));
            return _result;
        }
        #endregion
        #region Datasource controls
        /*<Datasource:DropdownCountryDataSet:1/>*/
        /*<DataSourceFilter:DropdownCountryDataSet:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Country> Get_DropdownCountryDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_DropdownCountryDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Country> Get_DropdownCountryDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DigicircMatchmaking.BO.CountryExtensions.GetCountriesSearchOptions().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:DropdownCountryDataSet:1/>*/

        [HttpPost]
        [Route("DropdownCountryDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "CountryDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult DropdownCountryDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_DropdownCountryDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new CountryDataSet_CountryDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SearchFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "DropdownCountryDataSet");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:DropdownCountryDataSet:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "CountryDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("DropdownCountryDataSet_Datasource")]
        public JsonResult DropdownCountryDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_DropdownCountryDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownCountryDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownCountryDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownCountryDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.ToList().Select(i => new CountryDataSet_CountryDTO(i, true)).ToList();
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:DropdownBox:1/>*/
        /*<DataSourceFilter:DropdownBox:2/>*/
        public IQueryable<DigicircMatchmaking.BO.SectorType> Get_DropdownBox_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_DropdownBox_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderBy(@this => @this.Value != null ? @this.Value : null)
                          ;
            }
            if (!__request.OrderBy.Any() && __request.GroupBy.Any())
            {
                var columnInfo0 = new ColumnInfo("Value", "string");
                var orderByInfo0 = new OrderByInfo(columnInfo0,OrderByDirection.ASC);
                __request.OrderBy.Add(orderByInfo0);
            }
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.SectorType> Get_DropdownBox_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.SectorType>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:DropdownBox:1/>*/

        [HttpPost]
        [Route("DropdownBox_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SectorTypeDataset", ClaimType = ClaimTypes.Dataset)]
        public JsonResult DropdownBox_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_DropdownBox_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SectorTypeDataset_SectorTypeDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SearchFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "DropdownBox");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:DropdownBox:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SectorTypeDataset", ClaimType = ClaimTypes.Dataset)]
        [Route("DropdownBox_Datasource")]
        public JsonResult DropdownBox_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_DropdownBox_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.ToList().Select(i => new SectorTypeDataset_SectorTypeDTO(i, true)).ToList();
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:SelectedModeOptionButton:1/>*/

        /*<Datasource:TextBox1:1/>*/
        /*<DataSourceFilter:TextBox1:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Material> Get_TextBox1_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_TextBox1_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderBy(@this => @this.Name != null ? @this.Name : null)
                          ;
            }
            if (!__request.OrderBy.Any() && __request.GroupBy.Any())
            {
                var columnInfo0 = new ColumnInfo("Name", "string");
                var orderByInfo0 = new OrderByInfo(columnInfo0,OrderByDirection.ASC);
                __request.OrderBy.Add(orderByInfo0);
            }
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Material> Get_TextBox1_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Material>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:TextBox1:1/>*/

        [HttpPost]
        [Route("TextBox1_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "MaterialDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult TextBox1_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_TextBox1_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new MaterialDataSet_MaterialDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SearchFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "TextBox1");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:TextBox1:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "MaterialDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("TextBox1_Datasource")]
        public JsonResult TextBox1_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_TextBox1_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_TextBox1_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_TextBox1_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_TextBox1_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.ToList().Select(i => new MaterialDataSet_MaterialDTO(i, true)).ToList();
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:OptionButton:1/>*/

        /*<Datasource:NewMap:1/>*/
        /*<DataSourceFilter:NewMap:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Actor> Get_NewMap_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_NewMap_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Actor> Get_NewMap_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Actor>().AsQueryable();
            System.Collections.Generic.List<string> names = @model.Query?.ActorNames?.Select((n) => n.Name).ToList();
            var _var0 = (@model.Query?.ShowAllData ?? false);
            return __items.Where(@this => _var0 ? true : names.Contains(@this.Name));
        }


        /*<DataSourceGetFullRecordset:NewMap:1/>*/

        [HttpPost]
        [Route("NewMap_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorDataSet1", ClaimType = ClaimTypes.Dataset)]
        public JsonResult NewMap_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_NewMap_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ActorDataSet1_ActorDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SearchFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "NewMap");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:NewMap:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorDataSet1", ClaimType = ClaimTypes.Dataset)]
        [Route("NewMap_Datasource")]
        public JsonResult NewMap_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_NewMap_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_NewMap_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_NewMap_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_NewMap_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            var _dtos = items.ToList().Select(i => new ActorDataSet1_ActorDTO(i, true)).ToList();
            var points = new List<MapHelperPoint>();
            var lines = new List<MapHelperLine>();
            foreach(var _dto in _dtos)
            {
                points.Add(new MapHelperPoint
                {
                    BoundObject = _dto,
                    Coordinates = new MapHelperCoordinates
                    {
                        Latitude = _dto?.Address?.Latitude,
                        Longitude = _dto?.Address?.Longitude
                    }




                });
            }
            var data = new MapHelper { Points = points, Lines = lines };
            response.Data = data.ToGeoJson();
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:Table:1/>*/
        /*<DataSourceFilter:Table:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Actor> Get_Table_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_Table_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Actor> Get_Table_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Actor>().AsQueryable();
            System.Collections.Generic.List<string> names = @model.Query?.ActorNames?.Select((n) => n.Name).ToList();
            var _var0 = (@model.Query?.ShowAllData ?? false);
            return __items.Where(@this => _var0 ? true : names.Contains(@this.Name));
        }


        /*<DataSourceGetFullRecordset:Table:1/>*/

        [HttpPost]
        [Route("Table_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorDataSet1", ClaimType = ClaimTypes.Dataset)]
        public JsonResult Table_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_Table_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ActorDataSet1_ActorDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SearchFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "Table");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:Table:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorDataSet1", ClaimType = ClaimTypes.Dataset)]
        [Route("Table_Datasource")]
        public JsonResult Table_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_Table_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_Table_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_Table_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_Table_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.ToList().Select(i => new ActorDataSet1_ActorDTO(i, true)).ToList();
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ActorDataSet1"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ActorDataSet1", response.Data);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ActorDataSet1", response.Data);
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:Table1:1/>*/
        /*<DataSourceFilter:Table1:2/>*/
        public IQueryable<DigicircMatchmaking.BO.ActorsInfo> Get_Table1_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_Table1_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderByDescending(@this => @this.Count != null ? @this.Count : null)
                          ;
            }
            if (!__request.OrderBy.Any() && __request.GroupBy.Any())
            {
                var columnInfo0 = new ColumnInfo("Count", "int");
                var orderByInfo0 = new OrderByInfo(columnInfo0,OrderByDirection.DESC);
                __request.OrderBy.Add(orderByInfo0);
            }
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.ActorsInfo> Get_Table1_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DigicircMatchmaking.BO.ActorsInfoExtensions.GetData().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:Table1:1/>*/

        [HttpPost]
        [Route("Table1_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorsInfoDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult Table1_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_Table1_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ActorsInfoDataSet_ActorsInfoDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SearchFormViewModel), dataType, items.Select(i => i.ActorsInfoKey.ToString()).ToList(), "Table1");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:Table1:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorsInfoDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("Table1_Datasource")]
        public JsonResult Table1_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_Table1_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_Table1_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_Table1_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_Table1_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.ToList().Select(i => new ActorsInfoDataSet_ActorsInfoDTO(i, true)).ToList();
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ActorsInfoDataSet"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ActorsInfoDataSet", response.Data);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ActorsInfoDataSet", response.Data);
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        private void Table1_GetClientKeysAsGroupIDs(GroupTree<DigicircMatchmaking.BO.ActorsInfo> group)
        {
            if (group.UniqueItemKeys?.Any() == true)
            {
                group.UniqueItemKeys = new List<object>();
                foreach (var item in group.Items)
                {
                    var foundItem = new ActorsInfoDataSet_ActorsInfoDTO(item, true);
                    group.UniqueItemKeys.Add(foundItem._key);
                }
            }
            foreach (var subGroup in group.SubGroups)
                Table1_GetClientKeysAsGroupIDs(subGroup);
        }


        /*<Datasource:SearchForm_CountryDataSet:1/>*/
        /*<DataSourceFilter:SearchForm_CountryDataSet:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Country> Get_SearchForm_CountryDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SearchForm_CountryDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Country> Get_SearchForm_CountryDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DigicircMatchmaking.BO.CountryExtensions.GetCountriesSearchOptions().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:SearchForm_CountryDataSet:1/>*/

        [HttpPost]
        [Route("SearchForm_CountryDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "CountryDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SearchForm_CountryDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SearchForm_CountryDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new CountryDataSet_CountryDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SearchFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "SearchForm_CountryDataSet");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SearchForm_CountryDataSet:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "CountryDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("SearchForm_CountryDataSet_Datasource")]
        public JsonResult SearchForm_CountryDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SearchForm_CountryDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_CountryDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_CountryDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_CountryDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.Country>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:SearchForm_BusinessFunctionDataSet:1/>*/
        /*<DataSourceFilter:SearchForm_BusinessFunctionDataSet:2/>*/
        public IQueryable<DigicircMatchmaking.BO.BusinessFunction> Get_SearchForm_BusinessFunctionDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SearchForm_BusinessFunctionDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.BusinessFunction> Get_SearchForm_BusinessFunctionDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.BusinessFunction>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:SearchForm_BusinessFunctionDataSet:1/>*/

        [HttpPost]
        [Route("SearchForm_BusinessFunctionDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "BusinessFunctionDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SearchForm_BusinessFunctionDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SearchForm_BusinessFunctionDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new BusinessFunctionDataSet_BusinessFunctionDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SearchFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "SearchForm_BusinessFunctionDataSet");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SearchForm_BusinessFunctionDataSet:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "BusinessFunctionDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("SearchForm_BusinessFunctionDataSet_Datasource")]
        public JsonResult SearchForm_BusinessFunctionDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SearchForm_BusinessFunctionDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_BusinessFunctionDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_BusinessFunctionDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_BusinessFunctionDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.BusinessFunction>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:SearchForm_BusinessTypeDataSet:1/>*/
        /*<DataSourceFilter:SearchForm_BusinessTypeDataSet:2/>*/
        public IQueryable<DigicircMatchmaking.BO.BusinessType> Get_SearchForm_BusinessTypeDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SearchForm_BusinessTypeDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.BusinessType> Get_SearchForm_BusinessTypeDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.BusinessType>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:SearchForm_BusinessTypeDataSet:1/>*/

        [HttpPost]
        [Route("SearchForm_BusinessTypeDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "BusinessTypeDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SearchForm_BusinessTypeDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SearchForm_BusinessTypeDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new BusinessTypeDataSet_BusinessTypeDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SearchFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "SearchForm_BusinessTypeDataSet");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SearchForm_BusinessTypeDataSet:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "BusinessTypeDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("SearchForm_BusinessTypeDataSet_Datasource")]
        public JsonResult SearchForm_BusinessTypeDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SearchForm_BusinessTypeDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_BusinessTypeDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_BusinessTypeDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_BusinessTypeDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.BusinessType>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:SearchForm_ActivitiesDataSet:1/>*/
        /*<DataSourceFilter:SearchForm_ActivitiesDataSet:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Activities> Get_SearchForm_ActivitiesDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SearchForm_ActivitiesDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Activities> Get_SearchForm_ActivitiesDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Activities>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:SearchForm_ActivitiesDataSet:1/>*/

        [HttpPost]
        [Route("SearchForm_ActivitiesDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActivitiesDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SearchForm_ActivitiesDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SearchForm_ActivitiesDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ActivitiesDataSet_ActivitiesDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SearchFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "SearchForm_ActivitiesDataSet");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SearchForm_ActivitiesDataSet:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActivitiesDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("SearchForm_ActivitiesDataSet_Datasource")]
        public JsonResult SearchForm_ActivitiesDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SearchForm_ActivitiesDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_ActivitiesDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_ActivitiesDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_ActivitiesDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.Activities>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:SearchForm_AddressDataSet:1/>*/
        /*<DataSourceFilter:SearchForm_AddressDataSet:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Address> Get_SearchForm_AddressDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SearchForm_AddressDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Address> Get_SearchForm_AddressDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Address>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:SearchForm_AddressDataSet:1/>*/

        [HttpPost]
        [Route("SearchForm_AddressDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AddressDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SearchForm_AddressDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SearchForm_AddressDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new AddressDataSet_AddressDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SearchFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "SearchForm_AddressDataSet");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SearchForm_AddressDataSet:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AddressDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("SearchForm_AddressDataSet_Datasource")]
        public JsonResult SearchForm_AddressDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SearchForm_AddressDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_AddressDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_AddressDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_AddressDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.Address>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:SearchForm_SectorTypeDataset:1/>*/
        /*<DataSourceFilter:SearchForm_SectorTypeDataset:2/>*/
        public IQueryable<DigicircMatchmaking.BO.SectorType> Get_SearchForm_SectorTypeDataset_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SearchForm_SectorTypeDataset_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderBy(@this => @this.Value != null ? @this.Value : null)
                          ;
            }
            if (!__request.OrderBy.Any() && __request.GroupBy.Any())
            {
                var columnInfo0 = new ColumnInfo("Value", "string");
                var orderByInfo0 = new OrderByInfo(columnInfo0,OrderByDirection.ASC);
                __request.OrderBy.Add(orderByInfo0);
            }
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.SectorType> Get_SearchForm_SectorTypeDataset_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.SectorType>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:SearchForm_SectorTypeDataset:1/>*/

        [HttpPost]
        [Route("SearchForm_SectorTypeDataset_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SectorTypeDataset", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SearchForm_SectorTypeDataset_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SearchForm_SectorTypeDataset_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SectorTypeDataset_SectorTypeDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SearchFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "SearchForm_SectorTypeDataset");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SearchForm_SectorTypeDataset:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SectorTypeDataset", ClaimType = ClaimTypes.Dataset)]
        [Route("SearchForm_SectorTypeDataset_Datasource")]
        public JsonResult SearchForm_SectorTypeDataset_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SearchForm_SectorTypeDataset_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_SectorTypeDataset_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_SectorTypeDataset_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_SectorTypeDataset_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.SectorType>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:SearchForm_ActorDataSet1:1/>*/
        /*<DataSourceFilter:SearchForm_ActorDataSet1:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Actor> Get_SearchForm_ActorDataSet1_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SearchForm_ActorDataSet1_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Actor> Get_SearchForm_ActorDataSet1_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Actor>().AsQueryable();
            System.Collections.Generic.List<string> names = @model.Query?.ActorNames?.Select((n) => n.Name).ToList();
            var _var0 = (@model.Query?.ShowAllData ?? false);
            return __items.Where(@this => _var0 ? true : names.Contains(@this.Name));
        }


        /*<DataSourceGetFullRecordset:SearchForm_ActorDataSet1:1/>*/

        [HttpPost]
        [Route("SearchForm_ActorDataSet1_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorDataSet1", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SearchForm_ActorDataSet1_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SearchForm_ActorDataSet1_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ActorDataSet1_ActorDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SearchFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "SearchForm_ActorDataSet1");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SearchForm_ActorDataSet1:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorDataSet1", ClaimType = ClaimTypes.Dataset)]
        [Route("SearchForm_ActorDataSet1_Datasource")]
        public JsonResult SearchForm_ActorDataSet1_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SearchForm_ActorDataSet1_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_ActorDataSet1_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_ActorDataSet1_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_ActorDataSet1_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.Actor>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:SearchForm_MaterialDataSet:1/>*/
        /*<DataSourceFilter:SearchForm_MaterialDataSet:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Material> Get_SearchForm_MaterialDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SearchForm_MaterialDataSet_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderBy(@this => @this.Name != null ? @this.Name : null)
                          ;
            }
            if (!__request.OrderBy.Any() && __request.GroupBy.Any())
            {
                var columnInfo0 = new ColumnInfo("Name", "string");
                var orderByInfo0 = new OrderByInfo(columnInfo0,OrderByDirection.ASC);
                __request.OrderBy.Add(orderByInfo0);
            }
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Material> Get_SearchForm_MaterialDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Material>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:SearchForm_MaterialDataSet:1/>*/

        [HttpPost]
        [Route("SearchForm_MaterialDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "MaterialDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SearchForm_MaterialDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SearchForm_MaterialDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new MaterialDataSet_MaterialDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SearchFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "SearchForm_MaterialDataSet");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SearchForm_MaterialDataSet:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "MaterialDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("SearchForm_MaterialDataSet_Datasource")]
        public JsonResult SearchForm_MaterialDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SearchForm_MaterialDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_MaterialDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_MaterialDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_MaterialDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.Material>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:SearchForm_ActorsInfoDataSet:1/>*/
        /*<DataSourceFilter:SearchForm_ActorsInfoDataSet:2/>*/
        public IQueryable<DigicircMatchmaking.BO.ActorsInfo> Get_SearchForm_ActorsInfoDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SearchForm_ActorsInfoDataSet_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderByDescending(@this => @this.Count != null ? @this.Count : null)
                          ;
            }
            if (!__request.OrderBy.Any() && __request.GroupBy.Any())
            {
                var columnInfo0 = new ColumnInfo("Count", "int");
                var orderByInfo0 = new OrderByInfo(columnInfo0,OrderByDirection.DESC);
                __request.OrderBy.Add(orderByInfo0);
            }
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.ActorsInfo> Get_SearchForm_ActorsInfoDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DigicircMatchmaking.BO.ActorsInfoExtensions.GetData().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:SearchForm_ActorsInfoDataSet:1/>*/

        [HttpPost]
        [Route("SearchForm_ActorsInfoDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorsInfoDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SearchForm_ActorsInfoDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SearchForm_ActorsInfoDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ActorsInfoDataSet_ActorsInfoDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(SearchFormViewModel), dataType, items.Select(i => i.ActorsInfoKey.ToString()).ToList(), "SearchForm_ActorsInfoDataSet");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SearchForm_ActorsInfoDataSet:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorsInfoDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("SearchForm_ActorsInfoDataSet_Datasource")]
        public JsonResult SearchForm_ActorsInfoDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SearchForm_ActorsInfoDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_ActorsInfoDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_ActorsInfoDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SearchForm_ActorsInfoDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.ActorsInfo>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.ActorsInfoKey, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
                SearchForm_ActorsInfoDataSet_GetClientKeysAsGroupIDs(groups);
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        private void SearchForm_ActorsInfoDataSet_GetClientKeysAsGroupIDs(GroupTree<DigicircMatchmaking.BO.ActorsInfo> group)
        {
            if (group.UniqueItemKeys?.Any() == true)
            {
                group.UniqueItemKeys = new List<object>();
                foreach (var item in group.Items)
                {
                    var foundItem = new ActorsInfoDataSet_ActorsInfoDTO(item, true);
                    group.UniqueItemKeys.Add(foundItem._key);
                }
            }
            foreach (var subGroup in group.SubGroups)
                SearchForm_ActorsInfoDataSet_GetClientKeysAsGroupIDs(subGroup);
        }


        #endregion

        #region ImageBox controls

        [HttpPost]
        [Route("lblLogods_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult lblLogods_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            try
            {
                var _collection = CLMS.AppDev.Cache.CacheManager.Current.Get<List<ActorDataSet1_ActorDTO>>($"{Request.RequestContext.HttpContext.Session.SessionID}_ActorDataSet1").ToList();
                var parents0 = _collection?.Count() < indexes[0] + 1 ? null : _collection?[indexes[0]];
                var rootInstance = parents0.Convert();
                var fileDataInstance = rootInstance?.ActorLogo;
                var useThumbnail = postedData["useThumbnail"]?.ToString()?.ToLowerInvariant() == "true";
                if (useThumbnail)
                {
                    var _thumb = FileHelper.Thumbnails.GetThumbnail(fileDataInstance?.Id, System.IO.File.ReadAllBytes(fileDataInstance?.GetAbsolutePath()), 0, 0);
                    return Content(Convert.ToBase64String(_thumb));
                }
                else
                {
                    return Content(Convert.ToBase64String(System.IO.File.ReadAllBytes(fileDataInstance?.GetAbsolutePath())));
                }
            }
            catch (Exception x)
            {
                _logger.Error($"Download failed. Possibly file not found. Control 'lblLogods'", x);
                return Content(null);
            }
        }


        #endregion

        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new SearchFormViewModelDTO(@model);
                if (fillDropDownInitialValues)
                {
                    _modelDTO.FillDropDownsInitialValues(@model, this);
                }
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("SearchForm");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult(List<string> groupsToCheck = null)
        {
            try
            {
                RunDataValidations(groupsToCheck);
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: SearchForm, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations(List<string> groupsToCheck = null)
        {
            var masterPageDataValidations = (_parentController as Controllers.MasterPage.MasterPageController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }

        #endregion
    }
}
