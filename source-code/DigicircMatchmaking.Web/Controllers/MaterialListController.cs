// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using AppCode;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.DAL.Queries;
using DigicircMatchmaking.UI.ViewModels.MaterialList;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DigicircMatchmaking.UI.Controllers.MaterialList
{

    [RoutePrefix("MaterialList")]
    public class MaterialListController : ControllerBase<MaterialListViewModel, MaterialListViewModelDTO>
    {

        /*<Form:MaterialList:0/>*/
        public MaterialListController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(MaterialListController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DigicircMatchmaking.UI.ViewModels.SymbiosisMasterPage.SymbiosisMasterPageViewModel
            {
                Title = model.Title, AnalyticsId = model.AnalyticsId
            };
            _parentController = new SymbiosisMasterPage.SymbiosisMasterPageController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public MaterialListController SetModel(MaterialListViewModel m)
        {
            @model = m;
            return this;
        }


        public override void CommitAllFiles()
        {
        }

        public override void CommitAllFilesLegacy()
        {
        }

        public override void ClearPendingFiles()
        {
        }




        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(MaterialListViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }

        [HttpGet]
        [Route("DownloadFile")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "DownloadFile")]
        public FileContentResult DownloadFile(string id)
        {
            return FileHelper.PendingDownloadInstance.DownloadByKey("MaterialList", id);
        }

        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "DownloadFileByPath")]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }


        [Route("SaveListView")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult SaveListView()
        {
            var postedData = _ParsePostedData();
            return SaveListView(postedData, "MaterialList");
        }


        [Route("DeleteListView")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult DeleteListView()
        {
            var postedData = _ParsePostedData();
            return DeleteListView(postedData, "MaterialList");
        }


        [Route("LoadListViews")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult LoadListViews()
        {
            var postedData = _ParsePostedData();
            return LoadListViews(postedData, "MaterialList");
        }



        #region Controller Actions
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="Index", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("Index")]
        [Route("")]

        public ActionResult Index()

        {
            @model = new MaterialListViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_MaterialList"] = "Index";
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="Index", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_Index")]
        public ActionResult _API_Index()

        {
            @model = new MaterialListViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_MaterialList"] = "Index";
            PushToHistory();
            var _masterController = new DigicircMatchmaking.UI.Controllers.SymbiosisMasterPage.SymbiosisMasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteIndex();
            return redirectInfo;
        }


        [CustomControllerActionFilter(ActionName="SendToGraph", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SendToGraph")]
        public ActionResult SendToGraph(System.Collections.Generic.List<DigicircMatchmaking.BO.Material> materials)

        {
            var _data = _LoadViewModel();
            if (!_redirectionFromSameController)
            {
                materials = DeserializeViewModelCollectionProperty<DigicircMatchmaking.BO.Material, ViewModels.MaterialList.MaterialDTO>(_data["materials"].ToString()).ToList();
            }
            var redirectInfo = ExecuteSendToGraph(materials);
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="ResetAll", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("ResetAll")]
        public ActionResult ResetAll()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteResetAll();
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:Index:1/>*/
        public ActionResult ExecuteIndex()
        {
            if (_parentController == null) _parentController = new SymbiosisMasterPage.SymbiosisMasterPageController(new  DigicircMatchmaking.UI.ViewModels.SymbiosisMasterPage.SymbiosisMasterPageViewModel());
            ((SymbiosisMasterPage.SymbiosisMasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = BaseViewPage<string>.GetResourceValue("MaterialList", "RES_PAGETITLE_Index").ToString();
            return _result;
        }
        /*<ControllerActionImplementation:SendToGraph:1/>*/
        public ActionResult ExecuteSendToGraph(System.Collections.Generic.List<DigicircMatchmaking.BO.Material> materials)
        {
            ActionResult _result = null;
            foreach (var material in materials ?? Enumerable.Empty<DigicircMatchmaking.BO.Material>())
            {
                if (((material?.PendingGraph ?? false)))
                {
                    material.PendingGraph = false;
                    new DigicircMatchmaking.DAL.Repository().Save<DigicircMatchmaking.BO.Material>(material);
                    DigicircMatchmaking.BO.MaterialBackendExtensions.CreateKnowledgeMaterial(material);
                }
                else
                {
                    DigicircMatchmaking.BO.MaterialBackendExtensions.UpdateKnowledgeMaterial(material);
                }
            }
            ClientCommand(ClientCommands.DATALIST_REFRESH, "MaterialList");
            string message = materials?.Count() == 1 ? "Material" : "Materials";
            ClientCommand(ClientCommands.SHOW_MESSAGE, message + " Successfully send to graph", MessageType.Success);
            return _result;
        }
        /*<ControllerActionImplementation:ResetAll:1/>*/
        public ActionResult ExecuteResetAll()
        {
            ActionResult _result = null;
            foreach (var material in new DigicircMatchmaking.DAL.Repository().GetAll<DigicircMatchmaking.BO.Material>() ?? Enumerable.Empty<DigicircMatchmaking.BO.Material>())
            {
                material.PendingGraph = true;
                new DigicircMatchmaking.DAL.Repository().Save<DigicircMatchmaking.BO.Material>(material);
            }
            ClientCommand(ClientCommands.DATALIST_REFRESH, "MaterialList");
            return _result;
        }
        #endregion
        #region Datasource controls
        /*<Datasource:MaterialList:1/>*/
        /*<DataSourceFilter:MaterialList:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Material> Get_MaterialList_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_MaterialList_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderByDescending(@this => @this.PendingGraph != null ? @this.PendingGraph : false)
                          .ThenBy(@this => @this.Name != null ? @this.Name : null)
                          ;
            }
            if (!__request.OrderBy.Any() && __request.GroupBy.Any())
            {
                var columnInfo0 = new ColumnInfo("PendingGraph", "bool");
                var orderByInfo0 = new OrderByInfo(columnInfo0,OrderByDirection.DESC);
                __request.OrderBy.Add(orderByInfo0);
                var columnInfo1 = new ColumnInfo("Name", "string");
                var orderByInfo1 = new OrderByInfo(columnInfo1,OrderByDirection.ASC);
                __request.OrderBy.Add(orderByInfo1);
            }
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Material> Get_MaterialList_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Material>().Fetch(i => i.Type)
            .AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:MaterialList:1/>*/

        [HttpPost]
        [Route("MaterialList_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "MaterialDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult MaterialList_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_MaterialList_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new MaterialDataSet_MaterialDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(MaterialListViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "MaterialList");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:MaterialList:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "MaterialDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("MaterialList_Datasource")]
        public JsonResult MaterialList_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_MaterialList_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_MaterialList_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_MaterialList_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_MaterialList_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => new MaterialDataSet_MaterialDTO(i, true)).ToList();
                response.Groups = groups;
                Evaluate_MaterialList_ConditionalFormattings(items.ToList(), response);
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => new MaterialDataSet_MaterialDTO(i, true)).ToList();
                Evaluate_MaterialList_ConditionalFormattings(items.ToList(), response);
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        private void Evaluate_MaterialList_ConditionalFormattings(List<DigicircMatchmaking.BO.Material> items, ListResponse response)
        {
            response.RuleEvaluations = new List<ListRuleEvaluation>();
            foreach (var item in items)
            {
                response.RuleEvaluations.Add(ConditionalFormattingConditional(item));
            }
        }

        /*<DataSourceAggregators:MaterialList:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "MaterialDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("MaterialList_DatasourceAggregators")]
        public JsonResult MaterialList_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_MaterialList_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var comparer = StringComparer.InvariantCultureIgnoreCase;
            var formattings = new Dictionary<string, string>(comparer);
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DigicircMatchmaking.BO.Material>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            string __data = Serialize(aggregatorsResponse);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }




        [Route("MaterialList_ExportV2")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult MaterialList_ExportV2()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var exportOptions = Utilities.Deserialize<ExportOptionsV2>(postedData["exportData"]?.ToString());
            var aggregatorsInfo = DeserializeAggregatorsRequest<DigicircMatchmaking.BO.Material>(postedData["aggregatorsRequest"]?.ToString());
            var downloadKey = MaterialList_ExportV2Implementation(datasourceRequest, exportOptions, aggregatorsInfo);
            string __data = downloadKey;
            var __result = Json(new
            {
                Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        [NonAction]
        public string MaterialList_ExportV2Implementation(DatasourceRequest datasourceRequest,
                ExportOptionsV2 exportOptions, List<AggregatorInfo<DigicircMatchmaking.BO.Material>> aggregatorsInfo,
                Func<MigraDoc.DocumentObjectModel.Document, MigraDoc.DocumentObjectModel.Tables.Table, object> _pdfOvverideFunction = null,
                Func<OfficeOpenXml.ExcelPackage, object> _excelOverrideFunction = null)
        {
            var watch = System.Diagnostics.Stopwatch.StartNew();
            long elapsedMilliseconds = 0;
            switch (exportOptions.Range)
            {
            case ExportHelper.Range.ALL:
                datasourceRequest.StartRow = 0;
                datasourceRequest.PageSize = int.MaxValue;
                break;
            case ExportHelper.Range.TOP100:
                datasourceRequest.StartRow = 0;
                datasourceRequest.PageSize = 100;
                break;
            }
            var queryable = Get_MaterialList_DatasourceQueryable(datasourceRequest);
            var comparer = StringComparer.InvariantCultureIgnoreCase;
            var formattings = new Dictionary<string, string>(comparer);
            var path = "";
            var exportHelper = new ExportHelperV2<DigicircMatchmaking.BO.Material>(exportOptions, new Dictionary<string, Func<DigicircMatchmaking.BO.Material, object>>
            {
                {"Name" , item => item?.Name }, {"Type.Name" , item => item?.Type?.Name }, {"PendingGraph" , item => item?.PendingGraph }, {"Id" , item => item?.Id }, {"IsHazardous" , item => item?.IsHazardous }, {"Description" , item => item?.Description }, {"HsSpecific" , item => item?.HsSpecific },
            });
            if (exportHelper.Options.ColumnInfo == null)
            {
                exportHelper.Options.ColumnInfo = new List<ColumnOptionsV2>
                {
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("MaterialList", "RES_LIST_MaterialList_COLUMN_Name"), Formatting = "", Name = "Name", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("MaterialList", "RES_LIST_MaterialList_COLUMN_Type.Name"), Formatting = "", Name = "Type.Name", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("MaterialList", "RES_LIST_MaterialList_COLUMN_PendingGraph"), Formatting = "", Name = "PendingGraph", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("MaterialList", "RES_LIST_MaterialList_COLUMN_Id"), Formatting = "", Name = "Id", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("MaterialList", "RES_LIST_MaterialList_COLUMN_IsHazardous"), Formatting = "", Name = "IsHazardous", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("MaterialList", "RES_LIST_MaterialList_COLUMN_Description"), Formatting = "", Name = "Description", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("MaterialList", "RES_LIST_MaterialList_COLUMN_HsSpecific"), Formatting = "", Name = "HsSpecific", ExcelFormat = @"" },

                };
            }
            if (string.IsNullOrWhiteSpace(exportHelper.Options.Filename))
            {
                exportHelper.Options.Filename = "MaterialList";
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, aggregatorsInfo);
                var aggregators = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, aggregatorsInfo, true);
                GroupsHelper.FormatGroupedAggregators(aggregators, formattings);
                watch.Stop();
                elapsedMilliseconds = watch.ElapsedMilliseconds;
                _logger.Info($"ExportV2 Performance: MaterialList export query with grouping and range {exportOptions.Range} took {elapsedMilliseconds}ms");
                watch.Restart();
                path = exportHelper.Export(groups, aggregators, null, _pdfOvverideFunction, _excelOverrideFunction);
                watch.Stop();
                elapsedMilliseconds += watch.ElapsedMilliseconds;
                _logger.Info($"ExportV2 Performance: MaterialList export to excel with grouping and range {exportOptions.Range} took {watch.ElapsedMilliseconds}ms");
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                var loadedItems = items.ToList();
                watch.Stop();
                elapsedMilliseconds = watch.ElapsedMilliseconds;
                _logger.Info($"ExportV2 Performance: MaterialList export query with range {exportOptions.Range} took {elapsedMilliseconds}ms");
                watch.Restart();
                path = exportHelper.Export(loadedItems, aggregators, _pdfOvverideFunction, _excelOverrideFunction);
                watch.Stop();
                elapsedMilliseconds += watch.ElapsedMilliseconds;
                _logger.Info($"ExportV2 Performance: MaterialList export to excel with range {exportOptions.Range} took {elapsedMilliseconds}ms");
            }
            var content = System.IO.File.ReadAllBytes(Path.Combine(Path.GetTempPath(), path));
            var fileName = Path.GetFileName(path);
            var downloadKey = FileHelper.PendingDownloadInstance.Add("MaterialList", content, fileName);
            _logger.Info($"ExportV2 Performance: Total export time for MaterialList: {elapsedMilliseconds}ms");
            return downloadKey;
        }



        /*<Datasource:MaterialList_MaterialDataSet:1/>*/
        /*<DataSourceFilter:MaterialList_MaterialDataSet:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Material> Get_MaterialList_MaterialDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_MaterialList_MaterialDataSet_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderByDescending(@this => @this.PendingGraph != null ? @this.PendingGraph : false)
                          .ThenBy(@this => @this.Name != null ? @this.Name : null)
                          ;
            }
            if (!__request.OrderBy.Any() && __request.GroupBy.Any())
            {
                var columnInfo0 = new ColumnInfo("PendingGraph", "bool");
                var orderByInfo0 = new OrderByInfo(columnInfo0,OrderByDirection.DESC);
                __request.OrderBy.Add(orderByInfo0);
                var columnInfo1 = new ColumnInfo("Name", "string");
                var orderByInfo1 = new OrderByInfo(columnInfo1,OrderByDirection.ASC);
                __request.OrderBy.Add(orderByInfo1);
            }
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Material> Get_MaterialList_MaterialDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Material>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:MaterialList_MaterialDataSet:1/>*/

        [HttpPost]
        [Route("MaterialList_MaterialDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "MaterialDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult MaterialList_MaterialDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_MaterialList_MaterialDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new MaterialDataSet_MaterialDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(MaterialListViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "MaterialList_MaterialDataSet");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:MaterialList_MaterialDataSet:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "MaterialDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("MaterialList_MaterialDataSet_Datasource")]
        public JsonResult MaterialList_MaterialDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_MaterialList_MaterialDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_MaterialList_MaterialDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_MaterialList_MaterialDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_MaterialList_MaterialDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.Material>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        #endregion

        /*<CondionalFormating:ConditionalFormattingConditional:1/>*/
        [zAppDev.DotNet.Framework.Mvc.Rule(RuleType.ListConditionalFormatting, EvalTime.OnLoad, EvalTime.OnSubmit, EvalTime.OnChange)]
        public ListRuleEvaluation ConditionalFormattingConditional(DigicircMatchmaking.BO.Material parents0)
        {
            Func<bool> __evaluation = () =>
            {
                /*<ConditionalFormattingEvaluation:ConditionalFormattingConditional:2/>*/
                return (parents0?.PendingGraph ?? false);
            };
            return new ListRuleEvaluation
            {
                RuleName = "ConditionalFormattingConditional",
                Status =  __evaluation.Invoke(),
                Key = parents0.Id,
                ApplyToRow = true,
                ColumnNames = new List<string>() {  },
            };
        }


        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new MaterialListViewModelDTO(@model);
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("MaterialList");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult(List<string> groupsToCheck = null)
        {
            try
            {
                RunDataValidations(groupsToCheck);
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: MaterialList, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations(List<string> groupsToCheck = null)
        {
            var masterPageDataValidations = (_parentController as Controllers.SymbiosisMasterPage.SymbiosisMasterPageController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }

        #endregion
    }
}
