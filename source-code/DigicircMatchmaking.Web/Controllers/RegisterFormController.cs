// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using AppCode;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.DAL.Queries;
using DigicircMatchmaking.UI.ViewModels.RegisterForm;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DigicircMatchmaking.UI.Controllers.RegisterForm
{

    [RoutePrefix("RegisterForm")]
    public class RegisterFormController : ControllerBase<RegisterFormViewModel, RegisterFormViewModelDTO>
    {

        /*<Form:RegisterForm:0/>*/
        public RegisterFormController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(RegisterFormController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DigicircMatchmaking.UI.ViewModels.MasterPageSignIn.MasterPageSignInViewModel
            {

            };
            _parentController = new MasterPageSignIn.MasterPageSignInController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public RegisterFormController SetModel(RegisterFormViewModel m)
        {
            @model = m;
            return this;
        }


        public override void CommitAllFiles()
        {
        }

        public override void CommitAllFilesLegacy()
        {
        }

        public override void ClearPendingFiles()
        {
        }




        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(RegisterFormViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }


        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "DownloadFileByPath")]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }




        #region Controller Actions
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="Index", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("Index/{*fromMatching:bool?}")]
        public ActionResult Index(bool fromMatching = false)

        {
            @model = new RegisterFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_RegisterForm"] = "Index";
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="Index", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_Index/{*fromMatching:bool?}")]
        public ActionResult _API_Index(bool fromMatching = false)

        {
            @model = new RegisterFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_RegisterForm"] = "Index";
            PushToHistory();
            var _masterController = new DigicircMatchmaking.UI.Controllers.MasterPageSignIn.MasterPageSignInController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteIndex(fromMatching);
            return redirectInfo;
        }


        [CustomControllerActionFilter(CausesValidation=true, ActionName="Register", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Register")]
        public ActionResult Register()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteRegister();
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:Index:1/>*/
        public ActionResult ExecuteIndex(bool fromMatching)
        {
            if (_parentController == null) _parentController = new MasterPageSignIn.MasterPageSignInController(new  DigicircMatchmaking.UI.ViewModels.MasterPageSignIn.MasterPageSignInViewModel());
            ((MasterPageSignIn.MasterPageSignInController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.FromMatching = fromMatching;
            return _result;
        }
        /*<ControllerActionImplementation:Register:1/>*/
        public ActionResult ExecuteRegister()
        {
            ActionResult _result = null;
            if ((@model.AcceptTerms == false))
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, "Terms must be accepted!");
                return null;
            }
            if ((new DigicircMatchmaking.DAL.Repository().GetCount<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>((a) => a.UserName == @model.UserName) > 0))
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, "There is another user with the same username", MessageType.Error);
                return null;
            }
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "RegisterForm", DigicircMatchmaking.Hubs.EventsHub.RaiseDebugMessage, "aaaaaa");
            zAppDev.DotNet.Framework.Identity.Model.ApplicationRole userRole = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>((r) => r.Name == "User")?.FirstOrDefault();
            if ((userRole == null))
            {
                throw new Exception("No Suitable role found in Database!");
            }
            @model.DigicircUser?.AddRoles(userRole);
            @model.DigicircUser.UserName = @model.UserName;
            @model.DigicircUser.Name = (@model.DigicircUser?.FirstName ?? "") + " " + (@model.DigicircUser?.LastName ?? "");
            string possibleError = zAppDev.DotNet.Framework.Identity.IdentityHelper.CreateUser(@model.DigicircUser, (@model.Password?.Trim() ?? ""));
            if ((((possibleError == null || possibleError == "")) == false))
            {
                ClientCommand(ClientCommands.SHOW_MESSAGE, possibleError, MessageType.Error);
                return null;
            }
            _result = GetRedirectInfo("SignInPage", "Load", new  RouteValueDictionary(new { fromMatching = @model.FromMatching }));
            return _result;
        }
        #endregion
        #region Datasource controls
        /*<Datasource:RegisterForm_ProfileDataSource:1/>*/
        /*<DataSourceFilter:RegisterForm_ProfileDataSource:2/>*/
        public IQueryable<zAppDev.DotNet.Framework.Identity.Model.Profile> Get_RegisterForm_ProfileDataSource_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_RegisterForm_ProfileDataSource_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<zAppDev.DotNet.Framework.Identity.Model.Profile> Get_RegisterForm_ProfileDataSource_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<zAppDev.DotNet.Framework.Identity.Model.Profile>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:RegisterForm_ProfileDataSource:1/>*/

        [HttpPost]
        [Route("RegisterForm_ProfileDataSource_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ProfileDataSource", ClaimType = ClaimTypes.Dataset)]
        public JsonResult RegisterForm_ProfileDataSource_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_RegisterForm_ProfileDataSource_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ProfileDataSource_ProfileDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(RegisterFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "RegisterForm_ProfileDataSource");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:RegisterForm_ProfileDataSource:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ProfileDataSource", ClaimType = ClaimTypes.Dataset)]
        [Route("RegisterForm_ProfileDataSource_Datasource")]
        public JsonResult RegisterForm_ProfileDataSource_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_RegisterForm_ProfileDataSource_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_RegisterForm_ProfileDataSource_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_RegisterForm_ProfileDataSource_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_RegisterForm_ProfileDataSource_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<zAppDev.DotNet.Framework.Identity.Model.Profile>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        #endregion

        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new RegisterFormViewModelDTO(@model);
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("RegisterForm");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult(List<string> groupsToCheck = null)
        {
            try
            {
                RunDataValidations(groupsToCheck);
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: RegisterForm, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations(List<string> groupsToCheck = null)
        {
            viewDTO.RuleEvaluations.DataValidations.Add(EmptyUsernameValidation(groupsToCheck));
            viewDTO.RuleEvaluations.DataValidations.Add(PasswordsMatchValidation(groupsToCheck));
            var masterPageDataValidations = (_parentController as Controllers.MasterPageSignIn.MasterPageSignInController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }


        /*<DataValidation:EmptyUsernameValidation:1/>*/
        [zAppDev.DotNet.Framework.Mvc.Rule(RuleType.DataValidation, EvalTime.OnSubmit)]
        public RuleResult EmptyUsernameValidation(List<string> groupsToCheck = null)
        {
            var __evaluations = new List<RuleEvaluation>();
            Func<int[], bool> __evaluation = (indexes) =>
            {
                /*<DataValidationCondition:EmptyUsernameValidation:2/>*/
                return @model.UserName?.Trim() == "";
            };
            Func<string> __message = () =>
            {
                /*<DataValidationMesage:EmptyUsernameValidation:2/>*/
                return BaseViewPage<string>.GetResourceValue("RegisterForm", "RES_DATAVALIDATION_MESSAGE_EmptyUsername").ToString();
            };
            var __indexes = new int[] {};
            var __status = __evaluation.Invoke(__indexes);
            var __messageToSend = __status == true ? __message.Invoke() : null;
            __evaluations.Add(new RuleEvaluation
            {
                Status = __status,
                Expression = __messageToSend,
                Indexes = __indexes,
                DataValidationMessageType = DataValidationMessageType.ERROR
            });
            return new RuleResult
            {
                Name = "EmptyUsernameValidation",
                Evaluations = __evaluations
            };
        }


        /*<DataValidation:PasswordsMatchValidation:1/>*/
        [zAppDev.DotNet.Framework.Mvc.Rule(RuleType.DataValidation, EvalTime.OnSubmit)]
        public RuleResult PasswordsMatchValidation(List<string> groupsToCheck = null)
        {
            var __evaluations = new List<RuleEvaluation>();
            Func<int[], bool> __evaluation = (indexes) =>
            {
                /*<DataValidationCondition:PasswordsMatchValidation:2/>*/
                return (@model.Password == null || @model.Password == "") && (@model.RetypePassword == null || @model.RetypePassword == "") && @model.Password?.Trim() != @model.RetypePassword?.Trim();
            };
            Func<string> __message = () =>
            {
                /*<DataValidationMesage:PasswordsMatchValidation:2/>*/
                return BaseViewPage<string>.GetResourceValue("RegisterForm", "RES_DATAVALIDATION_MESSAGE_PasswordsMatch").ToString();
            };
            var __indexes = new int[] {};
            var __status = __evaluation.Invoke(__indexes);
            var __messageToSend = __status == true ? __message.Invoke() : null;
            __evaluations.Add(new RuleEvaluation
            {
                Status = __status,
                Expression = __messageToSend,
                Indexes = __indexes,
                DataValidationMessageType = DataValidationMessageType.ERROR
            });
            return new RuleResult
            {
                Name = "PasswordsMatchValidation",
                Evaluations = __evaluations
            };
        }

        #endregion
    }
}
