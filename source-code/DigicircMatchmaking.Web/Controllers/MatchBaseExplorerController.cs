// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using AppCode;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.DAL.Queries;
using DigicircMatchmaking.UI.ViewModels.MatchBaseExplorer;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DigicircMatchmaking.UI.Controllers.MatchBaseExplorer
{

    [RoutePrefix("MatchBaseExplorer")]
    public class MatchBaseExplorerController : ControllerBase<MatchBaseExplorerViewModel, MatchBaseExplorerViewModelDTO>
    {

        /*<Form:MatchBaseExplorer:0/>*/
        public MatchBaseExplorerController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(MatchBaseExplorerController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DigicircMatchmaking.UI.ViewModels.MasterPage.MasterPageViewModel
            {
                Title = model.Title, AnalyticsId = model.AnalyticsId
            };
            _parentController = new MasterPage.MasterPageController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public MatchBaseExplorerController SetModel(MatchBaseExplorerViewModel m)
        {
            @model = m;
            return this;
        }


        public override void CommitAllFiles()
        {
        }

        public override void CommitAllFilesLegacy()
        {
        }

        public override void ClearPendingFiles()
        {
        }




        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(MatchBaseExplorerViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }

        [HttpGet]
        [Route("DownloadFile")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "DownloadFile")]
        public FileContentResult DownloadFile(string id)
        {
            return FileHelper.PendingDownloadInstance.DownloadByKey("MatchBaseExplorer", id);
        }

        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "DownloadFileByPath")]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }


        [Route("SaveListView")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult SaveListView()
        {
            var postedData = _ParsePostedData();
            return SaveListView(postedData, "MatchBaseExplorer");
        }


        [Route("DeleteListView")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult DeleteListView()
        {
            var postedData = _ParsePostedData();
            return DeleteListView(postedData, "MatchBaseExplorer");
        }


        [Route("LoadListViews")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult LoadListViews()
        {
            var postedData = _ParsePostedData();
            return LoadListViews(postedData, "MatchBaseExplorer");
        }



        #region Controller Actions
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="Index", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("Index")]
        public ActionResult Index()

        {
            @model = new MatchBaseExplorerViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_MatchBaseExplorer"] = "Index";
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="Index", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_Index")]
        public ActionResult _API_Index()

        {
            @model = new MatchBaseExplorerViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_MatchBaseExplorer"] = "Index";
            PushToHistory();
            var _masterController = new DigicircMatchmaking.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteIndex();
            return redirectInfo;
        }


        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="FromBack", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("FromBack/{*id:int?}")]
        public ActionResult FromBack(int? id)

        {
            @model = new MatchBaseExplorerViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_MatchBaseExplorer"] = "FromBack";
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="FromBack", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_FromBack/{*id:int?}")]
        public ActionResult _API_FromBack(int? id)

        {
            @model = new MatchBaseExplorerViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_MatchBaseExplorer"] = "FromBack";
            PushToHistory();
            var _masterController = new DigicircMatchmaking.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteFromBack(id);
            return redirectInfo;
        }


        [CustomControllerActionFilter(ActionName="ChangeMode", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("ChangeMode")]
        public ActionResult ChangeMode()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteChangeMode();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, ActionName="Update", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Update")]
        public ActionResult Update()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteUpdate();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="GoToActorForm", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("GoToActorForm")]
        public ActionResult GoToActorForm(int? id)

        {
            var _data = _LoadViewModel();
            if (!_redirectionFromSameController)
            {
                var parsedid = 0;
                if (!(int.TryParse(DeserializeViewModelProperty<object>(_data["id"] as Newtonsoft.Json.Linq.JValue)?.ToString(), out parsedid)))
                {
                    throw new ApplicationException("Supplied value cannot be parsed to Datatype 'int' of parameter 'id'");
                }
                id = parsedid;
            }
            var redirectInfo = ExecuteGoToActorForm(id);
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:Index:1/>*/
        public ActionResult ExecuteIndex()
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DigicircMatchmaking.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = BaseViewPage<string>.GetResourceValue("MatchBaseExplorer", "RES_PAGETITLE_Index").ToString();
            string currentUsername = zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName();
            @model.Query.SelectedActor = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Actor>((a) => a.AddedBy.UserName == currentUsername || a.Administrators.Where((b) => b.UserName == currentUsername).Count() > 0)?.FirstOrDefault();
            @model.Query.SearchMode = "offers";
            @model.Query.DisplayMode = "graph";
            @model.Endpoint = zAppDev.DotNet.Framework.Utilities.Common.GetConfigurationKey("GraphDBEndpoint");
            @model.Query.ActorNames = @model.Query?.SelectedActor?.ListPossibleMatches(true).ToList();
            return _result;
        }
        /*<ControllerActionImplementation:FromBack:1/>*/
        public ActionResult ExecuteFromBack(int? id)
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DigicircMatchmaking.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            DigicircMatchmaking.BO.GraphQuery cachedQuery = zAppDev.DotNet.Framework.Utilities.Common.SafeCast<DigicircMatchmaking.BO.GraphQuery>(System.Web.HttpContext.Current.Session["resultsGraph"]);
            if ((cachedQuery != null))
            {
                @model.Query = cachedQuery;
            }
            else
            {
                @model.Query.SelectedActor = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Actor>((a) => a.AddedBy.UserName == zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName())?.FirstOrDefault();
                @model.Query.SearchMode = "offers";
                @model.Query.DisplayMode = "graph";
            }
            @model.Endpoint = zAppDev.DotNet.Framework.Utilities.Common.GetConfigurationKey("GraphDBEndpoint");
            return _result;
        }
        /*<ControllerActionImplementation:ChangeMode:1/>*/
        public ActionResult ExecuteChangeMode()
        {
            ActionResult _result = null;
            System.Web.HttpContext.Current.Session.Add("resultsGraph", @model.Query);
            ClientCommand(ClientCommands.DATALIST_REFRESH, "List");
            return _result;
        }
        /*<ControllerActionImplementation:Update:1/>*/
        public ActionResult ExecuteUpdate()
        {
            ActionResult _result = null;
            if ((@model.Query?.SearchMode == "offers"))
            {
                if (((@model.Query?.ResourceProduct?.Id ?? 0) > 0))
                {
                    ClientCommand(ClientCommands.EXECUTE_JS, "matchOffers('" + (@model.Query?.ResourceProduct?.Resource?.Id ?? 0) + "', '" + (@model.Query?.SelectedActor?.Id ?? 0) + "')");
                }
                else
                {
                    ClientCommand(ClientCommands.EXECUTE_JS, "updateOffers('" + (@model.Query?.SelectedActor?.Id ?? 0) + "')");
                    @model.Query.ActorNames = @model.Query?.SelectedActor?.ListPossibleMatches(true).ToList();
                }
            }
            else
            {
                if (((@model.Query?.DesiredProduct?.Id ?? 0) > 0))
                {
                    ClientCommand(ClientCommands.EXECUTE_JS, "matchRequests('" + (@model.Query?.DesiredProduct?.Resource?.Id ?? 0) + "', '" + (@model.Query?.SelectedActor?.Id ?? 0) + "')");
                }
                else
                {
                    ClientCommand(ClientCommands.EXECUTE_JS, "updateRequests('" + (@model.Query?.SelectedActor?.Id ?? 0) + "')");
                    @model.Query.ActorNames = @model.Query?.SelectedActor?.ListPossibleMatches(false).ToList();
                }
            }
            ClientCommand(ClientCommands.DATALIST_REFRESH, "List");
            System.Web.HttpContext.Current.Session.Add("resultsGraph", @model.Query);
            return _result;
        }
        /*<ControllerActionImplementation:GoToActorForm:1/>*/
        public ActionResult ExecuteGoToActorForm(int? id)
        {
            ActionResult _result = null;
            ClientCommand(ClientCommands.EXECUTE_JS, "_commander.gridSaveState(['Table']);");
            _result = GetRedirectInfo("ActorViewForm", "Show", new  RouteValueDictionary(new { id = id, fromGraph = true }));
            return _result;
        }
        #endregion
        #region Datasource controls
        /*<Datasource:DropdownBox:1/>*/
        /*<DataSourceFilter:DropdownBox:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Actor> Get_DropdownBox_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_DropdownBox_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderBy(@this => @this.Name != null ? @this.Name : null)
                          ;
            }
            if (!__request.OrderBy.Any() && __request.GroupBy.Any())
            {
                var columnInfo0 = new ColumnInfo("Name", "string");
                var orderByInfo0 = new OrderByInfo(columnInfo0,OrderByDirection.ASC);
                __request.OrderBy.Add(orderByInfo0);
            }
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Actor> Get_DropdownBox_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Actor>().AsQueryable();
            string currentUsername = zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName();
            return __items.Where(@this => @this.AddedBy.UserName == currentUsername || @this.Administrators.Where((a) => a.UserName == currentUsername).Count() > 0);
        }


        /*<DataSourceGetFullRecordset:DropdownBox:1/>*/

        [HttpPost]
        [Route("DropdownBox_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorDataset", ClaimType = ClaimTypes.Dataset)]
        public JsonResult DropdownBox_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_DropdownBox_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ActorDataset_ActorDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(MatchBaseExplorerViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "DropdownBox");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:DropdownBox:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorDataset", ClaimType = ClaimTypes.Dataset)]
        [Route("DropdownBox_Datasource")]
        public JsonResult DropdownBox_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_DropdownBox_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.ToList().Select(i => new ActorDataset_ActorDTO(i, true)).ToList();
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:OptionButton:1/>*/

        /*<Datasource:DropdownBox1:1/>*/
        /*<DataSourceFilter:DropdownBox1:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Product> Get_DropdownBox1_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_DropdownBox1_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderBy(@this => @this.Resource != null && @this.Resource.Name != null ? @this.Resource.Name : null)
                          ;
            }
            if (!__request.OrderBy.Any() && __request.GroupBy.Any())
            {
                var columnInfo0 = new ColumnInfo("Resource.Name", "string");
                var orderByInfo0 = new OrderByInfo(columnInfo0,OrderByDirection.ASC);
                __request.OrderBy.Add(orderByInfo0);
            }
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Product> Get_DropdownBox1_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.Query?.SelectedActor?.CircularEconomyRequirements?.DesiredResources?.AsQueryable();
            if (__items == null) return new List<DigicircMatchmaking.BO.Product>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:DropdownBox1:1/>*/

        [HttpPost]
        [Route("DropdownBox1_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "DesiredResourcesDataset", ClaimType = ClaimTypes.Dataset)]
        public JsonResult DropdownBox1_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_DropdownBox1_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new DesiredResourcesDataset_ProductDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(MatchBaseExplorerViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "DropdownBox1");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:DropdownBox1:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "DesiredResourcesDataset", ClaimType = ClaimTypes.Dataset)]
        [Route("DropdownBox1_Datasource")]
        public JsonResult DropdownBox1_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_DropdownBox1_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox1_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox1_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox1_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.ToList().Select(i => new DesiredResourcesDataset_ProductDTO(i, true)).ToList();
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:DropdownBox2:1/>*/
        /*<DataSourceFilter:DropdownBox2:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Product> Get_DropdownBox2_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_DropdownBox2_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderBy(@this => @this.Resource != null && @this.Resource.Name != null ? @this.Resource.Name : null)
                          ;
            }
            if (!__request.OrderBy.Any() && __request.GroupBy.Any())
            {
                var columnInfo0 = new ColumnInfo("Resource.Name", "string");
                var orderByInfo0 = new OrderByInfo(columnInfo0,OrderByDirection.ASC);
                __request.OrderBy.Add(orderByInfo0);
            }
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Product> Get_DropdownBox2_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.Query?.SelectedActor?.CircularEconomyRequirements?.Resources?.AsQueryable();
            if (__items == null) return new List<DigicircMatchmaking.BO.Product>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:DropdownBox2:1/>*/

        [HttpPost]
        [Route("DropdownBox2_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ResourcesDataset", ClaimType = ClaimTypes.Dataset)]
        public JsonResult DropdownBox2_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_DropdownBox2_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ResourcesDataset_ProductDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(MatchBaseExplorerViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "DropdownBox2");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:DropdownBox2:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ResourcesDataset", ClaimType = ClaimTypes.Dataset)]
        [Route("DropdownBox2_Datasource")]
        public JsonResult DropdownBox2_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_DropdownBox2_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox2_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox2_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox2_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.ToList().Select(i => new ResourcesDataset_ProductDTO(i, true)).ToList();
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:OptionButton1:1/>*/

        /*<Datasource:Table:1/>*/
        /*<DataSourceFilter:Table:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Actor> Get_Table_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_Table_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Actor> Get_Table_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Actor>().AsQueryable();
            System.Collections.Generic.List<string> names = @model.Query?.ActorNames?.Select((n) => n.Name).ToList();
            return __items.Where(@this => names.Contains(@this.Name));
        }


        /*<DataSourceGetFullRecordset:Table:1/>*/

        [HttpPost]
        [Route("Table_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorDataSet1", ClaimType = ClaimTypes.Dataset)]
        public JsonResult Table_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_Table_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ActorDataSet1_ActorDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(MatchBaseExplorerViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "Table");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:Table:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorDataSet1", ClaimType = ClaimTypes.Dataset)]
        [Route("Table_Datasource")]
        public JsonResult Table_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_Table_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_Table_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_Table_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_Table_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.ToList().Select(i => new ActorDataSet1_ActorDTO(i, true)).ToList();
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ActorDataSet1"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ActorDataSet1", response.Data);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ActorDataSet1", response.Data);
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:List:1/>*/
        /*<DataSourceFilter:List:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Match> Get_List_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_List_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Match> Get_List_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Match>().Fetch(i => i.Resource)
            .Fetch(i => i.ActorOffer)
            .AsQueryable();
            int? actorId = (@model.Query?.SelectedActor?.Id ?? 0);
            int? resourceId = @model.Query?.SearchMode == "offers" ? (@model.Query?.ResourceProduct?.Resource?.Id ?? 0) : (@model.Query?.DesiredProduct?.Resource?.Id ?? 0);
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "MatchBaseExplorer", DigicircMatchmaking.Hubs.EventsHub.RaiseDebugMessage, "resource Id " + resourceId.GetValueOrDefault(0));
            var _var0 = @model.Query?.SearchMode;
            return __items.Where(@this => ((@this.ActorOffer.Id == actorId && _var0 == "offers") || (@this.ActorRequest.Id == actorId && _var0 == "requests")) && ((resourceId > 0 && @this.Resource.Id == resourceId) || (resourceId == 0)));
        }


        /*<DataSourceGetFullRecordset:List:1/>*/

        [HttpPost]
        [Route("List_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "MatchDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult List_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_List_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new MatchDataSet_MatchDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(MatchBaseExplorerViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "List");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:List:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "MatchDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("List_Datasource")]
        public JsonResult List_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_List_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_List_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_List_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_List_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => new MatchDataSet_MatchDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => new MatchDataSet_MatchDTO(i, true)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<DataSourceAggregators:List:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "MatchDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("List_DatasourceAggregators")]
        public JsonResult List_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_List_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var comparer = StringComparer.InvariantCultureIgnoreCase;
            var formattings = new Dictionary<string, string>(comparer);
            formattings.Add("ValidFrom", "dd/MM/yyyy");
            formattings.Add("ValidTo", "dd/MM/yyyy");
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DigicircMatchmaking.BO.Match>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            string __data = Serialize(aggregatorsResponse);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }




        [Route("List_ExportV2")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult List_ExportV2()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var exportOptions = Utilities.Deserialize<ExportOptionsV2>(postedData["exportData"]?.ToString());
            var aggregatorsInfo = DeserializeAggregatorsRequest<DigicircMatchmaking.BO.Match>(postedData["aggregatorsRequest"]?.ToString());
            var downloadKey = List_ExportV2Implementation(datasourceRequest, exportOptions, aggregatorsInfo);
            string __data = downloadKey;
            var __result = Json(new
            {
                Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        [NonAction]
        public string List_ExportV2Implementation(DatasourceRequest datasourceRequest,
                ExportOptionsV2 exportOptions, List<AggregatorInfo<DigicircMatchmaking.BO.Match>> aggregatorsInfo,
                Func<MigraDoc.DocumentObjectModel.Document, MigraDoc.DocumentObjectModel.Tables.Table, object> _pdfOvverideFunction = null,
                Func<OfficeOpenXml.ExcelPackage, object> _excelOverrideFunction = null)
        {
            var watch = System.Diagnostics.Stopwatch.StartNew();
            long elapsedMilliseconds = 0;
            switch (exportOptions.Range)
            {
            case ExportHelper.Range.ALL:
                datasourceRequest.StartRow = 0;
                datasourceRequest.PageSize = int.MaxValue;
                break;
            case ExportHelper.Range.TOP100:
                datasourceRequest.StartRow = 0;
                datasourceRequest.PageSize = 100;
                break;
            }
            var queryable = Get_List_DatasourceQueryable(datasourceRequest);
            var comparer = StringComparer.InvariantCultureIgnoreCase;
            var formattings = new Dictionary<string, string>(comparer);
            formattings.Add("ValidFrom", "dd/MM/yyyy");
            formattings.Add("ValidTo", "dd/MM/yyyy");
            var path = "";
            var exportHelper = new ExportHelperV2<DigicircMatchmaking.BO.Match>(exportOptions, new Dictionary<string, Func<DigicircMatchmaking.BO.Match, object>>
            {
                {"Id" , item => item?.Id }, {"Resource.Name" , item => item?.Resource?.Name }, {"ActorOffer.Name" , item => item?.ActorOffer?.Name }, {"ActorRequest.Name" , item => item?.ActorRequest?.Name }, {"ValidFrom" , item => item?.ValidFrom }, {"ValidTo" , item => item?.ValidTo }, {"QuantityLack" , item => item?.QuantityLack },
            });
            if (exportHelper.Options.ColumnInfo == null)
            {
                exportHelper.Options.ColumnInfo = new List<ColumnOptionsV2>
                {
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("MatchBaseExplorer", "RES_LIST_List_COLUMN_Id"), Formatting = "", Name = "Id", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("MatchBaseExplorer", "RES_LIST_List_COLUMN_Resource.Name"), Formatting = "", Name = "Resource.Name", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("MatchBaseExplorer", "RES_LIST_List_COLUMN_ActorOffer.Name"), Formatting = "", Name = "ActorOffer.Name", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("MatchBaseExplorer", "RES_LIST_List_COLUMN_ActorRequest.Name"), Formatting = "", Name = "ActorRequest.Name", ExcelFormat = @"" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("MatchBaseExplorer", "RES_LIST_List_COLUMN_ValidFrom"), Formatting = "dd/MM/yyyy", Name = "ValidFrom", ExcelFormat = @"dd/MM/yyyy" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("MatchBaseExplorer", "RES_LIST_List_COLUMN_ValidTo"), Formatting = "dd/MM/yyyy", Name = "ValidTo", ExcelFormat = @"dd/MM/yyyy" },
                    new ColumnOptionsV2 { Caption = BaseViewPage<object>.GetResourceValue("MatchBaseExplorer", "RES_LIST_List_COLUMN_QuantityLack"), Formatting = "", Name = "QuantityLack", ExcelFormat = @"" },

                };
            }
            if (string.IsNullOrWhiteSpace(exportHelper.Options.Filename))
            {
                exportHelper.Options.Filename = "List";
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, aggregatorsInfo);
                var aggregators = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, aggregatorsInfo, true);
                GroupsHelper.FormatGroupedAggregators(aggregators, formattings);
                watch.Stop();
                elapsedMilliseconds = watch.ElapsedMilliseconds;
                _logger.Info($"ExportV2 Performance: List export query with grouping and range {exportOptions.Range} took {elapsedMilliseconds}ms");
                watch.Restart();
                path = exportHelper.Export(groups, aggregators, null, _pdfOvverideFunction, _excelOverrideFunction);
                watch.Stop();
                elapsedMilliseconds += watch.ElapsedMilliseconds;
                _logger.Info($"ExportV2 Performance: List export to excel with grouping and range {exportOptions.Range} took {watch.ElapsedMilliseconds}ms");
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                var loadedItems = items.ToList();
                watch.Stop();
                elapsedMilliseconds = watch.ElapsedMilliseconds;
                _logger.Info($"ExportV2 Performance: List export query with range {exportOptions.Range} took {elapsedMilliseconds}ms");
                watch.Restart();
                path = exportHelper.Export(loadedItems, aggregators, _pdfOvverideFunction, _excelOverrideFunction);
                watch.Stop();
                elapsedMilliseconds += watch.ElapsedMilliseconds;
                _logger.Info($"ExportV2 Performance: List export to excel with range {exportOptions.Range} took {elapsedMilliseconds}ms");
            }
            var content = System.IO.File.ReadAllBytes(Path.Combine(Path.GetTempPath(), path));
            var fileName = Path.GetFileName(path);
            var downloadKey = FileHelper.PendingDownloadInstance.Add("MatchBaseExplorer", content, fileName);
            _logger.Info($"ExportV2 Performance: Total export time for List: {elapsedMilliseconds}ms");
            return downloadKey;
        }



        /*<Datasource:MatchBaseExplorer_ActorDataset:1/>*/
        /*<DataSourceFilter:MatchBaseExplorer_ActorDataset:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Actor> Get_MatchBaseExplorer_ActorDataset_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_MatchBaseExplorer_ActorDataset_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderBy(@this => @this.Name != null ? @this.Name : null)
                          ;
            }
            if (!__request.OrderBy.Any() && __request.GroupBy.Any())
            {
                var columnInfo0 = new ColumnInfo("Name", "string");
                var orderByInfo0 = new OrderByInfo(columnInfo0,OrderByDirection.ASC);
                __request.OrderBy.Add(orderByInfo0);
            }
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Actor> Get_MatchBaseExplorer_ActorDataset_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Actor>().AsQueryable();
            string currentUsername = zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName();
            return __items.Where(@this => @this.AddedBy.UserName == currentUsername || @this.Administrators.Where((a) => a.UserName == currentUsername).Count() > 0);
        }


        /*<DataSourceGetFullRecordset:MatchBaseExplorer_ActorDataset:1/>*/

        [HttpPost]
        [Route("MatchBaseExplorer_ActorDataset_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorDataset", ClaimType = ClaimTypes.Dataset)]
        public JsonResult MatchBaseExplorer_ActorDataset_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_MatchBaseExplorer_ActorDataset_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ActorDataset_ActorDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(MatchBaseExplorerViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "MatchBaseExplorer_ActorDataset");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:MatchBaseExplorer_ActorDataset:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorDataset", ClaimType = ClaimTypes.Dataset)]
        [Route("MatchBaseExplorer_ActorDataset_Datasource")]
        public JsonResult MatchBaseExplorer_ActorDataset_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_MatchBaseExplorer_ActorDataset_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_MatchBaseExplorer_ActorDataset_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_MatchBaseExplorer_ActorDataset_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_MatchBaseExplorer_ActorDataset_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.Actor>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:MatchBaseExplorer_DesiredResourcesDataset:1/>*/
        /*<DataSourceFilter:MatchBaseExplorer_DesiredResourcesDataset:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Product> Get_MatchBaseExplorer_DesiredResourcesDataset_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_MatchBaseExplorer_DesiredResourcesDataset_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderBy(@this => @this.Resource != null && @this.Resource.Name != null ? @this.Resource.Name : null)
                          ;
            }
            if (!__request.OrderBy.Any() && __request.GroupBy.Any())
            {
                var columnInfo0 = new ColumnInfo("Resource.Name", "string");
                var orderByInfo0 = new OrderByInfo(columnInfo0,OrderByDirection.ASC);
                __request.OrderBy.Add(orderByInfo0);
            }
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Product> Get_MatchBaseExplorer_DesiredResourcesDataset_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.Query?.SelectedActor?.CircularEconomyRequirements?.DesiredResources?.AsQueryable();
            if (__items == null) return new List<DigicircMatchmaking.BO.Product>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:MatchBaseExplorer_DesiredResourcesDataset:1/>*/

        [HttpPost]
        [Route("MatchBaseExplorer_DesiredResourcesDataset_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "DesiredResourcesDataset", ClaimType = ClaimTypes.Dataset)]
        public JsonResult MatchBaseExplorer_DesiredResourcesDataset_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_MatchBaseExplorer_DesiredResourcesDataset_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new DesiredResourcesDataset_ProductDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(MatchBaseExplorerViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "MatchBaseExplorer_DesiredResourcesDataset");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:MatchBaseExplorer_DesiredResourcesDataset:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "DesiredResourcesDataset", ClaimType = ClaimTypes.Dataset)]
        [Route("MatchBaseExplorer_DesiredResourcesDataset_Datasource")]
        public JsonResult MatchBaseExplorer_DesiredResourcesDataset_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_MatchBaseExplorer_DesiredResourcesDataset_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_MatchBaseExplorer_DesiredResourcesDataset_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_MatchBaseExplorer_DesiredResourcesDataset_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_MatchBaseExplorer_DesiredResourcesDataset_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.Product>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:MatchBaseExplorer_ResourcesDataset:1/>*/
        /*<DataSourceFilter:MatchBaseExplorer_ResourcesDataset:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Product> Get_MatchBaseExplorer_ResourcesDataset_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_MatchBaseExplorer_ResourcesDataset_DatasourceQueryableImplementation(__request);
// Predefined Ordering
            if (!__request.OrderBy.Any() && !__request.GroupBy.Any())
            {
                __items = __items.OrderBy(@this => @this.Resource != null && @this.Resource.Name != null ? @this.Resource.Name : null)
                          ;
            }
            if (!__request.OrderBy.Any() && __request.GroupBy.Any())
            {
                var columnInfo0 = new ColumnInfo("Resource.Name", "string");
                var orderByInfo0 = new OrderByInfo(columnInfo0,OrderByDirection.ASC);
                __request.OrderBy.Add(orderByInfo0);
            }
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Product> Get_MatchBaseExplorer_ResourcesDataset_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = model?.Query?.SelectedActor?.CircularEconomyRequirements?.Resources?.AsQueryable();
            if (__items == null) return new List<DigicircMatchmaking.BO.Product>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:MatchBaseExplorer_ResourcesDataset:1/>*/

        [HttpPost]
        [Route("MatchBaseExplorer_ResourcesDataset_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ResourcesDataset", ClaimType = ClaimTypes.Dataset)]
        public JsonResult MatchBaseExplorer_ResourcesDataset_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_MatchBaseExplorer_ResourcesDataset_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ResourcesDataset_ProductDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(MatchBaseExplorerViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "MatchBaseExplorer_ResourcesDataset");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:MatchBaseExplorer_ResourcesDataset:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ResourcesDataset", ClaimType = ClaimTypes.Dataset)]
        [Route("MatchBaseExplorer_ResourcesDataset_Datasource")]
        public JsonResult MatchBaseExplorer_ResourcesDataset_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_MatchBaseExplorer_ResourcesDataset_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_MatchBaseExplorer_ResourcesDataset_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_MatchBaseExplorer_ResourcesDataset_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_MatchBaseExplorer_ResourcesDataset_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.Product>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:MatchBaseExplorer_ActorDataSet1:1/>*/
        /*<DataSourceFilter:MatchBaseExplorer_ActorDataSet1:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Actor> Get_MatchBaseExplorer_ActorDataSet1_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_MatchBaseExplorer_ActorDataSet1_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Actor> Get_MatchBaseExplorer_ActorDataSet1_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Actor>().AsQueryable();
            System.Collections.Generic.List<string> names = @model.Query?.ActorNames?.Select((n) => n.Name).ToList();
            return __items.Where(@this => names.Contains(@this.Name));
        }


        /*<DataSourceGetFullRecordset:MatchBaseExplorer_ActorDataSet1:1/>*/

        [HttpPost]
        [Route("MatchBaseExplorer_ActorDataSet1_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorDataSet1", ClaimType = ClaimTypes.Dataset)]
        public JsonResult MatchBaseExplorer_ActorDataSet1_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_MatchBaseExplorer_ActorDataSet1_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ActorDataSet1_ActorDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(MatchBaseExplorerViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "MatchBaseExplorer_ActorDataSet1");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:MatchBaseExplorer_ActorDataSet1:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ActorDataSet1", ClaimType = ClaimTypes.Dataset)]
        [Route("MatchBaseExplorer_ActorDataSet1_Datasource")]
        public JsonResult MatchBaseExplorer_ActorDataSet1_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_MatchBaseExplorer_ActorDataSet1_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_MatchBaseExplorer_ActorDataSet1_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_MatchBaseExplorer_ActorDataSet1_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_MatchBaseExplorer_ActorDataSet1_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.Actor>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:MatchBaseExplorer_MatchDataSet:1/>*/
        /*<DataSourceFilter:MatchBaseExplorer_MatchDataSet:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Match> Get_MatchBaseExplorer_MatchDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_MatchBaseExplorer_MatchDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Match> Get_MatchBaseExplorer_MatchDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Match>().AsQueryable();
            int? actorId = (@model.Query?.SelectedActor?.Id ?? 0);
            int? resourceId = @model.Query?.SearchMode == "offers" ? (@model.Query?.ResourceProduct?.Resource?.Id ?? 0) : (@model.Query?.DesiredProduct?.Resource?.Id ?? 0);
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "MatchBaseExplorer", DigicircMatchmaking.Hubs.EventsHub.RaiseDebugMessage, "resource Id " + resourceId.GetValueOrDefault(0));
            var _var0 = @model.Query?.SearchMode;
            return __items.Where(@this => ((@this.ActorOffer.Id == actorId && _var0 == "offers") || (@this.ActorRequest.Id == actorId && _var0 == "requests")) && ((resourceId > 0 && @this.Resource.Id == resourceId) || (resourceId == 0)));
        }


        /*<DataSourceGetFullRecordset:MatchBaseExplorer_MatchDataSet:1/>*/

        [HttpPost]
        [Route("MatchBaseExplorer_MatchDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "MatchDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult MatchBaseExplorer_MatchDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_MatchBaseExplorer_MatchDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new MatchDataSet_MatchDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(MatchBaseExplorerViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "MatchBaseExplorer_MatchDataSet");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:MatchBaseExplorer_MatchDataSet:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "MatchDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("MatchBaseExplorer_MatchDataSet_Datasource")]
        public JsonResult MatchBaseExplorer_MatchDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_MatchBaseExplorer_MatchDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_MatchBaseExplorer_MatchDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_MatchBaseExplorer_MatchDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_MatchBaseExplorer_MatchDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.Match>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        #endregion

        #region ImageBox controls

        [HttpPost]
        [Route("lblLogods_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult lblLogods_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            try
            {
                var _collection = CLMS.AppDev.Cache.CacheManager.Current.Get<List<ActorDataSet1_ActorDTO>>($"{Request.RequestContext.HttpContext.Session.SessionID}_ActorDataSet1").ToList();
                var parents0 = _collection?.Count() < indexes[0] + 1 ? null : _collection?[indexes[0]];
                var rootInstance = parents0.Convert();
                var fileDataInstance = rootInstance?.ActorLogo;
                var useThumbnail = postedData["useThumbnail"]?.ToString()?.ToLowerInvariant() == "true";
                if (useThumbnail)
                {
                    var _thumb = FileHelper.Thumbnails.GetThumbnail(fileDataInstance?.Id, System.IO.File.ReadAllBytes(fileDataInstance?.GetAbsolutePath()), 0, 0);
                    return Content(Convert.ToBase64String(_thumb));
                }
                else
                {
                    return Content(Convert.ToBase64String(System.IO.File.ReadAllBytes(fileDataInstance?.GetAbsolutePath())));
                }
            }
            catch (Exception x)
            {
                _logger.Error($"Download failed. Possibly file not found. Control 'lblLogods'", x);
                return Content(null);
            }
        }


        #endregion

        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new MatchBaseExplorerViewModelDTO(@model);
                if (fillDropDownInitialValues)
                {
                    _modelDTO.FillDropDownsInitialValues(@model, this);
                }
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("MatchBaseExplorer");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult(List<string> groupsToCheck = null)
        {
            try
            {
                RunDataValidations(groupsToCheck);
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: MatchBaseExplorer, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations(List<string> groupsToCheck = null)
        {
            var masterPageDataValidations = (_parentController as Controllers.MasterPage.MasterPageController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }

        #endregion
    }
}
