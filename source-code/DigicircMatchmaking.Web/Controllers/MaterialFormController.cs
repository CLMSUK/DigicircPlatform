// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using AppCode;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.DAL.Queries;
using DigicircMatchmaking.UI.ViewModels.MaterialForm;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DigicircMatchmaking.UI.Controllers.MaterialForm
{

    [RoutePrefix("MaterialForm")]
    public class MaterialFormController : ControllerBase<MaterialFormViewModel, MaterialFormViewModelDTO>
    {

        /*<Form:MaterialForm:0/>*/
        public MaterialFormController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(MaterialFormController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DigicircMatchmaking.UI.ViewModels.SymbiosisMasterPage.SymbiosisMasterPageViewModel
            {
                Title = model.Title, AnalyticsId = model.AnalyticsId
            };
            _parentController = new SymbiosisMasterPage.SymbiosisMasterPageController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public MaterialFormController SetModel(MaterialFormViewModel m)
        {
            @model = m;
            return this;
        }


        public override void CommitAllFiles()
        {
        }

        public override void CommitAllFilesLegacy()
        {
        }

        public override void ClearPendingFiles()
        {
        }




        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(MaterialFormViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }


        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "DownloadFileByPath")]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }


        [Route("SaveListView")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult SaveListView()
        {
            var postedData = _ParsePostedData();
            return SaveListView(postedData, "MaterialForm");
        }


        [Route("DeleteListView")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult DeleteListView()
        {
            var postedData = _ParsePostedData();
            return DeleteListView(postedData, "MaterialForm");
        }


        [Route("LoadListViews")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult LoadListViews()
        {
            var postedData = _ParsePostedData();
            return LoadListViews(postedData, "MaterialForm");
        }



        #region Controller Actions
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="Add", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("Add")]
        public ActionResult Add()

        {
            @model = new MaterialFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_MaterialForm"] = "Add";
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="Add", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_Add")]
        public ActionResult _API_Add()

        {
            @model = new MaterialFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_MaterialForm"] = "Add";
            PushToHistory();
            var _masterController = new DigicircMatchmaking.UI.Controllers.SymbiosisMasterPage.SymbiosisMasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteAdd();
            return redirectInfo;
        }


        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="Edit", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("Edit/{*id:int?}")]
        public ActionResult Edit(int? id)

        {
            @model = new MaterialFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_MaterialForm"] = "Edit";
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="Edit", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_Edit/{*id:int?}")]
        public ActionResult _API_Edit(int? id)

        {
            @model = new MaterialFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_MaterialForm"] = "Edit";
            PushToHistory();
            var _masterController = new DigicircMatchmaking.UI.Controllers.SymbiosisMasterPage.SymbiosisMasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteEdit(id);
            return redirectInfo;
        }


        [CustomControllerActionFilter(LogEnabled=true, CausesValidation=true, ActionName="Save", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Save")]
        public ActionResult Save()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteSave();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="DeleteConvertedByProcess", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("DeleteConvertedByProcess")]
        public ActionResult DeleteConvertedByProcess(DigicircMatchmaking.BO.Process process)

        {
            var _data = _LoadViewModel();
            if (!_redirectionFromSameController)
            {
                process = DeserializeViewModelProperty<DigicircMatchmaking.BO.Process, ViewModels.MaterialForm.ProcessDTO>(_data["process"].ToString());
            }
            var redirectInfo = ExecuteDeleteConvertedByProcess(process);
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="OpenEditConvertByProcess", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("OpenEditConvertByProcess")]
        public ActionResult OpenEditConvertByProcess(DigicircMatchmaking.BO.Process process)

        {
            var _data = _LoadViewModel();
            if (!_redirectionFromSameController)
            {
                process = DeserializeViewModelProperty<DigicircMatchmaking.BO.Process, ViewModels.MaterialForm.ProcessDTO>(_data["process"].ToString());
            }
            var redirectInfo = ExecuteOpenEditConvertByProcess(process);
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="OpenEditConvertedByProcess", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("OpenEditConvertedByProcess")]
        public ActionResult OpenEditConvertedByProcess(DigicircMatchmaking.BO.Process process)

        {
            var _data = _LoadViewModel();
            if (!_redirectionFromSameController)
            {
                process = DeserializeViewModelProperty<DigicircMatchmaking.BO.Process, ViewModels.MaterialForm.ProcessDTO>(_data["process"].ToString());
            }
            var redirectInfo = ExecuteOpenEditConvertedByProcess(process);
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="DeleteConvertByProcess", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("DeleteConvertByProcess")]
        public ActionResult DeleteConvertByProcess(DigicircMatchmaking.BO.Process process)

        {
            var _data = _LoadViewModel();
            if (!_redirectionFromSameController)
            {
                process = DeserializeViewModelProperty<DigicircMatchmaking.BO.Process, ViewModels.MaterialForm.ProcessDTO>(_data["process"].ToString());
            }
            var redirectInfo = ExecuteDeleteConvertByProcess(process);
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, ActionName="Delete", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Delete")]
        public ActionResult Delete()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteDelete();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="OpenNewConvertedByProcess", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("OpenNewConvertedByProcess")]
        public ActionResult OpenNewConvertedByProcess()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteOpenNewConvertedByProcess();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="OpenNewConvertByProcess", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("OpenNewConvertByProcess")]
        public ActionResult OpenNewConvertByProcess()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteOpenNewConvertByProcess();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="AddNewProcess", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("AddNewProcess")]
        public ActionResult AddNewProcess()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteAddNewProcess();
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:Add:1/>*/
        public ActionResult ExecuteAdd()
        {
            if (_parentController == null) _parentController = new SymbiosisMasterPage.SymbiosisMasterPageController(new  DigicircMatchmaking.UI.ViewModels.SymbiosisMasterPage.SymbiosisMasterPageViewModel());
            ((SymbiosisMasterPage.SymbiosisMasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = BaseViewPage<string>.GetResourceValue("MaterialForm", "RES_PAGETITLE_Add").ToString();
            return _result;
        }
        /*<ControllerActionImplementation:Edit:1/>*/
        public ActionResult ExecuteEdit(int? id)
        {
            if (_parentController == null) _parentController = new SymbiosisMasterPage.SymbiosisMasterPageController(new  DigicircMatchmaking.UI.ViewModels.SymbiosisMasterPage.SymbiosisMasterPageViewModel());
            ((SymbiosisMasterPage.SymbiosisMasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Material =  new DigicircMatchmaking.DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(id);
            @model.Title = BaseViewPage<string>.GetResourceValue("MaterialForm", "RES_PAGETITLE_Edit").ToString();
            return _result;
        }
        /*<ControllerActionImplementation:Save:1/>*/
        public ActionResult ExecuteSave()
        {
            ActionResult _result = null;
            new DigicircMatchmaking.DAL.Repository().Save<DigicircMatchmaking.BO.Material>(@model.Material);
            if ((zAppDev.DotNet.Framework.Utilities.Web.IsInControllerAction("Add")))
            {
                DigicircMatchmaking.BO.MaterialBackendExtensions.CreateKnowledgeMaterial(@model.Material);
            }
            else
            {
                DigicircMatchmaking.BO.MaterialBackendExtensions.UpdateKnowledgeMaterial(@model.Material);
            }
            foreach (var process in @model.NewProcesses ?? Enumerable.Empty<DigicircMatchmaking.BO.Process>())
            {
                new DigicircMatchmaking.DAL.Repository().Save<DigicircMatchmaking.BO.Process>(process);
                DigicircMatchmaking.BO.ProcessBackendExtensions.CreateKnowledgeProcessPlus(process, false);
            }
            foreach (var process in @model.EditedProcesses ?? Enumerable.Empty<DigicircMatchmaking.BO.Process>())
            {
                DigicircMatchmaking.BO.ProcessBackendExtensions.UpdateKnowledgeProcess(process);
            }
            foreach (var process in @model.DeleteProcesses ?? Enumerable.Empty<DigicircMatchmaking.BO.Process>())
            {
                new DigicircMatchmaking.DAL.Repository().DeleteProcess(process);
                DigicircMatchmaking.BO.ProcessBackendExtensions.DeleteKnowledgeProcess(process);
            }
            _result = CloseForm();
            return _result;
        }
        /*<ControllerActionImplementation:DeleteConvertedByProcess:1/>*/
        public ActionResult ExecuteDeleteConvertedByProcess(DigicircMatchmaking.BO.Process process)
        {
            ActionResult _result = null;
            @model.Material?.RemoveConvertedBy(process);
            @model.DeleteProcesses?.Add(process);
            return _result;
        }
        /*<ControllerActionImplementation:OpenEditConvertByProcess:1/>*/
        public ActionResult ExecuteOpenEditConvertByProcess(DigicircMatchmaking.BO.Process process)
        {
            ActionResult _result = null;
            @model.Edited = true;
            @model.ConvertBy = true;
            @model.NewProcess = process;
            ClientCommand(ClientCommands.SHOW_MODAL, $"ProcessModal");
            return _result;
        }
        /*<ControllerActionImplementation:OpenEditConvertedByProcess:1/>*/
        public ActionResult ExecuteOpenEditConvertedByProcess(DigicircMatchmaking.BO.Process process)
        {
            ActionResult _result = null;
            @model.Edited = true;
            @model.ConvertBy = false;
            @model.NewProcess = process;
            ClientCommand(ClientCommands.SHOW_MODAL, $"ProcessModal");
            return _result;
        }
        /*<ControllerActionImplementation:DeleteConvertByProcess:1/>*/
        public ActionResult ExecuteDeleteConvertByProcess(DigicircMatchmaking.BO.Process process)
        {
            ActionResult _result = null;
            @model.Material?.RemoveConvertBy(process);
            @model.DeleteProcesses?.Add(process);
            return _result;
        }
        /*<ControllerActionImplementation:Delete:1/>*/
        public ActionResult ExecuteDelete()
        {
            ActionResult _result = null;
            new DigicircMatchmaking.DAL.Repository().DeleteMaterial(@model.Material);
            DigicircMatchmaking.BO.MaterialBackendExtensions.DeleteKnowledgeMaterial(@model.Material);
            _result = CloseForm();
            return _result;
        }
        /*<ControllerActionImplementation:OpenNewConvertedByProcess:1/>*/
        public ActionResult ExecuteOpenNewConvertedByProcess()
        {
            ActionResult _result = null;
            @model.ConvertBy = false;
            @model.Edited = false;
            @model.NewProcess = new DigicircMatchmaking.BO.Process();
            @model.NewProcess?.AddProduct(@model.Material);
            ClientCommand(ClientCommands.SHOW_MODAL, $"ProcessModal");
            return _result;
        }
        /*<ControllerActionImplementation:OpenNewConvertByProcess:1/>*/
        public ActionResult ExecuteOpenNewConvertByProcess()
        {
            ActionResult _result = null;
            @model.ConvertBy = true;
            @model.Edited = false;
            @model.NewProcess = new DigicircMatchmaking.BO.Process();
            @model.NewProcess?.AddSource(@model.Material);
            ClientCommand(ClientCommands.SHOW_MODAL, $"ProcessModal");
            return _result;
        }
        /*<ControllerActionImplementation:AddNewProcess:1/>*/
        public ActionResult ExecuteAddNewProcess()
        {
            ActionResult _result = null;
            if ((@model.Edited))
            {
                @model.EditedProcesses?.Add(@model.NewProcess);
                if ((@model.ConvertBy))
                {
                    ClientCommand(ClientCommands.GRID_REFRESH, "Table");
                }
                else
                {
                    ClientCommand(ClientCommands.GRID_REFRESH, "Table1");
                }
            }
            else
            {
                if ((@model.ConvertBy))
                {
                    @model.Material?.AddConvertBy(@model.NewProcess);
                }
                else
                {
                    @model.Material?.AddConvertedBy(@model.NewProcess);
                }
                @model.NewProcesses?.Add(@model.NewProcess);
            }
            ClientCommand(ClientCommands.HIDE_MODAL, $"ProcessModal");
            return _result;
        }
        #endregion
        #region Datasource controls
        /*<Datasource:DropdownBox:1/>*/
        /*<DataSourceFilter:DropdownBox:2/>*/
        public IQueryable<DigicircMatchmaking.BO.ProductType> Get_DropdownBox_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_DropdownBox_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.ProductType> Get_DropdownBox_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.ProductType>().AsQueryable();
            return __items;
        }


        /*<DataSourceGetFullRecordset:DropdownBox:1/>*/

        [HttpPost]
        [Route("DropdownBox_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ProductTypeDataset", ClaimType = ClaimTypes.Dataset)]
        public JsonResult DropdownBox_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_DropdownBox_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ProductTypeDataset_ProductTypeDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(MaterialFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "DropdownBox");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:DropdownBox:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ProductTypeDataset", ClaimType = ClaimTypes.Dataset)]
        [Route("DropdownBox_Datasource")]
        public JsonResult DropdownBox_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_DropdownBox_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.ToList().Select(i => new ProductTypeDataset_ProductTypeDTO(i, true)).ToList();
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:DropdownBox1:1/>*/
        /*<DataSourceFilter:DropdownBox1:2/>*/
        public IQueryable<DigicircMatchmaking.BO.PhysicalForm> Get_DropdownBox1_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_DropdownBox1_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.PhysicalForm> Get_DropdownBox1_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.PhysicalForm>().AsQueryable();
            return __items;
        }


        /*<DataSourceGetFullRecordset:DropdownBox1:1/>*/

        [HttpPost]
        [Route("DropdownBox1_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "PhysicalFormDataset", ClaimType = ClaimTypes.Dataset)]
        public JsonResult DropdownBox1_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_DropdownBox1_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new PhysicalFormDataset_PhysicalFormDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(MaterialFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "DropdownBox1");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:DropdownBox1:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "PhysicalFormDataset", ClaimType = ClaimTypes.Dataset)]
        [Route("DropdownBox1_Datasource")]
        public JsonResult DropdownBox1_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_DropdownBox1_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox1_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox1_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox1_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.ToList().Select(i => new PhysicalFormDataset_PhysicalFormDTO(i, true)).ToList();
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:DropdownBox2:1/>*/
        /*<DataSourceFilter:DropdownBox2:2/>*/
        public IQueryable<DigicircMatchmaking.BO.UnitOfMeasurement> Get_DropdownBox2_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_DropdownBox2_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.UnitOfMeasurement> Get_DropdownBox2_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.UnitOfMeasurement>().AsQueryable();
            return __items;
        }


        /*<DataSourceGetFullRecordset:DropdownBox2:1/>*/

        [HttpPost]
        [Route("DropdownBox2_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "UnitOfMeasurementDataset", ClaimType = ClaimTypes.Dataset)]
        public JsonResult DropdownBox2_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_DropdownBox2_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new UnitOfMeasurementDataset_UnitOfMeasurementDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(MaterialFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "DropdownBox2");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:DropdownBox2:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "UnitOfMeasurementDataset", ClaimType = ClaimTypes.Dataset)]
        [Route("DropdownBox2_Datasource")]
        public JsonResult DropdownBox2_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_DropdownBox2_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox2_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox2_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_DropdownBox2_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.ToList().Select(i => new UnitOfMeasurementDataset_UnitOfMeasurementDTO(i, true)).ToList();
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:PickList1:1/>*/
        /*<DataSourceFilter:PickList1:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Material> Get_PickList1_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_PickList1_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Material> Get_PickList1_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Material>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:PickList1:1/>*/

        [HttpPost]
        [Route("PickList1_PickList_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Materials", ClaimType = ClaimTypes.Dataset)]
        public JsonResult PickList1_PickList_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_PickList1_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Materials_MaterialDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(MaterialFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "PickList1");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:PickList1:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Materials", ClaimType = ClaimTypes.Dataset)]
        [Route("PickList1_PickList_Datasource")]
        public JsonResult PickList1_PickList_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_PickList1_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_PickList1_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_PickList1_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_PickList1_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => new Materials_MaterialDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => new Materials_MaterialDTO(i, true)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<DataSourceAggregators:PickList1:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Materials", ClaimType = ClaimTypes.Dataset)]
        [Route("PickList1_PickList_DatasourceAggregators")]
        public JsonResult PickList1_PickList_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_PickList1_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var comparer = StringComparer.InvariantCultureIgnoreCase;
            var formattings = new Dictionary<string, string>(comparer);
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DigicircMatchmaking.BO.Material>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            string __data = Serialize(aggregatorsResponse);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }




        /*<Datasource:PickList:1/>*/
        /*<DataSourceFilter:PickList:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Material> Get_PickList_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_PickList_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Material> Get_PickList_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Material>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:PickList:1/>*/

        [HttpPost]
        [Route("PickList_PickList_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Materials", ClaimType = ClaimTypes.Dataset)]
        public JsonResult PickList_PickList_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_PickList_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Materials_MaterialDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(MaterialFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "PickList");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:PickList:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Materials", ClaimType = ClaimTypes.Dataset)]
        [Route("PickList_PickList_Datasource")]
        public JsonResult PickList_PickList_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_PickList_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_PickList_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_PickList_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_PickList_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => new Materials_MaterialDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => new Materials_MaterialDTO(i, true)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<DataSourceAggregators:PickList:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Materials", ClaimType = ClaimTypes.Dataset)]
        [Route("PickList_PickList_DatasourceAggregators")]
        public JsonResult PickList_PickList_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_PickList_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var comparer = StringComparer.InvariantCultureIgnoreCase;
            var formattings = new Dictionary<string, string>(comparer);
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DigicircMatchmaking.BO.Material>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            string __data = Serialize(aggregatorsResponse);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }




        /*<Datasource:MaterialForm_Materials:1/>*/
        /*<DataSourceFilter:MaterialForm_Materials:2/>*/
        public IQueryable<DigicircMatchmaking.BO.Material> Get_MaterialForm_Materials_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_MaterialForm_Materials_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.Material> Get_MaterialForm_Materials_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.Material>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:MaterialForm_Materials:1/>*/

        [HttpPost]
        [Route("MaterialForm_Materials_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Materials", ClaimType = ClaimTypes.Dataset)]
        public JsonResult MaterialForm_Materials_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_MaterialForm_Materials_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new Materials_MaterialDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(MaterialFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "MaterialForm_Materials");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:MaterialForm_Materials:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "Materials", ClaimType = ClaimTypes.Dataset)]
        [Route("MaterialForm_Materials_Datasource")]
        public JsonResult MaterialForm_Materials_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_MaterialForm_Materials_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_MaterialForm_Materials_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_MaterialForm_Materials_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_MaterialForm_Materials_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.Material>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:MaterialForm_ProductTypeDataset:1/>*/
        /*<DataSourceFilter:MaterialForm_ProductTypeDataset:2/>*/
        public IQueryable<DigicircMatchmaking.BO.ProductType> Get_MaterialForm_ProductTypeDataset_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_MaterialForm_ProductTypeDataset_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.ProductType> Get_MaterialForm_ProductTypeDataset_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.ProductType>().AsQueryable();
            return __items;
        }


        /*<DataSourceGetFullRecordset:MaterialForm_ProductTypeDataset:1/>*/

        [HttpPost]
        [Route("MaterialForm_ProductTypeDataset_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ProductTypeDataset", ClaimType = ClaimTypes.Dataset)]
        public JsonResult MaterialForm_ProductTypeDataset_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_MaterialForm_ProductTypeDataset_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ProductTypeDataset_ProductTypeDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(MaterialFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "MaterialForm_ProductTypeDataset");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:MaterialForm_ProductTypeDataset:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ProductTypeDataset", ClaimType = ClaimTypes.Dataset)]
        [Route("MaterialForm_ProductTypeDataset_Datasource")]
        public JsonResult MaterialForm_ProductTypeDataset_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_MaterialForm_ProductTypeDataset_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_MaterialForm_ProductTypeDataset_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_MaterialForm_ProductTypeDataset_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_MaterialForm_ProductTypeDataset_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.ProductType>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:MaterialForm_PhysicalFormDataset:1/>*/
        /*<DataSourceFilter:MaterialForm_PhysicalFormDataset:2/>*/
        public IQueryable<DigicircMatchmaking.BO.PhysicalForm> Get_MaterialForm_PhysicalFormDataset_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_MaterialForm_PhysicalFormDataset_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.PhysicalForm> Get_MaterialForm_PhysicalFormDataset_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.PhysicalForm>().AsQueryable();
            return __items;
        }


        /*<DataSourceGetFullRecordset:MaterialForm_PhysicalFormDataset:1/>*/

        [HttpPost]
        [Route("MaterialForm_PhysicalFormDataset_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "PhysicalFormDataset", ClaimType = ClaimTypes.Dataset)]
        public JsonResult MaterialForm_PhysicalFormDataset_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_MaterialForm_PhysicalFormDataset_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new PhysicalFormDataset_PhysicalFormDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(MaterialFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "MaterialForm_PhysicalFormDataset");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:MaterialForm_PhysicalFormDataset:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "PhysicalFormDataset", ClaimType = ClaimTypes.Dataset)]
        [Route("MaterialForm_PhysicalFormDataset_Datasource")]
        public JsonResult MaterialForm_PhysicalFormDataset_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_MaterialForm_PhysicalFormDataset_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_MaterialForm_PhysicalFormDataset_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_MaterialForm_PhysicalFormDataset_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_MaterialForm_PhysicalFormDataset_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.PhysicalForm>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        /*<Datasource:MaterialForm_UnitOfMeasurementDataset:1/>*/
        /*<DataSourceFilter:MaterialForm_UnitOfMeasurementDataset:2/>*/
        public IQueryable<DigicircMatchmaking.BO.UnitOfMeasurement> Get_MaterialForm_UnitOfMeasurementDataset_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_MaterialForm_UnitOfMeasurementDataset_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DigicircMatchmaking.BO.UnitOfMeasurement> Get_MaterialForm_UnitOfMeasurementDataset_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DigicircMatchmaking.DAL.Repository().GetAsQueryable<DigicircMatchmaking.BO.UnitOfMeasurement>().AsQueryable();
            return __items;
        }


        /*<DataSourceGetFullRecordset:MaterialForm_UnitOfMeasurementDataset:1/>*/

        [HttpPost]
        [Route("MaterialForm_UnitOfMeasurementDataset_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "UnitOfMeasurementDataset", ClaimType = ClaimTypes.Dataset)]
        public JsonResult MaterialForm_UnitOfMeasurementDataset_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_MaterialForm_UnitOfMeasurementDataset_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new UnitOfMeasurementDataset_UnitOfMeasurementDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(MaterialFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "MaterialForm_UnitOfMeasurementDataset");
            string __data = Utilities.Serialize(data);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:MaterialForm_UnitOfMeasurementDataset:1/>*/

        [HttpPost]

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "UnitOfMeasurementDataset", ClaimType = ClaimTypes.Dataset)]
        [Route("MaterialForm_UnitOfMeasurementDataset_Datasource")]
        public JsonResult MaterialForm_UnitOfMeasurementDataset_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_MaterialForm_UnitOfMeasurementDataset_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_MaterialForm_UnitOfMeasurementDataset_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_MaterialForm_UnitOfMeasurementDataset_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_MaterialForm_UnitOfMeasurementDataset_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DigicircMatchmaking.BO.UnitOfMeasurement>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            string __data = Serialize(response);
            var __result = Json(new
            {
                Type = "DatasourceData",Data = __data
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }



        #endregion

        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new MaterialFormViewModelDTO(@model);
                if (fillDropDownInitialValues)
                {
                    _modelDTO.FillDropDownsInitialValues(@model, this);
                }
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("MaterialForm");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult(List<string> groupsToCheck = null)
        {
            try
            {
                RunDataValidations(groupsToCheck);
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: MaterialForm, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations(List<string> groupsToCheck = null)
        {
            var masterPageDataValidations = (_parentController as Controllers.SymbiosisMasterPage.SymbiosisMasterPageController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }

        #endregion
    }
}
