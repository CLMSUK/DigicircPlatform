// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.UI.Controllers.MatchBaseExplorer;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Locales;
using System.ComponentModel.DataAnnotations;
using DigicircMatchmaking.UI.ViewModels.MasterPage;
using DigicircMatchmaking.UI.Controllers.MasterPage;
namespace DigicircMatchmaking.UI.ViewModels.MatchBaseExplorer
{
    public class MatchBaseExplorerViewModel : MasterPageViewModel
    {
        public string Endpoint;
        public DigicircMatchmaking.BO.GraphQuery Query;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Actor>> DropdownBoxSelectedItems;
        public List<SelectedItemInfo<string>> OptionButtonSelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Product>> DropdownBox1SelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Product>> DropdownBox2SelectedItems;
        public List<SelectedItemInfo<string>> OptionButton1SelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Actor>> TableSelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Match>> ListSelectedItems;


        public MatchBaseExplorerViewModel()
        {
            Query = new DigicircMatchmaking.BO.GraphQuery();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (manager.Session.Contains(Query))
            {
                manager.Session.Evict(Query);
            }
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.UI.ViewModels.MatchBaseExplorer.MatchBaseExplorerViewModel))]
    public class MatchBaseExplorerViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DigicircMatchmaking.UI.ViewModels.MatchBaseExplorer.MatchBaseExplorerViewModel>
    {

        [JsonConstructor]
        public MatchBaseExplorerViewModelDTO() { }
        public MatchBaseExplorerViewModelDTO(DigicircMatchmaking.UI.ViewModels.MatchBaseExplorer.MatchBaseExplorerViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            Endpoint = original.Endpoint;
            Query = original.Query == null ? null : new Query_GraphQueryDTO(original.Query);
            DropdownBoxSelectedItemKeys = original.DropdownBoxSelectedItems == null
                                          ? null
                                          : original.DropdownBoxSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            OptionButtonSelectedItemKeys = original.OptionButtonSelectedItems == null
                                           ? null
                                           : original.OptionButtonSelectedItems.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            DropdownBox1SelectedItemKeys = original.DropdownBox1SelectedItems == null
                                           ? null
                                           : original.DropdownBox1SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            DropdownBox2SelectedItemKeys = original.DropdownBox2SelectedItems == null
                                           ? null
                                           : original.DropdownBox2SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            OptionButton1SelectedItemKeys = original.OptionButton1SelectedItems == null
                                            ? null
                                            : original.OptionButton1SelectedItems.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            TableSelectedItemKeys = original.TableSelectedItems == null
                                    ? null
                                    : original.TableSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            ListSelectedItemKeys = original.ListSelectedItems == null
                                   ? null
                                   : original.ListSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public string Endpoint;
        public Query_GraphQueryDTO Query;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.UI.ViewModels.MatchBaseExplorer.MatchBaseExplorerViewModel).FullName;
        public List<SelectedItemInfo<int?>> DropdownBoxSelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.MatchBaseExplorer.ActorDataset_ActorDTO>> DropdownBox__InitialSelection;
        public List<SelectedItemInfo<string>> OptionButtonSelectedItemKeys;
        public List<SelectedItemInfo<int?>> DropdownBox1SelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.MatchBaseExplorer.DesiredResourcesDataset_ProductDTO>> DropdownBox1__InitialSelection;
        public List<SelectedItemInfo<int?>> DropdownBox2SelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.MatchBaseExplorer.ResourcesDataset_ProductDTO>> DropdownBox2__InitialSelection;
        public List<SelectedItemInfo<string>> OptionButton1SelectedItemKeys;
        public List<SelectedItemInfo<int?>> TableSelectedItemKeys;
        public List<SelectedItemInfo<int?>> ListSelectedItemKeys;

        public new DigicircMatchmaking.UI.ViewModels.MatchBaseExplorer.MatchBaseExplorerViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.UI.ViewModels.MatchBaseExplorer.MatchBaseExplorerViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DigicircMatchmaking.UI.ViewModels.MatchBaseExplorer.MatchBaseExplorerViewModel();
        }
        new  public DigicircMatchmaking.UI.ViewModels.MatchBaseExplorer.MatchBaseExplorerViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.UI.ViewModels.MatchBaseExplorer.MatchBaseExplorerViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.UI.ViewModels.MatchBaseExplorer.MatchBaseExplorerViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.Endpoint = Endpoint;
            original.Query = Query == null
                             ? null
                             : Query.Convert();
            original.DropdownBoxSelectedItems = DropdownBoxSelectedItemKeys == null
                                                ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Actor>>()
                                                : DropdownBoxSelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Actor>(x.SelectedItems.Select(y => ViewModels.MatchBaseExplorer.ActorDataset_ActorDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.OptionButtonSelectedItems = OptionButtonSelectedItemKeys == null
                                                 ? new List<SelectedItemInfo<string>>()
                                                 : OptionButtonSelectedItemKeys.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.DropdownBox1SelectedItems = DropdownBox1SelectedItemKeys == null
                                                 ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Product>>()
                                                 : DropdownBox1SelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Product>(x.SelectedItems.Select(y => ViewModels.MatchBaseExplorer.DesiredResourcesDataset_ProductDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.DropdownBox2SelectedItems = DropdownBox2SelectedItemKeys == null
                                                 ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Product>>()
                                                 : DropdownBox2SelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Product>(x.SelectedItems.Select(y => ViewModels.MatchBaseExplorer.ResourcesDataset_ProductDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.OptionButton1SelectedItems = OptionButton1SelectedItemKeys == null
                                                  ? new List<SelectedItemInfo<string>>()
                                                  : OptionButton1SelectedItemKeys.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.TableSelectedItems = TableSelectedItemKeys == null
                                          ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Actor>>()
                                          : TableSelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Actor>(x.SelectedItems.Select(y => ViewModels.MatchBaseExplorer.ActorDataSet1_ActorDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.ListSelectedItems = ListSelectedItemKeys == null
                                         ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Match>>()
                                         : ListSelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Match>(x.SelectedItems.Select(y => ViewModels.MatchBaseExplorer.MatchDataSet_MatchDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public void FillDropDownsInitialValues(MatchBaseExplorerViewModel original, MatchBaseExplorerController _controller)
        {
            DropdownBox__InitialSelection = new List<SelectedItemInfo<ViewModels.MatchBaseExplorer.ActorDataset_ActorDTO>>();
            DropdownBox1__InitialSelection = new List<SelectedItemInfo<ViewModels.MatchBaseExplorer.DesiredResourcesDataset_ProductDTO>>();
            DropdownBox2__InitialSelection = new List<SelectedItemInfo<ViewModels.MatchBaseExplorer.ResourcesDataset_ProductDTO>>();
            if (original == null) return;
            var DropdownBoxInitiallySelectedItem = original?.Query?.SelectedActor == null
                                                   ? null
                                                   : new DAL.Repository().Get<DigicircMatchmaking.BO.Actor>(c => c.Id == original.Query.SelectedActor.Id).FirstOrDefault();
            if (DropdownBoxInitiallySelectedItem != null)
            {
                DropdownBox__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.MatchBaseExplorer.ActorDataset_ActorDTO>(new List<ViewModels.MatchBaseExplorer.ActorDataset_ActorDTO>
                {
                    new ActorDataset_ActorDTO(DropdownBoxInitiallySelectedItem)
                }, "_", false)
                );
            }
            var DropdownBox1InitiallySelectedItem = original?.Query?.DesiredProduct == null
                                                    ? null
                                                    : new DAL.Repository().Get<DigicircMatchmaking.BO.Product>(c => c.Id == original.Query.DesiredProduct.Id).FirstOrDefault();
            if (DropdownBox1InitiallySelectedItem != null)
            {
                DropdownBox1__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.MatchBaseExplorer.DesiredResourcesDataset_ProductDTO>(new List<ViewModels.MatchBaseExplorer.DesiredResourcesDataset_ProductDTO>
                {
                    new DesiredResourcesDataset_ProductDTO(DropdownBox1InitiallySelectedItem)
                }, "_", false)
                );
            }
            var DropdownBox2InitiallySelectedItem = original?.Query?.ResourceProduct == null
                                                    ? null
                                                    : new DAL.Repository().Get<DigicircMatchmaking.BO.Product>(c => c.Id == original.Query.ResourceProduct.Id).FirstOrDefault();
            if (DropdownBox2InitiallySelectedItem != null)
            {
                DropdownBox2__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.MatchBaseExplorer.ResourcesDataset_ProductDTO>(new List<ViewModels.MatchBaseExplorer.ResourcesDataset_ProductDTO>
                {
                    new ResourcesDataset_ProductDTO(DropdownBox2InitiallySelectedItem)
                }, "_", false)
                );
            }
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.GraphQuery))]
    public class Query_GraphQueryDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.GraphQuery>
    {

        [JsonConstructor]
        public Query_GraphQueryDTO() { }
        public Query_GraphQueryDTO(DigicircMatchmaking.BO.GraphQuery original, bool parentIsDirty = false)
        {
            if (original == null) return;
            DisplayMode = original.DisplayMode;
            SearchMode = original.SearchMode;
            DesiredProduct = original.DesiredProduct == null ? null : new Query_GraphQuery_DesiredProduct_ProductDTO(original.DesiredProduct);
            ResourceProduct = original.ResourceProduct == null ? null : new Query_GraphQuery_ResourceProduct_ProductDTO(original.ResourceProduct);
            SelectedActor = original.SelectedActor == null ? null : new Query_GraphQuery_SelectedActor_ActorDTO(original.SelectedActor);
            ActorNames = original.ActorNames?.Select(x => new Query_GraphQuery_ActorNames_ActorNamesDTO(x)).ToList();
        }
        public string DisplayMode;
        public string SearchMode;
        public Query_GraphQuery_DesiredProduct_ProductDTO DesiredProduct;
        public Query_GraphQuery_ResourceProduct_ProductDTO ResourceProduct;
        public Query_GraphQuery_SelectedActor_ActorDTO SelectedActor;
        public List<Query_GraphQuery_ActorNames_ActorNamesDTO> ActorNames;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.GraphQuery).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.GraphQuery GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.GraphQuery>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DigicircMatchmaking.BO.GraphQuery();
        }
        public DigicircMatchmaking.BO.GraphQuery Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.GraphQuery();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.GraphQuery original)
        {
            if (original == null) return;
            original.DisplayMode = DisplayMode;
            original.SearchMode = SearchMode;
            original.DesiredProduct = DesiredProduct == null
                                      ? null
                                      : DesiredProduct.Convert();
            original.ResourceProduct = ResourceProduct == null
                                       ? null
                                       : ResourceProduct.Convert();
            original.SelectedActor = SelectedActor == null
                                     ? null
                                     : SelectedActor.Convert();
            original.ActorNames = ActorNames == null
                                  ? null
                                  : ActorNames.Select(q => q.Convert()).ToList();
        }
        public  static Query_GraphQueryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            if(string.IsNullOrWhiteSpace(jbID)) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var controller = new MatchBaseExplorerController();
            var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
            var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.GraphQuery>;
            var foundEntry = records.Where(c => c.GraphQueryKey == parsedKey).FirstOrDefault();
            //Second attempt, using the Unique Identifier
            if(foundEntry == null)
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    foundEntry = records.Where(x => x._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if (foundEntry != null)
            {
                return new Query_GraphQueryDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Product))]
    public class Query_GraphQuery_DesiredProduct_ProductDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Product>
    {

        [JsonConstructor]
        public Query_GraphQuery_DesiredProduct_ProductDTO() { }
        public Query_GraphQuery_DesiredProduct_ProductDTO(DigicircMatchmaking.BO.Product original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            IsDesired = original.IsDesired;
            Quantity = original.Quantity;
            ValidFrom = original.ValidFrom;
            ValidTo = original.ValidTo;
            Resource = original.Resource == null ? null : new Query_GraphQuery_DesiredProduct_Product_Resource_MaterialDTO(original.Resource);
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool IsDesired;
        public int? Quantity;
        public DateTime? ValidFrom;
        public DateTime? ValidTo;
        public Query_GraphQuery_DesiredProduct_Product_Resource_MaterialDTO Resource;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Product).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Product GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Product>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Product();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Product Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Product();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Product original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.IsDesired = IsDesired;
            original.Quantity = Quantity;
            original.ValidFrom = ValidFrom;
            original.ValidTo = ValidTo;
            original.Resource = Resource == null
                                ? null
                                : Resource.Convert();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Query_GraphQuery_DesiredProduct_ProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Query_GraphQuery_DesiredProduct_ProductDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class Query_GraphQuery_DesiredProduct_Product_Resource_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public Query_GraphQuery_DesiredProduct_Product_Resource_MaterialDTO() { }
        public Query_GraphQuery_DesiredProduct_Product_Resource_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            Name = original.Name;
            PendingGraph = original.PendingGraph;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public bool PendingGraph;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.PendingGraph = PendingGraph;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Query_GraphQuery_DesiredProduct_Product_Resource_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Query_GraphQuery_DesiredProduct_Product_Resource_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Product))]
    public class Query_GraphQuery_ResourceProduct_ProductDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Product>
    {

        [JsonConstructor]
        public Query_GraphQuery_ResourceProduct_ProductDTO() { }
        public Query_GraphQuery_ResourceProduct_ProductDTO(DigicircMatchmaking.BO.Product original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            IsDesired = original.IsDesired;
            Quantity = original.Quantity;
            ValidFrom = original.ValidFrom;
            ValidTo = original.ValidTo;
            Resource = original.Resource == null ? null : new Query_GraphQuery_ResourceProduct_Product_Resource_MaterialDTO(original.Resource);
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool IsDesired;
        public int? Quantity;
        public DateTime? ValidFrom;
        public DateTime? ValidTo;
        public Query_GraphQuery_ResourceProduct_Product_Resource_MaterialDTO Resource;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Product).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Product GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Product>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Product();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Product Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Product();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Product original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.IsDesired = IsDesired;
            original.Quantity = Quantity;
            original.ValidFrom = ValidFrom;
            original.ValidTo = ValidTo;
            original.Resource = Resource == null
                                ? null
                                : Resource.Convert();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Query_GraphQuery_ResourceProduct_ProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Query_GraphQuery_ResourceProduct_ProductDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class Query_GraphQuery_ResourceProduct_Product_Resource_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public Query_GraphQuery_ResourceProduct_Product_Resource_MaterialDTO() { }
        public Query_GraphQuery_ResourceProduct_Product_Resource_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            Name = original.Name;
            PendingGraph = original.PendingGraph;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public bool PendingGraph;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.PendingGraph = PendingGraph;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Query_GraphQuery_ResourceProduct_Product_Resource_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Query_GraphQuery_ResourceProduct_Product_Resource_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Actor))]
    public class Query_GraphQuery_SelectedActor_ActorDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Actor>
    {

        [JsonConstructor]
        public Query_GraphQuery_SelectedActor_ActorDTO() { }
        public Query_GraphQuery_SelectedActor_ActorDTO(DigicircMatchmaking.BO.Actor original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            ClusterName = original.ClusterName;
            Description = original.Description;
            Email = original.Email;
            GetCountOfClusterMembers = original.GetCountOfClusterMembers;
            HasSites = original.HasSites;
            Id = original.Id;
            Keywords = original.Keywords;
            MemberOfCluster = original.MemberOfCluster;
            Name = original.Name;
            ShortDescription = original.ShortDescription;
            SpecifiedEnityType = original.SpecifiedEnityType;
            Url = original.Url;
            CircularEconomyRequirements = original.CircularEconomyRequirements == null ? null : new Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO(original.CircularEconomyRequirements);
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string ClusterName;
        public string Description;
        public string Email;
        public int? GetCountOfClusterMembers;
        public bool HasSites;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Keywords;
        public bool MemberOfCluster;
        public string Name;
        public string ShortDescription;
        public string SpecifiedEnityType;
        public string Url;
        public Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO CircularEconomyRequirements;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Actor).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Actor GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Actor>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Actor();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Actor Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Actor();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Actor original)
        {
            if (original == null) return;
            original.ClusterName = ClusterName;
            original.Description = Description;
            original.Email = Email;
            original.GetCountOfClusterMembers = GetCountOfClusterMembers;
            original.HasSites = HasSites;
            original.Id = Id ?? 0;
            original.Keywords = Keywords;
            original.MemberOfCluster = MemberOfCluster;
            original.Name = Name;
            original.ShortDescription = ShortDescription;
            original.SpecifiedEnityType = SpecifiedEnityType;
            original.Url = Url;
            original.CircularEconomyRequirements = CircularEconomyRequirements == null
                                                   ? null
                                                   : CircularEconomyRequirements.Convert();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Query_GraphQuery_SelectedActor_ActorDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Query_GraphQuery_SelectedActor_ActorDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.CircularEconomyReport))]
    public class Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.CircularEconomyReport>
    {

        [JsonConstructor]
        public Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO() { }
        public Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO(DigicircMatchmaking.BO.CircularEconomyReport original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            DigitalExpertise = original.DigitalExpertise;
            DigitalProviredNeeded = original.DigitalProviredNeeded;
            ExperienceInCircularEconomy = original.ExperienceInCircularEconomy;
            GetExperienceInCircularEconomy = original.GetExperienceInCircularEconomy;
            Id = original.Id;
            SpecifyExperienceInCircularEconomy = original.SpecifyExperienceInCircularEconomy;
            ThematicExpertiseNeeded = original.ThematicExpertiseNeeded;
            Resources = original.Resources?.Select(x => new Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_ProductDTO(x)).ToList();
            DesiredResources = original.DesiredResources?.Select(x => new Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_ProductDTO(x)).ToList();
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public DigicircMatchmaking.BO.DigitalExpertise? DigitalExpertise;
        public bool DigitalProviredNeeded;
        public bool ExperienceInCircularEconomy;
        public string GetExperienceInCircularEconomy;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string SpecifyExperienceInCircularEconomy;
        public bool ThematicExpertiseNeeded;
        public List<Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_ProductDTO> Resources;
        public List<Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_ProductDTO> DesiredResources;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.CircularEconomyReport).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.CircularEconomyReport GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.CircularEconomyReport>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.CircularEconomyReport();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.CircularEconomyReport>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.CircularEconomyReport Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.CircularEconomyReport();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.CircularEconomyReport original)
        {
            if (original == null) return;
            original.DigitalExpertise = DigitalExpertise;
            original.DigitalProviredNeeded = DigitalProviredNeeded;
            original.ExperienceInCircularEconomy = ExperienceInCircularEconomy;
            original.GetExperienceInCircularEconomy = GetExperienceInCircularEconomy;
            original.Id = Id ?? 0;
            original.SpecifyExperienceInCircularEconomy = SpecifyExperienceInCircularEconomy;
            original.ThematicExpertiseNeeded = ThematicExpertiseNeeded;
            original.Resources = Resources == null
                                 ? null
                                 : Resources.Select(q => q.Convert()).ToList();
            original.DesiredResources = DesiredResources == null
                                        ? null
                                        : DesiredResources.Select(q => q.Convert()).ToList();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.CircularEconomyReport>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Product))]
    public class Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_ProductDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Product>
    {

        [JsonConstructor]
        public Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_ProductDTO() { }
        public Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_ProductDTO(DigicircMatchmaking.BO.Product original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            IsDesired = original.IsDesired;
            Quantity = original.Quantity;
            ValidFrom = original.ValidFrom;
            ValidTo = original.ValidTo;
            Resource = original.Resource == null ? null : new Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_Product_Resource_MaterialDTO(original.Resource);
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool IsDesired;
        public int? Quantity;
        public DateTime? ValidFrom;
        public DateTime? ValidTo;
        public Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_Product_Resource_MaterialDTO Resource;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Product).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Product GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Product>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Product();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Product Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Product();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Product original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.IsDesired = IsDesired;
            original.Quantity = Quantity;
            original.ValidFrom = ValidFrom;
            original.ValidTo = ValidTo;
            original.Resource = Resource == null
                                ? null
                                : Resource.Convert();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_ProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_ProductDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_Product_Resource_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_Product_Resource_MaterialDTO() { }
        public Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_Product_Resource_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            Name = original.Name;
            PendingGraph = original.PendingGraph;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public bool PendingGraph;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.PendingGraph = PendingGraph;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_Product_Resource_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_Product_Resource_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Product))]
    public class Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_ProductDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Product>
    {

        [JsonConstructor]
        public Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_ProductDTO() { }
        public Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_ProductDTO(DigicircMatchmaking.BO.Product original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            IsDesired = original.IsDesired;
            Quantity = original.Quantity;
            ValidFrom = original.ValidFrom;
            ValidTo = original.ValidTo;
            Resource = original.Resource == null ? null : new Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_Product_Resource_MaterialDTO(original.Resource);
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool IsDesired;
        public int? Quantity;
        public DateTime? ValidFrom;
        public DateTime? ValidTo;
        public Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_Product_Resource_MaterialDTO Resource;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Product).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Product GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Product>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Product();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Product Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Product();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Product original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.IsDesired = IsDesired;
            original.Quantity = Quantity;
            original.ValidFrom = ValidFrom;
            original.ValidTo = ValidTo;
            original.Resource = Resource == null
                                ? null
                                : Resource.Convert();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_ProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_ProductDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_Product_Resource_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_Product_Resource_MaterialDTO() { }
        public Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_Product_Resource_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            Name = original.Name;
            PendingGraph = original.PendingGraph;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public bool PendingGraph;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.PendingGraph = PendingGraph;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_Product_Resource_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Query_GraphQuery_SelectedActor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_Product_Resource_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.ActorNames))]
    public class Query_GraphQuery_ActorNames_ActorNamesDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.ActorNames>
    {

        [JsonConstructor]
        public Query_GraphQuery_ActorNames_ActorNamesDTO() { }
        public Query_GraphQuery_ActorNames_ActorNamesDTO(DigicircMatchmaking.BO.ActorNames original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            Name = original.Name;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.ActorNames).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.ActorNames GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.ActorNames>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.ActorNames();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.ActorNames>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.ActorNames Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.ActorNames();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.ActorNames original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Name = Name;
        }
        public static Query_GraphQuery_ActorNames_ActorNamesDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.ActorNames>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Query_GraphQuery_ActorNames_ActorNamesDTO(foundEntry);
            }
            return null;
        }
    }


    #region Datasource DTOs
    [OriginalType(typeof(DigicircMatchmaking.BO.Actor))]
    [DataSetDTO]
    public class ActorDataset_ActorDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Actor>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Actor).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public ActorDataset_ActorDTO() : base() {}
        public  static ActorDataset_ActorDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MatchBaseExplorerController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Actor>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ActorDataset_ActorDTO(foundEntry);
            }
            return null;
        }
        public ActorDataset_ActorDTO(DigicircMatchmaking.BO.Actor original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ActorDataset_ActorDTO(DigicircMatchmaking.BO.Actor original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public static DigicircMatchmaking.BO.Actor GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Actor Convert()
        {
            var model = new DigicircMatchmaking.BO.Actor();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.BO.Product))]
    [DataSetDTO]
    public class DesiredResourcesDataset_ProductDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Product>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Product).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public DesiredResourcesDataset_MaterialDTO Resource;


        [JsonConstructor]
        public DesiredResourcesDataset_ProductDTO() : base() {}
        public  static DesiredResourcesDataset_ProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MatchBaseExplorerController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Product>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new DesiredResourcesDataset_ProductDTO(foundEntry);
            }
            return null;
        }
        public DesiredResourcesDataset_ProductDTO(DigicircMatchmaking.BO.Product original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public DesiredResourcesDataset_ProductDTO(DigicircMatchmaking.BO.Product original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Resource = original.Resource == null
                       ? null
                       : DTOHelper.GetDTOFromModel<DesiredResourcesDataset_MaterialDTO>(original.Resource as DigicircMatchmaking.BO.Material);
        }

        public static DigicircMatchmaking.BO.Product GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Product Convert()
        {
            var model = new DigicircMatchmaking.BO.Product();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Resource = Resource == null
                             ? null
                             : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.Material>(Resource);
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    [DataSetDTO]
    public class DesiredResourcesDataset_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public DesiredResourcesDataset_MaterialDTO() : base() {}
        public  static DesiredResourcesDataset_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MatchBaseExplorerController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Material>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new DesiredResourcesDataset_MaterialDTO(foundEntry);
            }
            return null;
        }
        public DesiredResourcesDataset_MaterialDTO(DigicircMatchmaking.BO.Material original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public DesiredResourcesDataset_MaterialDTO(DigicircMatchmaking.BO.Material original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public static DigicircMatchmaking.BO.Material GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var model = new DigicircMatchmaking.BO.Material();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.BO.Product))]
    [DataSetDTO]
    public class ResourcesDataset_ProductDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Product>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Product).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public ResourcesDataset_MaterialDTO Resource;


        [JsonConstructor]
        public ResourcesDataset_ProductDTO() : base() {}
        public  static ResourcesDataset_ProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MatchBaseExplorerController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Product>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ResourcesDataset_ProductDTO(foundEntry);
            }
            return null;
        }
        public ResourcesDataset_ProductDTO(DigicircMatchmaking.BO.Product original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ResourcesDataset_ProductDTO(DigicircMatchmaking.BO.Product original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Resource = original.Resource == null
                       ? null
                       : DTOHelper.GetDTOFromModel<ResourcesDataset_MaterialDTO>(original.Resource as DigicircMatchmaking.BO.Material);
        }

        public static DigicircMatchmaking.BO.Product GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Product Convert()
        {
            var model = new DigicircMatchmaking.BO.Product();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Resource = Resource == null
                             ? null
                             : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.Material>(Resource);
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    [DataSetDTO]
    public class ResourcesDataset_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public ResourcesDataset_MaterialDTO() : base() {}
        public  static ResourcesDataset_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MatchBaseExplorerController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Material>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ResourcesDataset_MaterialDTO(foundEntry);
            }
            return null;
        }
        public ResourcesDataset_MaterialDTO(DigicircMatchmaking.BO.Material original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ResourcesDataset_MaterialDTO(DigicircMatchmaking.BO.Material original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public static DigicircMatchmaking.BO.Material GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var model = new DigicircMatchmaking.BO.Material();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }



    [OriginalType(typeof(DigicircMatchmaking.BO.Actor))]
    [DataSetDTO]
    public class ActorDataSet1_ActorDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Actor>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Actor).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public ActorDataSet1_FileDataDTO ActorLogo;
        public string Name;
        public string ShortDescription;
        public ActorDataSet1_EntityTypeDTO EntityType;
        public ActorDataSet1_AddressDTO Address;


        [JsonConstructor]
        public ActorDataSet1_ActorDTO() : base() {}
        public  static ActorDataSet1_ActorDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MatchBaseExplorerController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Actor>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ActorDataSet1_ActorDTO(foundEntry);
            }
            return null;
        }
        public ActorDataSet1_ActorDTO(DigicircMatchmaking.BO.Actor original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ActorDataSet1_ActorDTO(DigicircMatchmaking.BO.Actor original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            ActorLogo = original.ActorLogo == null
                        ? null
                        : DTOHelper.GetDTOFromModel<ActorDataSet1_FileDataDTO>(original.ActorLogo as DigicircMatchmaking.BO.FileData);
            Name = original.Name;
            ShortDescription = original.ShortDescription;
            EntityType = original.EntityType == null
                         ? null
                         : DTOHelper.GetDTOFromModel<ActorDataSet1_EntityTypeDTO>(original.EntityType as DigicircMatchmaking.BO.EntityType);
            Address = original.Address == null
                      ? null
                      : DTOHelper.GetDTOFromModel<ActorDataSet1_AddressDTO>(original.Address as DigicircMatchmaking.BO.Address);
        }

        public static DigicircMatchmaking.BO.Actor GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Actor Convert()
        {
            var model = new DigicircMatchmaking.BO.Actor();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.ActorLogo = ActorLogo == null
                              ? null
                              : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.FileData>(ActorLogo);
            model.Name = Name;
            model.ShortDescription = ShortDescription;
            model.EntityType = EntityType == null
                               ? null
                               : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.EntityType>(EntityType);
            model.Address = Address == null
                            ? null
                            : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.Address>(Address);
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.FileData))]
    [DataSetDTO]
    public class ActorDataSet1_FileDataDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.FileData>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.FileData).FullName;
        public string _versionTimestamp;
        public Guid? Id;
        public new object _key
        {
            get;
            set;
        }
        public string FileName;
        public string UploadedBy;
        public string Description;
        public DateTime? UploadDateTime;
        public string FolderPath;


        [JsonConstructor]
        public ActorDataSet1_FileDataDTO() : base() {}
        public  static ActorDataSet1_FileDataDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = System.Guid.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.FileData>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MatchBaseExplorerController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.FileData>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ActorDataSet1_FileDataDTO(foundEntry);
            }
            return null;
        }
        public ActorDataSet1_FileDataDTO(DigicircMatchmaking.BO.FileData original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ActorDataSet1_FileDataDTO(DigicircMatchmaking.BO.FileData original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == default(Guid)) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            FileName = original.FileName;
            UploadedBy = original.UploadedBy;
            Description = original.Description;
            UploadDateTime = original.UploadDateTime;
            FolderPath = original.FolderPath;
        }

        public static DigicircMatchmaking.BO.FileData GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = System.Guid.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.FileData>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.FileData Convert()
        {
            var model = new DigicircMatchmaking.BO.FileData();
            if (_key != null && _key.ToString() != "default(Guid)")
            {
                var rawKey = _key.ToString();
                var parsedKey = System.Guid.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.FileData>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? default(Guid);
            model.FileName = FileName;
            model.UploadedBy = UploadedBy;
            model.Description = Description;
            model.UploadDateTime = UploadDateTime;
            model.FolderPath = FolderPath;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DigicircMatchmaking.BO.EntityType))]
    [DataSetDTO]
    public class ActorDataSet1_EntityTypeDTO : ActorDataSet1_ValueTypeDTO, IViewModelDTO<DigicircMatchmaking.BO.EntityType>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.EntityType).FullName;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;


        [JsonConstructor]
        public ActorDataSet1_EntityTypeDTO() : base() {}
        public new static ActorDataSet1_EntityTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.EntityType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MatchBaseExplorerController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.EntityType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ActorDataSet1_EntityTypeDTO(foundEntry);
            }
            return null;
        }
        public ActorDataSet1_EntityTypeDTO(DigicircMatchmaking.BO.EntityType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ActorDataSet1_EntityTypeDTO(DigicircMatchmaking.BO.EntityType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Value = original.Value;
        }

        public new static DigicircMatchmaking.BO.EntityType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.EntityType>(parsedKey, false, false);
        }
        public new DigicircMatchmaking.BO.EntityType Convert()
        {
            var model = new DigicircMatchmaking.BO.EntityType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.EntityType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Value = Value;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.ValueType))]
    [DataSetDTO]
    public class ActorDataSet1_ValueTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.ValueType>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.ValueType).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;


        [JsonConstructor]
        public ActorDataSet1_ValueTypeDTO() : base() {}
        public  static ActorDataSet1_ValueTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MatchBaseExplorerController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.ValueType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ActorDataSet1_ValueTypeDTO(foundEntry);
            }
            return null;
        }
        public ActorDataSet1_ValueTypeDTO(DigicircMatchmaking.BO.ValueType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ActorDataSet1_ValueTypeDTO(DigicircMatchmaking.BO.ValueType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Value = original.Value;
        }

        public static DigicircMatchmaking.BO.ValueType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.ValueType Convert()
        {
            var model = new DigicircMatchmaking.BO.ValueType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Value = Value;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.BO.Address))]
    [DataSetDTO]
    public class ActorDataSet1_AddressDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Address>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Address).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public ActorDataSet1_CountryDTO Country;


        [JsonConstructor]
        public ActorDataSet1_AddressDTO() : base() {}
        public  static ActorDataSet1_AddressDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MatchBaseExplorerController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Address>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ActorDataSet1_AddressDTO(foundEntry);
            }
            return null;
        }
        public ActorDataSet1_AddressDTO(DigicircMatchmaking.BO.Address original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ActorDataSet1_AddressDTO(DigicircMatchmaking.BO.Address original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Country = original.Country == null
                      ? null
                      : DTOHelper.GetDTOFromModel<ActorDataSet1_CountryDTO>(original.Country as DigicircMatchmaking.BO.Country);
        }

        public static DigicircMatchmaking.BO.Address GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Address Convert()
        {
            var model = new DigicircMatchmaking.BO.Address();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Country = Country == null
                            ? null
                            : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.Country>(Country);
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.Country))]
    [DataSetDTO]
    public class ActorDataSet1_CountryDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Country>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Country).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public ActorDataSet1_CountryDTO() : base() {}
        public  static ActorDataSet1_CountryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MatchBaseExplorerController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Country>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ActorDataSet1_CountryDTO(foundEntry);
            }
            return null;
        }
        public ActorDataSet1_CountryDTO(DigicircMatchmaking.BO.Country original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ActorDataSet1_CountryDTO(DigicircMatchmaking.BO.Country original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public static DigicircMatchmaking.BO.Country GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Country Convert()
        {
            var model = new DigicircMatchmaking.BO.Country();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }



    [OriginalType(typeof(DigicircMatchmaking.BO.Match))]
    [DataSetDTO]
    public class MatchDataSet_MatchDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Match>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Match).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public MatchDataSet_MaterialDTO Resource;
        public MatchDataSet_ActorDTO ActorOffer;
        public MatchDataSet_ActorDTO ActorRequest;
        public DateTime? ValidFrom;
        public DateTime? ValidTo;
        public int? QuantityLack;


        [JsonConstructor]
        public MatchDataSet_MatchDTO() : base() {}
        public  static MatchDataSet_MatchDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Match>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MatchBaseExplorerController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Match>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new MatchDataSet_MatchDTO(foundEntry);
            }
            return null;
        }
        public MatchDataSet_MatchDTO(DigicircMatchmaking.BO.Match original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public MatchDataSet_MatchDTO(DigicircMatchmaking.BO.Match original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Resource = original.Resource == null
                       ? null
                       : DTOHelper.GetDTOFromModel<MatchDataSet_MaterialDTO>(original.Resource as DigicircMatchmaking.BO.Material);
            ActorOffer = original.ActorOffer == null
                         ? null
                         : DTOHelper.GetDTOFromModel<MatchDataSet_ActorDTO>(original.ActorOffer as DigicircMatchmaking.BO.Actor);
            ActorRequest = original.ActorRequest == null
                           ? null
                           : DTOHelper.GetDTOFromModel<MatchDataSet_ActorDTO>(original.ActorRequest as DigicircMatchmaking.BO.Actor);
            ValidFrom = original.ValidFrom;
            ValidTo = original.ValidTo;
            QuantityLack = original.QuantityLack;
        }

        public static DigicircMatchmaking.BO.Match GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Match>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Match Convert()
        {
            var model = new DigicircMatchmaking.BO.Match();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Match>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Resource = Resource == null
                             ? null
                             : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.Material>(Resource);
            model.ActorOffer = ActorOffer == null
                               ? null
                               : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.Actor>(ActorOffer);
            model.ActorRequest = ActorRequest == null
                                 ? null
                                 : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.Actor>(ActorRequest);
            model.ValidFrom = ValidFrom;
            model.ValidTo = ValidTo;
            model.QuantityLack = QuantityLack;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    [DataSetDTO]
    public class MatchDataSet_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public MatchDataSet_MaterialDTO() : base() {}
        public  static MatchDataSet_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MatchBaseExplorerController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Material>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new MatchDataSet_MaterialDTO(foundEntry);
            }
            return null;
        }
        public MatchDataSet_MaterialDTO(DigicircMatchmaking.BO.Material original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public MatchDataSet_MaterialDTO(DigicircMatchmaking.BO.Material original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public static DigicircMatchmaking.BO.Material GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var model = new DigicircMatchmaking.BO.Material();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Actor))]
    [DataSetDTO]
    public class MatchDataSet_ActorDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Actor>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Actor).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public MatchDataSet_ActorDTO() : base() {}
        public  static MatchDataSet_ActorDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MatchBaseExplorerController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Actor>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new MatchDataSet_ActorDTO(foundEntry);
            }
            return null;
        }
        public MatchDataSet_ActorDTO(DigicircMatchmaking.BO.Actor original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public MatchDataSet_ActorDTO(DigicircMatchmaking.BO.Actor original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public static DigicircMatchmaking.BO.Actor GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Actor Convert()
        {
            var model = new DigicircMatchmaking.BO.Actor();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    #endregion

}
