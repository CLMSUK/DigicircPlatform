// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.UI.Controllers.GraphCreateDebug;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Locales;
using System.ComponentModel.DataAnnotations;
using DigicircMatchmaking.UI.ViewModels.MasterPage;
using DigicircMatchmaking.UI.Controllers.MasterPage;
namespace DigicircMatchmaking.UI.ViewModels.GraphCreateDebug
{
    public class GraphCreateDebugViewModel : MasterPageViewModel
    {
        public DigicircMatchmaking.BO.GraphUpdateElement UpdateRequest;
        public DigicircMatchmaking.BO.UpdateResponse Result;


        public GraphCreateDebugViewModel()
        {
            UpdateRequest = new DigicircMatchmaking.BO.GraphUpdateElement();
            Result = new DigicircMatchmaking.BO.UpdateResponse();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (manager.Session.Contains(UpdateRequest))
            {
                manager.Session.Evict(UpdateRequest);
            }
            if (manager.Session.Contains(Result))
            {
                manager.Session.Evict(Result);
            }
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.UI.ViewModels.GraphCreateDebug.GraphCreateDebugViewModel))]
    public class GraphCreateDebugViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DigicircMatchmaking.UI.ViewModels.GraphCreateDebug.GraphCreateDebugViewModel>
    {

        [JsonConstructor]
        public GraphCreateDebugViewModelDTO() { }
        public GraphCreateDebugViewModelDTO(DigicircMatchmaking.UI.ViewModels.GraphCreateDebug.GraphCreateDebugViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            UpdateRequest = original.UpdateRequest == null ? null : new UpdateRequest_GraphUpdateElementDTO(original.UpdateRequest);
            Result = original.Result == null ? null : new Result_UpdateResponseDTO(original.Result);
        }
        public UpdateRequest_GraphUpdateElementDTO UpdateRequest;
        public Result_UpdateResponseDTO Result;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.UI.ViewModels.GraphCreateDebug.GraphCreateDebugViewModel).FullName;

        public new DigicircMatchmaking.UI.ViewModels.GraphCreateDebug.GraphCreateDebugViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.UI.ViewModels.GraphCreateDebug.GraphCreateDebugViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DigicircMatchmaking.UI.ViewModels.GraphCreateDebug.GraphCreateDebugViewModel();
        }
        new  public DigicircMatchmaking.UI.ViewModels.GraphCreateDebug.GraphCreateDebugViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.UI.ViewModels.GraphCreateDebug.GraphCreateDebugViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.UI.ViewModels.GraphCreateDebug.GraphCreateDebugViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.UpdateRequest = UpdateRequest == null
                                     ? null
                                     : UpdateRequest.Convert();
            original.Result = Result == null
                              ? null
                              : Result.Convert();
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.GraphUpdateElement))]
    public class UpdateRequest_GraphUpdateElementDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.GraphUpdateElement>
    {

        [JsonConstructor]
        public UpdateRequest_GraphUpdateElementDTO() { }
        public UpdateRequest_GraphUpdateElementDTO(DigicircMatchmaking.BO.GraphUpdateElement original, bool parentIsDirty = false)
        {
            if (original == null) return;
            RelationType = original.RelationType;
            SourceNodeName = original.SourceNodeName;
            SourceNodeType = original.SourceNodeType;
            DestinationNodeName = original.DestinationNodeName;
            DestinationNodeType = original.DestinationNodeType;
        }
        public string RelationType;
        public string SourceNodeName;
        public string SourceNodeType;
        public string DestinationNodeName;
        public string DestinationNodeType;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.GraphUpdateElement).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.GraphUpdateElement GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.GraphUpdateElement>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DigicircMatchmaking.BO.GraphUpdateElement();
        }
        public DigicircMatchmaking.BO.GraphUpdateElement Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.GraphUpdateElement();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.GraphUpdateElement original)
        {
            if (original == null) return;
            original.RelationType = RelationType;
            original.SourceNodeName = SourceNodeName;
            original.SourceNodeType = SourceNodeType;
            original.DestinationNodeName = DestinationNodeName;
            original.DestinationNodeType = DestinationNodeType;
        }
        public  static UpdateRequest_GraphUpdateElementDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            if(string.IsNullOrWhiteSpace(jbID)) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var controller = new GraphCreateDebugController();
            var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
            var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.GraphUpdateElement>;
            var foundEntry = records.Where(c => c.GraphUpdateElementKey == parsedKey).FirstOrDefault();
            //Second attempt, using the Unique Identifier
            if(foundEntry == null)
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    foundEntry = records.Where(x => x._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if (foundEntry != null)
            {
                return new UpdateRequest_GraphUpdateElementDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.UpdateResponse))]
    public class Result_UpdateResponseDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.UpdateResponse>
    {

        [JsonConstructor]
        public Result_UpdateResponseDTO() { }
        public Result_UpdateResponseDTO(DigicircMatchmaking.BO.UpdateResponse original, bool parentIsDirty = false)
        {
            if (original == null) return;
            Type = original.Type;
            Desc = original.Desc;
        }
        public string Type;
        public string Desc;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.UpdateResponse).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.UpdateResponse GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.UpdateResponse>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DigicircMatchmaking.BO.UpdateResponse();
        }
        public DigicircMatchmaking.BO.UpdateResponse Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.UpdateResponse();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.UpdateResponse original)
        {
            if (original == null) return;
            original.Type = Type;
            original.Desc = Desc;
        }
        public  static Result_UpdateResponseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            if(string.IsNullOrWhiteSpace(jbID)) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var controller = new GraphCreateDebugController();
            var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
            var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.UpdateResponse>;
            var foundEntry = records.Where(c => c.UpdateResponseKey == parsedKey).FirstOrDefault();
            //Second attempt, using the Unique Identifier
            if(foundEntry == null)
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    foundEntry = records.Where(x => x._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if (foundEntry != null)
            {
                return new Result_UpdateResponseDTO(foundEntry);
            }
            return null;
        }
    }



}
