// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.UI.Controllers.ProductTypeList;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Locales;
using System.ComponentModel.DataAnnotations;
using DigicircMatchmaking.UI.ViewModels.SymbiosisMasterPage;
using DigicircMatchmaking.UI.Controllers.SymbiosisMasterPage;
namespace DigicircMatchmaking.UI.ViewModels.ProductTypeList
{
    public class ProductTypeListViewModel : SymbiosisMasterPageViewModel
    {
        public List<SelectedItemInfo<DigicircMatchmaking.BO.ProductType>> ProductTypeListSelectedItems;


        public ProductTypeListViewModel()
        {
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.UI.ViewModels.ProductTypeList.ProductTypeListViewModel))]
    public class ProductTypeListViewModelDTO : SymbiosisMasterPageViewModelDTO, IViewModelDTO<DigicircMatchmaking.UI.ViewModels.ProductTypeList.ProductTypeListViewModel>
    {

        [JsonConstructor]
        public ProductTypeListViewModelDTO() { }
        public ProductTypeListViewModelDTO(DigicircMatchmaking.UI.ViewModels.ProductTypeList.ProductTypeListViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            ProductTypeListSelectedItemKeys = original.ProductTypeListSelectedItems == null
                                              ? null
                                              : original.ProductTypeListSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.UI.ViewModels.ProductTypeList.ProductTypeListViewModel).FullName;
        public List<SelectedItemInfo<int?>> ProductTypeListSelectedItemKeys;

        public new DigicircMatchmaking.UI.ViewModels.ProductTypeList.ProductTypeListViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.UI.ViewModels.ProductTypeList.ProductTypeListViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DigicircMatchmaking.UI.ViewModels.ProductTypeList.ProductTypeListViewModel();
        }
        new  public DigicircMatchmaking.UI.ViewModels.ProductTypeList.ProductTypeListViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.UI.ViewModels.ProductTypeList.ProductTypeListViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.UI.ViewModels.ProductTypeList.ProductTypeListViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.ProductTypeListSelectedItems = ProductTypeListSelectedItemKeys == null
                                                    ? new List<SelectedItemInfo<DigicircMatchmaking.BO.ProductType>>()
                                                    : ProductTypeListSelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.ProductType>(x.SelectedItems.Select(y => ViewModels.ProductTypeList.ProductTypeDataSet_ProductTypeDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
    }


    #region Datasource DTOs
    [OriginalType(typeof(DigicircMatchmaking.BO.ProductType))]
    [DataSetDTO]
    public class ProductTypeDataSet_ProductTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.ProductType>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.ProductType).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public ProductTypeDataSet_ProductTypeDTO() : base() {}
        public  static ProductTypeDataSet_ProductTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.ProductType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ProductTypeListController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.ProductType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ProductTypeDataSet_ProductTypeDTO(foundEntry);
            }
            return null;
        }
        public ProductTypeDataSet_ProductTypeDTO(DigicircMatchmaking.BO.ProductType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ProductTypeDataSet_ProductTypeDTO(DigicircMatchmaking.BO.ProductType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public static DigicircMatchmaking.BO.ProductType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.ProductType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.ProductType Convert()
        {
            var model = new DigicircMatchmaking.BO.ProductType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.ProductType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    #endregion

}
