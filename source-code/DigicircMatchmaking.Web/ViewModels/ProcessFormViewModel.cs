// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.UI.Controllers.ProcessForm;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Locales;
using System.ComponentModel.DataAnnotations;
using DigicircMatchmaking.UI.ViewModels.SymbiosisMasterPage;
using DigicircMatchmaking.UI.Controllers.SymbiosisMasterPage;
namespace DigicircMatchmaking.UI.ViewModels.ProcessForm
{
    public class ProcessFormViewModel : SymbiosisMasterPageViewModel
    {
        public DigicircMatchmaking.BO.Process Process;


        public ProcessFormViewModel()
        {
            Process = new DigicircMatchmaking.BO.Process();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (manager.Session.Contains(Process))
            {
                manager.Session.Evict(Process);
            }
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.UI.ViewModels.ProcessForm.ProcessFormViewModel))]
    public class ProcessFormViewModelDTO : SymbiosisMasterPageViewModelDTO, IViewModelDTO<DigicircMatchmaking.UI.ViewModels.ProcessForm.ProcessFormViewModel>
    {

        [JsonConstructor]
        public ProcessFormViewModelDTO() { }
        public ProcessFormViewModelDTO(DigicircMatchmaking.UI.ViewModels.ProcessForm.ProcessFormViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            Process = original.Process == null ? null : new Process_ProcessDTO(original.Process);
        }
        public Process_ProcessDTO Process;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.UI.ViewModels.ProcessForm.ProcessFormViewModel).FullName;

        public new DigicircMatchmaking.UI.ViewModels.ProcessForm.ProcessFormViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.UI.ViewModels.ProcessForm.ProcessFormViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DigicircMatchmaking.UI.ViewModels.ProcessForm.ProcessFormViewModel();
        }
        new  public DigicircMatchmaking.UI.ViewModels.ProcessForm.ProcessFormViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.UI.ViewModels.ProcessForm.ProcessFormViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.UI.ViewModels.ProcessForm.ProcessFormViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.Process = Process == null
                               ? null
                               : Process.Convert();
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Process))]
    public class Process_ProcessDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Process>
    {

        [JsonConstructor]
        public Process_ProcessDTO() { }
        public Process_ProcessDTO(DigicircMatchmaking.BO.Process original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            EnvironmentalEffects = original.EnvironmentalEffects;
            Id = original.Id;
            Name = original.Name;
            Notes = original.Notes;
            Ref = original.Ref;
            Product = original.Product?.Select(x => new Process_Process_Product_MaterialDTO(x)).ToList();
            Source = original.Source?.Select(x => new Process_Process_Source_MaterialDTO(x)).ToList();
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string EnvironmentalEffects;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string Notes;
        public string Ref;
        public List<Process_Process_Product_MaterialDTO> Product;
        public List<Process_Process_Source_MaterialDTO> Source;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Process).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Process GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Process>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Process();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Process Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Process();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Process original)
        {
            if (original == null) return;
            original.EnvironmentalEffects = EnvironmentalEffects;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.Notes = Notes;
            original.Ref = Ref;
            original.Product = Product == null
                               ? null
                               : Product.Select(q => q.Convert()).ToList();
            original.Source = Source == null
                              ? null
                              : Source.Select(q => q.Convert()).ToList();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Process_ProcessDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Process_ProcessDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class Process_Process_Product_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public Process_Process_Product_MaterialDTO() { }
        public Process_Process_Product_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            Id = original.Id;
            Name = original.Name;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.Name = Name;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Process_Process_Product_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Process_Process_Product_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class Process_Process_Source_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public Process_Process_Source_MaterialDTO() { }
        public Process_Process_Source_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            Id = original.Id;
            Name = original.Name;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.Name = Name;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Process_Process_Source_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Process_Process_Source_MaterialDTO(foundEntry);
            }
            return null;
        }
    }



}
