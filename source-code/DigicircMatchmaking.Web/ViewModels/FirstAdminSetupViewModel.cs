// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.UI.Controllers.FirstAdminSetup;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Locales;
using System.ComponentModel.DataAnnotations;
using DigicircMatchmaking.UI.ViewModels.MasterPage;
using DigicircMatchmaking.UI.Controllers.MasterPage;
namespace DigicircMatchmaking.UI.ViewModels.FirstAdminSetup
{
    public class FirstAdminSetupViewModel : MasterPageViewModel
    {
        public zAppDev.DotNet.Framework.Identity.Model.ApplicationUser ApplicationUser;


        public FirstAdminSetupViewModel()
        {
            ApplicationUser = new zAppDev.DotNet.Framework.Identity.Model.ApplicationUser();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (manager.Session.Contains(ApplicationUser))
            {
                manager.Session.Evict(ApplicationUser);
            }
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.UI.ViewModels.FirstAdminSetup.FirstAdminSetupViewModel))]
    public class FirstAdminSetupViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DigicircMatchmaking.UI.ViewModels.FirstAdminSetup.FirstAdminSetupViewModel>
    {

        [JsonConstructor]
        public FirstAdminSetupViewModelDTO() { }
        public FirstAdminSetupViewModelDTO(DigicircMatchmaking.UI.ViewModels.FirstAdminSetup.FirstAdminSetupViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            ApplicationUser = original.ApplicationUser == null ? null : new ApplicationUser_ApplicationUserDTO(original.ApplicationUser);
        }
        public ApplicationUser_ApplicationUserDTO ApplicationUser;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.UI.ViewModels.FirstAdminSetup.FirstAdminSetupViewModel).FullName;

        public new DigicircMatchmaking.UI.ViewModels.FirstAdminSetup.FirstAdminSetupViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.UI.ViewModels.FirstAdminSetup.FirstAdminSetupViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DigicircMatchmaking.UI.ViewModels.FirstAdminSetup.FirstAdminSetupViewModel();
        }
        new  public DigicircMatchmaking.UI.ViewModels.FirstAdminSetup.FirstAdminSetupViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.UI.ViewModels.FirstAdminSetup.FirstAdminSetupViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.UI.ViewModels.FirstAdminSetup.FirstAdminSetupViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.ApplicationUser = ApplicationUser == null
                                       ? null
                                       : ApplicationUser.Convert();
        }
    }

    [OriginalType(typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser))]
    public class ApplicationUser_ApplicationUserDTO : ViewModelDTOBase, IViewModelDTO<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>
    {

        [JsonConstructor]
        public ApplicationUser_ApplicationUserDTO() { }
        public ApplicationUser_ApplicationUserDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.UserName as object;
            UserName = original.UserName;
            Roles = original.Roles?.Select(x => new ApplicationUser_ApplicationUser_Roles_ApplicationRoleDTO(x)).ToList();
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public string UserName;
        public new object _key
        {
            get;
            set;
        }
        public List<ApplicationUser_ApplicationUser_Roles_ApplicationRoleDTO> Roles;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName;
        public override List<string> _baseClasses => null;
        public zAppDev.DotNet.Framework.Identity.Model.ApplicationUser GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new zAppDev.DotNet.Framework.Identity.Model.ApplicationUser();
            }
            return new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false, false);
        }
        public zAppDev.DotNet.Framework.Identity.Model.ApplicationUser Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new zAppDev.DotNet.Framework.Identity.Model.ApplicationUser();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser original)
        {
            if (original == null) return;
            original.UserName = UserName ?? "";
            original.Roles = Roles == null
                             ? null
                             : Roles.Select(q => q.Convert()).ToList();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static ApplicationUser_ApplicationUserDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new ApplicationUser_ApplicationUserDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationRole))]
    public class ApplicationUser_ApplicationUser_Roles_ApplicationRoleDTO : ViewModelDTOBase, IViewModelDTO<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>
    {

        [JsonConstructor]
        public ApplicationUser_ApplicationUser_Roles_ApplicationRoleDTO() { }
        public ApplicationUser_ApplicationUser_Roles_ApplicationRoleDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationRole original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            Name = original.Name;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public override string _originalTypeClassName => typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationRole).FullName;
        public override List<string> _baseClasses => null;
        public zAppDev.DotNet.Framework.Identity.Model.ApplicationRole GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new zAppDev.DotNet.Framework.Identity.Model.ApplicationRole();
            }
            return new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>(parsedKey, false, false);
        }
        public zAppDev.DotNet.Framework.Identity.Model.ApplicationRole Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new zAppDev.DotNet.Framework.Identity.Model.ApplicationRole();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(zAppDev.DotNet.Framework.Identity.Model.ApplicationRole original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
        }
        public static ApplicationUser_ApplicationUser_Roles_ApplicationRoleDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new ApplicationUser_ApplicationUser_Roles_ApplicationRoleDTO(foundEntry);
            }
            return null;
        }
    }



}
