// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.UI.Controllers.MyActors;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Locales;
using System.ComponentModel.DataAnnotations;
using DigicircMatchmaking.UI.ViewModels.MasterPage;
using DigicircMatchmaking.UI.Controllers.MasterPage;
namespace DigicircMatchmaking.UI.ViewModels.MyActors
{
    public class MyActorsViewModel : MasterPageViewModel
    {
        public DigicircMatchmaking.BO.DigicircUser CurrentUser;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Actor>> ListActorDataSetSelectedItems;


        public MyActorsViewModel()
        {
            CurrentUser = new DigicircMatchmaking.BO.DigicircUser();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (manager.Session.Contains(CurrentUser))
            {
                manager.Session.Evict(CurrentUser);
            }
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.UI.ViewModels.MyActors.MyActorsViewModel))]
    public class MyActorsViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DigicircMatchmaking.UI.ViewModels.MyActors.MyActorsViewModel>
    {

        [JsonConstructor]
        public MyActorsViewModelDTO() { }
        public MyActorsViewModelDTO(DigicircMatchmaking.UI.ViewModels.MyActors.MyActorsViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            CurrentUser = original.CurrentUser == null ? null : new CurrentUser_DigicircUserDTO(original.CurrentUser);
            ListActorDataSetSelectedItemKeys = original.ListActorDataSetSelectedItems == null
                                               ? null
                                               : original.ListActorDataSetSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public CurrentUser_DigicircUserDTO CurrentUser;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.UI.ViewModels.MyActors.MyActorsViewModel).FullName;
        public List<SelectedItemInfo<int?>> ListActorDataSetSelectedItemKeys;

        public new DigicircMatchmaking.UI.ViewModels.MyActors.MyActorsViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.UI.ViewModels.MyActors.MyActorsViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DigicircMatchmaking.UI.ViewModels.MyActors.MyActorsViewModel();
        }
        new  public DigicircMatchmaking.UI.ViewModels.MyActors.MyActorsViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.UI.ViewModels.MyActors.MyActorsViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.UI.ViewModels.MyActors.MyActorsViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.CurrentUser = CurrentUser == null
                                   ? null
                                   : CurrentUser.Convert();
            original.ListActorDataSetSelectedItems = ListActorDataSetSelectedItemKeys == null
                    ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Actor>>()
                    : ListActorDataSetSelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Actor>(x.SelectedItems.Select(y => ViewModels.MyActors.ActorDataSet_ActorDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.DigicircUser))]
    public class CurrentUser_DigicircUserDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.DigicircUser>
    {

        [JsonConstructor]
        public CurrentUser_DigicircUserDTO() { }
        public CurrentUser_DigicircUserDTO(DigicircMatchmaking.BO.DigicircUser original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.UserName as object;
            UserName = original.UserName;
            EmailConfirmed = original.EmailConfirmed;
            LockoutEnabled = original.LockoutEnabled;
            PhoneNumberConfirmed = original.PhoneNumberConfirmed;
            TwoFactorEnabled = original.TwoFactorEnabled;
            AccessFailedCount = original.AccessFailedCount;
            Name = original.Name;
            Email = original.Email;
            PhoneNumber = original.PhoneNumber;
            LockoutEndDate = original.LockoutEndDate;
            FirstName = original.FirstName;
            LastName = original.LastName;
            SubscribeToNewsLetter = original.SubscribeToNewsLetter;
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public string UserName;
        public new object _key
        {
            get;
            set;
        }
        public bool EmailConfirmed;
        public bool LockoutEnabled;
        public bool PhoneNumberConfirmed;
        public bool TwoFactorEnabled;
        public int? AccessFailedCount;
        public string Name;
        public string Email;
        public string PhoneNumber;
        public DateTime? LockoutEndDate;
        public string FirstName;
        public string LastName;
        public bool SubscribeToNewsLetter;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.DigicircUser).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName};
        public DigicircMatchmaking.BO.DigicircUser GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.DigicircUser>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DigicircMatchmaking.BO.DigicircUser();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.DigicircUser Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.DigicircUser();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.DigicircUser original)
        {
            if (original == null) return;
            original.UserName = UserName ?? "";
            original.EmailConfirmed = EmailConfirmed;
            original.LockoutEnabled = LockoutEnabled;
            original.PhoneNumberConfirmed = PhoneNumberConfirmed;
            original.TwoFactorEnabled = TwoFactorEnabled;
            original.AccessFailedCount = AccessFailedCount;
            original.Name = Name;
            original.Email = Email;
            original.PhoneNumber = PhoneNumber;
            original.LockoutEndDate = LockoutEndDate;
            original.FirstName = FirstName;
            original.LastName = LastName;
            original.SubscribeToNewsLetter = SubscribeToNewsLetter;
        }
        public static CurrentUser_DigicircUserDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new CurrentUser_DigicircUserDTO(foundEntry);
            }
            return null;
        }
    }


    #region Datasource DTOs
    [OriginalType(typeof(DigicircMatchmaking.BO.Actor))]
    [DataSetDTO]
    public class ActorDataSet_ActorDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Actor>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Actor).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public ActorDataSet_EntityTypeDTO EntityType;
        public string Email;
        public string Url;


        [JsonConstructor]
        public ActorDataSet_ActorDTO() : base() {}
        public  static ActorDataSet_ActorDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MyActorsController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Actor>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ActorDataSet_ActorDTO(foundEntry);
            }
            return null;
        }
        public ActorDataSet_ActorDTO(DigicircMatchmaking.BO.Actor original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ActorDataSet_ActorDTO(DigicircMatchmaking.BO.Actor original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
            EntityType = original.EntityType == null
                         ? null
                         : DTOHelper.GetDTOFromModel<ActorDataSet_EntityTypeDTO>(original.EntityType as DigicircMatchmaking.BO.EntityType);
            Email = original.Email;
            Url = original.Url;
        }

        public static DigicircMatchmaking.BO.Actor GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Actor Convert()
        {
            var model = new DigicircMatchmaking.BO.Actor();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            model.EntityType = EntityType == null
                               ? null
                               : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.EntityType>(EntityType);
            model.Email = Email;
            model.Url = Url;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.EntityType))]
    [DataSetDTO]
    public class ActorDataSet_EntityTypeDTO : ActorDataSet_ValueTypeDTO, IViewModelDTO<DigicircMatchmaking.BO.EntityType>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.EntityType).FullName;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;


        [JsonConstructor]
        public ActorDataSet_EntityTypeDTO() : base() {}
        public new static ActorDataSet_EntityTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.EntityType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MyActorsController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.EntityType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ActorDataSet_EntityTypeDTO(foundEntry);
            }
            return null;
        }
        public ActorDataSet_EntityTypeDTO(DigicircMatchmaking.BO.EntityType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ActorDataSet_EntityTypeDTO(DigicircMatchmaking.BO.EntityType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Value = original.Value;
        }

        public new static DigicircMatchmaking.BO.EntityType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.EntityType>(parsedKey, false, false);
        }
        public new DigicircMatchmaking.BO.EntityType Convert()
        {
            var model = new DigicircMatchmaking.BO.EntityType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.EntityType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Value = Value;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.ValueType))]
    [DataSetDTO]
    public class ActorDataSet_ValueTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.ValueType>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.ValueType).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;


        [JsonConstructor]
        public ActorDataSet_ValueTypeDTO() : base() {}
        public  static ActorDataSet_ValueTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MyActorsController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.ValueType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ActorDataSet_ValueTypeDTO(foundEntry);
            }
            return null;
        }
        public ActorDataSet_ValueTypeDTO(DigicircMatchmaking.BO.ValueType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ActorDataSet_ValueTypeDTO(DigicircMatchmaking.BO.ValueType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Value = original.Value;
        }

        public static DigicircMatchmaking.BO.ValueType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.ValueType Convert()
        {
            var model = new DigicircMatchmaking.BO.ValueType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Value = Value;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }



    #endregion

}
