// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.UI.Controllers.ResourceForm;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Locales;
using System.ComponentModel.DataAnnotations;
namespace DigicircMatchmaking.UI.ViewModels.ResourceForm
{
    public class ResourceFormViewModel
    {
        public DigicircMatchmaking.BO.Product Product;
        public int? ActorId;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Address>> DropdownBox4SelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Material>> DropdownBoxSelectedItems;


        public ResourceFormViewModel()
        {
            Product = new DigicircMatchmaking.BO.Product();
        }


        public  void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (manager.Session.Contains(Product))
            {
                manager.Session.Evict(Product);
            }
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.UI.ViewModels.ResourceForm.ResourceFormViewModel))]
    public class ResourceFormViewModelDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.UI.ViewModels.ResourceForm.ResourceFormViewModel>
    {

        [JsonConstructor]
        public ResourceFormViewModelDTO() { }
        public ResourceFormViewModelDTO(DigicircMatchmaking.UI.ViewModels.ResourceForm.ResourceFormViewModel original, bool parentIsDirty = false)
        {
            if (original == null) return;
            Product = original.Product == null ? null : new Product_ProductDTO(original.Product);
            ActorId = original.ActorId;
            DropdownBox4SelectedItemKeys = original.DropdownBox4SelectedItems == null
                                           ? null
                                           : original.DropdownBox4SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            DropdownBoxSelectedItemKeys = original.DropdownBoxSelectedItems == null
                                          ? null
                                          : original.DropdownBoxSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public Product_ProductDTO Product;
        public int? ActorId;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.UI.ViewModels.ResourceForm.ResourceFormViewModel).FullName;
        public List<SelectedItemInfo<int?>> DropdownBox4SelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.ResourceForm.AddressDataset_AddressDTO>> DropdownBox4__InitialSelection;
        public List<SelectedItemInfo<int?>> DropdownBoxSelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.ResourceForm.MaterialDataSet_MaterialDTO>> DropdownBox__InitialSelection;

        public DigicircMatchmaking.UI.ViewModels.ResourceForm.ResourceFormViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.UI.ViewModels.ResourceForm.ResourceFormViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DigicircMatchmaking.UI.ViewModels.ResourceForm.ResourceFormViewModel();
        }
        public DigicircMatchmaking.UI.ViewModels.ResourceForm.ResourceFormViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.UI.ViewModels.ResourceForm.ResourceFormViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.UI.ViewModels.ResourceForm.ResourceFormViewModel original)
        {
            if (original == null) return;
            original.Product = Product == null
                               ? null
                               : Product.Convert();
            original.ActorId = ActorId;
            original.DropdownBox4SelectedItems = DropdownBox4SelectedItemKeys == null
                                                 ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Address>>()
                                                 : DropdownBox4SelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Address>(x.SelectedItems.Select(y => ViewModels.ResourceForm.AddressDataset_AddressDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.DropdownBoxSelectedItems = DropdownBoxSelectedItemKeys == null
                                                ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Material>>()
                                                : DropdownBoxSelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Material>(x.SelectedItems.Select(y => ViewModels.ResourceForm.MaterialDataSet_MaterialDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public void FillDropDownsInitialValues(ResourceFormViewModel original, ResourceFormController _controller)
        {
            DropdownBox4__InitialSelection = new List<SelectedItemInfo<ViewModels.ResourceForm.AddressDataset_AddressDTO>>();
            DropdownBox__InitialSelection = new List<SelectedItemInfo<ViewModels.ResourceForm.MaterialDataSet_MaterialDTO>>();
            if (original == null) return;
            var DropdownBox4InitiallySelectedItem = original?.Product?.Site == null
                                                    ? null
                                                    : new DAL.Repository().Get<DigicircMatchmaking.BO.Address>(c => c.Id == original.Product.Site.Id).FirstOrDefault();
            if (DropdownBox4InitiallySelectedItem != null)
            {
                DropdownBox4__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.ResourceForm.AddressDataset_AddressDTO>(new List<ViewModels.ResourceForm.AddressDataset_AddressDTO>
                {
                    new AddressDataset_AddressDTO(DropdownBox4InitiallySelectedItem)
                }, "_", false)
                );
            }
            var DropdownBoxInitiallySelectedItem = original?.Product?.Resource == null
                                                   ? null
                                                   : new DAL.Repository().Get<DigicircMatchmaking.BO.Material>(c => c.Id == original.Product.Resource.Id).FirstOrDefault();
            if (DropdownBoxInitiallySelectedItem != null)
            {
                DropdownBox__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.ResourceForm.MaterialDataSet_MaterialDTO>(new List<ViewModels.ResourceForm.MaterialDataSet_MaterialDTO>
                {
                    new MaterialDataSet_MaterialDTO(DropdownBoxInitiallySelectedItem)
                }, "_", false)
                );
            }
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Product))]
    public class Product_ProductDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Product>
    {

        [JsonConstructor]
        public Product_ProductDTO() { }
        public Product_ProductDTO(DigicircMatchmaking.BO.Product original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            IsDesired = original.IsDesired;
            Quantity = original.Quantity;
            ValidFrom = original.ValidFrom;
            ValidTo = original.ValidTo;
            Resource = original.Resource == null ? null : new Product_Product_Resource_MaterialDTO(original.Resource);
            Site = original.Site == null ? null : new Product_Product_Site_AddressDTO(original.Site);
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool IsDesired;
        public int? Quantity;
        public DateTime? ValidFrom;
        public DateTime? ValidTo;
        public Product_Product_Resource_MaterialDTO Resource;
        public Product_Product_Site_AddressDTO Site;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Product).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Product GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Product>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Product();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Product Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Product();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Product original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.IsDesired = IsDesired;
            original.Quantity = Quantity;
            original.ValidFrom = ValidFrom;
            original.ValidTo = ValidTo;
            original.Resource = Resource == null
                                ? null
                                : Resource.Convert();
            original.Site = Site == null
                            ? null
                            : Site.Convert();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Product_ProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Product_ProductDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class Product_Product_Resource_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public Product_Product_Resource_MaterialDTO() { }
        public Product_Product_Resource_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            Name = original.Name;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.Name = Name;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Product_Product_Resource_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Product_Product_Resource_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Address))]
    public class Product_Product_Site_AddressDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Address>
    {

        [JsonConstructor]
        public Product_Product_Site_AddressDTO() { }
        public Product_Product_Site_AddressDTO(DigicircMatchmaking.BO.Address original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            FullAddress = original.FullAddress;
            Id = original.Id;
            Latitude = original.Latitude;
            Longitude = original.Longitude;
            Number = original.Number;
            StreetName = original.StreetName;
            Town = original.Town;
            Zip = original.Zip;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string FullAddress;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public double? Latitude;
        public double? Longitude;
        public string Number;
        public string StreetName;
        public string Town;
        public string Zip;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Address).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Address GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Address>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Address();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Address Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Address();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Address original)
        {
            if (original == null) return;
            original.FullAddress = FullAddress;
            original.Id = Id ?? 0;
            original.Latitude = Latitude;
            original.Longitude = Longitude;
            original.Number = Number;
            original.StreetName = StreetName;
            original.Town = Town;
            original.Zip = Zip;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Product_Product_Site_AddressDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Product_Product_Site_AddressDTO(foundEntry);
            }
            return null;
        }
    }


    #region Datasource DTOs
    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    [DataSetDTO]
    public class MaterialDataSet_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public MaterialDataSet_MaterialDTO() : base() {}
        public  static MaterialDataSet_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ResourceFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Material>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new MaterialDataSet_MaterialDTO(foundEntry);
            }
            return null;
        }
        public MaterialDataSet_MaterialDTO(DigicircMatchmaking.BO.Material original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public MaterialDataSet_MaterialDTO(DigicircMatchmaking.BO.Material original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public static DigicircMatchmaking.BO.Material GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var model = new DigicircMatchmaking.BO.Material();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DigicircMatchmaking.BO.ProductType))]
    [DataSetDTO]
    public class ProductTypeDataSet_ProductTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.ProductType>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.ProductType).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public ProductTypeDataSet_ProductTypeDTO() : base() {}
        public  static ProductTypeDataSet_ProductTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.ProductType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ResourceFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.ProductType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ProductTypeDataSet_ProductTypeDTO(foundEntry);
            }
            return null;
        }
        public ProductTypeDataSet_ProductTypeDTO(DigicircMatchmaking.BO.ProductType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ProductTypeDataSet_ProductTypeDTO(DigicircMatchmaking.BO.ProductType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DigicircMatchmaking.BO.ProductType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.ProductType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.ProductType Convert()
        {
            var model = new DigicircMatchmaking.BO.ProductType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.ProductType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DigicircMatchmaking.BO.UnitOfMeasurement))]
    [DataSetDTO]
    public class UnitOfMeasurementDataset_UnitOfMeasurementDTO : UnitOfMeasurementDataset_ValueTypeDTO, IViewModelDTO<DigicircMatchmaking.BO.UnitOfMeasurement>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.UnitOfMeasurement).FullName;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public UnitOfMeasurementDataset_UnitOfMeasurementDTO() : base() {}
        public new static UnitOfMeasurementDataset_UnitOfMeasurementDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.UnitOfMeasurement>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ResourceFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.UnitOfMeasurement>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new UnitOfMeasurementDataset_UnitOfMeasurementDTO(foundEntry);
            }
            return null;
        }
        public UnitOfMeasurementDataset_UnitOfMeasurementDTO(DigicircMatchmaking.BO.UnitOfMeasurement original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public UnitOfMeasurementDataset_UnitOfMeasurementDTO(DigicircMatchmaking.BO.UnitOfMeasurement original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public new static DigicircMatchmaking.BO.UnitOfMeasurement GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.UnitOfMeasurement>(parsedKey, false, false);
        }
        public new DigicircMatchmaking.BO.UnitOfMeasurement Convert()
        {
            var model = new DigicircMatchmaking.BO.UnitOfMeasurement();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.UnitOfMeasurement>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.ValueType))]
    [DataSetDTO]
    public class UnitOfMeasurementDataset_ValueTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.ValueType>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.ValueType).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public UnitOfMeasurementDataset_ValueTypeDTO() : base() {}
        public  static UnitOfMeasurementDataset_ValueTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ResourceFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.ValueType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new UnitOfMeasurementDataset_ValueTypeDTO(foundEntry);
            }
            return null;
        }
        public UnitOfMeasurementDataset_ValueTypeDTO(DigicircMatchmaking.BO.ValueType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public UnitOfMeasurementDataset_ValueTypeDTO(DigicircMatchmaking.BO.ValueType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DigicircMatchmaking.BO.ValueType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.ValueType Convert()
        {
            var model = new DigicircMatchmaking.BO.ValueType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.BO.PhysicalForm))]
    [DataSetDTO]
    public class PhysicalFormDataset_PhysicalFormDTO : PhysicalFormDataset_ValueTypeDTO, IViewModelDTO<DigicircMatchmaking.BO.PhysicalForm>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.PhysicalForm).FullName;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public PhysicalFormDataset_PhysicalFormDTO() : base() {}
        public new static PhysicalFormDataset_PhysicalFormDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.PhysicalForm>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ResourceFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.PhysicalForm>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new PhysicalFormDataset_PhysicalFormDTO(foundEntry);
            }
            return null;
        }
        public PhysicalFormDataset_PhysicalFormDTO(DigicircMatchmaking.BO.PhysicalForm original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public PhysicalFormDataset_PhysicalFormDTO(DigicircMatchmaking.BO.PhysicalForm original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public new static DigicircMatchmaking.BO.PhysicalForm GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.PhysicalForm>(parsedKey, false, false);
        }
        public new DigicircMatchmaking.BO.PhysicalForm Convert()
        {
            var model = new DigicircMatchmaking.BO.PhysicalForm();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.PhysicalForm>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.ValueType))]
    [DataSetDTO]
    public class PhysicalFormDataset_ValueTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.ValueType>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.ValueType).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public PhysicalFormDataset_ValueTypeDTO() : base() {}
        public  static PhysicalFormDataset_ValueTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ResourceFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.ValueType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new PhysicalFormDataset_ValueTypeDTO(foundEntry);
            }
            return null;
        }
        public PhysicalFormDataset_ValueTypeDTO(DigicircMatchmaking.BO.ValueType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public PhysicalFormDataset_ValueTypeDTO(DigicircMatchmaking.BO.ValueType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DigicircMatchmaking.BO.ValueType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.ValueType Convert()
        {
            var model = new DigicircMatchmaking.BO.ValueType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.BO.Address))]
    [DataSetDTO]
    public class AddressDataset_AddressDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Address>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Address).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Alias;


        [JsonConstructor]
        public AddressDataset_AddressDTO() : base() {}
        public  static AddressDataset_AddressDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ResourceFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Address>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new AddressDataset_AddressDTO(foundEntry);
            }
            return null;
        }
        public AddressDataset_AddressDTO(DigicircMatchmaking.BO.Address original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public AddressDataset_AddressDTO(DigicircMatchmaking.BO.Address original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Alias = original.Alias;
        }

        public static DigicircMatchmaking.BO.Address GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Address Convert()
        {
            var model = new DigicircMatchmaking.BO.Address();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Alias = Alias;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    #endregion

}
