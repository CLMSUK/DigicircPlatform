// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.UI.Controllers.ExpertiseForm;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Locales;
using System.ComponentModel.DataAnnotations;
using DigicircMatchmaking.UI.ViewModels.MasterPage;
using DigicircMatchmaking.UI.Controllers.MasterPage;
namespace DigicircMatchmaking.UI.ViewModels.ExpertiseForm
{
    public class ExpertiseFormViewModel : MasterPageViewModel
    {
        public DigicircMatchmaking.BO.Expertise Expertise;


        public ExpertiseFormViewModel()
        {
            Expertise = new DigicircMatchmaking.BO.Expertise();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (manager.Session.Contains(Expertise))
            {
                manager.Session.Evict(Expertise);
            }
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.UI.ViewModels.ExpertiseForm.ExpertiseFormViewModel))]
    public class ExpertiseFormViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DigicircMatchmaking.UI.ViewModels.ExpertiseForm.ExpertiseFormViewModel>
    {

        [JsonConstructor]
        public ExpertiseFormViewModelDTO() { }
        public ExpertiseFormViewModelDTO(DigicircMatchmaking.UI.ViewModels.ExpertiseForm.ExpertiseFormViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            Expertise = original.Expertise == null ? null : new Expertise_ExpertiseDTO(original.Expertise);
        }
        public Expertise_ExpertiseDTO Expertise;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.UI.ViewModels.ExpertiseForm.ExpertiseFormViewModel).FullName;

        public new DigicircMatchmaking.UI.ViewModels.ExpertiseForm.ExpertiseFormViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.UI.ViewModels.ExpertiseForm.ExpertiseFormViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DigicircMatchmaking.UI.ViewModels.ExpertiseForm.ExpertiseFormViewModel();
        }
        new  public DigicircMatchmaking.UI.ViewModels.ExpertiseForm.ExpertiseFormViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.UI.ViewModels.ExpertiseForm.ExpertiseFormViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.UI.ViewModels.ExpertiseForm.ExpertiseFormViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.Expertise = Expertise == null
                                 ? null
                                 : Expertise.Convert();
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Expertise))]
    public class Expertise_ExpertiseDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Expertise>
    {

        [JsonConstructor]
        public Expertise_ExpertiseDTO() { }
        public Expertise_ExpertiseDTO(DigicircMatchmaking.BO.Expertise original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            Code = original.Code;
            Value = original.Value;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Code;
        public string Value;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Expertise).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DigicircMatchmaking.BO.ValueType).FullName};
        public DigicircMatchmaking.BO.Expertise GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Expertise>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Expertise();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Expertise>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Expertise Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Expertise();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Expertise original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Code = Code;
            original.Value = Value;
        }
        public static Expertise_ExpertiseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Expertise>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Expertise_ExpertiseDTO(foundEntry);
            }
            return null;
        }
    }



}
