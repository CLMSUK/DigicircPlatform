// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.UI.Controllers.ActorForm;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Locales;
using System.ComponentModel.DataAnnotations;
using DigicircMatchmaking.UI.ViewModels.MasterPage;
using DigicircMatchmaking.UI.Controllers.MasterPage;
namespace DigicircMatchmaking.UI.ViewModels.ActorForm
{
    public class ActorFormViewModel : MasterPageViewModel
    {
        public DigicircMatchmaking.BO.Actor Actor;
        public List<DigicircMatchmaking.BO.Actor> Points;
        public DigicircMatchmaking.BO.SectorType SelectedSector;
        public DigicircMatchmaking.BO.DigicircUser SignInUser;
        public string NewClusterName;
        public bool ManuallySetGeolocation;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.EntityType>> DropdownBox1SelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Actor>> DropdownBox3SelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.SectorType>> TextBoxSelectedItems;
        public List<SelectedItemInfo<string>> DropdownDigitalExpertiseDatasetSelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.SectorType>> DropdownBox2SelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Country>> DropdownBoxSelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Country>> DropdownBox4SelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Actor>> NewMap1SelectedItems;


        public ActorFormViewModel()
        {
            Actor = new DigicircMatchmaking.BO.Actor();
            Points = new List<DigicircMatchmaking.BO.Actor>();
            SelectedSector = new DigicircMatchmaking.BO.SectorType();
            SignInUser = new DigicircMatchmaking.BO.DigicircUser();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (manager.Session.Contains(Actor))
            {
                manager.Session.Evict(Actor);
            }
            if (Points != null)
            {
                foreach (var item in Points)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (manager.Session.Contains(SelectedSector))
            {
                manager.Session.Evict(SelectedSector);
            }
            if (manager.Session.Contains(SignInUser))
            {
                manager.Session.Evict(SignInUser);
            }
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.UI.ViewModels.ActorForm.ActorFormViewModel))]
    public class ActorFormViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DigicircMatchmaking.UI.ViewModels.ActorForm.ActorFormViewModel>
    {

        [JsonConstructor]
        public ActorFormViewModelDTO() { }
        public ActorFormViewModelDTO(DigicircMatchmaking.UI.ViewModels.ActorForm.ActorFormViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            Actor = original.Actor == null ? null : new Actor_ActorDTO(original.Actor);
            Points = original.Points?.Select(x => new Points_ActorDTO(x)).ToList();
            SelectedSector = original.SelectedSector == null ? null : new SelectedSector_SectorTypeDTO(original.SelectedSector);
            SignInUser = original.SignInUser == null ? null : new SignInUser_DigicircUserDTO(original.SignInUser);
            NewClusterName = original.NewClusterName;
            ManuallySetGeolocation = original.ManuallySetGeolocation;
            DropdownBox1SelectedItemKeys = original.DropdownBox1SelectedItems == null
                                           ? null
                                           : original.DropdownBox1SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            DropdownBox3SelectedItemKeys = original.DropdownBox3SelectedItems == null
                                           ? null
                                           : original.DropdownBox3SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            TextBoxSelectedItemKeys = original.TextBoxSelectedItems == null
                                      ? null
                                      : original.TextBoxSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            DropdownDigitalExpertiseDatasetSelectedItemKeys = original.DropdownDigitalExpertiseDatasetSelectedItems == null
                    ? null
                    : original.DropdownDigitalExpertiseDatasetSelectedItems.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            DropdownBox2SelectedItemKeys = original.DropdownBox2SelectedItems == null
                                           ? null
                                           : original.DropdownBox2SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            DropdownBoxSelectedItemKeys = original.DropdownBoxSelectedItems == null
                                          ? null
                                          : original.DropdownBoxSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            DropdownBox4SelectedItemKeys = original.DropdownBox4SelectedItems == null
                                           ? null
                                           : original.DropdownBox4SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            NewMap1SelectedItemKeys = original.NewMap1SelectedItems == null
                                      ? null
                                      : original.NewMap1SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public Actor_ActorDTO Actor;
        public List<Points_ActorDTO> Points;
        public SelectedSector_SectorTypeDTO SelectedSector;
        public SignInUser_DigicircUserDTO SignInUser;
        public string NewClusterName;
        public bool ManuallySetGeolocation;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.UI.ViewModels.ActorForm.ActorFormViewModel).FullName;
        public List<SelectedItemInfo<int?>> DropdownBox1SelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.ActorForm.EntityTypeDataset_EntityTypeDTO>> DropdownBox1__InitialSelection;
        public List<SelectedItemInfo<int?>> DropdownBox3SelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.ActorForm.ClustersDataset_ActorDTO>> DropdownBox3__InitialSelection;
        public List<SelectedItemInfo<int?>> TextBoxSelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.ActorForm.SectorTypeDataSet_SectorTypeDTO>> TextBox__InitialSelection;
        public List<SelectedItemInfo<string>> DropdownDigitalExpertiseDatasetSelectedItemKeys;
        public List<SelectedItemInfo<int?>> DropdownBox2SelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.ActorForm.SectorTypeDataSet_SectorTypeDTO>> DropdownBox2__InitialSelection;
        public List<SelectedItemInfo<int?>> DropdownBoxSelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.ActorForm.CountryDataset_CountryDTO>> DropdownBox__InitialSelection;
        public List<SelectedItemInfo<int?>> DropdownBox4SelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.ActorForm.CountryDataset_CountryDTO>> DropdownBox4__InitialSelection;
        public List<SelectedItemInfo<int?>> NewMap1SelectedItemKeys;

        public new DigicircMatchmaking.UI.ViewModels.ActorForm.ActorFormViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.UI.ViewModels.ActorForm.ActorFormViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DigicircMatchmaking.UI.ViewModels.ActorForm.ActorFormViewModel();
        }
        new  public DigicircMatchmaking.UI.ViewModels.ActorForm.ActorFormViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.UI.ViewModels.ActorForm.ActorFormViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.UI.ViewModels.ActorForm.ActorFormViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.Actor = Actor == null
                             ? null
                             : Actor.Convert();
            original.Points = Points == null
                              ? null
                              : Points.Select(q => q.Convert()).ToList();
            original.SelectedSector = SelectedSector == null
                                      ? null
                                      : SelectedSector.Convert();
            original.SignInUser = SignInUser == null
                                  ? null
                                  : SignInUser.Convert();
            original.NewClusterName = NewClusterName;
            original.ManuallySetGeolocation = ManuallySetGeolocation;
            original.DropdownBox1SelectedItems = DropdownBox1SelectedItemKeys == null
                                                 ? new List<SelectedItemInfo<DigicircMatchmaking.BO.EntityType>>()
                                                 : DropdownBox1SelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.EntityType>(x.SelectedItems.Select(y => ViewModels.ActorForm.EntityTypeDataset_EntityTypeDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.DropdownBox3SelectedItems = DropdownBox3SelectedItemKeys == null
                                                 ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Actor>>()
                                                 : DropdownBox3SelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Actor>(x.SelectedItems.Select(y => ViewModels.ActorForm.ClustersDataset_ActorDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.TextBoxSelectedItems = TextBoxSelectedItemKeys == null
                                            ? new List<SelectedItemInfo<DigicircMatchmaking.BO.SectorType>>()
                                            : TextBoxSelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.SectorType>(x.SelectedItems.Select(y => ViewModels.ActorForm.SectorTypeDataSet_SectorTypeDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.DropdownDigitalExpertiseDatasetSelectedItems = DropdownDigitalExpertiseDatasetSelectedItemKeys == null
                    ? new List<SelectedItemInfo<string>>()
                    : DropdownDigitalExpertiseDatasetSelectedItemKeys.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.DropdownBox2SelectedItems = DropdownBox2SelectedItemKeys == null
                                                 ? new List<SelectedItemInfo<DigicircMatchmaking.BO.SectorType>>()
                                                 : DropdownBox2SelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.SectorType>(x.SelectedItems.Select(y => ViewModels.ActorForm.SectorTypeDataSet_SectorTypeDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.DropdownBoxSelectedItems = DropdownBoxSelectedItemKeys == null
                                                ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Country>>()
                                                : DropdownBoxSelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Country>(x.SelectedItems.Select(y => ViewModels.ActorForm.CountryDataset_CountryDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.DropdownBox4SelectedItems = DropdownBox4SelectedItemKeys == null
                                                 ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Country>>()
                                                 : DropdownBox4SelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Country>(x.SelectedItems.Select(y => ViewModels.ActorForm.CountryDataset_CountryDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.NewMap1SelectedItems = NewMap1SelectedItemKeys == null
                                            ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Actor>>()
                                            : NewMap1SelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Actor>(x.SelectedItems.Select(y => ViewModels.ActorForm.MapPoints_ActorDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public void FillDropDownsInitialValues(ActorFormViewModel original, ActorFormController _controller)
        {
            DropdownBox1__InitialSelection = new List<SelectedItemInfo<ViewModels.ActorForm.EntityTypeDataset_EntityTypeDTO>>();
            DropdownBox3__InitialSelection = new List<SelectedItemInfo<ViewModels.ActorForm.ClustersDataset_ActorDTO>>();
            TextBox__InitialSelection = new List<SelectedItemInfo<ViewModels.ActorForm.SectorTypeDataSet_SectorTypeDTO>>();
            DropdownBox2__InitialSelection = new List<SelectedItemInfo<ViewModels.ActorForm.SectorTypeDataSet_SectorTypeDTO>>();
            DropdownBox__InitialSelection = new List<SelectedItemInfo<ViewModels.ActorForm.CountryDataset_CountryDTO>>();
            DropdownBox4__InitialSelection = new List<SelectedItemInfo<ViewModels.ActorForm.CountryDataset_CountryDTO>>();
            if (original == null) return;
            var DropdownBox1InitiallySelectedItem = original?.Actor?.EntityType == null
                                                    ? null
                                                    : new DAL.Repository().Get<DigicircMatchmaking.BO.EntityType>(c => c.Id == original.Actor.EntityType.Id).FirstOrDefault();
            if (DropdownBox1InitiallySelectedItem != null)
            {
                DropdownBox1__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.ActorForm.EntityTypeDataset_EntityTypeDTO>(new List<ViewModels.ActorForm.EntityTypeDataset_EntityTypeDTO>
                {
                    new EntityTypeDataset_EntityTypeDTO(DropdownBox1InitiallySelectedItem)
                }, "_", false)
                );
            }
            var DropdownBox3InitiallySelectedItem = original?.Actor?.Cluster == null
                                                    ? null
                                                    : new DAL.Repository().Get<DigicircMatchmaking.BO.Actor>(c => c.Id == original.Actor.Cluster.Id).FirstOrDefault();
            if (DropdownBox3InitiallySelectedItem != null)
            {
                DropdownBox3__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.ActorForm.ClustersDataset_ActorDTO>(new List<ViewModels.ActorForm.ClustersDataset_ActorDTO>
                {
                    new ClustersDataset_ActorDTO(DropdownBox3InitiallySelectedItem)
                }, "_", false)
                );
            }
            var TextBoxInitiallySelectedItem = original?.SelectedSector == null
                                               ? null
                                               : new DAL.Repository().Get<DigicircMatchmaking.BO.SectorType>(c => c.Id == original.SelectedSector.Id).FirstOrDefault();
            if (TextBoxInitiallySelectedItem != null)
            {
                TextBox__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.ActorForm.SectorTypeDataSet_SectorTypeDTO>(new List<ViewModels.ActorForm.SectorTypeDataSet_SectorTypeDTO>
                {
                    new SectorTypeDataSet_SectorTypeDTO(TextBoxInitiallySelectedItem)
                }, "_", false)
                );
            }
            var DropdownBox2InitiallySelectedItem = original?.Actor?.CircularEconomyRequirements?.DesiredSMESector == null
                                                    ? null
                                                    : new DAL.Repository().Get<DigicircMatchmaking.BO.SectorType>(c => c.Id == original.Actor.CircularEconomyRequirements.DesiredSMESector.Id).FirstOrDefault();
            if (DropdownBox2InitiallySelectedItem != null)
            {
                DropdownBox2__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.ActorForm.SectorTypeDataSet_SectorTypeDTO>(new List<ViewModels.ActorForm.SectorTypeDataSet_SectorTypeDTO>
                {
                    new SectorTypeDataSet_SectorTypeDTO(DropdownBox2InitiallySelectedItem)
                }, "_", false)
                );
            }
            var DropdownBoxInitiallySelectedItem = original?.Actor?.Address?.Country == null
                                                   ? null
                                                   : new DAL.Repository().Get<DigicircMatchmaking.BO.Country>(c => c.Id == original.Actor.Address.Country.Id).FirstOrDefault();
            if (DropdownBoxInitiallySelectedItem != null)
            {
                DropdownBox__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.ActorForm.CountryDataset_CountryDTO>(new List<ViewModels.ActorForm.CountryDataset_CountryDTO>
                {
                    new CountryDataset_CountryDTO(DropdownBoxInitiallySelectedItem)
                }, "_", false)
                );
            }
            for (var Table5ItemIndex = 0; Table5ItemIndex < original?.Actor?.Sites?.Count; Table5ItemIndex++)
            {
                var Table5ItemContext = original?.Actor?.Sites[Table5ItemIndex];
                if (Table5ItemContext == null) continue;
                var DropdownBox4InitiallySelectedItem = Table5ItemContext?.Country == null
                                                        ? null
                                                        : new DAL.Repository().Get<DigicircMatchmaking.BO.Country>(c => c.Id == Table5ItemContext.Country.Id).FirstOrDefault();
                if (DropdownBox4InitiallySelectedItem != null)
                {
                    DropdownBox4__InitialSelection.Add
                    (
                        new SelectedItemInfo<ViewModels.ActorForm.CountryDataset_CountryDTO>(new List<ViewModels.ActorForm.CountryDataset_CountryDTO>
                    {
                        new CountryDataset_CountryDTO(DropdownBox4InitiallySelectedItem)
                    }, Table5ItemIndex.ToString() + "_", false)
                    );
                }
            }
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Actor))]
    public class Actor_ActorDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Actor>
    {

        [JsonConstructor]
        public Actor_ActorDTO() { }
        public Actor_ActorDTO(DigicircMatchmaking.BO.Actor original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            ClusterName = original.ClusterName;
            Description = original.Description;
            Email = original.Email;
            HasSites = original.HasSites;
            Id = original.Id;
            Keywords = original.Keywords;
            MemberOfCluster = original.MemberOfCluster;
            Name = original.Name;
            SpecifiedEnityType = original.SpecifiedEnityType;
            Url = original.Url;
            Address = original.Address == null ? null : new Actor_Actor_Address_AddressDTO(original.Address);
            EntityType = original.EntityType == null ? null : new Actor_Actor_EntityType_EntityTypeDTO(original.EntityType);
            CircularEconomyRequirements = original.CircularEconomyRequirements == null ? null : new Actor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO(original.CircularEconomyRequirements);
            SectorTypes = original.SectorTypes?.Select(x => new Actor_Actor_SectorTypes_SectorTypeDTO(x)).ToList();
            CircularEconomyProviderReport = original.CircularEconomyProviderReport == null ? null : new Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReportDTO(original.CircularEconomyProviderReport);
            ActorLogo = original.ActorLogo == null ? null : new Actor_Actor_ActorLogo_FileDataDTO(original.ActorLogo);
            AddedBy = original.AddedBy == null ? null : new Actor_Actor_AddedBy_DigicircUserDTO(original.AddedBy);
            Cluster = original.Cluster == null ? null : new Actor_Actor_Cluster_ActorDTO(original.Cluster);
            Administrators = original.Administrators?.Select(x => new Actor_Actor_Administrators_DigicircUserDTO(x)).ToList();
            Sites = original.Sites?.Select(x => new Actor_Actor_Sites_AddressDTO(x)).ToList();
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string ClusterName;
        public string Description;
        public string Email;
        public bool HasSites;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Keywords;
        public bool MemberOfCluster;
        public string Name;
        public string SpecifiedEnityType;
        public string Url;
        public Actor_Actor_Address_AddressDTO Address;
        public Actor_Actor_EntityType_EntityTypeDTO EntityType;
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO CircularEconomyRequirements;
        public List<Actor_Actor_SectorTypes_SectorTypeDTO> SectorTypes;
        public Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReportDTO CircularEconomyProviderReport;
        public Actor_Actor_ActorLogo_FileDataDTO ActorLogo;
        public Actor_Actor_AddedBy_DigicircUserDTO AddedBy;
        public Actor_Actor_Cluster_ActorDTO Cluster;
        public List<Actor_Actor_Administrators_DigicircUserDTO> Administrators;
        public List<Actor_Actor_Sites_AddressDTO> Sites;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Actor).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Actor GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Actor>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Actor();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Actor Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Actor();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Actor original)
        {
            if (original == null) return;
            original.ClusterName = ClusterName;
            original.Description = Description;
            original.Email = Email;
            original.HasSites = HasSites;
            original.Id = Id ?? 0;
            original.Keywords = Keywords;
            original.MemberOfCluster = MemberOfCluster;
            original.Name = Name;
            original.SpecifiedEnityType = SpecifiedEnityType;
            original.Url = Url;
            original.Address = Address == null
                               ? null
                               : Address.Convert();
            original.EntityType = EntityType == null
                                  ? null
                                  : EntityType.Convert();
            original.CircularEconomyRequirements = CircularEconomyRequirements == null
                                                   ? null
                                                   : CircularEconomyRequirements.Convert();
            original.SectorTypes = SectorTypes == null
                                   ? null
                                   : SectorTypes.Select(q => q.Convert()).ToList();
            original.CircularEconomyProviderReport = CircularEconomyProviderReport == null
                    ? null
                    : CircularEconomyProviderReport.Convert();
            original.ActorLogo = ActorLogo == null
                                 ? null
                                 : ActorLogo.Convert();
            original.AddedBy = AddedBy == null
                               ? null
                               : AddedBy.Convert();
            original.Cluster = Cluster == null
                               ? null
                               : Cluster.Convert();
            original.Administrators = Administrators == null
                                      ? null
                                      : Administrators.Select(q => q.Convert()).ToList();
            original.Sites = Sites == null
                             ? null
                             : Sites.Select(q => q.Convert()).ToList();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Actor_ActorDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_ActorDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Address))]
    public class Actor_Actor_Address_AddressDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Address>
    {

        [JsonConstructor]
        public Actor_Actor_Address_AddressDTO() { }
        public Actor_Actor_Address_AddressDTO(DigicircMatchmaking.BO.Address original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            Latitude = original.Latitude;
            Longitude = original.Longitude;
            Number = original.Number;
            StreetName = original.StreetName;
            Town = original.Town;
            Zip = original.Zip;
            Country = original.Country == null ? null : new Actor_Actor_Address_Address_Country_CountryDTO(original.Country);
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public double? Latitude;
        public double? Longitude;
        public string Number;
        public string StreetName;
        public string Town;
        public string Zip;
        public Actor_Actor_Address_Address_Country_CountryDTO Country;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Address).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Address GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Address>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Address();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Address Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Address();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Address original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Latitude = Latitude;
            original.Longitude = Longitude;
            original.Number = Number;
            original.StreetName = StreetName;
            original.Town = Town;
            original.Zip = Zip;
            original.Country = Country == null
                               ? null
                               : Country.Convert();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Actor_Actor_Address_AddressDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_Address_AddressDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Country))]
    public class Actor_Actor_Address_Address_Country_CountryDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Country>
    {

        [JsonConstructor]
        public Actor_Actor_Address_Address_Country_CountryDTO() { }
        public Actor_Actor_Address_Address_Country_CountryDTO(DigicircMatchmaking.BO.Country original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            Name = original.Name;
            ShortName = original.ShortName;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string ShortName;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Country).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Country GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Country>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Country();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Country Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Country();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Country original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.ShortName = ShortName;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Actor_Actor_Address_Address_Country_CountryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_Address_Address_Country_CountryDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.EntityType))]
    public class Actor_Actor_EntityType_EntityTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.EntityType>
    {

        [JsonConstructor]
        public Actor_Actor_EntityType_EntityTypeDTO() { }
        public Actor_Actor_EntityType_EntityTypeDTO(DigicircMatchmaking.BO.EntityType original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Code = original.Code;
            Id = original.Id;
            IsCluster = original.IsCluster;
            IsProvider = original.IsProvider;
            Value = original.Value;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool IsCluster;
        public bool IsProvider;
        public string Value;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.EntityType).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DigicircMatchmaking.BO.ValueType).FullName};
        public DigicircMatchmaking.BO.EntityType GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.EntityType>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.EntityType();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.EntityType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.EntityType Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.EntityType();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.EntityType original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Id = Id ?? 0;
            original.IsCluster = IsCluster;
            original.IsProvider = IsProvider;
            original.Value = Value;
        }
        public static Actor_Actor_EntityType_EntityTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.EntityType>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_EntityType_EntityTypeDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.CircularEconomyReport))]
    public class Actor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.CircularEconomyReport>
    {

        [JsonConstructor]
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO() { }
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO(DigicircMatchmaking.BO.CircularEconomyReport original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            DigitalExpertise = original.DigitalExpertise;
            DigitalProviredNeeded = original.DigitalProviredNeeded;
            ExperienceInCircularEconomy = original.ExperienceInCircularEconomy;
            Id = original.Id;
            SpecifyExperienceInCircularEconomy = original.SpecifyExperienceInCircularEconomy;
            ThematicExpertiseNeeded = original.ThematicExpertiseNeeded;
            DesiredThematicExpertises = original.DesiredThematicExpertises?.Select(x => new Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredThematicExpertises_ThematicExpertiseDTO(x)).ToList();
            DesiredSMESector = original.DesiredSMESector == null ? null : new Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredSMESector_SectorTypeDTO(original.DesiredSMESector);
            DesiredGeographicalArea = original.DesiredGeographicalArea?.Select(x => new Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredGeographicalArea_GeographicalAreaDTO(x)).ToList();
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public DigicircMatchmaking.BO.DigitalExpertise? DigitalExpertise;
        public bool DigitalProviredNeeded;
        public bool ExperienceInCircularEconomy;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string SpecifyExperienceInCircularEconomy;
        public bool ThematicExpertiseNeeded;
        public List<Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredThematicExpertises_ThematicExpertiseDTO> DesiredThematicExpertises;
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredSMESector_SectorTypeDTO DesiredSMESector;
        public List<Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredGeographicalArea_GeographicalAreaDTO> DesiredGeographicalArea;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.CircularEconomyReport).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.CircularEconomyReport GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.CircularEconomyReport>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.CircularEconomyReport();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.CircularEconomyReport>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.CircularEconomyReport Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.CircularEconomyReport();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.CircularEconomyReport original)
        {
            if (original == null) return;
            original.DigitalExpertise = DigitalExpertise;
            original.DigitalProviredNeeded = DigitalProviredNeeded;
            original.ExperienceInCircularEconomy = ExperienceInCircularEconomy;
            original.Id = Id ?? 0;
            original.SpecifyExperienceInCircularEconomy = SpecifyExperienceInCircularEconomy;
            original.ThematicExpertiseNeeded = ThematicExpertiseNeeded;
            original.DesiredThematicExpertises = DesiredThematicExpertises == null
                                                 ? null
                                                 : DesiredThematicExpertises.Select(q => q.Convert()).ToList();
            original.DesiredSMESector = DesiredSMESector == null
                                        ? null
                                        : DesiredSMESector.Convert();
            original.DesiredGeographicalArea = DesiredGeographicalArea == null
                                               ? null
                                               : DesiredGeographicalArea.Select(q => q.Convert()).ToList();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Actor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.CircularEconomyReport>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.ThematicExpertise))]
    public class Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredThematicExpertises_ThematicExpertiseDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.ThematicExpertise>
    {

        [JsonConstructor]
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredThematicExpertises_ThematicExpertiseDTO() { }
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredThematicExpertises_ThematicExpertiseDTO(DigicircMatchmaking.BO.ThematicExpertise original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Code = original.Code;
            Id = original.Id;
            Value = original.Value;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.ThematicExpertise).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DigicircMatchmaking.BO.ValueType).FullName};
        public DigicircMatchmaking.BO.ThematicExpertise GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.ThematicExpertise>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.ThematicExpertise();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.ThematicExpertise>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.ThematicExpertise Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.ThematicExpertise();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.ThematicExpertise original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Id = Id ?? 0;
            original.Value = Value;
        }
        public static Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredThematicExpertises_ThematicExpertiseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.ThematicExpertise>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredThematicExpertises_ThematicExpertiseDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.SectorType))]
    public class Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredSMESector_SectorTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.SectorType>
    {

        [JsonConstructor]
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredSMESector_SectorTypeDTO() { }
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredSMESector_SectorTypeDTO(DigicircMatchmaking.BO.SectorType original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Code = original.Code;
            Id = original.Id;
            Value = original.Value;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.SectorType).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DigicircMatchmaking.BO.ValueType).FullName};
        public DigicircMatchmaking.BO.SectorType GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.SectorType>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.SectorType();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.SectorType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.SectorType Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.SectorType();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.SectorType original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Id = Id ?? 0;
            original.Value = Value;
        }
        public static Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredSMESector_SectorTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.SectorType>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredSMESector_SectorTypeDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.GeographicalArea))]
    public class Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredGeographicalArea_GeographicalAreaDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.GeographicalArea>
    {

        [JsonConstructor]
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredGeographicalArea_GeographicalAreaDTO() { }
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredGeographicalArea_GeographicalAreaDTO(DigicircMatchmaking.BO.GeographicalArea original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.GeographicalArea).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.GeographicalArea GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.GeographicalArea>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.GeographicalArea();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.GeographicalArea>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.GeographicalArea Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.GeographicalArea();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.GeographicalArea original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
        }
        public static Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredGeographicalArea_GeographicalAreaDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.GeographicalArea>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredGeographicalArea_GeographicalAreaDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.SectorType))]
    public class Actor_Actor_SectorTypes_SectorTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.SectorType>
    {

        [JsonConstructor]
        public Actor_Actor_SectorTypes_SectorTypeDTO() { }
        public Actor_Actor_SectorTypes_SectorTypeDTO(DigicircMatchmaking.BO.SectorType original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Code = original.Code;
            Id = original.Id;
            Value = original.Value;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.SectorType).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DigicircMatchmaking.BO.ValueType).FullName};
        public DigicircMatchmaking.BO.SectorType GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.SectorType>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.SectorType();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.SectorType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.SectorType Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.SectorType();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.SectorType original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Id = Id ?? 0;
            original.Value = Value;
        }
        public static Actor_Actor_SectorTypes_SectorTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.SectorType>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_SectorTypes_SectorTypeDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.CircularEconomyProviderReport))]
    public class Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReportDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.CircularEconomyProviderReport>
    {

        [JsonConstructor]
        public Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReportDTO() { }
        public Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReportDTO(DigicircMatchmaking.BO.CircularEconomyProviderReport original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            AvailableTestingFacilities = original.AvailableTestingFacilities;
            Id = original.Id;
            PlaceOperates = original.PlaceOperates?.Select(x => new Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_PlaceOperates_GeographicalAreaDTO(x)).ToList();
            Expertises = original.Expertises?.Select(x => new Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_Expertises_ExpertiseDTO(x)).ToList();
            ServicesProvided = original.ServicesProvided?.Select(x => new Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_ServicesProvided_ServicesDTO(x)).ToList();
            ThematicExpertises = original.ThematicExpertises?.Select(x => new Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_ThematicExpertises_ThematicExpertiseDTO(x)).ToList();
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public bool AvailableTestingFacilities;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public List<Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_PlaceOperates_GeographicalAreaDTO> PlaceOperates;
        public List<Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_Expertises_ExpertiseDTO> Expertises;
        public List<Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_ServicesProvided_ServicesDTO> ServicesProvided;
        public List<Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_ThematicExpertises_ThematicExpertiseDTO> ThematicExpertises;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.CircularEconomyProviderReport).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.CircularEconomyProviderReport GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.CircularEconomyProviderReport>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.CircularEconomyProviderReport();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.CircularEconomyProviderReport>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.CircularEconomyProviderReport Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.CircularEconomyProviderReport();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.CircularEconomyProviderReport original)
        {
            if (original == null) return;
            original.AvailableTestingFacilities = AvailableTestingFacilities;
            original.Id = Id ?? 0;
            original.PlaceOperates = PlaceOperates == null
                                     ? null
                                     : PlaceOperates.Select(q => q.Convert()).ToList();
            original.Expertises = Expertises == null
                                  ? null
                                  : Expertises.Select(q => q.Convert()).ToList();
            original.ServicesProvided = ServicesProvided == null
                                        ? null
                                        : ServicesProvided.Select(q => q.Convert()).ToList();
            original.ThematicExpertises = ThematicExpertises == null
                                          ? null
                                          : ThematicExpertises.Select(q => q.Convert()).ToList();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReportDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.CircularEconomyProviderReport>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReportDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.GeographicalArea))]
    public class Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_PlaceOperates_GeographicalAreaDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.GeographicalArea>
    {

        [JsonConstructor]
        public Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_PlaceOperates_GeographicalAreaDTO() { }
        public Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_PlaceOperates_GeographicalAreaDTO(DigicircMatchmaking.BO.GeographicalArea original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.GeographicalArea).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.GeographicalArea GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.GeographicalArea>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.GeographicalArea();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.GeographicalArea>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.GeographicalArea Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.GeographicalArea();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.GeographicalArea original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
        }
        public static Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_PlaceOperates_GeographicalAreaDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.GeographicalArea>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_PlaceOperates_GeographicalAreaDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Expertise))]
    public class Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_Expertises_ExpertiseDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Expertise>
    {

        [JsonConstructor]
        public Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_Expertises_ExpertiseDTO() { }
        public Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_Expertises_ExpertiseDTO(DigicircMatchmaking.BO.Expertise original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Code = original.Code;
            Id = original.Id;
            Value = original.Value;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Expertise).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DigicircMatchmaking.BO.ValueType).FullName};
        public DigicircMatchmaking.BO.Expertise GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Expertise>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Expertise();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Expertise>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Expertise Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Expertise();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Expertise original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Id = Id ?? 0;
            original.Value = Value;
        }
        public static Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_Expertises_ExpertiseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Expertise>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_Expertises_ExpertiseDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Services))]
    public class Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_ServicesProvided_ServicesDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Services>
    {

        [JsonConstructor]
        public Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_ServicesProvided_ServicesDTO() { }
        public Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_ServicesProvided_ServicesDTO(DigicircMatchmaking.BO.Services original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Code = original.Code;
            Id = original.Id;
            Value = original.Value;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Services).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DigicircMatchmaking.BO.ValueType).FullName};
        public DigicircMatchmaking.BO.Services GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Services>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Services();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Services>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Services Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Services();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Services original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Id = Id ?? 0;
            original.Value = Value;
        }
        public static Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_ServicesProvided_ServicesDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Services>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_ServicesProvided_ServicesDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.ThematicExpertise))]
    public class Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_ThematicExpertises_ThematicExpertiseDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.ThematicExpertise>
    {

        [JsonConstructor]
        public Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_ThematicExpertises_ThematicExpertiseDTO() { }
        public Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_ThematicExpertises_ThematicExpertiseDTO(DigicircMatchmaking.BO.ThematicExpertise original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Code = original.Code;
            Id = original.Id;
            Value = original.Value;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.ThematicExpertise).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DigicircMatchmaking.BO.ValueType).FullName};
        public DigicircMatchmaking.BO.ThematicExpertise GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.ThematicExpertise>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.ThematicExpertise();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.ThematicExpertise>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.ThematicExpertise Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.ThematicExpertise();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.ThematicExpertise original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Id = Id ?? 0;
            original.Value = Value;
        }
        public static Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_ThematicExpertises_ThematicExpertiseDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.ThematicExpertise>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_CircularEconomyProviderReport_CircularEconomyProviderReport_ThematicExpertises_ThematicExpertiseDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.FileData))]
    public class Actor_Actor_ActorLogo_FileDataDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.FileData>
    {

        [JsonConstructor]
        public Actor_Actor_ActorLogo_FileDataDTO() { }
        public Actor_Actor_ActorLogo_FileDataDTO(DigicircMatchmaking.BO.FileData original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            FileName = original.FileName;
            MaxFileSize = original.MaxFileSize;
            AllowedExtensions = original.AllowedExtensions;
            StorageMedium = original.StorageMedium;
            UploadedBy = original.UploadedBy;
            UploadDateTime = original.UploadDateTime;
            FolderPath = original.FolderPath;
            Description = original.Description;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Guid? Id;
        public new object _key
        {
            get;
            set;
        }
        public string FileName;
        public int? MaxFileSize;
        public string AllowedExtensions;
        public DigicircMatchmaking.BO.StorageMedium? StorageMedium;
        public string UploadedBy;
        public DateTime? UploadDateTime;
        public string FolderPath;
        public string Description;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.FileData).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.FileData GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.FileData>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = System.Guid.Parse(rawKey);
            if (parsedKey == default(Guid) || Equals(parsedKey, default(Guid)))
            {
                return new DigicircMatchmaking.BO.FileData();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.FileData>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.FileData Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.FileData();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.FileData original)
        {
            if (original == null) return;
            original.Id = Id ?? default(Guid);
            original.FileName = FileName;
            original.MaxFileSize = MaxFileSize;
            original.AllowedExtensions = AllowedExtensions;
            original.StorageMedium = StorageMedium;
            original.UploadedBy = UploadedBy;
            original.UploadDateTime = UploadDateTime;
            original.FolderPath = FolderPath;
            original.Description = Description;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Actor_Actor_ActorLogo_FileDataDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = System.Guid.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.FileData>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_ActorLogo_FileDataDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.DigicircUser))]
    public class Actor_Actor_AddedBy_DigicircUserDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.DigicircUser>
    {

        [JsonConstructor]
        public Actor_Actor_AddedBy_DigicircUserDTO() { }
        public Actor_Actor_AddedBy_DigicircUserDTO(DigicircMatchmaking.BO.DigicircUser original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.UserName as object;
            AccessFailedCount = original.AccessFailedCount;
            Email = original.Email;
            EmailConfirmed = original.EmailConfirmed;
            LockoutEnabled = original.LockoutEnabled;
            LockoutEndDate = original.LockoutEndDate;
            Name = original.Name;
            PhoneNumber = original.PhoneNumber;
            PhoneNumberConfirmed = original.PhoneNumberConfirmed;
            TwoFactorEnabled = original.TwoFactorEnabled;
            UserName = original.UserName;
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public int? AccessFailedCount;
        public string Email;
        public bool EmailConfirmed;
        public bool LockoutEnabled;
        public DateTime? LockoutEndDate;
        public string Name;
        public string PhoneNumber;
        public bool PhoneNumberConfirmed;
        public bool TwoFactorEnabled;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.DigicircUser).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName};
        public DigicircMatchmaking.BO.DigicircUser GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.DigicircUser>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DigicircMatchmaking.BO.DigicircUser();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.DigicircUser Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.DigicircUser();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.DigicircUser original)
        {
            if (original == null) return;
            original.AccessFailedCount = AccessFailedCount;
            original.Email = Email;
            original.EmailConfirmed = EmailConfirmed;
            original.LockoutEnabled = LockoutEnabled;
            original.LockoutEndDate = LockoutEndDate;
            original.Name = Name;
            original.PhoneNumber = PhoneNumber;
            original.PhoneNumberConfirmed = PhoneNumberConfirmed;
            original.TwoFactorEnabled = TwoFactorEnabled;
            original.UserName = UserName ?? "";
        }
        public static Actor_Actor_AddedBy_DigicircUserDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_AddedBy_DigicircUserDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Actor))]
    public class Actor_Actor_Cluster_ActorDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Actor>
    {

        [JsonConstructor]
        public Actor_Actor_Cluster_ActorDTO() { }
        public Actor_Actor_Cluster_ActorDTO(DigicircMatchmaking.BO.Actor original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            Email = original.Email;
            Id = original.Id;
            MemberOfCluster = original.MemberOfCluster;
            Name = original.Name;
            ShortDescription = original.ShortDescription;
            SpecifiedEnityType = original.SpecifiedEnityType;
            Url = original.Url;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string Email;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool MemberOfCluster;
        public string Name;
        public string ShortDescription;
        public string SpecifiedEnityType;
        public string Url;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Actor).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Actor GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Actor>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Actor();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Actor Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Actor();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Actor original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Email = Email;
            original.Id = Id ?? 0;
            original.MemberOfCluster = MemberOfCluster;
            original.Name = Name;
            original.ShortDescription = ShortDescription;
            original.SpecifiedEnityType = SpecifiedEnityType;
            original.Url = Url;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Actor_Actor_Cluster_ActorDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_Cluster_ActorDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.DigicircUser))]
    public class Actor_Actor_Administrators_DigicircUserDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.DigicircUser>
    {

        [JsonConstructor]
        public Actor_Actor_Administrators_DigicircUserDTO() { }
        public Actor_Actor_Administrators_DigicircUserDTO(DigicircMatchmaking.BO.DigicircUser original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.UserName as object;
            AccessFailedCount = original.AccessFailedCount;
            Email = original.Email;
            EmailConfirmed = original.EmailConfirmed;
            FirstName = original.FirstName;
            LastName = original.LastName;
            LockoutEnabled = original.LockoutEnabled;
            LockoutEndDate = original.LockoutEndDate;
            Name = original.Name;
            PhoneNumber = original.PhoneNumber;
            PhoneNumberConfirmed = original.PhoneNumberConfirmed;
            SubscribeToNewsLetter = original.SubscribeToNewsLetter;
            TwoFactorEnabled = original.TwoFactorEnabled;
            UserName = original.UserName;
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public int? AccessFailedCount;
        public string Email;
        public bool EmailConfirmed;
        public string FirstName;
        public string LastName;
        public bool LockoutEnabled;
        public DateTime? LockoutEndDate;
        public string Name;
        public string PhoneNumber;
        public bool PhoneNumberConfirmed;
        public bool SubscribeToNewsLetter;
        public bool TwoFactorEnabled;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.DigicircUser).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName};
        public DigicircMatchmaking.BO.DigicircUser GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.DigicircUser>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DigicircMatchmaking.BO.DigicircUser();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.DigicircUser Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.DigicircUser();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.DigicircUser original)
        {
            if (original == null) return;
            original.AccessFailedCount = AccessFailedCount;
            original.Email = Email;
            original.EmailConfirmed = EmailConfirmed;
            original.FirstName = FirstName;
            original.LastName = LastName;
            original.LockoutEnabled = LockoutEnabled;
            original.LockoutEndDate = LockoutEndDate;
            original.Name = Name;
            original.PhoneNumber = PhoneNumber;
            original.PhoneNumberConfirmed = PhoneNumberConfirmed;
            original.SubscribeToNewsLetter = SubscribeToNewsLetter;
            original.TwoFactorEnabled = TwoFactorEnabled;
            original.UserName = UserName ?? "";
        }
        public static Actor_Actor_Administrators_DigicircUserDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_Administrators_DigicircUserDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Address))]
    public class Actor_Actor_Sites_AddressDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Address>
    {

        [JsonConstructor]
        public Actor_Actor_Sites_AddressDTO() { }
        public Actor_Actor_Sites_AddressDTO(DigicircMatchmaking.BO.Address original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Alias = original.Alias;
            FullAddress = original.FullAddress;
            Id = original.Id;
            Latitude = original.Latitude;
            Longitude = original.Longitude;
            Number = original.Number;
            StreetName = original.StreetName;
            Town = original.Town;
            Zip = original.Zip;
            Country = original.Country == null ? null : new Actor_Actor_Sites_Address_Country_CountryDTO(original.Country);
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Alias;
        public string FullAddress;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public double? Latitude;
        public double? Longitude;
        public string Number;
        public string StreetName;
        public string Town;
        public string Zip;
        public Actor_Actor_Sites_Address_Country_CountryDTO Country;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Address).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Address GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Address>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Address();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Address Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Address();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Address original)
        {
            if (original == null) return;
            original.Alias = Alias;
            original.FullAddress = FullAddress;
            original.Id = Id ?? 0;
            original.Latitude = Latitude;
            original.Longitude = Longitude;
            original.Number = Number;
            original.StreetName = StreetName;
            original.Town = Town;
            original.Zip = Zip;
            original.Country = Country == null
                               ? null
                               : Country.Convert();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Actor_Actor_Sites_AddressDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_Sites_AddressDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Country))]
    public class Actor_Actor_Sites_Address_Country_CountryDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Country>
    {

        [JsonConstructor]
        public Actor_Actor_Sites_Address_Country_CountryDTO() { }
        public Actor_Actor_Sites_Address_Country_CountryDTO(DigicircMatchmaking.BO.Country original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            Name = original.Name;
            ShortName = original.ShortName;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string ShortName;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Country).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Country GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Country>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Country();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Country Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Country();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Country original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.ShortName = ShortName;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Actor_Actor_Sites_Address_Country_CountryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_Sites_Address_Country_CountryDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Actor))]
    public class Points_ActorDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Actor>
    {

        [JsonConstructor]
        public Points_ActorDTO() { }
        public Points_ActorDTO(DigicircMatchmaking.BO.Actor original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            Email = original.Email;
            Id = original.Id;
            Name = original.Name;
            Url = original.Url;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string Email;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string Url;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Actor).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Actor GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Actor>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Actor();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Actor Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Actor();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Actor original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Email = Email;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.Url = Url;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Points_ActorDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Points_ActorDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.SectorType))]
    public class SelectedSector_SectorTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.SectorType>
    {

        [JsonConstructor]
        public SelectedSector_SectorTypeDTO() { }
        public SelectedSector_SectorTypeDTO(DigicircMatchmaking.BO.SectorType original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Code = original.Code;
            Id = original.Id;
            Value = original.Value;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.SectorType).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DigicircMatchmaking.BO.ValueType).FullName};
        public DigicircMatchmaking.BO.SectorType GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.SectorType>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.SectorType();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.SectorType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.SectorType Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.SectorType();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.SectorType original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Id = Id ?? 0;
            original.Value = Value;
        }
        public static SelectedSector_SectorTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.SectorType>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new SelectedSector_SectorTypeDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.DigicircUser))]
    public class SignInUser_DigicircUserDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.DigicircUser>
    {

        [JsonConstructor]
        public SignInUser_DigicircUserDTO() { }
        public SignInUser_DigicircUserDTO(DigicircMatchmaking.BO.DigicircUser original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.UserName as object;
            AccessFailedCount = original.AccessFailedCount;
            Email = original.Email;
            EmailConfirmed = original.EmailConfirmed;
            LockoutEnabled = original.LockoutEnabled;
            LockoutEndDate = original.LockoutEndDate;
            Name = original.Name;
            PhoneNumber = original.PhoneNumber;
            PhoneNumberConfirmed = original.PhoneNumberConfirmed;
            TwoFactorEnabled = original.TwoFactorEnabled;
            UserName = original.UserName;
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public int? AccessFailedCount;
        public string Email;
        public bool EmailConfirmed;
        public bool LockoutEnabled;
        public DateTime? LockoutEndDate;
        public string Name;
        public string PhoneNumber;
        public bool PhoneNumberConfirmed;
        public bool TwoFactorEnabled;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.DigicircUser).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName};
        public DigicircMatchmaking.BO.DigicircUser GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.DigicircUser>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DigicircMatchmaking.BO.DigicircUser();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.DigicircUser Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.DigicircUser();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.DigicircUser original)
        {
            if (original == null) return;
            original.AccessFailedCount = AccessFailedCount;
            original.Email = Email;
            original.EmailConfirmed = EmailConfirmed;
            original.LockoutEnabled = LockoutEnabled;
            original.LockoutEndDate = LockoutEndDate;
            original.Name = Name;
            original.PhoneNumber = PhoneNumber;
            original.PhoneNumberConfirmed = PhoneNumberConfirmed;
            original.TwoFactorEnabled = TwoFactorEnabled;
            original.UserName = UserName ?? "";
        }
        public static SignInUser_DigicircUserDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new SignInUser_DigicircUserDTO(foundEntry);
            }
            return null;
        }
    }


    #region Datasource DTOs

    [OriginalType(typeof(DigicircMatchmaking.BO.DigicircUser))]
    [DataSetDTO]
    public class DigicircUserDataSource_DigicircUserDTO : DigicircUserDataSource_ApplicationUserDTO, IViewModelDTO<DigicircMatchmaking.BO.DigicircUser>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.DigicircUser).FullName;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public DigicircUserDataSource_DigicircUserDTO() : base() {}
        public new static DigicircUserDataSource_DigicircUserDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ActorFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.DigicircUser>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new DigicircUserDataSource_DigicircUserDTO(foundEntry);
            }
            return null;
        }
        public DigicircUserDataSource_DigicircUserDTO(DigicircMatchmaking.BO.DigicircUser original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public DigicircUserDataSource_DigicircUserDTO(DigicircMatchmaking.BO.DigicircUser original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.UserName == "") ? original._GetUniqueIdentifier() as object : original.UserName as object;
            UserName = original.UserName;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public new static DigicircMatchmaking.BO.DigicircUser GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, false, false);
        }
        public new DigicircMatchmaking.BO.DigicircUser Convert()
        {
            var model = new DigicircMatchmaking.BO.DigicircUser();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.UserName = UserName ?? "";
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser))]
    [DataSetDTO]
    public class DigicircUserDataSource_ApplicationUserDTO : ViewModelDTOBase, IViewModelDTO<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>
    {
        public override string _originalTypeClassName => typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName;
        public string _versionTimestamp;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public DigicircUserDataSource_ApplicationUserDTO() : base() {}
        public  static DigicircUserDataSource_ApplicationUserDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ActorFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new DigicircUserDataSource_ApplicationUserDTO(foundEntry);
            }
            return null;
        }
        public DigicircUserDataSource_ApplicationUserDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public DigicircUserDataSource_ApplicationUserDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.UserName == "") ? original._GetUniqueIdentifier() as object : original.UserName as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            UserName = original.UserName;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static zAppDev.DotNet.Framework.Identity.Model.ApplicationUser GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false, false);
        }
        public zAppDev.DotNet.Framework.Identity.Model.ApplicationUser Convert()
        {
            var model = new zAppDev.DotNet.Framework.Identity.Model.ApplicationUser();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.UserName = UserName ?? "";
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.BO.Country))]
    [DataSetDTO]
    public class CountryDataset_CountryDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Country>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Country).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public CountryDataset_CountryDTO() : base() {}
        public  static CountryDataset_CountryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ActorFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Country>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new CountryDataset_CountryDTO(foundEntry);
            }
            return null;
        }
        public CountryDataset_CountryDTO(DigicircMatchmaking.BO.Country original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public CountryDataset_CountryDTO(DigicircMatchmaking.BO.Country original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public static DigicircMatchmaking.BO.Country GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Country Convert()
        {
            var model = new DigicircMatchmaking.BO.Country();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DigicircMatchmaking.BO.EntityType))]
    [DataSetDTO]
    public class EntityTypeDataset_EntityTypeDTO : EntityTypeDataset_ValueTypeDTO, IViewModelDTO<DigicircMatchmaking.BO.EntityType>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.EntityType).FullName;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;


        [JsonConstructor]
        public EntityTypeDataset_EntityTypeDTO() : base() {}
        public new static EntityTypeDataset_EntityTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.EntityType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ActorFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.EntityType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new EntityTypeDataset_EntityTypeDTO(foundEntry);
            }
            return null;
        }
        public EntityTypeDataset_EntityTypeDTO(DigicircMatchmaking.BO.EntityType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public EntityTypeDataset_EntityTypeDTO(DigicircMatchmaking.BO.EntityType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Value = original.Value;
        }

        public new static DigicircMatchmaking.BO.EntityType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.EntityType>(parsedKey, false, false);
        }
        public new DigicircMatchmaking.BO.EntityType Convert()
        {
            var model = new DigicircMatchmaking.BO.EntityType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.EntityType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Value = Value;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.ValueType))]
    [DataSetDTO]
    public class EntityTypeDataset_ValueTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.ValueType>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.ValueType).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;


        [JsonConstructor]
        public EntityTypeDataset_ValueTypeDTO() : base() {}
        public  static EntityTypeDataset_ValueTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ActorFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.ValueType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new EntityTypeDataset_ValueTypeDTO(foundEntry);
            }
            return null;
        }
        public EntityTypeDataset_ValueTypeDTO(DigicircMatchmaking.BO.ValueType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public EntityTypeDataset_ValueTypeDTO(DigicircMatchmaking.BO.ValueType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Value = original.Value;
        }

        public static DigicircMatchmaking.BO.ValueType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.ValueType Convert()
        {
            var model = new DigicircMatchmaking.BO.ValueType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Value = Value;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.BO.DigicircUser))]
    [DataSetDTO]
    public class DigicircUserDataset_DigicircUserDTO : DigicircUserDataset_ApplicationUserDTO, IViewModelDTO<DigicircMatchmaking.BO.DigicircUser>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.DigicircUser).FullName;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public DigicircUserDataset_DigicircUserDTO() : base() {}
        public new static DigicircUserDataset_DigicircUserDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ActorFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.DigicircUser>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new DigicircUserDataset_DigicircUserDTO(foundEntry);
            }
            return null;
        }
        public DigicircUserDataset_DigicircUserDTO(DigicircMatchmaking.BO.DigicircUser original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public DigicircUserDataset_DigicircUserDTO(DigicircMatchmaking.BO.DigicircUser original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.UserName == "") ? original._GetUniqueIdentifier() as object : original.UserName as object;
            UserName = original.UserName;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public new static DigicircMatchmaking.BO.DigicircUser GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, false, false);
        }
        public new DigicircMatchmaking.BO.DigicircUser Convert()
        {
            var model = new DigicircMatchmaking.BO.DigicircUser();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.UserName = UserName ?? "";
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser))]
    [DataSetDTO]
    public class DigicircUserDataset_ApplicationUserDTO : ViewModelDTOBase, IViewModelDTO<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>
    {
        public override string _originalTypeClassName => typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName;
        public string _versionTimestamp;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public DigicircUserDataset_ApplicationUserDTO() : base() {}
        public  static DigicircUserDataset_ApplicationUserDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ActorFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new DigicircUserDataset_ApplicationUserDTO(foundEntry);
            }
            return null;
        }
        public DigicircUserDataset_ApplicationUserDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public DigicircUserDataset_ApplicationUserDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.UserName == "") ? original._GetUniqueIdentifier() as object : original.UserName as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            UserName = original.UserName;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static zAppDev.DotNet.Framework.Identity.Model.ApplicationUser GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false, false);
        }
        public zAppDev.DotNet.Framework.Identity.Model.ApplicationUser Convert()
        {
            var model = new zAppDev.DotNet.Framework.Identity.Model.ApplicationUser();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.UserName = UserName ?? "";
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.BO.Actor))]
    [DataSetDTO]
    public class MapPoints_ActorDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Actor>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Actor).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public MapPoints_AddressDTO Address;


        [JsonConstructor]
        public MapPoints_ActorDTO() : base() {}
        public  static MapPoints_ActorDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ActorFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Actor>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new MapPoints_ActorDTO(foundEntry);
            }
            return null;
        }
        public MapPoints_ActorDTO(DigicircMatchmaking.BO.Actor original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public MapPoints_ActorDTO(DigicircMatchmaking.BO.Actor original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Address = original.Address == null
                      ? null
                      : DTOHelper.GetDTOFromModel<MapPoints_AddressDTO>(original.Address as DigicircMatchmaking.BO.Address);
        }

        public static DigicircMatchmaking.BO.Actor GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Actor Convert()
        {
            var model = new DigicircMatchmaking.BO.Actor();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Address = Address == null
                            ? null
                            : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.Address>(Address);
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.Address))]
    [DataSetDTO]
    public class MapPoints_AddressDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Address>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Address).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public double? Latitude;
        public double? Longitude;


        [JsonConstructor]
        public MapPoints_AddressDTO() : base() {}
        public  static MapPoints_AddressDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ActorFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Address>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new MapPoints_AddressDTO(foundEntry);
            }
            return null;
        }
        public MapPoints_AddressDTO(DigicircMatchmaking.BO.Address original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public MapPoints_AddressDTO(DigicircMatchmaking.BO.Address original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Latitude = original.Latitude;
            Longitude = original.Longitude;
        }

        public static DigicircMatchmaking.BO.Address GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Address Convert()
        {
            var model = new DigicircMatchmaking.BO.Address();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Latitude = Latitude;
            model.Longitude = Longitude;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.BO.SectorType))]
    [DataSetDTO]
    public class SectorTypeDataSet_SectorTypeDTO : SectorTypeDataSet_ValueTypeDTO, IViewModelDTO<DigicircMatchmaking.BO.SectorType>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.SectorType).FullName;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;


        [JsonConstructor]
        public SectorTypeDataSet_SectorTypeDTO() : base() {}
        public new static SectorTypeDataSet_SectorTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.SectorType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ActorFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.SectorType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SectorTypeDataSet_SectorTypeDTO(foundEntry);
            }
            return null;
        }
        public SectorTypeDataSet_SectorTypeDTO(DigicircMatchmaking.BO.SectorType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SectorTypeDataSet_SectorTypeDTO(DigicircMatchmaking.BO.SectorType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Value = original.Value;
        }

        public new static DigicircMatchmaking.BO.SectorType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.SectorType>(parsedKey, false, false);
        }
        public new DigicircMatchmaking.BO.SectorType Convert()
        {
            var model = new DigicircMatchmaking.BO.SectorType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.SectorType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Value = Value;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.ValueType))]
    [DataSetDTO]
    public class SectorTypeDataSet_ValueTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.ValueType>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.ValueType).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;


        [JsonConstructor]
        public SectorTypeDataSet_ValueTypeDTO() : base() {}
        public  static SectorTypeDataSet_ValueTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ActorFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.ValueType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SectorTypeDataSet_ValueTypeDTO(foundEntry);
            }
            return null;
        }
        public SectorTypeDataSet_ValueTypeDTO(DigicircMatchmaking.BO.ValueType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SectorTypeDataSet_ValueTypeDTO(DigicircMatchmaking.BO.ValueType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Value = original.Value;
        }

        public static DigicircMatchmaking.BO.ValueType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.ValueType Convert()
        {
            var model = new DigicircMatchmaking.BO.ValueType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Value = Value;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.BO.Actor))]
    [DataSetDTO]
    public class ClustersDataset_ActorDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Actor>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Actor).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public ClustersDataset_ActorDTO() : base() {}
        public  static ClustersDataset_ActorDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ActorFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Actor>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ClustersDataset_ActorDTO(foundEntry);
            }
            return null;
        }
        public ClustersDataset_ActorDTO(DigicircMatchmaking.BO.Actor original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ClustersDataset_ActorDTO(DigicircMatchmaking.BO.Actor original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public static DigicircMatchmaking.BO.Actor GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Actor Convert()
        {
            var model = new DigicircMatchmaking.BO.Actor();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    #endregion

}
