// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.UI.Controllers.KnowledgeHub;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Locales;
using System.ComponentModel.DataAnnotations;
using DigicircMatchmaking.UI.ViewModels.SymbiosisMasterPage;
using DigicircMatchmaking.UI.Controllers.SymbiosisMasterPage;
namespace DigicircMatchmaking.UI.ViewModels.KnowledgeHub
{
    public class KnowledgeHubViewModel : SymbiosisMasterPageViewModel
    {
        public DigicircMatchmaking.BO.Material Waste;
        public DigicircMatchmaking.BO.Material Product;
        public string Endpoint;
        public DigicircMatchmaking.BO.Product Material;
        public DigicircMatchmaking.BO.Actor Actor;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Material>> TextBoxSelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Material>> TextBox1SelectedItems;


        public KnowledgeHubViewModel()
        {
            Waste = new DigicircMatchmaking.BO.Material();
            Product = new DigicircMatchmaking.BO.Material();
            Material = new DigicircMatchmaking.BO.Product();
            Actor = new DigicircMatchmaking.BO.Actor();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (manager.Session.Contains(Waste))
            {
                manager.Session.Evict(Waste);
            }
            if (manager.Session.Contains(Product))
            {
                manager.Session.Evict(Product);
            }
            if (manager.Session.Contains(Material))
            {
                manager.Session.Evict(Material);
            }
            if (manager.Session.Contains(Actor))
            {
                manager.Session.Evict(Actor);
            }
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.UI.ViewModels.KnowledgeHub.KnowledgeHubViewModel))]
    public class KnowledgeHubViewModelDTO : SymbiosisMasterPageViewModelDTO, IViewModelDTO<DigicircMatchmaking.UI.ViewModels.KnowledgeHub.KnowledgeHubViewModel>
    {

        [JsonConstructor]
        public KnowledgeHubViewModelDTO() { }
        public KnowledgeHubViewModelDTO(DigicircMatchmaking.UI.ViewModels.KnowledgeHub.KnowledgeHubViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            Waste = original.Waste == null ? null : new Waste_MaterialDTO(original.Waste);
            Product = original.Product == null ? null : new Product_MaterialDTO(original.Product);
            Endpoint = original.Endpoint;
            Material = original.Material == null ? null : new Material_ProductDTO(original.Material);
            Actor = original.Actor == null ? null : new Actor_ActorDTO(original.Actor);
            TextBoxSelectedItemKeys = original.TextBoxSelectedItems == null
                                      ? null
                                      : original.TextBoxSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            TextBox1SelectedItemKeys = original.TextBox1SelectedItems == null
                                       ? null
                                       : original.TextBox1SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public Waste_MaterialDTO Waste;
        public Product_MaterialDTO Product;
        public string Endpoint;
        public Material_ProductDTO Material;
        public Actor_ActorDTO Actor;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.UI.ViewModels.KnowledgeHub.KnowledgeHubViewModel).FullName;
        public List<SelectedItemInfo<int?>> TextBoxSelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.KnowledgeHub.MaterialDataSet_MaterialDTO>> TextBox__InitialSelection;
        public List<SelectedItemInfo<int?>> TextBox1SelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.KnowledgeHub.MaterialDataSet_MaterialDTO>> TextBox1__InitialSelection;

        public new DigicircMatchmaking.UI.ViewModels.KnowledgeHub.KnowledgeHubViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.UI.ViewModels.KnowledgeHub.KnowledgeHubViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DigicircMatchmaking.UI.ViewModels.KnowledgeHub.KnowledgeHubViewModel();
        }
        new  public DigicircMatchmaking.UI.ViewModels.KnowledgeHub.KnowledgeHubViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.UI.ViewModels.KnowledgeHub.KnowledgeHubViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.UI.ViewModels.KnowledgeHub.KnowledgeHubViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.Waste = Waste == null
                             ? null
                             : Waste.Convert();
            original.Product = Product == null
                               ? null
                               : Product.Convert();
            original.Endpoint = Endpoint;
            original.Material = Material == null
                                ? null
                                : Material.Convert();
            original.Actor = Actor == null
                             ? null
                             : Actor.Convert();
            original.TextBoxSelectedItems = TextBoxSelectedItemKeys == null
                                            ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Material>>()
                                            : TextBoxSelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Material>(x.SelectedItems.Select(y => ViewModels.KnowledgeHub.MaterialDataSet_MaterialDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.TextBox1SelectedItems = TextBox1SelectedItemKeys == null
                                             ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Material>>()
                                             : TextBox1SelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Material>(x.SelectedItems.Select(y => ViewModels.KnowledgeHub.MaterialDataSet_MaterialDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public void FillDropDownsInitialValues(KnowledgeHubViewModel original, KnowledgeHubController _controller)
        {
            TextBox__InitialSelection = new List<SelectedItemInfo<ViewModels.KnowledgeHub.MaterialDataSet_MaterialDTO>>();
            TextBox1__InitialSelection = new List<SelectedItemInfo<ViewModels.KnowledgeHub.MaterialDataSet_MaterialDTO>>();
            if (original == null) return;
            var TextBoxInitiallySelectedItem = original?.Waste == null
                                               ? null
                                               : new DAL.Repository().Get<DigicircMatchmaking.BO.Material>(c => c.Id == original.Waste.Id).FirstOrDefault();
            if (TextBoxInitiallySelectedItem != null)
            {
                TextBox__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.KnowledgeHub.MaterialDataSet_MaterialDTO>(new List<ViewModels.KnowledgeHub.MaterialDataSet_MaterialDTO>
                {
                    new MaterialDataSet_MaterialDTO(TextBoxInitiallySelectedItem)
                }, "_", false)
                );
            }
            var TextBox1InitiallySelectedItem = original?.Product == null
                                                ? null
                                                : new DAL.Repository().Get<DigicircMatchmaking.BO.Material>(c => c.Id == original.Product.Id).FirstOrDefault();
            if (TextBox1InitiallySelectedItem != null)
            {
                TextBox1__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.KnowledgeHub.MaterialDataSet_MaterialDTO>(new List<ViewModels.KnowledgeHub.MaterialDataSet_MaterialDTO>
                {
                    new MaterialDataSet_MaterialDTO(TextBox1InitiallySelectedItem)
                }, "_", false)
                );
            }
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class Waste_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public Waste_MaterialDTO() { }
        public Waste_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            Name = original.Name;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.Name = Name;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Waste_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Waste_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class Product_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public Product_MaterialDTO() { }
        public Product_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            Name = original.Name;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.Name = Name;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Product_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Product_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Product))]
    public class Material_ProductDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Product>
    {

        [JsonConstructor]
        public Material_ProductDTO() { }
        public Material_ProductDTO(DigicircMatchmaking.BO.Product original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            IsDesired = original.IsDesired;
            Quantity = original.Quantity;
            ValidFrom = original.ValidFrom;
            ValidTo = original.ValidTo;
            Resource = original.Resource == null ? null : new Material_Product_Resource_MaterialDTO(original.Resource);
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool IsDesired;
        public int? Quantity;
        public DateTime? ValidFrom;
        public DateTime? ValidTo;
        public Material_Product_Resource_MaterialDTO Resource;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Product).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Product GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Product>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Product();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Product Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Product();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Product original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.IsDesired = IsDesired;
            original.Quantity = Quantity;
            original.ValidFrom = ValidFrom;
            original.ValidTo = ValidTo;
            original.Resource = Resource == null
                                ? null
                                : Resource.Convert();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Material_ProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Material_ProductDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class Material_Product_Resource_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public Material_Product_Resource_MaterialDTO() { }
        public Material_Product_Resource_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            Name = original.Name;
            PendingGraph = original.PendingGraph;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public bool PendingGraph;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.PendingGraph = PendingGraph;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Material_Product_Resource_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Material_Product_Resource_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Actor))]
    public class Actor_ActorDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Actor>
    {

        [JsonConstructor]
        public Actor_ActorDTO() { }
        public Actor_ActorDTO(DigicircMatchmaking.BO.Actor original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            ClusterName = original.ClusterName;
            Description = original.Description;
            Email = original.Email;
            GetCountOfClusterMembers = original.GetCountOfClusterMembers;
            HasSites = original.HasSites;
            Id = original.Id;
            Keywords = original.Keywords;
            MemberOfCluster = original.MemberOfCluster;
            Name = original.Name;
            ShortDescription = original.ShortDescription;
            SpecifiedEnityType = original.SpecifiedEnityType;
            Url = original.Url;
            CircularEconomyRequirements = original.CircularEconomyRequirements == null ? null : new Actor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO(original.CircularEconomyRequirements);
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string ClusterName;
        public string Description;
        public string Email;
        public int? GetCountOfClusterMembers;
        public bool HasSites;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Keywords;
        public bool MemberOfCluster;
        public string Name;
        public string ShortDescription;
        public string SpecifiedEnityType;
        public string Url;
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO CircularEconomyRequirements;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Actor).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Actor GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Actor>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Actor();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Actor Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Actor();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Actor original)
        {
            if (original == null) return;
            original.ClusterName = ClusterName;
            original.Description = Description;
            original.Email = Email;
            original.GetCountOfClusterMembers = GetCountOfClusterMembers;
            original.HasSites = HasSites;
            original.Id = Id ?? 0;
            original.Keywords = Keywords;
            original.MemberOfCluster = MemberOfCluster;
            original.Name = Name;
            original.ShortDescription = ShortDescription;
            original.SpecifiedEnityType = SpecifiedEnityType;
            original.Url = Url;
            original.CircularEconomyRequirements = CircularEconomyRequirements == null
                                                   ? null
                                                   : CircularEconomyRequirements.Convert();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Actor_ActorDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_ActorDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.CircularEconomyReport))]
    public class Actor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.CircularEconomyReport>
    {

        [JsonConstructor]
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO() { }
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO(DigicircMatchmaking.BO.CircularEconomyReport original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            DigitalExpertise = original.DigitalExpertise;
            DigitalProviredNeeded = original.DigitalProviredNeeded;
            ExperienceInCircularEconomy = original.ExperienceInCircularEconomy;
            GetExperienceInCircularEconomy = original.GetExperienceInCircularEconomy;
            Id = original.Id;
            SpecifyExperienceInCircularEconomy = original.SpecifyExperienceInCircularEconomy;
            ThematicExpertiseNeeded = original.ThematicExpertiseNeeded;
            DesiredResources = original.DesiredResources?.Select(x => new Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_ProductDTO(x)).ToList();
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public DigicircMatchmaking.BO.DigitalExpertise? DigitalExpertise;
        public bool DigitalProviredNeeded;
        public bool ExperienceInCircularEconomy;
        public string GetExperienceInCircularEconomy;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string SpecifyExperienceInCircularEconomy;
        public bool ThematicExpertiseNeeded;
        public List<Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_ProductDTO> DesiredResources;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.CircularEconomyReport).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.CircularEconomyReport GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.CircularEconomyReport>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.CircularEconomyReport();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.CircularEconomyReport>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.CircularEconomyReport Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.CircularEconomyReport();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.CircularEconomyReport original)
        {
            if (original == null) return;
            original.DigitalExpertise = DigitalExpertise;
            original.DigitalProviredNeeded = DigitalProviredNeeded;
            original.ExperienceInCircularEconomy = ExperienceInCircularEconomy;
            original.GetExperienceInCircularEconomy = GetExperienceInCircularEconomy;
            original.Id = Id ?? 0;
            original.SpecifyExperienceInCircularEconomy = SpecifyExperienceInCircularEconomy;
            original.ThematicExpertiseNeeded = ThematicExpertiseNeeded;
            original.DesiredResources = DesiredResources == null
                                        ? null
                                        : DesiredResources.Select(q => q.Convert()).ToList();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Actor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.CircularEconomyReport>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Product))]
    public class Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_ProductDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Product>
    {

        [JsonConstructor]
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_ProductDTO() { }
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_ProductDTO(DigicircMatchmaking.BO.Product original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            IsDesired = original.IsDesired;
            Quantity = original.Quantity;
            ValidFrom = original.ValidFrom;
            ValidTo = original.ValidTo;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool IsDesired;
        public int? Quantity;
        public DateTime? ValidFrom;
        public DateTime? ValidTo;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Product).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Product GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Product>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Product();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Product Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Product();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Product original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.IsDesired = IsDesired;
            original.Quantity = Quantity;
            original.ValidFrom = ValidFrom;
            original.ValidTo = ValidTo;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_ProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_ProductDTO(foundEntry);
            }
            return null;
        }
    }


    #region Datasource DTOs
    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    [DataSetDTO]
    public class MaterialDataSet_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public MaterialDataSet_MaterialDTO() : base() {}
        public  static MaterialDataSet_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KnowledgeHubController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Material>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new MaterialDataSet_MaterialDTO(foundEntry);
            }
            return null;
        }
        public MaterialDataSet_MaterialDTO(DigicircMatchmaking.BO.Material original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public MaterialDataSet_MaterialDTO(DigicircMatchmaking.BO.Material original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public static DigicircMatchmaking.BO.Material GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var model = new DigicircMatchmaking.BO.Material();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Product))]
    [DataSetDTO]
    public class ProductDataset_ProductDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Product>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Product).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public ProductDataset_ProductDTO() : base() {}
        public  static ProductDataset_ProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new KnowledgeHubController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Product>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ProductDataset_ProductDTO(foundEntry);
            }
            return null;
        }
        public ProductDataset_ProductDTO(DigicircMatchmaking.BO.Product original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ProductDataset_ProductDTO(DigicircMatchmaking.BO.Product original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DigicircMatchmaking.BO.Product GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Product Convert()
        {
            var model = new DigicircMatchmaking.BO.Product();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    #endregion

}
