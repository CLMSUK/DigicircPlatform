// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.UI.Controllers.SearchForm;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Locales;
using System.ComponentModel.DataAnnotations;
using DigicircMatchmaking.UI.ViewModels.MasterPage;
using DigicircMatchmaking.UI.Controllers.MasterPage;
namespace DigicircMatchmaking.UI.ViewModels.SearchForm
{
    public class SearchFormViewModel : MasterPageViewModel
    {
        public string SelectedMode;
        public DigicircMatchmaking.BO.Actor SelectedActor;
        public DigicircMatchmaking.BO.SearchQuery Query;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Country>> DropdownCountryDataSetSelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.SectorType>> DropdownBoxSelectedItems;
        public List<SelectedItemInfo<string>> SelectedModeOptionButtonSelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Material>> TextBox1SelectedItems;
        public List<SelectedItemInfo<string>> OptionButtonSelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Actor>> NewMapSelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Actor>> TableSelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.ActorsInfo>> Table1SelectedItems;



        public SearchFormViewModel()
        {
            SelectedActor = new DigicircMatchmaking.BO.Actor();
            Query = new DigicircMatchmaking.BO.SearchQuery();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (manager.Session.Contains(SelectedActor))
            {
                manager.Session.Evict(SelectedActor);
            }
            if (manager.Session.Contains(Query))
            {
                manager.Session.Evict(Query);
            }
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.UI.ViewModels.SearchForm.SearchFormViewModel))]
    public class SearchFormViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DigicircMatchmaking.UI.ViewModels.SearchForm.SearchFormViewModel>
    {

        [JsonConstructor]
        public SearchFormViewModelDTO() { }
        public SearchFormViewModelDTO(DigicircMatchmaking.UI.ViewModels.SearchForm.SearchFormViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            SelectedMode = original.SelectedMode;
            SelectedActor = original.SelectedActor == null ? null : new SelectedActor_ActorDTO(original.SelectedActor);
            Query = original.Query == null ? null : new Query_SearchQueryDTO(original.Query);
            DropdownCountryDataSetSelectedItemKeys = original.DropdownCountryDataSetSelectedItems == null
                    ? null
                    : original.DropdownCountryDataSetSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            DropdownBoxSelectedItemKeys = original.DropdownBoxSelectedItems == null
                                          ? null
                                          : original.DropdownBoxSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            SelectedModeOptionButtonSelectedItemKeys = original.SelectedModeOptionButtonSelectedItems == null
                    ? null
                    : original.SelectedModeOptionButtonSelectedItems.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            TextBox1SelectedItemKeys = original.TextBox1SelectedItems == null
                                       ? null
                                       : original.TextBox1SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            OptionButtonSelectedItemKeys = original.OptionButtonSelectedItems == null
                                           ? null
                                           : original.OptionButtonSelectedItems.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            NewMapSelectedItemKeys = original.NewMapSelectedItems == null
                                     ? null
                                     : original.NewMapSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            TableSelectedItemKeys = original.TableSelectedItems == null
                                    ? null
                                    : original.TableSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            Table1SelectedItemKeys = original.Table1SelectedItems == null
                                     ? null
                                     : original.Table1SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.ActorsInfoKey).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public string SelectedMode;
        public SelectedActor_ActorDTO SelectedActor;
        public Query_SearchQueryDTO Query;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.UI.ViewModels.SearchForm.SearchFormViewModel).FullName;
        public List<SelectedItemInfo<int?>> DropdownCountryDataSetSelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.SearchForm.CountryDataSet_CountryDTO>> DropdownCountryDataSet__InitialSelection;
        public List<SelectedItemInfo<int?>> DropdownBoxSelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.SearchForm.SectorTypeDataset_SectorTypeDTO>> DropdownBox__InitialSelection;
        public List<SelectedItemInfo<string>> SelectedModeOptionButtonSelectedItemKeys;
        public List<SelectedItemInfo<int?>> TextBox1SelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.SearchForm.MaterialDataSet_MaterialDTO>> TextBox1__InitialSelection;
        public List<SelectedItemInfo<string>> OptionButtonSelectedItemKeys;
        public List<SelectedItemInfo<int?>> NewMapSelectedItemKeys;
        public List<SelectedItemInfo<int?>> TableSelectedItemKeys;
        public List<SelectedItemInfo<int?>> Table1SelectedItemKeys;


        public new DigicircMatchmaking.UI.ViewModels.SearchForm.SearchFormViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.UI.ViewModels.SearchForm.SearchFormViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DigicircMatchmaking.UI.ViewModels.SearchForm.SearchFormViewModel();
        }
        new  public DigicircMatchmaking.UI.ViewModels.SearchForm.SearchFormViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.UI.ViewModels.SearchForm.SearchFormViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.UI.ViewModels.SearchForm.SearchFormViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.SelectedMode = SelectedMode;
            original.SelectedActor = SelectedActor == null
                                     ? null
                                     : SelectedActor.Convert();
            original.Query = Query == null
                             ? null
                             : Query.Convert();
            original.DropdownCountryDataSetSelectedItems = DropdownCountryDataSetSelectedItemKeys == null
                    ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Country>>()
                    : DropdownCountryDataSetSelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Country>(x.SelectedItems.Select(y => ViewModels.SearchForm.CountryDataSet_CountryDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.DropdownBoxSelectedItems = DropdownBoxSelectedItemKeys == null
                                                ? new List<SelectedItemInfo<DigicircMatchmaking.BO.SectorType>>()
                                                : DropdownBoxSelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.SectorType>(x.SelectedItems.Select(y => ViewModels.SearchForm.SectorTypeDataset_SectorTypeDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.SelectedModeOptionButtonSelectedItems = SelectedModeOptionButtonSelectedItemKeys == null
                    ? new List<SelectedItemInfo<string>>()
                    : SelectedModeOptionButtonSelectedItemKeys.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.TextBox1SelectedItems = TextBox1SelectedItemKeys == null
                                             ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Material>>()
                                             : TextBox1SelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Material>(x.SelectedItems.Select(y => ViewModels.SearchForm.MaterialDataSet_MaterialDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.OptionButtonSelectedItems = OptionButtonSelectedItemKeys == null
                                                 ? new List<SelectedItemInfo<string>>()
                                                 : OptionButtonSelectedItemKeys.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.NewMapSelectedItems = NewMapSelectedItemKeys == null
                                           ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Actor>>()
                                           : NewMapSelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Actor>(x.SelectedItems.Select(y => ViewModels.SearchForm.ActorDataSet1_ActorDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.TableSelectedItems = TableSelectedItemKeys == null
                                          ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Actor>>()
                                          : TableSelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Actor>(x.SelectedItems.Select(y => ViewModels.SearchForm.ActorDataSet1_ActorDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.Table1SelectedItems = Table1SelectedItemKeys == null
                                           ? new List<SelectedItemInfo<DigicircMatchmaking.BO.ActorsInfo>>()
                                           : Table1SelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.ActorsInfo>(x.SelectedItems.Select(y => ViewModels.SearchForm.ActorsInfoDataSet_ActorsInfoDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public void FillDropDownsInitialValues(SearchFormViewModel original, SearchFormController _controller)
        {
            DropdownCountryDataSet__InitialSelection = new List<SelectedItemInfo<ViewModels.SearchForm.CountryDataSet_CountryDTO>>();
            DropdownBox__InitialSelection = new List<SelectedItemInfo<ViewModels.SearchForm.SectorTypeDataset_SectorTypeDTO>>();
            TextBox1__InitialSelection = new List<SelectedItemInfo<ViewModels.SearchForm.MaterialDataSet_MaterialDTO>>();
            if (original == null) return;
            var DropdownCountryDataSetInitiallySelectedItem = original?.Query?.SelectedCountry == null
                    ? null
                    : new DAL.Repository().Get<DigicircMatchmaking.BO.Country>(c => c.Id == original.Query.SelectedCountry.Id).FirstOrDefault();
            if (DropdownCountryDataSetInitiallySelectedItem != null)
            {
                DropdownCountryDataSet__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.SearchForm.CountryDataSet_CountryDTO>(new List<ViewModels.SearchForm.CountryDataSet_CountryDTO>
                {
                    new CountryDataSet_CountryDTO(DropdownCountryDataSetInitiallySelectedItem)
                }, "_", false)
                );
            }
            var DropdownBoxInitiallySelectedItem = original?.Query?.SelectedSector == null
                                                   ? null
                                                   : new DAL.Repository().Get<DigicircMatchmaking.BO.SectorType>(c => c.Id == original.Query.SelectedSector.Id).FirstOrDefault();
            if (DropdownBoxInitiallySelectedItem != null)
            {
                DropdownBox__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.SearchForm.SectorTypeDataset_SectorTypeDTO>(new List<ViewModels.SearchForm.SectorTypeDataset_SectorTypeDTO>
                {
                    new SectorTypeDataset_SectorTypeDTO(DropdownBoxInitiallySelectedItem)
                }, "_", false)
                );
            }
            var TextBox1InitiallySelectedItem = original?.Query?.SelectedMaterial == null
                                                ? null
                                                : new DAL.Repository().Get<DigicircMatchmaking.BO.Material>(c => c.Id == original.Query.SelectedMaterial.Id).FirstOrDefault();
            if (TextBox1InitiallySelectedItem != null)
            {
                TextBox1__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.SearchForm.MaterialDataSet_MaterialDTO>(new List<ViewModels.SearchForm.MaterialDataSet_MaterialDTO>
                {
                    new MaterialDataSet_MaterialDTO(TextBox1InitiallySelectedItem)
                }, "_", false)
                );
            }
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Actor))]
    public class SelectedActor_ActorDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Actor>
    {

        [JsonConstructor]
        public SelectedActor_ActorDTO() { }
        public SelectedActor_ActorDTO(DigicircMatchmaking.BO.Actor original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            Email = original.Email;
            Id = original.Id;
            Name = original.Name;
            Url = original.Url;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string Email;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string Url;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Actor).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Actor GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Actor>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Actor();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Actor Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Actor();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Actor original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Email = Email;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.Url = Url;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static SelectedActor_ActorDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new SelectedActor_ActorDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.SearchQuery))]
    public class Query_SearchQueryDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.SearchQuery>
    {

        [JsonConstructor]
        public Query_SearchQueryDTO() { }
        public Query_SearchQueryDTO(DigicircMatchmaking.BO.SearchQuery original, bool parentIsDirty = false)
        {
            if (original == null) return;
            AdvanceSearch = original.AdvanceSearch;
            GetSearchTerm = original.GetSearchTerm;
            MaterialSearchMode = original.MaterialSearchMode;
            SearchTerm = original.SearchTerm;
            SelectedMode = original.SelectedMode;
            ShowAllData = original.ShowAllData;
            ShowSavedPage = original.ShowSavedPage;
            SelectedCountry = original.SelectedCountry == null ? null : new Query_SearchQuery_SelectedCountry_CountryDTO(original.SelectedCountry);
            SelectedSector = original.SelectedSector == null ? null : new Query_SearchQuery_SelectedSector_SectorTypeDTO(original.SelectedSector);
            ActorNames = original.ActorNames?.Select(x => new Query_SearchQuery_ActorNames_ActorNamesDTO(x)).ToList();
            SelectedMaterial = original.SelectedMaterial == null ? null : new Query_SearchQuery_SelectedMaterial_MaterialDTO(original.SelectedMaterial);
        }
        public bool AdvanceSearch;
        public string GetSearchTerm;
        public string MaterialSearchMode;
        public string SearchTerm;
        public string SelectedMode;
        public bool ShowAllData;
        public bool ShowSavedPage;
        public Query_SearchQuery_SelectedCountry_CountryDTO SelectedCountry;
        public Query_SearchQuery_SelectedSector_SectorTypeDTO SelectedSector;
        public List<Query_SearchQuery_ActorNames_ActorNamesDTO> ActorNames;
        public Query_SearchQuery_SelectedMaterial_MaterialDTO SelectedMaterial;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.SearchQuery).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.SearchQuery GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.SearchQuery>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DigicircMatchmaking.BO.SearchQuery();
        }
        public DigicircMatchmaking.BO.SearchQuery Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.SearchQuery();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.SearchQuery original)
        {
            if (original == null) return;
            original.AdvanceSearch = AdvanceSearch;
            original.GetSearchTerm = GetSearchTerm;
            original.MaterialSearchMode = MaterialSearchMode;
            original.SearchTerm = SearchTerm;
            original.SelectedMode = SelectedMode;
            original.ShowAllData = ShowAllData;
            original.ShowSavedPage = ShowSavedPage;
            original.SelectedCountry = SelectedCountry == null
                                       ? null
                                       : SelectedCountry.Convert();
            original.SelectedSector = SelectedSector == null
                                      ? null
                                      : SelectedSector.Convert();
            original.ActorNames = ActorNames == null
                                  ? null
                                  : ActorNames.Select(q => q.Convert()).ToList();
            original.SelectedMaterial = SelectedMaterial == null
                                        ? null
                                        : SelectedMaterial.Convert();
        }
        public  static Query_SearchQueryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            if(string.IsNullOrWhiteSpace(jbID)) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var controller = new SearchFormController();
            var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
            var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.SearchQuery>;
            var foundEntry = records.Where(c => c.SearchQueryKey == parsedKey).FirstOrDefault();
            //Second attempt, using the Unique Identifier
            if(foundEntry == null)
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    foundEntry = records.Where(x => x._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if (foundEntry != null)
            {
                return new Query_SearchQueryDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Country))]
    public class Query_SearchQuery_SelectedCountry_CountryDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Country>
    {

        [JsonConstructor]
        public Query_SearchQuery_SelectedCountry_CountryDTO() { }
        public Query_SearchQuery_SelectedCountry_CountryDTO(DigicircMatchmaking.BO.Country original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            Name = original.Name;
            ShortName = original.ShortName;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string ShortName;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Country).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Country GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Country>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Country();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Country Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Country();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Country original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.ShortName = ShortName;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Query_SearchQuery_SelectedCountry_CountryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Query_SearchQuery_SelectedCountry_CountryDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.SectorType))]
    public class Query_SearchQuery_SelectedSector_SectorTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.SectorType>
    {

        [JsonConstructor]
        public Query_SearchQuery_SelectedSector_SectorTypeDTO() { }
        public Query_SearchQuery_SelectedSector_SectorTypeDTO(DigicircMatchmaking.BO.SectorType original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Code = original.Code;
            Id = original.Id;
            Value = original.Value;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.SectorType).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DigicircMatchmaking.BO.ValueType).FullName};
        public DigicircMatchmaking.BO.SectorType GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.SectorType>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.SectorType();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.SectorType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.SectorType Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.SectorType();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.SectorType original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Id = Id ?? 0;
            original.Value = Value;
        }
        public static Query_SearchQuery_SelectedSector_SectorTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.SectorType>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Query_SearchQuery_SelectedSector_SectorTypeDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.ActorNames))]
    public class Query_SearchQuery_ActorNames_ActorNamesDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.ActorNames>
    {

        [JsonConstructor]
        public Query_SearchQuery_ActorNames_ActorNamesDTO() { }
        public Query_SearchQuery_ActorNames_ActorNamesDTO(DigicircMatchmaking.BO.ActorNames original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            Name = original.Name;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.ActorNames).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.ActorNames GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.ActorNames>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.ActorNames();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.ActorNames>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.ActorNames Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.ActorNames();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.ActorNames original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Name = Name;
        }
        public static Query_SearchQuery_ActorNames_ActorNamesDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.ActorNames>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Query_SearchQuery_ActorNames_ActorNamesDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class Query_SearchQuery_SelectedMaterial_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public Query_SearchQuery_SelectedMaterial_MaterialDTO() { }
        public Query_SearchQuery_SelectedMaterial_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            IsHazardous = original.IsHazardous;
            Name = original.Name;
            PendingGraph = original.PendingGraph;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool IsHazardous;
        public string Name;
        public bool PendingGraph;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.IsHazardous = IsHazardous;
            original.Name = Name;
            original.PendingGraph = PendingGraph;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Query_SearchQuery_SelectedMaterial_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Query_SearchQuery_SelectedMaterial_MaterialDTO(foundEntry);
            }
            return null;
        }
    }
    #region Controller Action DTOS
    [OriginalType(typeof(DigicircMatchmaking.BO.Actor))]
    public class ActorDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Actor>
    {
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string ShortDescription;
        public string Description;
        public AddressDTO Address;


        [JsonConstructor]
        public ActorDTO() : base() {}
        public  static ActorDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SearchFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Actor>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ActorDTO(foundEntry);
            }
            return null;
        }
        public ActorDTO(DigicircMatchmaking.BO.Actor original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ActorDTO(DigicircMatchmaking.BO.Actor original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
            ShortDescription = original.ShortDescription;
            Description = original.Description;
            Address = original.Address == null
                      ? null
                      : DTOHelper.GetDTOFromModel<AddressDTO>(original.Address as DigicircMatchmaking.BO.Address);
        }

        public static DigicircMatchmaking.BO.Actor GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Actor Convert()
        {
            var model = new DigicircMatchmaking.BO.Actor();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            model.ShortDescription = ShortDescription;
            model.Description = Description;
            model.Address = Address == null
                            ? null
                            : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.Address>(Address);
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.Address))]
    public class AddressDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Address>
    {
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public CountryDTO Country;


        [JsonConstructor]
        public AddressDTO() : base() {}
        public  static AddressDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SearchFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Address>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new AddressDTO(foundEntry);
            }
            return null;
        }
        public AddressDTO(DigicircMatchmaking.BO.Address original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public AddressDTO(DigicircMatchmaking.BO.Address original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Country = original.Country == null
                      ? null
                      : DTOHelper.GetDTOFromModel<CountryDTO>(original.Country as DigicircMatchmaking.BO.Country);
        }

        public static DigicircMatchmaking.BO.Address GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Address Convert()
        {
            var model = new DigicircMatchmaking.BO.Address();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Country = Country == null
                            ? null
                            : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.Country>(Country);
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.Country))]
    public class CountryDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Country>
    {
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public CountryDTO() : base() {}
        public  static CountryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SearchFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Country>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new CountryDTO(foundEntry);
            }
            return null;
        }
        public CountryDTO(DigicircMatchmaking.BO.Country original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public CountryDTO(DigicircMatchmaking.BO.Country original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public static DigicircMatchmaking.BO.Country GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Country Convert()
        {
            var model = new DigicircMatchmaking.BO.Country();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }



    #endregion


    #region Datasource DTOs
    [OriginalType(typeof(DigicircMatchmaking.BO.Country))]
    [DataSetDTO]
    public class CountryDataSet_CountryDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Country>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Country).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public CountryDataSet_CountryDTO() : base() {}
        public  static CountryDataSet_CountryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SearchFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Country>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new CountryDataSet_CountryDTO(foundEntry);
            }
            return null;
        }
        public CountryDataSet_CountryDTO(DigicircMatchmaking.BO.Country original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public CountryDataSet_CountryDTO(DigicircMatchmaking.BO.Country original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public static DigicircMatchmaking.BO.Country GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Country Convert()
        {
            var model = new DigicircMatchmaking.BO.Country();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DigicircMatchmaking.BO.BusinessFunction))]
    [DataSetDTO]
    public class BusinessFunctionDataSet_BusinessFunctionDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.BusinessFunction>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.BusinessFunction).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public BusinessFunctionDataSet_BusinessFunctionDTO() : base() {}
        public  static BusinessFunctionDataSet_BusinessFunctionDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.BusinessFunction>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SearchFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.BusinessFunction>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new BusinessFunctionDataSet_BusinessFunctionDTO(foundEntry);
            }
            return null;
        }
        public BusinessFunctionDataSet_BusinessFunctionDTO(DigicircMatchmaking.BO.BusinessFunction original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public BusinessFunctionDataSet_BusinessFunctionDTO(DigicircMatchmaking.BO.BusinessFunction original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DigicircMatchmaking.BO.BusinessFunction GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.BusinessFunction>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.BusinessFunction Convert()
        {
            var model = new DigicircMatchmaking.BO.BusinessFunction();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.BusinessFunction>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DigicircMatchmaking.BO.BusinessType))]
    [DataSetDTO]
    public class BusinessTypeDataSet_BusinessTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.BusinessType>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.BusinessType).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public BusinessTypeDataSet_BusinessTypeDTO() : base() {}
        public  static BusinessTypeDataSet_BusinessTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.BusinessType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SearchFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.BusinessType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new BusinessTypeDataSet_BusinessTypeDTO(foundEntry);
            }
            return null;
        }
        public BusinessTypeDataSet_BusinessTypeDTO(DigicircMatchmaking.BO.BusinessType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public BusinessTypeDataSet_BusinessTypeDTO(DigicircMatchmaking.BO.BusinessType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DigicircMatchmaking.BO.BusinessType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.BusinessType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.BusinessType Convert()
        {
            var model = new DigicircMatchmaking.BO.BusinessType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.BusinessType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Activities))]
    [DataSetDTO]
    public class ActivitiesDataSet_ActivitiesDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Activities>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Activities).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public ActivitiesDataSet_ActivitiesDTO() : base() {}
        public  static ActivitiesDataSet_ActivitiesDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Activities>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SearchFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Activities>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ActivitiesDataSet_ActivitiesDTO(foundEntry);
            }
            return null;
        }
        public ActivitiesDataSet_ActivitiesDTO(DigicircMatchmaking.BO.Activities original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ActivitiesDataSet_ActivitiesDTO(DigicircMatchmaking.BO.Activities original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DigicircMatchmaking.BO.Activities GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Activities>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Activities Convert()
        {
            var model = new DigicircMatchmaking.BO.Activities();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Activities>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.BO.Address))]
    [DataSetDTO]
    public class AddressDataSet_AddressDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Address>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Address).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public AddressDataSet_AddressDTO() : base() {}
        public  static AddressDataSet_AddressDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SearchFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Address>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new AddressDataSet_AddressDTO(foundEntry);
            }
            return null;
        }
        public AddressDataSet_AddressDTO(DigicircMatchmaking.BO.Address original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public AddressDataSet_AddressDTO(DigicircMatchmaking.BO.Address original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DigicircMatchmaking.BO.Address GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Address Convert()
        {
            var model = new DigicircMatchmaking.BO.Address();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DigicircMatchmaking.BO.SectorType))]
    [DataSetDTO]
    public class SectorTypeDataset_SectorTypeDTO : SectorTypeDataset_ValueTypeDTO, IViewModelDTO<DigicircMatchmaking.BO.SectorType>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.SectorType).FullName;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;


        [JsonConstructor]
        public SectorTypeDataset_SectorTypeDTO() : base() {}
        public new static SectorTypeDataset_SectorTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.SectorType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SearchFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.SectorType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SectorTypeDataset_SectorTypeDTO(foundEntry);
            }
            return null;
        }
        public SectorTypeDataset_SectorTypeDTO(DigicircMatchmaking.BO.SectorType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SectorTypeDataset_SectorTypeDTO(DigicircMatchmaking.BO.SectorType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Value = original.Value;
        }

        public new static DigicircMatchmaking.BO.SectorType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.SectorType>(parsedKey, false, false);
        }
        public new DigicircMatchmaking.BO.SectorType Convert()
        {
            var model = new DigicircMatchmaking.BO.SectorType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.SectorType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Value = Value;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.ValueType))]
    [DataSetDTO]
    public class SectorTypeDataset_ValueTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.ValueType>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.ValueType).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;


        [JsonConstructor]
        public SectorTypeDataset_ValueTypeDTO() : base() {}
        public  static SectorTypeDataset_ValueTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SearchFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.ValueType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SectorTypeDataset_ValueTypeDTO(foundEntry);
            }
            return null;
        }
        public SectorTypeDataset_ValueTypeDTO(DigicircMatchmaking.BO.ValueType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SectorTypeDataset_ValueTypeDTO(DigicircMatchmaking.BO.ValueType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Value = original.Value;
        }

        public static DigicircMatchmaking.BO.ValueType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.ValueType Convert()
        {
            var model = new DigicircMatchmaking.BO.ValueType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Value = Value;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.BO.Actor))]
    [DataSetDTO]
    public class ActorDataSet1_ActorDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Actor>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Actor).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public ActorDataSet1_AddressDTO Address;
        public ActorDataSet1_FileDataDTO ActorLogo;
        public string Name;
        public string ShortDescription;
        public ActorDataSet1_EntityTypeDTO EntityType;


        [JsonConstructor]
        public ActorDataSet1_ActorDTO() : base() {}
        public  static ActorDataSet1_ActorDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SearchFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Actor>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ActorDataSet1_ActorDTO(foundEntry);
            }
            return null;
        }
        public ActorDataSet1_ActorDTO(DigicircMatchmaking.BO.Actor original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ActorDataSet1_ActorDTO(DigicircMatchmaking.BO.Actor original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Address = original.Address == null
                      ? null
                      : DTOHelper.GetDTOFromModel<ActorDataSet1_AddressDTO>(original.Address as DigicircMatchmaking.BO.Address);
            ActorLogo = original.ActorLogo == null
                        ? null
                        : DTOHelper.GetDTOFromModel<ActorDataSet1_FileDataDTO>(original.ActorLogo as DigicircMatchmaking.BO.FileData);
            Name = original.Name;
            ShortDescription = original.ShortDescription;
            EntityType = original.EntityType == null
                         ? null
                         : DTOHelper.GetDTOFromModel<ActorDataSet1_EntityTypeDTO>(original.EntityType as DigicircMatchmaking.BO.EntityType);
        }

        public static DigicircMatchmaking.BO.Actor GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Actor Convert()
        {
            var model = new DigicircMatchmaking.BO.Actor();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Address = Address == null
                            ? null
                            : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.Address>(Address);
            model.ActorLogo = ActorLogo == null
                              ? null
                              : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.FileData>(ActorLogo);
            model.Name = Name;
            model.ShortDescription = ShortDescription;
            model.EntityType = EntityType == null
                               ? null
                               : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.EntityType>(EntityType);
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.Address))]
    [DataSetDTO]
    public class ActorDataSet1_AddressDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Address>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Address).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public double? Latitude;
        public double? Longitude;
        public ActorDataSet1_CountryDTO Country;


        [JsonConstructor]
        public ActorDataSet1_AddressDTO() : base() {}
        public  static ActorDataSet1_AddressDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SearchFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Address>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ActorDataSet1_AddressDTO(foundEntry);
            }
            return null;
        }
        public ActorDataSet1_AddressDTO(DigicircMatchmaking.BO.Address original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ActorDataSet1_AddressDTO(DigicircMatchmaking.BO.Address original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Latitude = original.Latitude;
            Longitude = original.Longitude;
            Country = original.Country == null
                      ? null
                      : DTOHelper.GetDTOFromModel<ActorDataSet1_CountryDTO>(original.Country as DigicircMatchmaking.BO.Country);
        }

        public static DigicircMatchmaking.BO.Address GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Address Convert()
        {
            var model = new DigicircMatchmaking.BO.Address();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Latitude = Latitude;
            model.Longitude = Longitude;
            model.Country = Country == null
                            ? null
                            : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.Country>(Country);
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.Country))]
    [DataSetDTO]
    public class ActorDataSet1_CountryDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Country>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Country).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public ActorDataSet1_CountryDTO() : base() {}
        public  static ActorDataSet1_CountryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SearchFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Country>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ActorDataSet1_CountryDTO(foundEntry);
            }
            return null;
        }
        public ActorDataSet1_CountryDTO(DigicircMatchmaking.BO.Country original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ActorDataSet1_CountryDTO(DigicircMatchmaking.BO.Country original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public static DigicircMatchmaking.BO.Country GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Country Convert()
        {
            var model = new DigicircMatchmaking.BO.Country();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.BO.FileData))]
    [DataSetDTO]
    public class ActorDataSet1_FileDataDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.FileData>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.FileData).FullName;
        public string _versionTimestamp;
        public Guid? Id;
        public new object _key
        {
            get;
            set;
        }
        public string FileName;
        public string UploadedBy;
        public string Description;
        public DateTime? UploadDateTime;
        public string FolderPath;


        [JsonConstructor]
        public ActorDataSet1_FileDataDTO() : base() {}
        public  static ActorDataSet1_FileDataDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = System.Guid.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.FileData>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SearchFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.FileData>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ActorDataSet1_FileDataDTO(foundEntry);
            }
            return null;
        }
        public ActorDataSet1_FileDataDTO(DigicircMatchmaking.BO.FileData original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ActorDataSet1_FileDataDTO(DigicircMatchmaking.BO.FileData original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == default(Guid)) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            FileName = original.FileName;
            UploadedBy = original.UploadedBy;
            Description = original.Description;
            UploadDateTime = original.UploadDateTime;
            FolderPath = original.FolderPath;
        }

        public static DigicircMatchmaking.BO.FileData GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = System.Guid.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.FileData>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.FileData Convert()
        {
            var model = new DigicircMatchmaking.BO.FileData();
            if (_key != null && _key.ToString() != "default(Guid)")
            {
                var rawKey = _key.ToString();
                var parsedKey = System.Guid.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.FileData>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? default(Guid);
            model.FileName = FileName;
            model.UploadedBy = UploadedBy;
            model.Description = Description;
            model.UploadDateTime = UploadDateTime;
            model.FolderPath = FolderPath;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DigicircMatchmaking.BO.EntityType))]
    [DataSetDTO]
    public class ActorDataSet1_EntityTypeDTO : ActorDataSet1_ValueTypeDTO, IViewModelDTO<DigicircMatchmaking.BO.EntityType>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.EntityType).FullName;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;


        [JsonConstructor]
        public ActorDataSet1_EntityTypeDTO() : base() {}
        public new static ActorDataSet1_EntityTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.EntityType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SearchFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.EntityType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ActorDataSet1_EntityTypeDTO(foundEntry);
            }
            return null;
        }
        public ActorDataSet1_EntityTypeDTO(DigicircMatchmaking.BO.EntityType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ActorDataSet1_EntityTypeDTO(DigicircMatchmaking.BO.EntityType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Value = original.Value;
        }

        public new static DigicircMatchmaking.BO.EntityType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.EntityType>(parsedKey, false, false);
        }
        public new DigicircMatchmaking.BO.EntityType Convert()
        {
            var model = new DigicircMatchmaking.BO.EntityType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.EntityType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Value = Value;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.ValueType))]
    [DataSetDTO]
    public class ActorDataSet1_ValueTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.ValueType>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.ValueType).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;


        [JsonConstructor]
        public ActorDataSet1_ValueTypeDTO() : base() {}
        public  static ActorDataSet1_ValueTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SearchFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.ValueType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ActorDataSet1_ValueTypeDTO(foundEntry);
            }
            return null;
        }
        public ActorDataSet1_ValueTypeDTO(DigicircMatchmaking.BO.ValueType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ActorDataSet1_ValueTypeDTO(DigicircMatchmaking.BO.ValueType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Value = original.Value;
        }

        public static DigicircMatchmaking.BO.ValueType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.ValueType Convert()
        {
            var model = new DigicircMatchmaking.BO.ValueType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Value = Value;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }



    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    [DataSetDTO]
    public class MaterialDataSet_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public MaterialDataSet_MaterialDTO() : base() {}
        public  static MaterialDataSet_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new SearchFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Material>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new MaterialDataSet_MaterialDTO(foundEntry);
            }
            return null;
        }
        public MaterialDataSet_MaterialDTO(DigicircMatchmaking.BO.Material original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public MaterialDataSet_MaterialDTO(DigicircMatchmaking.BO.Material original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public static DigicircMatchmaking.BO.Material GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var model = new DigicircMatchmaking.BO.Material();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.BO.ActorsInfo))]
    [DataSetDTO]
    public class ActorsInfoDataSet_ActorsInfoDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.ActorsInfo>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.ActorsInfo).FullName;
        public int? ActorsInfoKey;
        public new object _key
        {
            get;
            set;
        }
        public string Display;
        public int? Count;


        [JsonConstructor]
        public ActorsInfoDataSet_ActorsInfoDTO() : base() {}
        public  static ActorsInfoDataSet_ActorsInfoDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var records = new SearchFormController().Get_Table1_DatasourceQueryable();
            var foundEntry = records.Where(c => c.ActorsInfoKey == parsedKey).FirstOrDefault();
            //Second attempt, using the Unique Identifier
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    foundEntry = records.Where(x => x._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if (foundEntry != null)
            {
                return new ActorsInfoDataSet_ActorsInfoDTO(foundEntry);
            }
            return null;
        }
        public ActorsInfoDataSet_ActorsInfoDTO(DigicircMatchmaking.BO.ActorsInfo original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, null);
        }
        public ActorsInfoDataSet_ActorsInfoDTO(DigicircMatchmaking.BO.ActorsInfo original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.ActorsInfoKey == 0) ? original._GetUniqueIdentifier() as object : original.ActorsInfoKey as object;
            ActorsInfoKey = original.ActorsInfoKey;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Display = original.Display;
            Count = original.Count;
        }

        public static DigicircMatchmaking.BO.ActorsInfo GetModelByKey(object _key)
        {
            return null;
        }
        public DigicircMatchmaking.BO.ActorsInfo Convert()
        {
            var model = new DigicircMatchmaking.BO.ActorsInfo();
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.ActorsInfoKey = ActorsInfoKey ?? 0;
            model.Display = Display;
            model.Count = Count;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    #endregion

}
