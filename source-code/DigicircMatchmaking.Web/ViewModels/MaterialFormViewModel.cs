// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.UI.Controllers.MaterialForm;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Locales;
using System.ComponentModel.DataAnnotations;
using DigicircMatchmaking.UI.ViewModels.SymbiosisMasterPage;
using DigicircMatchmaking.UI.Controllers.SymbiosisMasterPage;
namespace DigicircMatchmaking.UI.ViewModels.MaterialForm
{
    public class MaterialFormViewModel : SymbiosisMasterPageViewModel
    {
        public DigicircMatchmaking.BO.Material Material;
        public DigicircMatchmaking.BO.Process NewProcess;
        public bool ConvertBy;
        public List<DigicircMatchmaking.BO.Process> NewProcesses;
        public List<DigicircMatchmaking.BO.Process> DeleteProcesses;
        public bool Edited;
        public List<DigicircMatchmaking.BO.Process> EditedProcesses;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.ProductType>> DropdownBoxSelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.PhysicalForm>> DropdownBox1SelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.UnitOfMeasurement>> DropdownBox2SelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Material>> PickList1SelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Material>> PickListSelectedItems;


        public MaterialFormViewModel()
        {
            Material = new DigicircMatchmaking.BO.Material();
            NewProcess = new DigicircMatchmaking.BO.Process();
            NewProcesses = new List<DigicircMatchmaking.BO.Process>();
            DeleteProcesses = new List<DigicircMatchmaking.BO.Process>();
            EditedProcesses = new List<DigicircMatchmaking.BO.Process>();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (manager.Session.Contains(Material))
            {
                manager.Session.Evict(Material);
            }
            if (manager.Session.Contains(NewProcess))
            {
                manager.Session.Evict(NewProcess);
            }
            if (NewProcesses != null)
            {
                foreach (var item in NewProcesses)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (DeleteProcesses != null)
            {
                foreach (var item in DeleteProcesses)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (EditedProcesses != null)
            {
                foreach (var item in EditedProcesses)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.UI.ViewModels.MaterialForm.MaterialFormViewModel))]
    public class MaterialFormViewModelDTO : SymbiosisMasterPageViewModelDTO, IViewModelDTO<DigicircMatchmaking.UI.ViewModels.MaterialForm.MaterialFormViewModel>
    {

        [JsonConstructor]
        public MaterialFormViewModelDTO() { }
        public MaterialFormViewModelDTO(DigicircMatchmaking.UI.ViewModels.MaterialForm.MaterialFormViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            Material = original.Material == null ? null : new Material_MaterialDTO(original.Material);
            NewProcess = original.NewProcess == null ? null : new NewProcess_ProcessDTO(original.NewProcess);
            ConvertBy = original.ConvertBy;
            NewProcesses = original.NewProcesses?.Select(x => new NewProcesses_ProcessDTO(x)).ToList();
            DeleteProcesses = original.DeleteProcesses?.Select(x => new DeleteProcesses_ProcessDTO(x)).ToList();
            Edited = original.Edited;
            EditedProcesses = original.EditedProcesses?.Select(x => new EditedProcesses_ProcessDTO(x)).ToList();
            DropdownBoxSelectedItemKeys = original.DropdownBoxSelectedItems == null
                                          ? null
                                          : original.DropdownBoxSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            DropdownBox1SelectedItemKeys = original.DropdownBox1SelectedItems == null
                                           ? null
                                           : original.DropdownBox1SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            DropdownBox2SelectedItemKeys = original.DropdownBox2SelectedItems == null
                                           ? null
                                           : original.DropdownBox2SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            PickList1SelectedItemKeys = original.PickList1SelectedItems == null
                                        ? null
                                        : original.PickList1SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            PickListSelectedItemKeys = original.PickListSelectedItems == null
                                       ? null
                                       : original.PickListSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public Material_MaterialDTO Material;
        public NewProcess_ProcessDTO NewProcess;
        public bool ConvertBy;
        public List<NewProcesses_ProcessDTO> NewProcesses;
        public List<DeleteProcesses_ProcessDTO> DeleteProcesses;
        public bool Edited;
        public List<EditedProcesses_ProcessDTO> EditedProcesses;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.UI.ViewModels.MaterialForm.MaterialFormViewModel).FullName;
        public List<SelectedItemInfo<int?>> DropdownBoxSelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.MaterialForm.ProductTypeDataset_ProductTypeDTO>> DropdownBox__InitialSelection;
        public List<SelectedItemInfo<int?>> DropdownBox1SelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.MaterialForm.PhysicalFormDataset_PhysicalFormDTO>> DropdownBox1__InitialSelection;
        public List<SelectedItemInfo<int?>> DropdownBox2SelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.MaterialForm.UnitOfMeasurementDataset_UnitOfMeasurementDTO>> DropdownBox2__InitialSelection;
        public List<SelectedItemInfo<int?>> PickList1SelectedItemKeys;
        public List<SelectedItemInfo<int?>> PickListSelectedItemKeys;

        public new DigicircMatchmaking.UI.ViewModels.MaterialForm.MaterialFormViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.UI.ViewModels.MaterialForm.MaterialFormViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DigicircMatchmaking.UI.ViewModels.MaterialForm.MaterialFormViewModel();
        }
        new  public DigicircMatchmaking.UI.ViewModels.MaterialForm.MaterialFormViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.UI.ViewModels.MaterialForm.MaterialFormViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.UI.ViewModels.MaterialForm.MaterialFormViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.Material = Material == null
                                ? null
                                : Material.Convert();
            original.NewProcess = NewProcess == null
                                  ? null
                                  : NewProcess.Convert();
            original.ConvertBy = ConvertBy;
            original.NewProcesses = NewProcesses == null
                                    ? null
                                    : NewProcesses.Select(q => q.Convert()).ToList();
            original.DeleteProcesses = DeleteProcesses == null
                                       ? null
                                       : DeleteProcesses.Select(q => q.Convert()).ToList();
            original.Edited = Edited;
            original.EditedProcesses = EditedProcesses == null
                                       ? null
                                       : EditedProcesses.Select(q => q.Convert()).ToList();
            original.DropdownBoxSelectedItems = DropdownBoxSelectedItemKeys == null
                                                ? new List<SelectedItemInfo<DigicircMatchmaking.BO.ProductType>>()
                                                : DropdownBoxSelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.ProductType>(x.SelectedItems.Select(y => ViewModels.MaterialForm.ProductTypeDataset_ProductTypeDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.DropdownBox1SelectedItems = DropdownBox1SelectedItemKeys == null
                                                 ? new List<SelectedItemInfo<DigicircMatchmaking.BO.PhysicalForm>>()
                                                 : DropdownBox1SelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.PhysicalForm>(x.SelectedItems.Select(y => ViewModels.MaterialForm.PhysicalFormDataset_PhysicalFormDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.DropdownBox2SelectedItems = DropdownBox2SelectedItemKeys == null
                                                 ? new List<SelectedItemInfo<DigicircMatchmaking.BO.UnitOfMeasurement>>()
                                                 : DropdownBox2SelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.UnitOfMeasurement>(x.SelectedItems.Select(y => ViewModels.MaterialForm.UnitOfMeasurementDataset_UnitOfMeasurementDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.PickList1SelectedItems = PickList1SelectedItemKeys == null
                                              ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Material>>()
                                              : PickList1SelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Material>(x.SelectedItems.Select(y => ViewModels.MaterialForm.Materials_MaterialDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.PickListSelectedItems = PickListSelectedItemKeys == null
                                             ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Material>>()
                                             : PickListSelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Material>(x.SelectedItems.Select(y => ViewModels.MaterialForm.Materials_MaterialDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public void FillDropDownsInitialValues(MaterialFormViewModel original, MaterialFormController _controller)
        {
            DropdownBox__InitialSelection = new List<SelectedItemInfo<ViewModels.MaterialForm.ProductTypeDataset_ProductTypeDTO>>();
            DropdownBox1__InitialSelection = new List<SelectedItemInfo<ViewModels.MaterialForm.PhysicalFormDataset_PhysicalFormDTO>>();
            DropdownBox2__InitialSelection = new List<SelectedItemInfo<ViewModels.MaterialForm.UnitOfMeasurementDataset_UnitOfMeasurementDTO>>();
            if (original == null) return;
            var DropdownBoxInitiallySelectedItem = original?.Material?.Type == null
                                                   ? null
                                                   : new DAL.Repository().Get<DigicircMatchmaking.BO.ProductType>(c => c.Id == original.Material.Type.Id).FirstOrDefault();
            if (DropdownBoxInitiallySelectedItem != null)
            {
                DropdownBox__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.MaterialForm.ProductTypeDataset_ProductTypeDTO>(new List<ViewModels.MaterialForm.ProductTypeDataset_ProductTypeDTO>
                {
                    new ProductTypeDataset_ProductTypeDTO(DropdownBoxInitiallySelectedItem)
                }, "_", false)
                );
            }
            var DropdownBox1InitiallySelectedItem = original?.Material?.PhysicalForm == null
                                                    ? null
                                                    : new DAL.Repository().Get<DigicircMatchmaking.BO.PhysicalForm>(c => c.Id == original.Material.PhysicalForm.Id).FirstOrDefault();
            if (DropdownBox1InitiallySelectedItem != null)
            {
                DropdownBox1__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.MaterialForm.PhysicalFormDataset_PhysicalFormDTO>(new List<ViewModels.MaterialForm.PhysicalFormDataset_PhysicalFormDTO>
                {
                    new PhysicalFormDataset_PhysicalFormDTO(DropdownBox1InitiallySelectedItem)
                }, "_", false)
                );
            }
            var DropdownBox2InitiallySelectedItem = original?.Material?.UnitOfMeasurement == null
                                                    ? null
                                                    : new DAL.Repository().Get<DigicircMatchmaking.BO.UnitOfMeasurement>(c => c.Id == original.Material.UnitOfMeasurement.Id).FirstOrDefault();
            if (DropdownBox2InitiallySelectedItem != null)
            {
                DropdownBox2__InitialSelection.Add
                (
                    new SelectedItemInfo<ViewModels.MaterialForm.UnitOfMeasurementDataset_UnitOfMeasurementDTO>(new List<ViewModels.MaterialForm.UnitOfMeasurementDataset_UnitOfMeasurementDTO>
                {
                    new UnitOfMeasurementDataset_UnitOfMeasurementDTO(DropdownBox2InitiallySelectedItem)
                }, "_", false)
                );
            }
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class Material_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public Material_MaterialDTO() { }
        public Material_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            Id = original.Id;
            IsHazardous = original.IsHazardous;
            Name = original.Name;
            ConvertedBy = original.ConvertedBy?.Select(x => new Material_Material_ConvertedBy_ProcessDTO(x)).ToList();
            ConvertBy = original.ConvertBy?.Select(x => new Material_Material_ConvertBy_ProcessDTO(x)).ToList();
            Type = original.Type == null ? null : new Material_Material_Type_ProductTypeDTO(original.Type);
            PhysicalForm = original.PhysicalForm == null ? null : new Material_Material_PhysicalForm_PhysicalFormDTO(original.PhysicalForm);
            UnitOfMeasurement = original.UnitOfMeasurement == null ? null : new Material_Material_UnitOfMeasurement_UnitOfMeasurementDTO(original.UnitOfMeasurement);
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool IsHazardous;
        public string Name;
        public List<Material_Material_ConvertedBy_ProcessDTO> ConvertedBy;
        public List<Material_Material_ConvertBy_ProcessDTO> ConvertBy;
        public Material_Material_Type_ProductTypeDTO Type;
        public Material_Material_PhysicalForm_PhysicalFormDTO PhysicalForm;
        public Material_Material_UnitOfMeasurement_UnitOfMeasurementDTO UnitOfMeasurement;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.IsHazardous = IsHazardous;
            original.Name = Name;
            original.ConvertedBy = ConvertedBy == null
                                   ? null
                                   : ConvertedBy.Select(q => q.Convert()).ToList();
            original.ConvertBy = ConvertBy == null
                                 ? null
                                 : ConvertBy.Select(q => q.Convert()).ToList();
            original.Type = Type == null
                            ? null
                            : Type.Convert();
            original.PhysicalForm = PhysicalForm == null
                                    ? null
                                    : PhysicalForm.Convert();
            original.UnitOfMeasurement = UnitOfMeasurement == null
                                         ? null
                                         : UnitOfMeasurement.Convert();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Material_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Material_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Process))]
    public class Material_Material_ConvertedBy_ProcessDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Process>
    {

        [JsonConstructor]
        public Material_Material_ConvertedBy_ProcessDTO() { }
        public Material_Material_ConvertedBy_ProcessDTO(DigicircMatchmaking.BO.Process original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            Name = original.Name;
            Notes = original.Notes;
            Ref = original.Ref;
            SourceName = original.SourceName;
            Product = original.Product?.Select(x => new Material_Material_ConvertedBy_Process_Product_MaterialDTO(x)).ToList();
            Source = original.Source?.Select(x => new Material_Material_ConvertedBy_Process_Source_MaterialDTO(x)).ToList();
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string Notes;
        public string Ref;
        public string SourceName;
        public List<Material_Material_ConvertedBy_Process_Product_MaterialDTO> Product;
        public List<Material_Material_ConvertedBy_Process_Source_MaterialDTO> Source;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Process).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Process GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Process>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Process();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Process Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Process();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Process original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.Notes = Notes;
            original.Ref = Ref;
            original.SourceName = SourceName;
            original.Product = Product == null
                               ? null
                               : Product.Select(q => q.Convert()).ToList();
            original.Source = Source == null
                              ? null
                              : Source.Select(q => q.Convert()).ToList();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Material_Material_ConvertedBy_ProcessDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Material_Material_ConvertedBy_ProcessDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class Material_Material_ConvertedBy_Process_Product_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public Material_Material_ConvertedBy_Process_Product_MaterialDTO() { }
        public Material_Material_ConvertedBy_Process_Product_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            Name = original.Name;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.Name = Name;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Material_Material_ConvertedBy_Process_Product_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Material_Material_ConvertedBy_Process_Product_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class Material_Material_ConvertedBy_Process_Source_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public Material_Material_ConvertedBy_Process_Source_MaterialDTO() { }
        public Material_Material_ConvertedBy_Process_Source_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            Name = original.Name;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.Name = Name;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Material_Material_ConvertedBy_Process_Source_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Material_Material_ConvertedBy_Process_Source_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Process))]
    public class Material_Material_ConvertBy_ProcessDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Process>
    {

        [JsonConstructor]
        public Material_Material_ConvertBy_ProcessDTO() { }
        public Material_Material_ConvertBy_ProcessDTO(DigicircMatchmaking.BO.Process original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            Name = original.Name;
            Notes = original.Notes;
            ProductName = original.ProductName;
            Ref = original.Ref;
            Source = original.Source?.Select(x => new Material_Material_ConvertBy_Process_Source_MaterialDTO(x)).ToList();
            Product = original.Product?.Select(x => new Material_Material_ConvertBy_Process_Product_MaterialDTO(x)).ToList();
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string Notes;
        public string ProductName;
        public string Ref;
        public List<Material_Material_ConvertBy_Process_Source_MaterialDTO> Source;
        public List<Material_Material_ConvertBy_Process_Product_MaterialDTO> Product;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Process).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Process GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Process>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Process();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Process Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Process();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Process original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.Notes = Notes;
            original.ProductName = ProductName;
            original.Ref = Ref;
            original.Source = Source == null
                              ? null
                              : Source.Select(q => q.Convert()).ToList();
            original.Product = Product == null
                               ? null
                               : Product.Select(q => q.Convert()).ToList();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Material_Material_ConvertBy_ProcessDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Material_Material_ConvertBy_ProcessDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class Material_Material_ConvertBy_Process_Source_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public Material_Material_ConvertBy_Process_Source_MaterialDTO() { }
        public Material_Material_ConvertBy_Process_Source_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            Name = original.Name;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.Name = Name;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Material_Material_ConvertBy_Process_Source_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Material_Material_ConvertBy_Process_Source_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class Material_Material_ConvertBy_Process_Product_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public Material_Material_ConvertBy_Process_Product_MaterialDTO() { }
        public Material_Material_ConvertBy_Process_Product_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            Name = original.Name;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.Name = Name;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Material_Material_ConvertBy_Process_Product_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Material_Material_ConvertBy_Process_Product_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.ProductType))]
    public class Material_Material_Type_ProductTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.ProductType>
    {

        [JsonConstructor]
        public Material_Material_Type_ProductTypeDTO() { }
        public Material_Material_Type_ProductTypeDTO(DigicircMatchmaking.BO.ProductType original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            Name = original.Name;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.ProductType).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.ProductType GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.ProductType>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.ProductType();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.ProductType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.ProductType Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.ProductType();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.ProductType original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Name = Name;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Material_Material_Type_ProductTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.ProductType>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Material_Material_Type_ProductTypeDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.PhysicalForm))]
    public class Material_Material_PhysicalForm_PhysicalFormDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.PhysicalForm>
    {

        [JsonConstructor]
        public Material_Material_PhysicalForm_PhysicalFormDTO() { }
        public Material_Material_PhysicalForm_PhysicalFormDTO(DigicircMatchmaking.BO.PhysicalForm original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Code = original.Code;
            Id = original.Id;
            Value = original.Value;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.PhysicalForm).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DigicircMatchmaking.BO.ValueType).FullName};
        public DigicircMatchmaking.BO.PhysicalForm GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.PhysicalForm>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.PhysicalForm();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.PhysicalForm>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.PhysicalForm Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.PhysicalForm();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.PhysicalForm original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Id = Id ?? 0;
            original.Value = Value;
        }
        public static Material_Material_PhysicalForm_PhysicalFormDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.PhysicalForm>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Material_Material_PhysicalForm_PhysicalFormDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.UnitOfMeasurement))]
    public class Material_Material_UnitOfMeasurement_UnitOfMeasurementDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.UnitOfMeasurement>
    {

        [JsonConstructor]
        public Material_Material_UnitOfMeasurement_UnitOfMeasurementDTO() { }
        public Material_Material_UnitOfMeasurement_UnitOfMeasurementDTO(DigicircMatchmaking.BO.UnitOfMeasurement original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Code = original.Code;
            Id = original.Id;
            Value = original.Value;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Value;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.UnitOfMeasurement).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DigicircMatchmaking.BO.ValueType).FullName};
        public DigicircMatchmaking.BO.UnitOfMeasurement GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.UnitOfMeasurement>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.UnitOfMeasurement();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.UnitOfMeasurement>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.UnitOfMeasurement Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.UnitOfMeasurement();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.UnitOfMeasurement original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Id = Id ?? 0;
            original.Value = Value;
        }
        public static Material_Material_UnitOfMeasurement_UnitOfMeasurementDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.UnitOfMeasurement>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Material_Material_UnitOfMeasurement_UnitOfMeasurementDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Process))]
    public class NewProcess_ProcessDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Process>
    {

        [JsonConstructor]
        public NewProcess_ProcessDTO() { }
        public NewProcess_ProcessDTO(DigicircMatchmaking.BO.Process original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            Name = original.Name;
            Notes = original.Notes;
            Ref = original.Ref;
            Product = original.Product?.Select(x => new NewProcess_Process_Product_MaterialDTO(x)).ToList();
            Source = original.Source?.Select(x => new NewProcess_Process_Source_MaterialDTO(x)).ToList();
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string Notes;
        public string Ref;
        public List<NewProcess_Process_Product_MaterialDTO> Product;
        public List<NewProcess_Process_Source_MaterialDTO> Source;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Process).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Process GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Process>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Process();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Process Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Process();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Process original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.Notes = Notes;
            original.Ref = Ref;
            original.Product = Product == null
                               ? null
                               : Product.Select(q => q.Convert()).ToList();
            original.Source = Source == null
                              ? null
                              : Source.Select(q => q.Convert()).ToList();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static NewProcess_ProcessDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new NewProcess_ProcessDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class NewProcess_Process_Product_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public NewProcess_Process_Product_MaterialDTO() { }
        public NewProcess_Process_Product_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            Name = original.Name;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.Name = Name;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static NewProcess_Process_Product_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new NewProcess_Process_Product_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class NewProcess_Process_Source_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public NewProcess_Process_Source_MaterialDTO() { }
        public NewProcess_Process_Source_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            Name = original.Name;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.Name = Name;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static NewProcess_Process_Source_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new NewProcess_Process_Source_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Process))]
    public class NewProcesses_ProcessDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Process>
    {

        [JsonConstructor]
        public NewProcesses_ProcessDTO() { }
        public NewProcesses_ProcessDTO(DigicircMatchmaking.BO.Process original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            Name = original.Name;
            Notes = original.Notes;
            Ref = original.Ref;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string Notes;
        public string Ref;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Process).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Process GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Process>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Process();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Process Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Process();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Process original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.Notes = Notes;
            original.Ref = Ref;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static NewProcesses_ProcessDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new NewProcesses_ProcessDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Process))]
    public class DeleteProcesses_ProcessDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Process>
    {

        [JsonConstructor]
        public DeleteProcesses_ProcessDTO() { }
        public DeleteProcesses_ProcessDTO(DigicircMatchmaking.BO.Process original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            Name = original.Name;
            Notes = original.Notes;
            Ref = original.Ref;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string Notes;
        public string Ref;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Process).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Process GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Process>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Process();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Process Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Process();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Process original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.Notes = Notes;
            original.Ref = Ref;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static DeleteProcesses_ProcessDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new DeleteProcesses_ProcessDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Process))]
    public class EditedProcesses_ProcessDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Process>
    {

        [JsonConstructor]
        public EditedProcesses_ProcessDTO() { }
        public EditedProcesses_ProcessDTO(DigicircMatchmaking.BO.Process original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            Name = original.Name;
            Notes = original.Notes;
            Ref = original.Ref;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string Notes;
        public string Ref;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Process).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Process GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Process>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Process();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Process Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Process();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Process original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.Notes = Notes;
            original.Ref = Ref;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static EditedProcesses_ProcessDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new EditedProcesses_ProcessDTO(foundEntry);
            }
            return null;
        }
    }
    #region Controller Action DTOS
    [OriginalType(typeof(DigicircMatchmaking.BO.Process))]
    public class ProcessDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Process>
    {
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string ProductName;
        public string SourceName;
        public string Notes;
        public string Ref;
        public List<MaterialDTO> Source;
        public List<MaterialDTO> Product;


        [JsonConstructor]
        public ProcessDTO() : base() {}
        public  static ProcessDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MaterialFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Process>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ProcessDTO(foundEntry);
            }
            return null;
        }
        public ProcessDTO(DigicircMatchmaking.BO.Process original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ProcessDTO(DigicircMatchmaking.BO.Process original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
            ProductName = original.ProductName;
            SourceName = original.SourceName;
            Notes = original.Notes;
            Ref = original.Ref;
            Source = original.Source == null
                     ? new List<MaterialDTO>()
                     : original.Source.Select(q => DTOHelper.GetDTOFromModel<MaterialDTO>(q as DigicircMatchmaking.BO.Material)).ToList();
            Product = original.Product == null
                      ? new List<MaterialDTO>()
                      : original.Product.Select(q => DTOHelper.GetDTOFromModel<MaterialDTO>(q as DigicircMatchmaking.BO.Material)).ToList();
        }

        public static DigicircMatchmaking.BO.Process GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Process Convert()
        {
            var model = new DigicircMatchmaking.BO.Process();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            model.ProductName = ProductName;
            model.SourceName = SourceName;
            model.Notes = Notes;
            model.Ref = Ref;
            model.Source = Source == null
                           ? null
                           : Source.Select(q => DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.Material>(q)).ToList();
            model.Product = Product == null
                            ? null
                            : Product.Select(q => DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.Material>(q)).ToList();
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public ProductTypeDTO Type;
        public PhysicalFormDTO PhysicalForm;
        public UnitOfMeasurementDTO UnitOfMeasurement;
        public bool IsHazardous;
        public string Description;
        public List<ProcessDTO> ConvertBy;
        public List<ProcessDTO> ConvertedBy;


        [JsonConstructor]
        public MaterialDTO() : base() {}
        public  static MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MaterialFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Material>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new MaterialDTO(foundEntry);
            }
            return null;
        }
        public MaterialDTO(DigicircMatchmaking.BO.Material original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public MaterialDTO(DigicircMatchmaking.BO.Material original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
            Type = original.Type == null
                   ? null
                   : DTOHelper.GetDTOFromModel<ProductTypeDTO>(original.Type as DigicircMatchmaking.BO.ProductType);
            PhysicalForm = original.PhysicalForm == null
                           ? null
                           : DTOHelper.GetDTOFromModel<PhysicalFormDTO>(original.PhysicalForm as DigicircMatchmaking.BO.PhysicalForm);
            UnitOfMeasurement = original.UnitOfMeasurement == null
                                ? null
                                : DTOHelper.GetDTOFromModel<UnitOfMeasurementDTO>(original.UnitOfMeasurement as DigicircMatchmaking.BO.UnitOfMeasurement);
            IsHazardous = original.IsHazardous;
            Description = original.Description;
            ConvertBy = original.ConvertBy == null
                        ? new List<ProcessDTO>()
                        : original.ConvertBy.Select(q => DTOHelper.GetDTOFromModel<ProcessDTO>(q as DigicircMatchmaking.BO.Process)).ToList();
            ConvertedBy = original.ConvertedBy == null
                          ? new List<ProcessDTO>()
                          : original.ConvertedBy.Select(q => DTOHelper.GetDTOFromModel<ProcessDTO>(q as DigicircMatchmaking.BO.Process)).ToList();
        }

        public static DigicircMatchmaking.BO.Material GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var model = new DigicircMatchmaking.BO.Material();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            model.Type = Type == null
                         ? null
                         : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.ProductType>(Type);
            model.PhysicalForm = PhysicalForm == null
                                 ? null
                                 : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.PhysicalForm>(PhysicalForm);
            model.UnitOfMeasurement = UnitOfMeasurement == null
                                      ? null
                                      : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.UnitOfMeasurement>(UnitOfMeasurement);
            model.IsHazardous = IsHazardous;
            model.Description = Description;
            model.ConvertBy = ConvertBy == null
                              ? null
                              : ConvertBy.Select(q => DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.Process>(q)).ToList();
            model.ConvertedBy = ConvertedBy == null
                                ? null
                                : ConvertedBy.Select(q => DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.Process>(q)).ToList();
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.ProductType))]
    public class ProductTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.ProductType>
    {
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public ProductTypeDTO() : base() {}
        public  static ProductTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.ProductType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MaterialFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.ProductType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ProductTypeDTO(foundEntry);
            }
            return null;
        }
        public ProductTypeDTO(DigicircMatchmaking.BO.ProductType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ProductTypeDTO(DigicircMatchmaking.BO.ProductType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DigicircMatchmaking.BO.ProductType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.ProductType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.ProductType Convert()
        {
            var model = new DigicircMatchmaking.BO.ProductType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.ProductType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DigicircMatchmaking.BO.PhysicalForm))]
    public class PhysicalFormDTO : ValueTypeDTO, IViewModelDTO<DigicircMatchmaking.BO.PhysicalForm>
    {
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public PhysicalFormDTO() : base() {}
        public new static PhysicalFormDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.PhysicalForm>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MaterialFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.PhysicalForm>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new PhysicalFormDTO(foundEntry);
            }
            return null;
        }
        public PhysicalFormDTO(DigicircMatchmaking.BO.PhysicalForm original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public PhysicalFormDTO(DigicircMatchmaking.BO.PhysicalForm original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public new static DigicircMatchmaking.BO.PhysicalForm GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.PhysicalForm>(parsedKey, false, false);
        }
        public new DigicircMatchmaking.BO.PhysicalForm Convert()
        {
            var model = new DigicircMatchmaking.BO.PhysicalForm();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.PhysicalForm>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.ValueType))]
    public class ValueTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.ValueType>
    {
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public ValueTypeDTO() : base() {}
        public  static ValueTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MaterialFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.ValueType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ValueTypeDTO(foundEntry);
            }
            return null;
        }
        public ValueTypeDTO(DigicircMatchmaking.BO.ValueType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ValueTypeDTO(DigicircMatchmaking.BO.ValueType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DigicircMatchmaking.BO.ValueType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.ValueType Convert()
        {
            var model = new DigicircMatchmaking.BO.ValueType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.BO.UnitOfMeasurement))]
    public class UnitOfMeasurementDTO : ValueTypeDTO, IViewModelDTO<DigicircMatchmaking.BO.UnitOfMeasurement>
    {
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public UnitOfMeasurementDTO() : base() {}
        public new static UnitOfMeasurementDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.UnitOfMeasurement>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MaterialFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.UnitOfMeasurement>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new UnitOfMeasurementDTO(foundEntry);
            }
            return null;
        }
        public UnitOfMeasurementDTO(DigicircMatchmaking.BO.UnitOfMeasurement original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public UnitOfMeasurementDTO(DigicircMatchmaking.BO.UnitOfMeasurement original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public new static DigicircMatchmaking.BO.UnitOfMeasurement GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.UnitOfMeasurement>(parsedKey, false, false);
        }
        public new DigicircMatchmaking.BO.UnitOfMeasurement Convert()
        {
            var model = new DigicircMatchmaking.BO.UnitOfMeasurement();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.UnitOfMeasurement>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }








    #endregion


    #region Datasource DTOs
    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    [DataSetDTO]
    public class Materials_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string Description;
        public string HsSpecific;


        [JsonConstructor]
        public Materials_MaterialDTO() : base() {}
        public  static Materials_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MaterialFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Material>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Materials_MaterialDTO(foundEntry);
            }
            return null;
        }
        public Materials_MaterialDTO(DigicircMatchmaking.BO.Material original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Materials_MaterialDTO(DigicircMatchmaking.BO.Material original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
        }

        public static DigicircMatchmaking.BO.Material GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var model = new DigicircMatchmaking.BO.Material();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            model.Description = Description;
            model.HsSpecific = HsSpecific;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DigicircMatchmaking.BO.ProductType))]
    [DataSetDTO]
    public class ProductTypeDataset_ProductTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.ProductType>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.ProductType).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;


        [JsonConstructor]
        public ProductTypeDataset_ProductTypeDTO() : base() {}
        public  static ProductTypeDataset_ProductTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.ProductType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MaterialFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.ProductType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ProductTypeDataset_ProductTypeDTO(foundEntry);
            }
            return null;
        }
        public ProductTypeDataset_ProductTypeDTO(DigicircMatchmaking.BO.ProductType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ProductTypeDataset_ProductTypeDTO(DigicircMatchmaking.BO.ProductType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
        }

        public static DigicircMatchmaking.BO.ProductType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.ProductType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.ProductType Convert()
        {
            var model = new DigicircMatchmaking.BO.ProductType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.ProductType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DigicircMatchmaking.BO.PhysicalForm))]
    [DataSetDTO]
    public class PhysicalFormDataset_PhysicalFormDTO : PhysicalFormDataset_ValueTypeDTO, IViewModelDTO<DigicircMatchmaking.BO.PhysicalForm>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.PhysicalForm).FullName;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Code;


        [JsonConstructor]
        public PhysicalFormDataset_PhysicalFormDTO() : base() {}
        public new static PhysicalFormDataset_PhysicalFormDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.PhysicalForm>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MaterialFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.PhysicalForm>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new PhysicalFormDataset_PhysicalFormDTO(foundEntry);
            }
            return null;
        }
        public PhysicalFormDataset_PhysicalFormDTO(DigicircMatchmaking.BO.PhysicalForm original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public PhysicalFormDataset_PhysicalFormDTO(DigicircMatchmaking.BO.PhysicalForm original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Code = original.Code;
        }

        public new static DigicircMatchmaking.BO.PhysicalForm GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.PhysicalForm>(parsedKey, false, false);
        }
        public new DigicircMatchmaking.BO.PhysicalForm Convert()
        {
            var model = new DigicircMatchmaking.BO.PhysicalForm();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.PhysicalForm>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Code = Code;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.ValueType))]
    [DataSetDTO]
    public class PhysicalFormDataset_ValueTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.ValueType>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.ValueType).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Code;


        [JsonConstructor]
        public PhysicalFormDataset_ValueTypeDTO() : base() {}
        public  static PhysicalFormDataset_ValueTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MaterialFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.ValueType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new PhysicalFormDataset_ValueTypeDTO(foundEntry);
            }
            return null;
        }
        public PhysicalFormDataset_ValueTypeDTO(DigicircMatchmaking.BO.ValueType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public PhysicalFormDataset_ValueTypeDTO(DigicircMatchmaking.BO.ValueType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Code = original.Code;
        }

        public static DigicircMatchmaking.BO.ValueType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.ValueType Convert()
        {
            var model = new DigicircMatchmaking.BO.ValueType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Code = Code;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.BO.UnitOfMeasurement))]
    [DataSetDTO]
    public class UnitOfMeasurementDataset_UnitOfMeasurementDTO : UnitOfMeasurementDataset_ValueTypeDTO, IViewModelDTO<DigicircMatchmaking.BO.UnitOfMeasurement>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.UnitOfMeasurement).FullName;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Code;


        [JsonConstructor]
        public UnitOfMeasurementDataset_UnitOfMeasurementDTO() : base() {}
        public new static UnitOfMeasurementDataset_UnitOfMeasurementDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.UnitOfMeasurement>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MaterialFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.UnitOfMeasurement>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new UnitOfMeasurementDataset_UnitOfMeasurementDTO(foundEntry);
            }
            return null;
        }
        public UnitOfMeasurementDataset_UnitOfMeasurementDTO(DigicircMatchmaking.BO.UnitOfMeasurement original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public UnitOfMeasurementDataset_UnitOfMeasurementDTO(DigicircMatchmaking.BO.UnitOfMeasurement original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Code = original.Code;
        }

        public new static DigicircMatchmaking.BO.UnitOfMeasurement GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.UnitOfMeasurement>(parsedKey, false, false);
        }
        public new DigicircMatchmaking.BO.UnitOfMeasurement Convert()
        {
            var model = new DigicircMatchmaking.BO.UnitOfMeasurement();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.UnitOfMeasurement>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Code = Code;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.ValueType))]
    [DataSetDTO]
    public class UnitOfMeasurementDataset_ValueTypeDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.ValueType>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.ValueType).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Code;


        [JsonConstructor]
        public UnitOfMeasurementDataset_ValueTypeDTO() : base() {}
        public  static UnitOfMeasurementDataset_ValueTypeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new MaterialFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.ValueType>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new UnitOfMeasurementDataset_ValueTypeDTO(foundEntry);
            }
            return null;
        }
        public UnitOfMeasurementDataset_ValueTypeDTO(DigicircMatchmaking.BO.ValueType original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public UnitOfMeasurementDataset_ValueTypeDTO(DigicircMatchmaking.BO.ValueType original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Code = original.Code;
        }

        public static DigicircMatchmaking.BO.ValueType GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.ValueType Convert()
        {
            var model = new DigicircMatchmaking.BO.ValueType();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.ValueType>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Code = Code;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    #endregion

}
