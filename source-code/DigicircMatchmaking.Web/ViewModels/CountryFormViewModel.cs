// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.UI.Controllers.CountryForm;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Locales;
using System.ComponentModel.DataAnnotations;
using DigicircMatchmaking.UI.ViewModels.MasterPage;
using DigicircMatchmaking.UI.Controllers.MasterPage;
namespace DigicircMatchmaking.UI.ViewModels.CountryForm
{
    public class CountryFormViewModel : MasterPageViewModel
    {
        public DigicircMatchmaking.BO.Country Country;


        public CountryFormViewModel()
        {
            Country = new DigicircMatchmaking.BO.Country();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (manager.Session.Contains(Country))
            {
                manager.Session.Evict(Country);
            }
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.UI.ViewModels.CountryForm.CountryFormViewModel))]
    public class CountryFormViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DigicircMatchmaking.UI.ViewModels.CountryForm.CountryFormViewModel>
    {

        [JsonConstructor]
        public CountryFormViewModelDTO() { }
        public CountryFormViewModelDTO(DigicircMatchmaking.UI.ViewModels.CountryForm.CountryFormViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            Country = original.Country == null ? null : new Country_CountryDTO(original.Country);
        }
        public Country_CountryDTO Country;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.UI.ViewModels.CountryForm.CountryFormViewModel).FullName;

        public new DigicircMatchmaking.UI.ViewModels.CountryForm.CountryFormViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.UI.ViewModels.CountryForm.CountryFormViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DigicircMatchmaking.UI.ViewModels.CountryForm.CountryFormViewModel();
        }
        new  public DigicircMatchmaking.UI.ViewModels.CountryForm.CountryFormViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.UI.ViewModels.CountryForm.CountryFormViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.UI.ViewModels.CountryForm.CountryFormViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.Country = Country == null
                               ? null
                               : Country.Convert();
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Country))]
    public class Country_CountryDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Country>
    {

        [JsonConstructor]
        public Country_CountryDTO() { }
        public Country_CountryDTO(DigicircMatchmaking.BO.Country original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            Name = original.Name;
            ShortName = original.ShortName;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string ShortName;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Country).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Country GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Country>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Country();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Country Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Country();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Country original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.ShortName = ShortName;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Country_CountryDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Country>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Country_CountryDTO(foundEntry);
            }
            return null;
        }
    }



}
