// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.UI.Controllers.ManageResources;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Locales;
using System.ComponentModel.DataAnnotations;
using DigicircMatchmaking.UI.ViewModels.MasterPage;
using DigicircMatchmaking.UI.Controllers.MasterPage;
namespace DigicircMatchmaking.UI.ViewModels.ManageResources
{
    public class ManageResourcesViewModel : MasterPageViewModel
    {
        public DigicircMatchmaking.BO.Actor Actor;
        public DigicircMatchmaking.BO.Product SelectedProduct;
        public string ModalTitle;
        public DigicircMatchmaking.BO.Material Material;
        public List<DigicircMatchmaking.BO.Product> NewDesiredResources;
        public List<DigicircMatchmaking.BO.Product> NewResources;
        public List<DigicircMatchmaking.BO.Product> DeleteDesiredResources;
        public List<DigicircMatchmaking.BO.Product> DeleteResources;
        public List<DigicircMatchmaking.BO.Product> UpdateDesiredResources;
        public List<DigicircMatchmaking.BO.Product> UpdateResource;
        public bool IsEdited;

        public List<SelectedItemInfo<DigicircMatchmaking.BO.Address>> PartialViewDropdownBox4SelectedItems;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Material>> PartialViewDropdownBoxSelectedItems;


        public ManageResourcesViewModel()
        {
            Actor = new DigicircMatchmaking.BO.Actor();
            SelectedProduct = new DigicircMatchmaking.BO.Product();
            Material = new DigicircMatchmaking.BO.Material();
            NewDesiredResources = new List<DigicircMatchmaking.BO.Product>();
            NewResources = new List<DigicircMatchmaking.BO.Product>();
            DeleteDesiredResources = new List<DigicircMatchmaking.BO.Product>();
            DeleteResources = new List<DigicircMatchmaking.BO.Product>();
            UpdateDesiredResources = new List<DigicircMatchmaking.BO.Product>();
            UpdateResource = new List<DigicircMatchmaking.BO.Product>();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (manager.Session.Contains(Actor))
            {
                manager.Session.Evict(Actor);
            }
            if (manager.Session.Contains(SelectedProduct))
            {
                manager.Session.Evict(SelectedProduct);
            }
            if (manager.Session.Contains(Material))
            {
                manager.Session.Evict(Material);
            }
            if (NewDesiredResources != null)
            {
                foreach (var item in NewDesiredResources)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (NewResources != null)
            {
                foreach (var item in NewResources)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (DeleteDesiredResources != null)
            {
                foreach (var item in DeleteDesiredResources)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (DeleteResources != null)
            {
                foreach (var item in DeleteResources)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (UpdateDesiredResources != null)
            {
                foreach (var item in UpdateDesiredResources)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
            if (UpdateResource != null)
            {
                foreach (var item in UpdateResource)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.UI.ViewModels.ManageResources.ManageResourcesViewModel))]
    public class ManageResourcesViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DigicircMatchmaking.UI.ViewModels.ManageResources.ManageResourcesViewModel>
    {

        [JsonConstructor]
        public ManageResourcesViewModelDTO() { }
        public ManageResourcesViewModelDTO(DigicircMatchmaking.UI.ViewModels.ManageResources.ManageResourcesViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            Actor = original.Actor == null ? null : new Actor_ActorDTO(original.Actor);
            SelectedProduct = original.SelectedProduct == null ? null : new SelectedProduct_ProductDTO(original.SelectedProduct);
            ModalTitle = original.ModalTitle;
            Material = original.Material == null ? null : new Material_MaterialDTO(original.Material);
            NewDesiredResources = original.NewDesiredResources?.Select(x => new NewDesiredResources_ProductDTO(x)).ToList();
            NewResources = original.NewResources?.Select(x => new NewResources_ProductDTO(x)).ToList();
            DeleteDesiredResources = original.DeleteDesiredResources?.Select(x => new DeleteDesiredResources_ProductDTO(x)).ToList();
            DeleteResources = original.DeleteResources?.Select(x => new DeleteResources_ProductDTO(x)).ToList();
            UpdateDesiredResources = original.UpdateDesiredResources?.Select(x => new UpdateDesiredResources_ProductDTO(x)).ToList();
            UpdateResource = original.UpdateResource?.Select(x => new UpdateResource_ProductDTO(x)).ToList();
            IsEdited = original.IsEdited;
        }
        public Actor_ActorDTO Actor;
        public SelectedProduct_ProductDTO SelectedProduct;
        public string ModalTitle;
        public Material_MaterialDTO Material;
        public List<NewDesiredResources_ProductDTO> NewDesiredResources;
        public List<NewResources_ProductDTO> NewResources;
        public List<DeleteDesiredResources_ProductDTO> DeleteDesiredResources;
        public List<DeleteResources_ProductDTO> DeleteResources;
        public List<UpdateDesiredResources_ProductDTO> UpdateDesiredResources;
        public List<UpdateResource_ProductDTO> UpdateResource;
        public bool IsEdited;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.UI.ViewModels.ManageResources.ManageResourcesViewModel).FullName;

        public List<SelectedItemInfo<int?>> PartialViewDropdownBox4SelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.ResourceForm.AddressDataset_AddressDTO>> PartialViewDropdownBox4__InitialSelection;
        public List<SelectedItemInfo<int?>> PartialViewDropdownBoxSelectedItemKeys;
        public List<SelectedItemInfo<ViewModels.ResourceForm.MaterialDataSet_MaterialDTO>> PartialViewDropdownBox__InitialSelection;

        public new DigicircMatchmaking.UI.ViewModels.ManageResources.ManageResourcesViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.UI.ViewModels.ManageResources.ManageResourcesViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DigicircMatchmaking.UI.ViewModels.ManageResources.ManageResourcesViewModel();
        }
        new  public DigicircMatchmaking.UI.ViewModels.ManageResources.ManageResourcesViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.UI.ViewModels.ManageResources.ManageResourcesViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.UI.ViewModels.ManageResources.ManageResourcesViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.Actor = Actor == null
                             ? null
                             : Actor.Convert();
            original.SelectedProduct = SelectedProduct == null
                                       ? null
                                       : SelectedProduct.Convert();
            original.ModalTitle = ModalTitle;
            original.Material = Material == null
                                ? null
                                : Material.Convert();
            original.NewDesiredResources = NewDesiredResources == null
                                           ? null
                                           : NewDesiredResources.Select(q => q.Convert()).ToList();
            original.NewResources = NewResources == null
                                    ? null
                                    : NewResources.Select(q => q.Convert()).ToList();
            original.DeleteDesiredResources = DeleteDesiredResources == null
                                              ? null
                                              : DeleteDesiredResources.Select(q => q.Convert()).ToList();
            original.DeleteResources = DeleteResources == null
                                       ? null
                                       : DeleteResources.Select(q => q.Convert()).ToList();
            original.UpdateDesiredResources = UpdateDesiredResources == null
                                              ? null
                                              : UpdateDesiredResources.Select(q => q.Convert()).ToList();
            original.UpdateResource = UpdateResource == null
                                      ? null
                                      : UpdateResource.Select(q => q.Convert()).ToList();
            original.IsEdited = IsEdited;
            original.PartialViewDropdownBox4SelectedItems = PartialViewDropdownBox4SelectedItemKeys == null
                    ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Address>>()
                    : PartialViewDropdownBox4SelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Address>(x.SelectedItems.Select(y => ViewModels.ResourceForm.AddressDataset_AddressDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.PartialViewDropdownBoxSelectedItems = PartialViewDropdownBoxSelectedItemKeys == null
                    ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Material>>()
                    : PartialViewDropdownBoxSelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Material>(x.SelectedItems.Select(y => ViewModels.ResourceForm.MaterialDataSet_MaterialDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Actor))]
    public class Actor_ActorDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Actor>
    {

        [JsonConstructor]
        public Actor_ActorDTO() { }
        public Actor_ActorDTO(DigicircMatchmaking.BO.Actor original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            ClusterName = original.ClusterName;
            Description = original.Description;
            Email = original.Email;
            GetCountOfClusterMembers = original.GetCountOfClusterMembers;
            Id = original.Id;
            Keywords = original.Keywords;
            MemberOfCluster = original.MemberOfCluster;
            Name = original.Name;
            ShortDescription = original.ShortDescription;
            SpecifiedEnityType = original.SpecifiedEnityType;
            Url = original.Url;
            CircularEconomyRequirements = original.CircularEconomyRequirements == null ? null : new Actor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO(original.CircularEconomyRequirements);
            AddedBy = original.AddedBy == null ? null : new Actor_Actor_AddedBy_DigicircUserDTO(original.AddedBy);
            Administrators = original.Administrators?.Select(x => new Actor_Actor_Administrators_DigicircUserDTO(x)).ToList();
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string ClusterName;
        public string Description;
        public string Email;
        public int? GetCountOfClusterMembers;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Keywords;
        public bool MemberOfCluster;
        public string Name;
        public string ShortDescription;
        public string SpecifiedEnityType;
        public string Url;
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO CircularEconomyRequirements;
        public Actor_Actor_AddedBy_DigicircUserDTO AddedBy;
        public List<Actor_Actor_Administrators_DigicircUserDTO> Administrators;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Actor).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Actor GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Actor>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Actor();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Actor Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Actor();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Actor original)
        {
            if (original == null) return;
            original.ClusterName = ClusterName;
            original.Description = Description;
            original.Email = Email;
            original.GetCountOfClusterMembers = GetCountOfClusterMembers;
            original.Id = Id ?? 0;
            original.Keywords = Keywords;
            original.MemberOfCluster = MemberOfCluster;
            original.Name = Name;
            original.ShortDescription = ShortDescription;
            original.SpecifiedEnityType = SpecifiedEnityType;
            original.Url = Url;
            original.CircularEconomyRequirements = CircularEconomyRequirements == null
                                                   ? null
                                                   : CircularEconomyRequirements.Convert();
            original.AddedBy = AddedBy == null
                               ? null
                               : AddedBy.Convert();
            original.Administrators = Administrators == null
                                      ? null
                                      : Administrators.Select(q => q.Convert()).ToList();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Actor_ActorDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Actor>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_ActorDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.CircularEconomyReport))]
    public class Actor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.CircularEconomyReport>
    {

        [JsonConstructor]
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO() { }
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO(DigicircMatchmaking.BO.CircularEconomyReport original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            DigitalExpertise = original.DigitalExpertise;
            DigitalProviredNeeded = original.DigitalProviredNeeded;
            ExperienceInCircularEconomy = original.ExperienceInCircularEconomy;
            GetExperienceInCircularEconomy = original.GetExperienceInCircularEconomy;
            Id = original.Id;
            SpecifyExperienceInCircularEconomy = original.SpecifyExperienceInCircularEconomy;
            ThematicExpertiseNeeded = original.ThematicExpertiseNeeded;
            Resources = original.Resources?.Select(x => new Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_ProductDTO(x)).ToList();
            DesiredResources = original.DesiredResources?.Select(x => new Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_ProductDTO(x)).ToList();
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public DigicircMatchmaking.BO.DigitalExpertise? DigitalExpertise;
        public bool DigitalProviredNeeded;
        public bool ExperienceInCircularEconomy;
        public string GetExperienceInCircularEconomy;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string SpecifyExperienceInCircularEconomy;
        public bool ThematicExpertiseNeeded;
        public List<Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_ProductDTO> Resources;
        public List<Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_ProductDTO> DesiredResources;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.CircularEconomyReport).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.CircularEconomyReport GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.CircularEconomyReport>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.CircularEconomyReport();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.CircularEconomyReport>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.CircularEconomyReport Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.CircularEconomyReport();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.CircularEconomyReport original)
        {
            if (original == null) return;
            original.DigitalExpertise = DigitalExpertise;
            original.DigitalProviredNeeded = DigitalProviredNeeded;
            original.ExperienceInCircularEconomy = ExperienceInCircularEconomy;
            original.GetExperienceInCircularEconomy = GetExperienceInCircularEconomy;
            original.Id = Id ?? 0;
            original.SpecifyExperienceInCircularEconomy = SpecifyExperienceInCircularEconomy;
            original.ThematicExpertiseNeeded = ThematicExpertiseNeeded;
            original.Resources = Resources == null
                                 ? null
                                 : Resources.Select(q => q.Convert()).ToList();
            original.DesiredResources = DesiredResources == null
                                        ? null
                                        : DesiredResources.Select(q => q.Convert()).ToList();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Actor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.CircularEconomyReport>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_CircularEconomyRequirements_CircularEconomyReportDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Product))]
    public class Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_ProductDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Product>
    {

        [JsonConstructor]
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_ProductDTO() { }
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_ProductDTO(DigicircMatchmaking.BO.Product original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            IsDesired = original.IsDesired;
            Quantity = original.Quantity;
            ValidFrom = original.ValidFrom;
            ValidTo = original.ValidTo;
            Resource = original.Resource == null ? null : new Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_Product_Resource_MaterialDTO(original.Resource);
            Site = original.Site == null ? null : new Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_Product_Site_AddressDTO(original.Site);
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool IsDesired;
        public int? Quantity;
        public DateTime? ValidFrom;
        public DateTime? ValidTo;
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_Product_Resource_MaterialDTO Resource;
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_Product_Site_AddressDTO Site;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Product).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Product GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Product>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Product();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Product Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Product();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Product original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.IsDesired = IsDesired;
            original.Quantity = Quantity;
            original.ValidFrom = ValidFrom;
            original.ValidTo = ValidTo;
            original.Resource = Resource == null
                                ? null
                                : Resource.Convert();
            original.Site = Site == null
                            ? null
                            : Site.Convert();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_ProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_ProductDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_Product_Resource_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_Product_Resource_MaterialDTO() { }
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_Product_Resource_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            Name = original.Name;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.Name = Name;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_Product_Resource_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_Product_Resource_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Address))]
    public class Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_Product_Site_AddressDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Address>
    {

        [JsonConstructor]
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_Product_Site_AddressDTO() { }
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_Product_Site_AddressDTO(DigicircMatchmaking.BO.Address original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            FullAddress = original.FullAddress;
            Id = original.Id;
            Latitude = original.Latitude;
            Longitude = original.Longitude;
            Number = original.Number;
            StreetName = original.StreetName;
            Town = original.Town;
            Zip = original.Zip;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string FullAddress;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public double? Latitude;
        public double? Longitude;
        public string Number;
        public string StreetName;
        public string Town;
        public string Zip;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Address).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Address GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Address>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Address();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Address Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Address();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Address original)
        {
            if (original == null) return;
            original.FullAddress = FullAddress;
            original.Id = Id ?? 0;
            original.Latitude = Latitude;
            original.Longitude = Longitude;
            original.Number = Number;
            original.StreetName = StreetName;
            original.Town = Town;
            original.Zip = Zip;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_Product_Site_AddressDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_Resources_Product_Site_AddressDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Product))]
    public class Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_ProductDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Product>
    {

        [JsonConstructor]
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_ProductDTO() { }
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_ProductDTO(DigicircMatchmaking.BO.Product original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            IsDesired = original.IsDesired;
            Quantity = original.Quantity;
            ValidFrom = original.ValidFrom;
            ValidTo = original.ValidTo;
            Resource = original.Resource == null ? null : new Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_Product_Resource_MaterialDTO(original.Resource);
            Site = original.Site == null ? null : new Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_Product_Site_AddressDTO(original.Site);
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool IsDesired;
        public int? Quantity;
        public DateTime? ValidFrom;
        public DateTime? ValidTo;
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_Product_Resource_MaterialDTO Resource;
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_Product_Site_AddressDTO Site;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Product).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Product GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Product>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Product();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Product Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Product();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Product original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.IsDesired = IsDesired;
            original.Quantity = Quantity;
            original.ValidFrom = ValidFrom;
            original.ValidTo = ValidTo;
            original.Resource = Resource == null
                                ? null
                                : Resource.Convert();
            original.Site = Site == null
                            ? null
                            : Site.Convert();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_ProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_ProductDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_Product_Resource_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_Product_Resource_MaterialDTO() { }
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_Product_Resource_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            Name = original.Name;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.Name = Name;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_Product_Resource_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_Product_Resource_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Address))]
    public class Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_Product_Site_AddressDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Address>
    {

        [JsonConstructor]
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_Product_Site_AddressDTO() { }
        public Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_Product_Site_AddressDTO(DigicircMatchmaking.BO.Address original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            FullAddress = original.FullAddress;
            Id = original.Id;
            Latitude = original.Latitude;
            Longitude = original.Longitude;
            Number = original.Number;
            StreetName = original.StreetName;
            Town = original.Town;
            Zip = original.Zip;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string FullAddress;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public double? Latitude;
        public double? Longitude;
        public string Number;
        public string StreetName;
        public string Town;
        public string Zip;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Address).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Address GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Address>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Address();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Address Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Address();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Address original)
        {
            if (original == null) return;
            original.FullAddress = FullAddress;
            original.Id = Id ?? 0;
            original.Latitude = Latitude;
            original.Longitude = Longitude;
            original.Number = Number;
            original.StreetName = StreetName;
            original.Town = Town;
            original.Zip = Zip;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_Product_Site_AddressDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_CircularEconomyRequirements_CircularEconomyReport_DesiredResources_Product_Site_AddressDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.DigicircUser))]
    public class Actor_Actor_AddedBy_DigicircUserDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.DigicircUser>
    {

        [JsonConstructor]
        public Actor_Actor_AddedBy_DigicircUserDTO() { }
        public Actor_Actor_AddedBy_DigicircUserDTO(DigicircMatchmaking.BO.DigicircUser original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.UserName as object;
            AccessFailedCount = original.AccessFailedCount;
            Email = original.Email;
            EmailConfirmed = original.EmailConfirmed;
            FirstName = original.FirstName;
            LastName = original.LastName;
            LockoutEnabled = original.LockoutEnabled;
            LockoutEndDate = original.LockoutEndDate;
            Name = original.Name;
            PhoneNumber = original.PhoneNumber;
            PhoneNumberConfirmed = original.PhoneNumberConfirmed;
            SubscribeToNewsLetter = original.SubscribeToNewsLetter;
            TwoFactorEnabled = original.TwoFactorEnabled;
            UserName = original.UserName;
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public int? AccessFailedCount;
        public string Email;
        public bool EmailConfirmed;
        public string FirstName;
        public string LastName;
        public bool LockoutEnabled;
        public DateTime? LockoutEndDate;
        public string Name;
        public string PhoneNumber;
        public bool PhoneNumberConfirmed;
        public bool SubscribeToNewsLetter;
        public bool TwoFactorEnabled;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.DigicircUser).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName};
        public DigicircMatchmaking.BO.DigicircUser GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.DigicircUser>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DigicircMatchmaking.BO.DigicircUser();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.DigicircUser Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.DigicircUser();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.DigicircUser original)
        {
            if (original == null) return;
            original.AccessFailedCount = AccessFailedCount;
            original.Email = Email;
            original.EmailConfirmed = EmailConfirmed;
            original.FirstName = FirstName;
            original.LastName = LastName;
            original.LockoutEnabled = LockoutEnabled;
            original.LockoutEndDate = LockoutEndDate;
            original.Name = Name;
            original.PhoneNumber = PhoneNumber;
            original.PhoneNumberConfirmed = PhoneNumberConfirmed;
            original.SubscribeToNewsLetter = SubscribeToNewsLetter;
            original.TwoFactorEnabled = TwoFactorEnabled;
            original.UserName = UserName ?? "";
        }
        public static Actor_Actor_AddedBy_DigicircUserDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_AddedBy_DigicircUserDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.DigicircUser))]
    public class Actor_Actor_Administrators_DigicircUserDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.DigicircUser>
    {

        [JsonConstructor]
        public Actor_Actor_Administrators_DigicircUserDTO() { }
        public Actor_Actor_Administrators_DigicircUserDTO(DigicircMatchmaking.BO.DigicircUser original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.UserName as object;
            AccessFailedCount = original.AccessFailedCount;
            Email = original.Email;
            EmailConfirmed = original.EmailConfirmed;
            FirstName = original.FirstName;
            LastName = original.LastName;
            LockoutEnabled = original.LockoutEnabled;
            LockoutEndDate = original.LockoutEndDate;
            Name = original.Name;
            PhoneNumber = original.PhoneNumber;
            PhoneNumberConfirmed = original.PhoneNumberConfirmed;
            SubscribeToNewsLetter = original.SubscribeToNewsLetter;
            TwoFactorEnabled = original.TwoFactorEnabled;
            UserName = original.UserName;
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public int? AccessFailedCount;
        public string Email;
        public bool EmailConfirmed;
        public string FirstName;
        public string LastName;
        public bool LockoutEnabled;
        public DateTime? LockoutEndDate;
        public string Name;
        public string PhoneNumber;
        public bool PhoneNumberConfirmed;
        public bool SubscribeToNewsLetter;
        public bool TwoFactorEnabled;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.DigicircUser).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName};
        public DigicircMatchmaking.BO.DigicircUser GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.DigicircUser>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DigicircMatchmaking.BO.DigicircUser();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.DigicircUser Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.DigicircUser();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.DigicircUser original)
        {
            if (original == null) return;
            original.AccessFailedCount = AccessFailedCount;
            original.Email = Email;
            original.EmailConfirmed = EmailConfirmed;
            original.FirstName = FirstName;
            original.LastName = LastName;
            original.LockoutEnabled = LockoutEnabled;
            original.LockoutEndDate = LockoutEndDate;
            original.Name = Name;
            original.PhoneNumber = PhoneNumber;
            original.PhoneNumberConfirmed = PhoneNumberConfirmed;
            original.SubscribeToNewsLetter = SubscribeToNewsLetter;
            original.TwoFactorEnabled = TwoFactorEnabled;
            original.UserName = UserName ?? "";
        }
        public static Actor_Actor_Administrators_DigicircUserDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Actor_Actor_Administrators_DigicircUserDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Product))]
    public class SelectedProduct_ProductDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Product>
    {

        [JsonConstructor]
        public SelectedProduct_ProductDTO() { }
        public SelectedProduct_ProductDTO(DigicircMatchmaking.BO.Product original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            IsDesired = original.IsDesired;
            Quantity = original.Quantity;
            ValidFrom = original.ValidFrom;
            ValidTo = original.ValidTo;
            Resource = original.Resource == null ? null : new SelectedProduct_Product_Resource_MaterialDTO(original.Resource);
            Site = original.Site == null ? null : new SelectedProduct_Product_Site_AddressDTO(original.Site);
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool IsDesired;
        public int? Quantity;
        public DateTime? ValidFrom;
        public DateTime? ValidTo;
        public SelectedProduct_Product_Resource_MaterialDTO Resource;
        public SelectedProduct_Product_Site_AddressDTO Site;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Product).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Product GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Product>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Product();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Product Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Product();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Product original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.IsDesired = IsDesired;
            original.Quantity = Quantity;
            original.ValidFrom = ValidFrom;
            original.ValidTo = ValidTo;
            original.Resource = Resource == null
                                ? null
                                : Resource.Convert();
            original.Site = Site == null
                            ? null
                            : Site.Convert();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static SelectedProduct_ProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new SelectedProduct_ProductDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class SelectedProduct_Product_Resource_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public SelectedProduct_Product_Resource_MaterialDTO() { }
        public SelectedProduct_Product_Resource_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            Name = original.Name;
            PendingGraph = original.PendingGraph;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public bool PendingGraph;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.PendingGraph = PendingGraph;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static SelectedProduct_Product_Resource_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new SelectedProduct_Product_Resource_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Address))]
    public class SelectedProduct_Product_Site_AddressDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Address>
    {

        [JsonConstructor]
        public SelectedProduct_Product_Site_AddressDTO() { }
        public SelectedProduct_Product_Site_AddressDTO(DigicircMatchmaking.BO.Address original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Alias = original.Alias;
            FullAddress = original.FullAddress;
            Id = original.Id;
            Latitude = original.Latitude;
            Longitude = original.Longitude;
            Number = original.Number;
            StreetName = original.StreetName;
            Town = original.Town;
            Zip = original.Zip;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Alias;
        public string FullAddress;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public double? Latitude;
        public double? Longitude;
        public string Number;
        public string StreetName;
        public string Town;
        public string Zip;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Address).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Address GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Address>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Address();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Address Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Address();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Address original)
        {
            if (original == null) return;
            original.Alias = Alias;
            original.FullAddress = FullAddress;
            original.Id = Id ?? 0;
            original.Latitude = Latitude;
            original.Longitude = Longitude;
            original.Number = Number;
            original.StreetName = StreetName;
            original.Town = Town;
            original.Zip = Zip;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static SelectedProduct_Product_Site_AddressDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new SelectedProduct_Product_Site_AddressDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class Material_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public Material_MaterialDTO() { }
        public Material_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            Name = original.Name;
            PendingGraph = original.PendingGraph;
            RequestedBy = original.RequestedBy == null ? null : new Material_Material_RequestedBy_DigicircUserDTO(original.RequestedBy);
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public bool PendingGraph;
        public Material_Material_RequestedBy_DigicircUserDTO RequestedBy;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.PendingGraph = PendingGraph;
            original.RequestedBy = RequestedBy == null
                                   ? null
                                   : RequestedBy.Convert();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static Material_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Material_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.DigicircUser))]
    public class Material_Material_RequestedBy_DigicircUserDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.DigicircUser>
    {

        [JsonConstructor]
        public Material_Material_RequestedBy_DigicircUserDTO() { }
        public Material_Material_RequestedBy_DigicircUserDTO(DigicircMatchmaking.BO.DigicircUser original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.UserName as object;
            AccessFailedCount = original.AccessFailedCount;
            Email = original.Email;
            EmailConfirmed = original.EmailConfirmed;
            FirstName = original.FirstName;
            LastName = original.LastName;
            LockoutEnabled = original.LockoutEnabled;
            LockoutEndDate = original.LockoutEndDate;
            Name = original.Name;
            PhoneNumber = original.PhoneNumber;
            PhoneNumberConfirmed = original.PhoneNumberConfirmed;
            SubscribeToNewsLetter = original.SubscribeToNewsLetter;
            TwoFactorEnabled = original.TwoFactorEnabled;
            UserName = original.UserName;
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public int? AccessFailedCount;
        public string Email;
        public bool EmailConfirmed;
        public string FirstName;
        public string LastName;
        public bool LockoutEnabled;
        public DateTime? LockoutEndDate;
        public string Name;
        public string PhoneNumber;
        public bool PhoneNumberConfirmed;
        public bool SubscribeToNewsLetter;
        public bool TwoFactorEnabled;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.DigicircUser).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName};
        public DigicircMatchmaking.BO.DigicircUser GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.DigicircUser>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DigicircMatchmaking.BO.DigicircUser();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.DigicircUser Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.DigicircUser();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.DigicircUser original)
        {
            if (original == null) return;
            original.AccessFailedCount = AccessFailedCount;
            original.Email = Email;
            original.EmailConfirmed = EmailConfirmed;
            original.FirstName = FirstName;
            original.LastName = LastName;
            original.LockoutEnabled = LockoutEnabled;
            original.LockoutEndDate = LockoutEndDate;
            original.Name = Name;
            original.PhoneNumber = PhoneNumber;
            original.PhoneNumberConfirmed = PhoneNumberConfirmed;
            original.SubscribeToNewsLetter = SubscribeToNewsLetter;
            original.TwoFactorEnabled = TwoFactorEnabled;
            original.UserName = UserName ?? "";
        }
        public static Material_Material_RequestedBy_DigicircUserDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new Material_Material_RequestedBy_DigicircUserDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Product))]
    public class NewDesiredResources_ProductDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Product>
    {

        [JsonConstructor]
        public NewDesiredResources_ProductDTO() { }
        public NewDesiredResources_ProductDTO(DigicircMatchmaking.BO.Product original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            IsDesired = original.IsDesired;
            Quantity = original.Quantity;
            ValidFrom = original.ValidFrom;
            ValidTo = original.ValidTo;
            Resource = original.Resource == null ? null : new NewDesiredResources_Product_Resource_MaterialDTO(original.Resource);
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool IsDesired;
        public int? Quantity;
        public DateTime? ValidFrom;
        public DateTime? ValidTo;
        public NewDesiredResources_Product_Resource_MaterialDTO Resource;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Product).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Product GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Product>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Product();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Product Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Product();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Product original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.IsDesired = IsDesired;
            original.Quantity = Quantity;
            original.ValidFrom = ValidFrom;
            original.ValidTo = ValidTo;
            original.Resource = Resource == null
                                ? null
                                : Resource.Convert();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static NewDesiredResources_ProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new NewDesiredResources_ProductDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class NewDesiredResources_Product_Resource_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public NewDesiredResources_Product_Resource_MaterialDTO() { }
        public NewDesiredResources_Product_Resource_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            Name = original.Name;
            PendingGraph = original.PendingGraph;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public bool PendingGraph;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.PendingGraph = PendingGraph;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static NewDesiredResources_Product_Resource_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new NewDesiredResources_Product_Resource_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Product))]
    public class NewResources_ProductDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Product>
    {

        [JsonConstructor]
        public NewResources_ProductDTO() { }
        public NewResources_ProductDTO(DigicircMatchmaking.BO.Product original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            IsDesired = original.IsDesired;
            Quantity = original.Quantity;
            ValidFrom = original.ValidFrom;
            ValidTo = original.ValidTo;
            Resource = original.Resource == null ? null : new NewResources_Product_Resource_MaterialDTO(original.Resource);
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool IsDesired;
        public int? Quantity;
        public DateTime? ValidFrom;
        public DateTime? ValidTo;
        public NewResources_Product_Resource_MaterialDTO Resource;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Product).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Product GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Product>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Product();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Product Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Product();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Product original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.IsDesired = IsDesired;
            original.Quantity = Quantity;
            original.ValidFrom = ValidFrom;
            original.ValidTo = ValidTo;
            original.Resource = Resource == null
                                ? null
                                : Resource.Convert();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static NewResources_ProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new NewResources_ProductDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class NewResources_Product_Resource_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public NewResources_Product_Resource_MaterialDTO() { }
        public NewResources_Product_Resource_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            Name = original.Name;
            PendingGraph = original.PendingGraph;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public bool PendingGraph;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.PendingGraph = PendingGraph;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static NewResources_Product_Resource_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new NewResources_Product_Resource_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Product))]
    public class DeleteDesiredResources_ProductDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Product>
    {

        [JsonConstructor]
        public DeleteDesiredResources_ProductDTO() { }
        public DeleteDesiredResources_ProductDTO(DigicircMatchmaking.BO.Product original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            IsDesired = original.IsDesired;
            Quantity = original.Quantity;
            ValidFrom = original.ValidFrom;
            ValidTo = original.ValidTo;
            Resource = original.Resource == null ? null : new DeleteDesiredResources_Product_Resource_MaterialDTO(original.Resource);
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool IsDesired;
        public int? Quantity;
        public DateTime? ValidFrom;
        public DateTime? ValidTo;
        public DeleteDesiredResources_Product_Resource_MaterialDTO Resource;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Product).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Product GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Product>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Product();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Product Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Product();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Product original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.IsDesired = IsDesired;
            original.Quantity = Quantity;
            original.ValidFrom = ValidFrom;
            original.ValidTo = ValidTo;
            original.Resource = Resource == null
                                ? null
                                : Resource.Convert();
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static DeleteDesiredResources_ProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new DeleteDesiredResources_ProductDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class DeleteDesiredResources_Product_Resource_MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {

        [JsonConstructor]
        public DeleteDesiredResources_Product_Resource_MaterialDTO() { }
        public DeleteDesiredResources_Product_Resource_MaterialDTO(DigicircMatchmaking.BO.Material original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Description = original.Description;
            HsSpecific = original.HsSpecific;
            Id = original.Id;
            Name = original.Name;
            PendingGraph = original.PendingGraph;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Description;
        public string HsSpecific;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public bool PendingGraph;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Material).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Material GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Material>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Material();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Material();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Material original)
        {
            if (original == null) return;
            original.Description = Description;
            original.HsSpecific = HsSpecific;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.PendingGraph = PendingGraph;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static DeleteDesiredResources_Product_Resource_MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new DeleteDesiredResources_Product_Resource_MaterialDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Product))]
    public class DeleteResources_ProductDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Product>
    {

        [JsonConstructor]
        public DeleteResources_ProductDTO() { }
        public DeleteResources_ProductDTO(DigicircMatchmaking.BO.Product original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            IsDesired = original.IsDesired;
            Quantity = original.Quantity;
            ValidFrom = original.ValidFrom;
            ValidTo = original.ValidTo;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool IsDesired;
        public int? Quantity;
        public DateTime? ValidFrom;
        public DateTime? ValidTo;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Product).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Product GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Product>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Product();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Product Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Product();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Product original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.IsDesired = IsDesired;
            original.Quantity = Quantity;
            original.ValidFrom = ValidFrom;
            original.ValidTo = ValidTo;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static DeleteResources_ProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new DeleteResources_ProductDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Product))]
    public class UpdateDesiredResources_ProductDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Product>
    {

        [JsonConstructor]
        public UpdateDesiredResources_ProductDTO() { }
        public UpdateDesiredResources_ProductDTO(DigicircMatchmaking.BO.Product original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            IsDesired = original.IsDesired;
            Quantity = original.Quantity;
            ValidFrom = original.ValidFrom;
            ValidTo = original.ValidTo;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool IsDesired;
        public int? Quantity;
        public DateTime? ValidFrom;
        public DateTime? ValidTo;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Product).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Product GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Product>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Product();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Product Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Product();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Product original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.IsDesired = IsDesired;
            original.Quantity = Quantity;
            original.ValidFrom = ValidFrom;
            original.ValidTo = ValidTo;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static UpdateDesiredResources_ProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new UpdateDesiredResources_ProductDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Product))]
    public class UpdateResource_ProductDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Product>
    {

        [JsonConstructor]
        public UpdateResource_ProductDTO() { }
        public UpdateResource_ProductDTO(DigicircMatchmaking.BO.Product original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            IsDesired = original.IsDesired;
            Quantity = original.Quantity;
            ValidFrom = original.ValidFrom;
            ValidTo = original.ValidTo;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool IsDesired;
        public int? Quantity;
        public DateTime? ValidFrom;
        public DateTime? ValidTo;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Product).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Product GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Product>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Product();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Product Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Product();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Product original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.IsDesired = IsDesired;
            original.Quantity = Quantity;
            original.ValidFrom = ValidFrom;
            original.ValidTo = ValidTo;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static UpdateResource_ProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new UpdateResource_ProductDTO(foundEntry);
            }
            return null;
        }
    }
    #region Controller Action DTOS
    [OriginalType(typeof(DigicircMatchmaking.BO.Product))]
    public class ProductDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Product>
    {
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public AddressDTO Site;
        public MaterialDTO Resource;
        public int? Quantity;
        public DateTime? ValidFrom;
        public DateTime? ValidTo;
        public bool IsDesired;


        [JsonConstructor]
        public ProductDTO() : base() {}
        public  static ProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ManageResourcesController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Product>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ProductDTO(foundEntry);
            }
            return null;
        }
        public ProductDTO(DigicircMatchmaking.BO.Product original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ProductDTO(DigicircMatchmaking.BO.Product original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Site = original.Site == null
                   ? null
                   : DTOHelper.GetDTOFromModel<AddressDTO>(original.Site as DigicircMatchmaking.BO.Address);
            Resource = original.Resource == null
                       ? null
                       : DTOHelper.GetDTOFromModel<MaterialDTO>(original.Resource as DigicircMatchmaking.BO.Material);
            Quantity = original.Quantity;
            ValidFrom = original.ValidFrom;
            ValidTo = original.ValidTo;
            IsDesired = original.IsDesired;
        }

        public static DigicircMatchmaking.BO.Product GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Product Convert()
        {
            var model = new DigicircMatchmaking.BO.Product();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Site = Site == null
                         ? null
                         : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.Address>(Site);
            model.Resource = Resource == null
                             ? null
                             : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.Material>(Resource);
            model.Quantity = Quantity;
            model.ValidFrom = ValidFrom;
            model.ValidTo = ValidTo;
            model.IsDesired = IsDesired;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.Address))]
    public class AddressDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Address>
    {
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Town;


        [JsonConstructor]
        public AddressDTO() : base() {}
        public  static AddressDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ManageResourcesController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Address>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new AddressDTO(foundEntry);
            }
            return null;
        }
        public AddressDTO(DigicircMatchmaking.BO.Address original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public AddressDTO(DigicircMatchmaking.BO.Address original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Town = original.Town;
        }

        public static DigicircMatchmaking.BO.Address GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Address Convert()
        {
            var model = new DigicircMatchmaking.BO.Address();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Address>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Town = Town;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Material))]
    public class MaterialDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Material>
    {
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string Description;
        public DigicircUserDTO RequestedBy;
        public bool PendingGraph;


        [JsonConstructor]
        public MaterialDTO() : base() {}
        public  static MaterialDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ManageResourcesController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Material>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new MaterialDTO(foundEntry);
            }
            return null;
        }
        public MaterialDTO(DigicircMatchmaking.BO.Material original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public MaterialDTO(DigicircMatchmaking.BO.Material original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Name = original.Name;
            Description = original.Description;
            RequestedBy = original.RequestedBy == null
                          ? null
                          : DTOHelper.GetDTOFromModel<DigicircUserDTO>(original.RequestedBy as DigicircMatchmaking.BO.DigicircUser);
            PendingGraph = original.PendingGraph;
        }

        public static DigicircMatchmaking.BO.Material GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Material Convert()
        {
            var model = new DigicircMatchmaking.BO.Material();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Material>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Name = Name;
            model.Description = Description;
            model.RequestedBy = RequestedBy == null
                                ? null
                                : DTOHelper.GetModelFromDTO<DigicircMatchmaking.BO.DigicircUser>(RequestedBy);
            model.PendingGraph = PendingGraph;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DigicircMatchmaking.BO.DigicircUser))]
    public class DigicircUserDTO : ApplicationUserDTO, IViewModelDTO<DigicircMatchmaking.BO.DigicircUser>
    {
        public string UserName;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public DigicircUserDTO() : base() {}
        public new static DigicircUserDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ManageResourcesController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.DigicircUser>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new DigicircUserDTO(foundEntry);
            }
            return null;
        }
        public DigicircUserDTO(DigicircMatchmaking.BO.DigicircUser original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public DigicircUserDTO(DigicircMatchmaking.BO.DigicircUser original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.UserName == "") ? original._GetUniqueIdentifier() as object : original.UserName as object;
            UserName = original.UserName;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public new static DigicircMatchmaking.BO.DigicircUser GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, false, false);
        }
        public new DigicircMatchmaking.BO.DigicircUser Convert()
        {
            var model = new DigicircMatchmaking.BO.DigicircUser();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.DigicircUser>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.UserName = UserName ?? "";
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser))]
    public class ApplicationUserDTO : ViewModelDTOBase, IViewModelDTO<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>
    {
        public string UserName;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public ApplicationUserDTO() : base() {}
        public  static ApplicationUserDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ManageResourcesController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ApplicationUserDTO(foundEntry);
            }
            return null;
        }
        public ApplicationUserDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public ApplicationUserDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.UserName == "") ? original._GetUniqueIdentifier() as object : original.UserName as object;
            UserName = original.UserName;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static zAppDev.DotNet.Framework.Identity.Model.ApplicationUser GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false, false);
        }
        public zAppDev.DotNet.Framework.Identity.Model.ApplicationUser Convert()
        {
            var model = new zAppDev.DotNet.Framework.Identity.Model.ApplicationUser();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.UserName = UserName ?? "";
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }





    #endregion


    #region Datasource DTOs
    [OriginalType(typeof(DigicircMatchmaking.BO.Product))]
    [DataSetDTO]
    public class Resources_ProductDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Product>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Product).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public Resources_ProductDTO() : base() {}
        public  static Resources_ProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ManageResourcesController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Product>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new Resources_ProductDTO(foundEntry);
            }
            return null;
        }
        public Resources_ProductDTO(DigicircMatchmaking.BO.Product original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public Resources_ProductDTO(DigicircMatchmaking.BO.Product original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DigicircMatchmaking.BO.Product GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Product Convert()
        {
            var model = new DigicircMatchmaking.BO.Product();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Product>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    #endregion

}
