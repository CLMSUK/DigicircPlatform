// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.UI.Controllers.ProcessList;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Locales;
using System.ComponentModel.DataAnnotations;
using DigicircMatchmaking.UI.ViewModels.SymbiosisMasterPage;
using DigicircMatchmaking.UI.Controllers.SymbiosisMasterPage;
namespace DigicircMatchmaking.UI.ViewModels.ProcessList
{
    public class ProcessListViewModel : SymbiosisMasterPageViewModel
    {
        public DigicircMatchmaking.BO.Process SelectedProcess;
        public List<SelectedItemInfo<DigicircMatchmaking.BO.Process>> ProcessListSelectedItems;


        public ProcessListViewModel()
        {
            SelectedProcess = new DigicircMatchmaking.BO.Process();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (manager.Session.Contains(SelectedProcess))
            {
                manager.Session.Evict(SelectedProcess);
            }
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.UI.ViewModels.ProcessList.ProcessListViewModel))]
    public class ProcessListViewModelDTO : SymbiosisMasterPageViewModelDTO, IViewModelDTO<DigicircMatchmaking.UI.ViewModels.ProcessList.ProcessListViewModel>
    {

        [JsonConstructor]
        public ProcessListViewModelDTO() { }
        public ProcessListViewModelDTO(DigicircMatchmaking.UI.ViewModels.ProcessList.ProcessListViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            SelectedProcess = original.SelectedProcess == null ? null : new SelectedProcess_ProcessDTO(original.SelectedProcess);
            ProcessListSelectedItemKeys = original.ProcessListSelectedItems == null
                                          ? null
                                          : original.ProcessListSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public SelectedProcess_ProcessDTO SelectedProcess;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.UI.ViewModels.ProcessList.ProcessListViewModel).FullName;
        public List<SelectedItemInfo<int?>> ProcessListSelectedItemKeys;

        public new DigicircMatchmaking.UI.ViewModels.ProcessList.ProcessListViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.UI.ViewModels.ProcessList.ProcessListViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DigicircMatchmaking.UI.ViewModels.ProcessList.ProcessListViewModel();
        }
        new  public DigicircMatchmaking.UI.ViewModels.ProcessList.ProcessListViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.UI.ViewModels.ProcessList.ProcessListViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.UI.ViewModels.ProcessList.ProcessListViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.SelectedProcess = SelectedProcess == null
                                       ? null
                                       : SelectedProcess.Convert();
            original.ProcessListSelectedItems = ProcessListSelectedItemKeys == null
                                                ? new List<SelectedItemInfo<DigicircMatchmaking.BO.Process>>()
                                                : ProcessListSelectedItemKeys.Select(x => new SelectedItemInfo<DigicircMatchmaking.BO.Process>(x.SelectedItems.Select(y => ViewModels.ProcessList.ProcessDataSet_ProcessDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.Process))]
    public class SelectedProcess_ProcessDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Process>
    {

        [JsonConstructor]
        public SelectedProcess_ProcessDTO() { }
        public SelectedProcess_ProcessDTO(DigicircMatchmaking.BO.Process original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            Name = original.Name;
            Notes = original.Notes;
            Ref = original.Ref;
            ProductName = original.ProductName;
            SourceName = original.SourceName;
            EnvironmentalEffects = original.EnvironmentalEffects;
            ShortEnvironmentalEffects = original.ShortEnvironmentalEffects;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Name;
        public string Notes;
        public string Ref;
        public string ProductName;
        public string SourceName;
        public string EnvironmentalEffects;
        public string ShortEnvironmentalEffects;
        public string _versionTimestamp;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Process).FullName;
        public override List<string> _baseClasses => null;
        public DigicircMatchmaking.BO.Process GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.Process>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.Process();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Process Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.Process();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.Process original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Name = Name;
            original.Notes = Notes;
            original.Ref = Ref;
            original.ProductName = ProductName;
            original.SourceName = SourceName;
            original.EnvironmentalEffects = EnvironmentalEffects;
            original.ShortEnvironmentalEffects = ShortEnvironmentalEffects;
            if (string.IsNullOrEmpty(this._versionTimestamp))
                original.VersionTimestamp = 1;
            else
                original.VersionTimestamp = Int32.Parse(this._versionTimestamp);
        }
        public static SelectedProcess_ProcessDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new SelectedProcess_ProcessDTO(foundEntry);
            }
            return null;
        }
    }


    #region Datasource DTOs
    [OriginalType(typeof(DigicircMatchmaking.BO.Process))]
    [DataSetDTO]
    public class ProcessDataSet_ProcessDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.Process>
    {
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.Process).FullName;
        public string _versionTimestamp;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string SourceName;
        public string Name;
        public string ProductName;
        public string ShortEnvironmentalEffects;


        [JsonConstructor]
        public ProcessDataSet_ProcessDTO() : base() {}
        public  static ProcessDataSet_ProcessDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, false, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new ProcessListController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { System.Type.Missing, System.Type.Missing }) as IQueryable<DigicircMatchmaking.BO.Process>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ProcessDataSet_ProcessDTO(foundEntry);
            }
            return null;
        }
        public ProcessDataSet_ProcessDTO(DigicircMatchmaking.BO.Process original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ProcessDataSet_ProcessDTO(DigicircMatchmaking.BO.Process original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            if (original.VersionTimestamp != null)
            {
                _versionTimestamp = original.VersionTimestamp.ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            SourceName = original.SourceName;
            Name = original.Name;
            ProductName = original.ProductName;
            ShortEnvironmentalEffects = original.ShortEnvironmentalEffects;
        }

        public static DigicircMatchmaking.BO.Process GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.Process Convert()
        {
            var model = new DigicircMatchmaking.BO.Process();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DigicircMatchmaking.BO.Process>(parsedKey, false, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.SourceName = SourceName;
            model.Name = Name;
            model.ProductName = ProductName;
            model.ShortEnvironmentalEffects = ShortEnvironmentalEffects;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    #endregion

}
