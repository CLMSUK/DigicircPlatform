// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DigicircMatchmaking.BO;
using DigicircMatchmaking.UI.Controllers.UnitOfMeasurementForm;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Locales;
using System.ComponentModel.DataAnnotations;
using DigicircMatchmaking.UI.ViewModels.SymbiosisMasterPage;
using DigicircMatchmaking.UI.Controllers.SymbiosisMasterPage;
namespace DigicircMatchmaking.UI.ViewModels.UnitOfMeasurementForm
{
    public class UnitOfMeasurementFormViewModel : SymbiosisMasterPageViewModel
    {
        public DigicircMatchmaking.BO.UnitOfMeasurement UnitOfMeasurement;


        public UnitOfMeasurementFormViewModel()
        {
            UnitOfMeasurement = new DigicircMatchmaking.BO.UnitOfMeasurement();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (manager.Session.Contains(UnitOfMeasurement))
            {
                manager.Session.Evict(UnitOfMeasurement);
            }
        }

    }


    [OriginalType(typeof(DigicircMatchmaking.UI.ViewModels.UnitOfMeasurementForm.UnitOfMeasurementFormViewModel))]
    public class UnitOfMeasurementFormViewModelDTO : SymbiosisMasterPageViewModelDTO, IViewModelDTO<DigicircMatchmaking.UI.ViewModels.UnitOfMeasurementForm.UnitOfMeasurementFormViewModel>
    {

        [JsonConstructor]
        public UnitOfMeasurementFormViewModelDTO() { }
        public UnitOfMeasurementFormViewModelDTO(DigicircMatchmaking.UI.ViewModels.UnitOfMeasurementForm.UnitOfMeasurementFormViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            UnitOfMeasurement = original.UnitOfMeasurement == null ? null : new UnitOfMeasurement_UnitOfMeasurementDTO(original.UnitOfMeasurement);
        }
        public UnitOfMeasurement_UnitOfMeasurementDTO UnitOfMeasurement;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.UI.ViewModels.UnitOfMeasurementForm.UnitOfMeasurementFormViewModel).FullName;

        public new DigicircMatchmaking.UI.ViewModels.UnitOfMeasurementForm.UnitOfMeasurementFormViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.UI.ViewModels.UnitOfMeasurementForm.UnitOfMeasurementFormViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DigicircMatchmaking.UI.ViewModels.UnitOfMeasurementForm.UnitOfMeasurementFormViewModel();
        }
        new  public DigicircMatchmaking.UI.ViewModels.UnitOfMeasurementForm.UnitOfMeasurementFormViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.UI.ViewModels.UnitOfMeasurementForm.UnitOfMeasurementFormViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.UI.ViewModels.UnitOfMeasurementForm.UnitOfMeasurementFormViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.UnitOfMeasurement = UnitOfMeasurement == null
                                         ? null
                                         : UnitOfMeasurement.Convert();
        }
    }

    [OriginalType(typeof(DigicircMatchmaking.BO.UnitOfMeasurement))]
    public class UnitOfMeasurement_UnitOfMeasurementDTO : ViewModelDTOBase, IViewModelDTO<DigicircMatchmaking.BO.UnitOfMeasurement>
    {

        [JsonConstructor]
        public UnitOfMeasurement_UnitOfMeasurementDTO() { }
        public UnitOfMeasurement_UnitOfMeasurementDTO(DigicircMatchmaking.BO.UnitOfMeasurement original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _key = original.Id as object;
            Id = original.Id;
            Code = original.Code;
            Value = original.Value;
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Code;
        public string Value;
        public override string _originalTypeClassName => typeof(DigicircMatchmaking.BO.UnitOfMeasurement).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(DigicircMatchmaking.BO.ValueType).FullName};
        public DigicircMatchmaking.BO.UnitOfMeasurement GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DigicircMatchmaking.BO.UnitOfMeasurement>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DigicircMatchmaking.BO.UnitOfMeasurement();
            }
            return new DAL.Repository().GetById<DigicircMatchmaking.BO.UnitOfMeasurement>(parsedKey, false, false);
        }
        public DigicircMatchmaking.BO.UnitOfMeasurement Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DigicircMatchmaking.BO.UnitOfMeasurement();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DigicircMatchmaking.BO.UnitOfMeasurement original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Code = Code;
            original.Value = Value;
        }
        public static UnitOfMeasurement_UnitOfMeasurementDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DigicircMatchmaking.BO.UnitOfMeasurement>(parsedKey, true, false);
            if(foundEntry != null)
            {
                return new UnitOfMeasurement_UnitOfMeasurementDTO(foundEntry);
            }
            return null;
        }
    }



}
