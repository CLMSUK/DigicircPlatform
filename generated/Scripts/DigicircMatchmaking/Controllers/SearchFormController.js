var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
// Copyright (c) CLMS UK. All rights reserved.
// Licensed under the Custom License. See LICENSE file in the project root for full license information.
// This was autogenerated by zAppDev.
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
$(document).keyup(function (e) {
    if (e.which === 13 && Joove.Common.eventPreventsDefaultFormAction(e) === false && !$(e.target).parent().hasClass("search-element")) {
        window._popUpManager.previouslyFocusedElement = document.activeElement;
        $(":focus").blur();
        Joove.Core.getScope().eventCallbacks.ButtonClicked(e);
    }
});
var directiveScopeReadyCounter_NewMap = 1;
var directiveScopeReadyInterval_NewMap = setInterval(function () {
    if (Joove.Common.directiveScopeIsReady($("[jb-id='NewMap']"))) {
        var mapNewMap = Joove.Common.getDirectiveScope($("[jb-id='NewMap']")).map;
        mapNewMap.addMapDataLayerEvent(Joove.Widgets.MapDataLayerEvents.Click, "NewMap_Click", function (event) {
            var boundObject = event.feature.getProperty("boundObject");
            window.$actions.TestBubble(boundObject);
            mapNewMap.showRelatedPartialView(event.latLng.lat(), event.latLng.lng());
        });
        clearInterval(directiveScopeReadyInterval_NewMap);
    }
    if (directiveScopeReadyCounter_NewMap > directiveScopeReadyLimit) {
        clearInterval(directiveScopeReadyInterval_NewMap);
    }
    directiveScopeReadyCounter_NewMap++;
}, directiveScopeReadyTimeout);
var DigicircMatchmaking;
(function (DigicircMatchmaking) {
    var Controllers;
    (function (Controllers) {
        var _this = this;
        var SearchFormConditionalFormattings = [
            new Joove.JbRule({
                name: "ViewModeConditional",
                type: Joove.RuleTypes.ConditionalFormatting,
                isDataSetRule: false,
                evaluatedAtServer: false,
                contextControlName: null,
                condition: function (_parents) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, Joove.Common.nullSafe(function () { return window["scope_SearchForm"].model.Query.SelectedMode; }, "") == "map"];
                    });
                }); },
                evaluationTimes: [Joove.EvaluationTimes.OnLoad, Joove.EvaluationTimes.OnChange],
                isRelatedToDataValidation: false
            }),
            new Joove.JbRule({
                name: "HideOnSimpleSearchConditional",
                type: Joove.RuleTypes.ConditionalFormatting,
                isDataSetRule: false,
                evaluatedAtServer: false,
                contextControlName: null,
                condition: function (_parents) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, Joove.Common.nullSafe(function () { return window["scope_SearchForm"].model.Query.AdvanceSearch; }, false)];
                    });
                }); },
                evaluationTimes: [Joove.EvaluationTimes.OnLoad, Joove.EvaluationTimes.OnSubmit, Joove.EvaluationTimes.OnChange],
                isRelatedToDataValidation: false
            }),
            new Joove.JbRule({
                name: "HideIfCountryIsEmptyConditional",
                type: Joove.RuleTypes.ConditionalFormatting,
                isDataSetRule: true,
                evaluatedAtServer: false,
                contextControlName: 'Table',
                getContext: function (indexes) {
                    var model = window["scope_SearchForm"].model;
                    var parents = [];
                    try {
                        parents.push(Joove.Common.getDirectiveScope($("[jb-id='Table']")).$collection);
                    }
                    catch (e) {
                        parents.push({});
                    }
                    return parents;
                },
                condition: function (_parents) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, Joove.Common.nullSafe(function () { return _parents[0].Address; }, null) != null || Joove.Common.nullSafe(function () { return _parents[0].Address.Country; }, null) != null];
                    });
                }); },
                evaluationTimes: [Joove.EvaluationTimes.OnLoad, Joove.EvaluationTimes.OnSubmit, Joove.EvaluationTimes.OnChange],
                isRelatedToDataValidation: false
            }),
        ];
        var SearchFormDataValidations = [];
        var SearchFormCalculatedExpressions = [];
        // Manual Data for OptionButton
        window["dataForOptionButton"] = [{
                _key: "list",
                _text: window._resourcesManager.getRadioButtonManualValueDisplay('ViewMode', '1', false, null),
                _default: true
            }, {
                _key: "map",
                _text: window._resourcesManager.getRadioButtonManualValueDisplay('ViewMode', '0', false, null),
                _default: false
            }];
        // Datasets Column Info
        Controllers.CountryDataSet_ColumnInfo = [new Joove.ColumnInfo("Name", "string", null, false),
            new Joove.ColumnInfo("original", "Country", null, false)];
        window["CountryDataSet_ColumnInfo"] = Controllers.CountryDataSet_ColumnInfo;
        Controllers.SectorTypeDataset_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null, false),
            new Joove.ColumnInfo("original", "SectorType", null, false)];
        window["SectorTypeDataset_ColumnInfo"] = Controllers.SectorTypeDataset_ColumnInfo;
        Controllers.MaterialDataSet_ColumnInfo = [new Joove.ColumnInfo("Name", "string", null, false),
            new Joove.ColumnInfo("original", "Material", null, false)];
        window["MaterialDataSet_ColumnInfo"] = Controllers.MaterialDataSet_ColumnInfo;
        Controllers.ViewMode_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null, true)];
        window["ViewMode_ColumnInfo"] = Controllers.ViewMode_ColumnInfo;
        Controllers.ActorDataSet1_ColumnInfo = [new Joove.ColumnInfo("Address.Latitude", "double", null, false),
            new Joove.ColumnInfo("Address.Longitude", "double", null, false),
            new Joove.ColumnInfo("ActorLogo", "FileData", null, false),
            new Joove.ColumnInfo("Name", "string", null, false),
            new Joove.ColumnInfo("ShortDescription", "string", null, false),
            new Joove.ColumnInfo("EntityType.Value", "string", null, false),
            new Joove.ColumnInfo("Address.Country.Name", "string", null, false)];
        window["ActorDataSet1_ColumnInfo"] = Controllers.ActorDataSet1_ColumnInfo;
        // Datasets Projection Shemas
        window["DropdownCountryDataSet_ProjectionScema"] = {};
        window["DropdownBox_ProjectionScema"] = {};
        window["TextBox1_ProjectionScema"] = {};
        window["NewMap_ProjectionScema"] = { Query: { SearchQueryKey: '',
                ActorNames: { Id: '',
                    Name: {}
                },
                ShowAllData: {}
            }
        };
        window["Table_ProjectionScema"] = { Query: { SearchQueryKey: '',
                ActorNames: { Id: '',
                    Name: {}
                },
                ShowAllData: {}
            }
        };
        var PartialViewPartialModelStructure = /** @class */ (function () {
            function PartialViewPartialModelStructure($scope, name) {
                this._name = name;
            }
            Object.defineProperty(PartialViewPartialModelStructure.prototype, "Actor", {
                get: function () { return window["scope_Bubble"].model.SelectedActor; },
                set: function (__val) {
                    window["scope_Bubble"].model.SelectedActor = __val;
                },
                enumerable: false,
                configurable: true
            });
            ;
            ;
            return PartialViewPartialModelStructure;
        }()); //end class PartialViewPartialModelStructure
        var SearchFormController = /** @class */ (function () {
            function SearchFormController($scope, $timeout) {
                this.$scope = $scope;
                this.controllerActionFinished = function (resetDirty) {
                    //window.scope_SearchForm.model = window.scope_SearchForm.dehydrate();
                    //window.scope_MasterPage.model = window.scope_SearchForm.model;
                    DigicircMatchmaking.ViewModels.SearchForm.SearchFormViewModel._lightCast(window.scope_SearchForm.model);
                    // Joove.Common.applyScope(window.scope_SearchForm);
                    if (resetDirty) {
                        window._context.isDirty = false;
                    }
                    window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
                };
                window.scope_SearchForm = $scope;
                $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
                    Joove.Core.onChange(event.target, newValue, dontMakeDirty);
                };
                $scope.dehydrate = function (context) {
                    if (context === void 0) { context = null; }
                    return DigicircMatchmaking.ViewModels.SearchForm.SearchFormViewModel._initializeFrom($scope.model, context);
                };
                $scope._validationsMaster = window.scope_MasterPage._validations;
                $scope._validations = { summary: [],
                };
                this.init($scope, $timeout);
                $timeout(function () {
                    window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, function () {
                        $("body").fadeIn(200);
                    });
                });
            }
            SearchFormController.prototype.init = function ($scope, $timeout) {
                var _this = this;
                $scope.model = DigicircMatchmaking.ViewModels.SearchForm.SearchFormViewModel._initializeFrom(window.viewDTO.Model);
                window.scope_MasterPage.model = $scope.model;
                new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
                $scope.trackObject = function (obj) { return Joove.Common.trackObject(obj); };
                //}
                $.connection['eventsHub'].on('__connectedEvent', function () { });
                $.connection['eventsHub'].on('forcePageReload', function () {
                    window.onbeforeunload = null;
                    setTimeout(function () {
                        window.location.reload();
                    }, 3000);
                });
                $.connection.hub.start().then(function () {
                    Joove.Common.getScope().connectedToSignals();
                    Joove.Common.getMasterScope().connectedToSignals();
                });
                $scope.connectedToSignals = function () {
                };
                // Event Listeners
                $scope.events = {};
                $scope.expressions = {};
                // Dataset Handler
                $scope.datasets = {};
                // Controller actions
                $scope.actions = {
                    Index: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            Joove.Common.autocompleteFix();
                            Joove.Core.executeRedirectControllerAction("SearchForm", "Index", "GET", [], {}, _modalOptions);
                            return [2 /*return*/];
                        });
                    }); },
                    FromBack: function (id, _cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            Joove.Common.autocompleteFix();
                            Joove.Core.executeRedirectControllerAction("SearchForm", "FromBack", "GET", [id], {}, _modalOptions);
                            return [2 /*return*/];
                        });
                    }); },
                    ChangeMode: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            Joove.Common.autocompleteFix();
                            Joove.Core.executeControllerActionNew({
                                verb: 'POST', controller: 'SearchForm', action: 'ChangeMode',
                                queryData: [], postData: { 'model': $scope.model },
                                cb: _cb, modalOptions: _modalOptions, event: _e
                            });
                            return [2 /*return*/];
                        });
                    }); },
                    TestBubble: function (actor, _cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        var implementation, spamHelper;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    implementation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            window["scope_SearchForm"].model.SelectedActor = actor;
                                            return [2 /*return*/];
                                        });
                                    }); };
                                    spamHelper = new Joove.SpamControlHelper(_e);
                                    spamHelper.Disable();
                                    return [4 /*yield*/, implementation()];
                                case 1:
                                    _a.sent();
                                    spamHelper.Enable();
                                    this.controllerActionFinished(false);
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    Search: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            Joove.Common.autocompleteFix();
                            window._context.isDirty = false;
                            Joove.Core.executeControllerActionNew({
                                verb: 'POST', controller: 'SearchForm', action: 'Search',
                                queryData: [], postData: { 'model': $scope.model },
                                cb: _cb, modalOptions: _modalOptions, event: _e
                            });
                            return [2 /*return*/];
                        });
                    }); },
                    SearchGraph: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            Joove.Common.autocompleteFix();
                            Joove.Core.executeControllerActionNew({
                                verb: 'POST', controller: 'SearchForm', action: 'SearchGraph',
                                queryData: [], postData: { 'model': $scope.model },
                                cb: _cb, modalOptions: _modalOptions, event: _e
                            });
                            return [2 /*return*/];
                        });
                    }); },
                    NewSearch: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            Joove.Common.autocompleteFix();
                            Joove.Core.executeControllerActionNew({
                                verb: 'POST', controller: 'SearchForm', action: 'NewSearch',
                                queryData: [], postData: { 'model': $scope.model },
                                cb: _cb, modalOptions: _modalOptions, event: _e
                            });
                            return [2 /*return*/];
                        });
                    }); },
                    Refresh: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        var implementation, spamHelper;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    implementation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            Joove.Common.nullSafe(function () { return window._commander.gridRefresh(["Table"]); }, null);
                                            eval("setTimeout(function(){_commander.gridGotoFirstPage(['Table']);},50);");
                                            eval("setTimeout(function(){ window._commander.imageRefresh(['lblLogods']) }, 200);");
                                            return [2 /*return*/];
                                        });
                                    }); };
                                    spamHelper = new Joove.SpamControlHelper(_e);
                                    spamHelper.Disable();
                                    return [4 /*yield*/, implementation()];
                                case 1:
                                    _a.sent();
                                    spamHelper.Enable();
                                    this.controllerActionFinished(false);
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    Reset: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            Joove.Common.autocompleteFix();
                            Joove.Core.executeControllerActionNew({
                                verb: 'POST', controller: 'SearchForm', action: 'Reset',
                                queryData: [], postData: { 'model': $scope.model },
                                cb: _cb, modalOptions: _modalOptions, event: _e
                            });
                            return [2 /*return*/];
                        });
                    }); },
                    Action: function (_cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        var implementation, spamHelper;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    implementation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            return [2 /*return*/];
                                        });
                                    }); };
                                    spamHelper = new Joove.SpamControlHelper(_e);
                                    spamHelper.Disable();
                                    return [4 /*yield*/, implementation()];
                                case 1:
                                    _a.sent();
                                    spamHelper.Enable();
                                    this.controllerActionFinished(false);
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    GoToActorForm: function (id, _cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        var implementation, spamHelper;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    implementation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            eval("_commander.gridSaveState(['Table']);");
                                            Joove.Common.nullSafe(function () { return Joove.Core.executeRedirectControllerAction("ActorViewForm", "Show", "GET", [id, false], {}, _modalOptions); }, null);
                                            return [2 /*return*/];
                                        });
                                    }); };
                                    spamHelper = new Joove.SpamControlHelper(_e);
                                    spamHelper.Disable();
                                    return [4 /*yield*/, implementation()];
                                case 1:
                                    _a.sent();
                                    spamHelper.Enable();
                                    this.controllerActionFinished(false);
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                };
                //Partial Bubble Event Listeners
                $scope.events.Bubble = {};
                $scope.expressions.Bubble = {};
                // Partial Bubble Dataset Handler
                $scope.datasets.Bubble = {};
                //Partial Bubble actions
                $scope.actions.Bubble = {
                    RedirectToActorForm: function (_partialControlName, _cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        var implementation, spamHelper;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    implementation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            Joove.Common.nullSafe(function () { return Joove.Core.executeRedirectControllerAction("ActorViewForm", "Show", "GET", [Joove.Common.nullSafe(function () { return window["scope_Bubble"]._partialModelStructure[_partialControlName].Actor.Id; }, 0), false], {}, _modalOptions); }, null);
                                            return [2 /*return*/];
                                        });
                                    }); };
                                    spamHelper = new Joove.SpamControlHelper(_e);
                                    spamHelper.Disable();
                                    return [4 /*yield*/, implementation()];
                                case 1:
                                    _a.sent();
                                    spamHelper.Enable();
                                    this.controllerActionFinished(true);
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    Close: function (_partialControlName, _cb, _modalOptions, _e) { return __awaiter(_this, void 0, void 0, function () {
                        var implementation, spamHelper;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Joove.Common.autocompleteFix();
                                    implementation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            eval("$(\"[jb-type='PartialView'][jb-partial-name='Bubble']\").hide()");
                                            return [2 /*return*/];
                                        });
                                    }); };
                                    spamHelper = new Joove.SpamControlHelper(_e);
                                    spamHelper.Disable();
                                    return [4 /*yield*/, implementation()];
                                case 1:
                                    _a.sent();
                                    spamHelper.Enable();
                                    this.controllerActionFinished(false);
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                };
                // Events
                $scope.eventCallbacks = {
                    ButtonClicked: function (e, DataItem, _parents) {
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLockButtonClicked != null) {
                            $timeout.cancel(_this.timeoutDelayLockButtonClicked);
                        }
                        _this.timeoutDelayLockButtonClicked = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.NewSearch(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    Button2Clicked: function (e, DataItem, _parents) {
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLockButton2Clicked != null) {
                            $timeout.cancel(_this.timeoutDelayLockButton2Clicked);
                        }
                        _this.timeoutDelayLockButton2Clicked = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.Reset(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    DropdownCountryDataSetOnChange: function (e, DataItem, _parents) {
                        if (_this.timeoutDelayLockDropdownCountryDataSetOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLockDropdownCountryDataSetOnChange);
                        }
                        _this.timeoutDelayLockDropdownCountryDataSetOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, true);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, true);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.NewSearch(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    DropdownBoxOnChange: function (e, DataItem, _parents) {
                        if (_this.timeoutDelayLockDropdownBoxOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLockDropdownBoxOnChange);
                        }
                        _this.timeoutDelayLockDropdownBoxOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, true);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, true);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.NewSearch(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    TextBox1OnChange: function (e, DataItem, _parents) {
                        if (_this.timeoutDelayLockTextBox1OnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLockTextBox1OnChange);
                        }
                        _this.timeoutDelayLockTextBox1OnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, false);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, false);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.NewSearch(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    OptionButtonOnChange: function (e, DataItem, _parents) {
                        if (_this.timeoutDelayLockOptionButtonOnChange != null) {
                            $timeout.cancel(_this.timeoutDelayLockOptionButtonOnChange);
                        }
                        _this.timeoutDelayLockOptionButtonOnChange = $timeout(function () {
                            if (e.target) {
                                Joove.Core.onChange(e.target, null, true);
                            }
                            else {
                                Joove.Core.onChange($("[jb-id='" + e + "']").get(0), null, true);
                            }
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.ChangeMode(null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                    Row11Clicked: function (e, DataItem, _parents) {
                        if (e != null) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                        if (_this.timeoutDelayLockRow11Clicked != null) {
                            $timeout.cancel(_this.timeoutDelayLockRow11Clicked);
                        }
                        _this.timeoutDelayLockRow11Clicked = $timeout(function () {
                            Joove.Common.setControlKeyPressed(e, 0);
                            Joove.Common.setLastClickedElement(e);
                            Joove.Validation.Manager.validateFormAndExecute(function () {
                                $scope.actions.GoToActorForm(Joove.Common.nullSafe(function () { return _parents[0].Id; }, 0), null, null, e);
                            }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 0);
                    },
                };
                // Rules
                window._ruleEngine.addDataValidations(SearchFormDataValidations);
                window._ruleEngine.addConditionalFormattings(SearchFormConditionalFormattings);
                window._ruleEngine.addCalculatedExpressions(SearchFormCalculatedExpressions);
                window._commander.executeCommands(window.viewDTO.ClientCommands);
                window.viewDTO.ClientCommands = [];
                new DigicircMatchmaking.Controllers.BubbleController({
                    'PartialView': new PartialViewPartialModelStructure($scope, 'PartialView'),
                }).IncludePartialMethods($scope, ["PartialView"], $timeout);
                Joove.Common.setNumberLocalizationSettings();
                Joove.DeveloperApi.init($scope, window.scope_MasterPage);
                window.$formExtend && window.$formExtend();
                window.$onFormLoaded && window.$onFormLoaded();
            };
            return SearchFormController;
        }());
        angular.module("Application").controller("SearchFormController", ["$scope", "$timeout", SearchFormController]);
    })(Controllers = DigicircMatchmaking.Controllers || (DigicircMatchmaking.Controllers = {}));
})(DigicircMatchmaking || (DigicircMatchmaking = {}));
